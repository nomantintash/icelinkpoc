//
// Title: IceLink for JavaScript
// Version: 3.2.4.716
// Copyright Frozen Mountain Software 2011+
//
(function (name, dependencies, definition) {
    if (typeof define === 'function' && define.amd) {
        define(name, dependencies, definition);
    } else if (typeof exports === 'object') {
        for (var i = 0; i < dependencies.length; i++) {
           require('./' + dependencies[i]);
        }
        module.exports = definition();
    } else {
        this[name] = definition();
    }
}('fm.icelink', [], function() {

if (typeof global !== 'undefined' && !global.window) { global.window = global; global.document = { cookie: '' }; }
if (typeof global !== 'undefined' && !global.navigator) { global.navigator = { userAgent: ' ' }; }
this['fm'] = this['fm'] || {};

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

(function (fm) {
    var icelink;
    (function (icelink) {
        var ArrayExtensions = /** @class */ (function () {
            function ArrayExtensions() {
            }
            ArrayExtensions.prototype.getTypeString = function () {
                return '[fm.icelink.ArrayExtensions]';
            };
            ArrayExtensions.getCount = function (array) {
                return array.length;
            };
            ArrayExtensions.add = function (array, value) {
                array.push(value);
            };
            ArrayExtensions.remove = function (array, value) {
                for (var i = 0; i < array.length; i++) {
                    var obj = array[i];
                    if (obj === value) {
                        array.splice(i, 1);
                        return true;
                    }
                }
                return false;
            };
            ArrayExtensions.removeAt = function (array, index) {
                array.splice(index, 1);
            };
            ArrayExtensions.insert = function (array, index, value) {
                array.splice(index, 0, value);
            };
            ArrayExtensions.toArray = function (array) {
                return this.clone(array);
            };
            ArrayExtensions.clear = function (array) {
                array.splice(0, array.length);
            };
            ArrayExtensions.addRange = function (array, values) {
                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                    var v = values_1[_i];
                    array.push(v);
                }
            };
            ArrayExtensions.getRange = function (array, index, count) {
                var newArray = new Array(count);
                for (var i = 0; i < newArray.length; i++) {
                    newArray[i] = array[i + index];
                }
                return newArray;
            };
            ArrayExtensions.contains = function (array, value) {
                for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                    var obj = array_1[_i];
                    if (obj === value) {
                        return true;
                    }
                }
                return false;
            };
            ArrayExtensions.newArray = function (values) {
                return this.clone(values);
            };
            ArrayExtensions.clone = function (array) {
                var newArray = new Array(array.length);
                for (var i = 0; i < newArray.length; i++) {
                    newArray[i] = array[i];
                }
                return newArray;
            };
            ArrayExtensions.map = function (array, callback) {
                var newArray = new Array(array.length);
                for (var i = 0; i < newArray.length; i++) {
                    newArray[i] = callback(array[i], i, array);
                }
                return newArray;
            };
            return ArrayExtensions;
        }());
        icelink.ArrayExtensions = ArrayExtensions;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var AsyncLogger = /** @class */ (function () {
            function AsyncLogger(tag) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var tag_1 = __arguments[0];
                    //super();
                    this.setTag(tag_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            AsyncLogger.prototype.getTypeString = function () {
                return '[fm.icelink.AsyncLogger]';
            };
            AsyncLogger.prototype.debug = function () {
                if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Debug, null, message, null);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Debug, null, message, ex);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Debug, scope, message, null);
                }
                else if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Debug, scope, message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            AsyncLogger.prototype.doLog = function (level, scope, msg, ex) {
                if (arguments.length == 4) {
                    if (fm.icelink.LogConfiguration.getHaveProviders()) {
                        if ((fm.icelink.LogConfiguration.getTagLogLevel(this.getTag()) <= level)) {
                            var logProviders = fm.icelink.LogConfiguration.getLogProviders();
                            for (var _i = 0, logProviders_1 = logProviders; _i < logProviders_1.length; _i++) {
                                var provider = logProviders_1[_i];
                                provider.log(new fm.icelink.LogEvent(fm.icelink.DateTime.getNow(), this.getTag(), scope, level, msg, ex, fm.icelink.ManagedThread.getCurrentThreadId()));
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.error = function () {
                if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Error, scope, message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Error, null, message, null);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Error, null, message, ex);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Error, scope, message, null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.fatal = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Fatal, scope, message, null);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Fatal, null, message, null);
                }
                else if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Fatal, scope, message, ex);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Fatal, null, message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.flush = function () {
            };
            AsyncLogger.prototype.getIsDebugEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Debug);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getIsErrorEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Error);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getIsFatalEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Fatal);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getIsInfoEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Info);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getIsVerboseEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Verbose);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getIsWarnEnabled = function () {
                if (arguments.length == 0) {
                    return this.isLogEnabled(fm.icelink.LogLevel.Warn);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.getTag = function () {
                if (arguments.length == 0) {
                    return this._tag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.info = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Info, scope, message, null);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Info, null, message, null);
                }
                else if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Info, scope, message, ex);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Info, null, message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.isLogEnabled = function (level) {
                if (arguments.length == 1) {
                    return (fm.icelink.LogConfiguration.getTagLogLevel(this.getTag()) <= level);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.log = function () {
                if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Info, null, message, null);
                }
                else if (arguments.length == 2) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Info, scope, message, null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            AsyncLogger.prototype.setTag = function (value) {
                if (arguments.length == 1) {
                    this._tag = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.verbose = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Verbose, scope, message, null);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Verbose, null, message, null);
                }
                else if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Verbose, scope, message, ex);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Verbose, null, message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            AsyncLogger.prototype.warn = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Warn, scope, message, null);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    this.doLog(fm.icelink.LogLevel.Warn, null, message, null);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isError(arguments[1]))) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    this.doLog(fm.icelink.LogLevel.Warn, null, message, ex);
                }
                else if (arguments.length == 3) {
                    var scope = arguments[0];
                    var message = arguments[1];
                    var ex = arguments[2];
                    this.doLog(fm.icelink.LogLevel.Warn, scope, message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return AsyncLogger;
        }());
        icelink.AsyncLogger = AsyncLogger;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var AtomicInteger = /** @class */ (function () {
            function AtomicInteger(startValue) {
                if (arguments.length == 0) {
                    this._value = 0;
                }
                else {
                    this._value = startValue;
                }
            }
            AtomicInteger.prototype.compareAndSwap = function (expected, newValue) {
                var oldValue = this._value;
                if (this._value == expected) {
                    this._value = newValue;
                }
                return oldValue;
            };
            AtomicInteger.prototype.getValue = function () {
                return this._value;
            };
            AtomicInteger.prototype.add = function (value) {
                this._value = this._value + value;
                return this._value;
            };
            AtomicInteger.prototype.subtract = function (value) {
                this._value = this._value - value;
                return this._value;
            };
            AtomicInteger.prototype.increment = function () {
                this._value = this._value + 1;
                return this._value;
            };
            AtomicInteger.prototype.decrement = function () {
                this._value = this._value - 1;
                return this._value;
            };
            return AtomicInteger;
        }());
        icelink.AtomicInteger = AtomicInteger;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var AtomicLong = /** @class */ (function () {
            function AtomicLong(startValue) {
                if (arguments.length == 0) {
                    this._value = 0;
                }
                else {
                    this._value = startValue;
                }
            }
            AtomicLong.prototype.compareAndSwap = function (expected, newValue) {
                var oldValue = this._value;
                if (this._value == expected) {
                    this._value = newValue;
                }
                return oldValue;
            };
            AtomicLong.prototype.getValue = function () {
                return this._value;
            };
            AtomicLong.prototype.add = function (value) {
                this._value = this._value + value;
                return this._value;
            };
            AtomicLong.prototype.subtract = function (value) {
                this._value = this._value - value;
                return this._value;
            };
            AtomicLong.prototype.increment = function () {
                this._value = this._value + 1;
                return this._value;
            };
            AtomicLong.prototype.decrement = function () {
                this._value = this._value - 1;
                return this._value;
            };
            return AtomicLong;
        }());
        icelink.AtomicLong = AtomicLong;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Base64 = /** @class */ (function () {
            function Base64() {
            }
            Base64.prototype.getTypeString = function () {
                return '[fm.icelink.Base64]';
            };
            Base64.encode = function (b) {
                if (!b) {
                    return null;
                }
                return this.encodeIt(b, 0, b.length);
            };
            Base64.encodeBuffer = function (buffer) {
                if (!buffer) {
                    return null;
                }
                return this.encodeIt(buffer.getData(), buffer.getIndex(), buffer.getLength());
            };
            Base64.decode = function (s) {
                if (!s) {
                    return null;
                }
                if (!Base64._base64Regex.test(s)) {
                    return null;
                }
                return this.decodeIt(s);
            };
            Base64.tryEncode = function (b, result) {
                try {
                    var encoded = Base64.encode(b);
                    result.setValue(encoded);
                    if (!encoded) {
                        return false;
                    }
                    return true;
                }
                catch (error) {
                    result.setValue(null);
                    return false;
                }
            };
            Base64.tryEncodeBuffer = function (buffer, result) {
                try {
                    var encoded = Base64.encodeBuffer(buffer);
                    result.setValue(encoded);
                    if (!encoded) {
                        return false;
                    }
                    return true;
                }
                catch (error) {
                    result.setValue(null);
                    return false;
                }
            };
            Base64.tryDecode = function (s, result) {
                try {
                    var decoded = Base64.decode(s);
                    result.setValue(decoded);
                    if (!decoded) {
                        return false;
                    }
                    return true;
                }
                catch (error) {
                    result.setValue(null);
                    return false;
                }
            };
            Base64.b64ToUint6 = function (cc) {
                if (cc > 64 && cc < 91) {
                    return cc - 65;
                }
                else if (cc > 96 && cc < 123) {
                    return cc - 71;
                }
                else if (cc > 47 && cc < 58) {
                    return cc + 4;
                }
                else if (cc === 43) {
                    return 62;
                }
                else if (cc === 47) {
                    return 63;
                }
                else {
                    return 0;
                }
            };
            Base64.decodeIt = function (str64, blocksSize) {
                if (typeof Uint8Array === 'undefined') {
                    return null;
                }
                var str = str64.replace(/[^A-Za-z0-9\+\/]/g, '');
                var slen = str.length;
                var blen = blocksSize ? Math.ceil((slen * 3 + 1 >> 2) / blocksSize) * blocksSize : slen * 3 + 1 >> 2;
                var bytes = new Uint8Array(blen);
                var n = 0;
                var bi = 0;
                for (var si = 0; si < slen; si++) {
                    var mod4 = si & 3;
                    n |= Base64.b64ToUint6(str.charCodeAt(si)) << 18 - 6 * mod4;
                    if (mod4 === 3 || slen - si === 1) {
                        var mod3 = 0;
                        while ((mod3 < 3) && (bi < blen)) {
                            bytes[bi] = n >>> (16 >>> mod3 & 24) & 255;
                            mod3++;
                            bi++;
                        }
                        n = 0;
                    }
                }
                return bytes;
            };
            Base64.uint6ToB64 = function (b) {
                if (b < 26) {
                    return b + 65;
                }
                else if (b < 52) {
                    return b + 71;
                }
                else if (b < 62) {
                    return b - 4;
                }
                else if (b === 62) {
                    return 43;
                }
                else if (b === 63) {
                    return 47;
                }
                else {
                    return 65;
                }
            };
            Base64.encodeIt = function (bytes, index, length) {
                if (typeof Uint8Array === 'undefined') {
                    return null;
                }
                var str = '';
                var blen = length;
                var n = 0;
                for (var bi = 0; bi < blen; bi++) {
                    var mod3 = bi % 3;
                    //if (bi > 0 && (bi * 4 / 3) % 76 === 0) {
                    //    str += '\r\n';
                    //}
                    n |= bytes[index + bi] << (16 >>> mod3 & 24);
                    if (mod3 === 2 || length - bi === 1) {
                        str += String.fromCharCode(Base64.uint6ToB64(n >>> 18 & 63), Base64.uint6ToB64(n >>> 12 & 63), Base64.uint6ToB64(n >>> 6 & 63), Base64.uint6ToB64(n & 63));
                        n = 0;
                    }
                }
                return str.replace(/A(?=A$|$)/g, '=');
            };
            Base64._base64Regex = /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/;
            return Base64;
        }());
        icelink.Base64 = Base64;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var BitAssistant = /** @class */ (function () {
            function BitAssistant() {
            }
            BitAssistant.prototype.getTypeString = function () {
                return '[fm.icelink.BitAssistant]';
            };
            BitAssistant.castByte = function (value) {
                return value;
            };
            BitAssistant.castInteger = function (value) {
                return value;
            };
            BitAssistant.castLong = function (value) {
                return value;
            };
            BitAssistant.leftShift = function (value, count) {
                return (value << count);
            };
            BitAssistant.leftShiftShort = function (value, count) {
                return (value << count);
            };
            BitAssistant.leftShiftInteger = function (value, count) {
                return (value << count);
            };
            BitAssistant.leftShiftLong = function (value, count) {
                return (value << count);
            };
            BitAssistant.rightShift = function (value, count) {
                return (value >> count);
            };
            BitAssistant.rightShiftShort = function (value, count) {
                return (value >> count);
            };
            BitAssistant.rightShiftInteger = function (value, count) {
                return (value >> count);
            };
            BitAssistant.rightShiftLong = function (value, count) {
                return (value >> count);
            };
            BitAssistant.sequencesAreEqual = function () {
                if (arguments.length == 2) {
                    var array1 = arguments[0];
                    var array2 = arguments[1];
                    if (array1 == null && array2 == null) {
                        return true;
                    }
                    if (array1 == null || array2 == null) {
                        return false;
                    }
                    if (array1.length != array2.length) {
                        return false;
                    }
                    for (var i = 0; i < array1.length; i++) {
                        if (array1[i] != array2[i]) {
                            return false;
                        }
                    }
                    return true;
                }
                else {
                    var array1 = arguments[0];
                    var offset1 = arguments[1];
                    var array2 = arguments[2];
                    var offset2 = arguments[3];
                    var length_1 = arguments[4];
                    if (array1 == null && array2 == null) {
                        return true;
                    }
                    if (array1 == null || array2 == null) {
                        return false;
                    }
                    if (array1.length < offset1 + length_1 || array2.length < offset2 + length_1) {
                        return false;
                    }
                    for (var i = 0; i < length_1; i++) {
                        if (array1[offset1 + i] != array2[offset2 + i]) {
                            return false;
                        }
                    }
                    return true;
                }
            };
            BitAssistant.sequencesAreEqualConstantTime = function () {
                if (arguments.length == 2) {
                    var array1 = arguments[0];
                    var array2 = arguments[1];
                    if (array1 == null && array2 == null) {
                        return true;
                    }
                    if (array1 == null || array2 == null) {
                        return false;
                    }
                    if (array1.length != array2.length) {
                        return false;
                    }
                    var areEqual = true;
                    for (var i = 0; i < array1.length; i++) {
                        if (array1[i] != array2[i]) {
                            areEqual = false;
                        }
                    }
                    return areEqual;
                }
                else {
                    var array1 = arguments[0];
                    var offset1 = arguments[1];
                    var array2 = arguments[2];
                    var offset2 = arguments[3];
                    var length_2 = arguments[4];
                    if (array1 == null && array2 == null) {
                        return true;
                    }
                    if (array1 == null || array2 == null) {
                        return false;
                    }
                    if (array1.length < offset1 + length_2 || array2.length < offset2 + length_2) {
                        return false;
                    }
                    var areEqual = true;
                    for (var i = 0; i < length_2; i++) {
                        if (array1[offset1 + i] != array2[offset2 + i]) {
                            areEqual = false;
                        }
                    }
                    return areEqual;
                }
            };
            BitAssistant.subArray = function (array, offset, count) {
                if (typeof count === 'undefined') {
                    return BitAssistant.subArray(array, offset, array.length - offset);
                }
                else {
                    var subarray = new Uint8Array(count);
                    BitAssistant.copy(array, offset, subarray, 0, count);
                    return subarray;
                }
            };
            BitAssistant.reverse = function (array) {
                array.reverse();
            };
            BitAssistant.copy = function (source, sourceIndex, destination, destinationIndex, length) {
                destination.set(source.subarray(sourceIndex, sourceIndex + length), destinationIndex);
            };
            BitAssistant.set = function (array, index, length, value) {
                array.fill(value, index, index + length);
            };
            BitAssistant.getHexString = function () {
                if (arguments.length == 1) {
                    var array = arguments[0];
                    return BitAssistant.getHexString(array, 0, array.length);
                }
                else {
                    var array = arguments[0];
                    var offset = arguments[1];
                    var length_3 = arguments[2];
                    var s = '';
                    for (var i = offset; i < offset + length_3; i++) {
                        var hex = (array[i] & 0xff).toString(16);
                        hex = (hex.length === 1) ? '0' + hex : hex;
                        s += hex;
                    }
                    return s;
                }
            };
            BitAssistant.getHexBytes = function (s) {
                var a = [];
                for (var i = 0; i < s.length; i += 2) {
                    a.push(parseInt(s.substr(i, 2), 16));
                }
                return new Uint8Array(a);
            };
            return BitAssistant;
        }());
        icelink.BitAssistant = BitAssistant;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ByteCollection = /** @class */ (function () {
            function ByteCollection(buffer) {
                if (buffer) {
                    this._buffer = new Uint8Array(buffer);
                }
                else {
                    this._buffer = new Uint8Array(0);
                }
            }
            ByteCollection.prototype.getTypeString = function () {
                return '[fm.icelink.ByteCollection]';
            };
            ByteCollection.prototype.count = function () {
                return this._buffer.length;
            };
            ByteCollection.prototype.add = function (b) {
                var bufferA = this._buffer;
                var newBuffer = new Uint8Array(bufferA.length + 1);
                newBuffer.set(bufferA);
                newBuffer[bufferA.length] = b;
                this._buffer = newBuffer;
            };
            ByteCollection.prototype.addRange = function (buffer) {
                var byteCollection = icelink.Global.tryCast(buffer, ByteCollection);
                if (byteCollection) {
                    buffer = byteCollection._buffer;
                }
                var bufferA = this._buffer;
                var bufferB = buffer;
                var newBuffer = new Uint8Array(bufferA.length + bufferB.length);
                newBuffer.set(bufferA);
                newBuffer.set(bufferB, bufferA.length);
                this._buffer = newBuffer;
            };
            ByteCollection.prototype.removeRange = function (index, count) {
                var bufferA = this._buffer.subarray(0, index);
                var bufferB = this._buffer.subarray(index + count);
                var newBuffer = new Uint8Array(bufferA.length + bufferB.length);
                newBuffer.set(bufferA);
                newBuffer.set(bufferB, bufferA.length);
                this._buffer = newBuffer;
            };
            ByteCollection.prototype.insertRange = function (index, buffer) {
                var byteCollection = icelink.Global.tryCast(buffer, ByteCollection);
                if (byteCollection) {
                    buffer = byteCollection._buffer;
                }
                var bufferA = this._buffer.subarray(0, index);
                var bufferB = buffer;
                var bufferC = this._buffer.subarray(index);
                var newBuffer = new Uint8Array(bufferA.length + bufferB.length + bufferC.length);
                newBuffer.set(bufferA);
                newBuffer.set(bufferB, bufferA.length);
                newBuffer.set(bufferC, bufferA.length + bufferB.length);
                this._buffer = newBuffer;
            };
            ByteCollection.prototype.getRange = function (index, count) {
                var buffer = new Uint8Array(count);
                buffer.set(this._buffer.subarray(index, index + count));
                return buffer;
            };
            ByteCollection.prototype.get = function (index) {
                return this._buffer[index];
            };
            ByteCollection.prototype.toArray = function () {
                return new Uint8Array(this._buffer);
            };
            return ByteCollection;
        }());
        icelink.ByteCollection = ByteCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base class for all logging provider implementations.
         </div>
    
        */
        var LogProvider = /** @class */ (function () {
            /**<span id='method-fm.icelink.LogProvider-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.logProvider` class.
             </div>
    
    
            @return {}
            */
            function LogProvider() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkLogProviderInit();
                    this.setLevel(fm.icelink.LogLevel.Info);
                    this.setProcessId(fm.icelink.Platform.getInstance().getProcessId());
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LogProvider.prototype.getTypeString = function () {
                return '[fm.icelink.LogProvider]';
            };
            LogProvider.prototype.fmicelinkLogProviderInit = function () {
                this._processId = 0;
            };
            /**<span id='method-fm.icelink.LogProvider-generateLogLine'>&nbsp;</span>**/
            /**
             <div>
             Generates a default log line.
             </div>
    
            @param {fm.icelink.LogEvent} logItem The log event containing the details.
            @return {string}
            */
            LogProvider.prototype.generateLogLine = function (logItem) {
                if (arguments.length == 1) {
                    var product = this.getProduct();
                    var str2 = fm.icelink.StringExtensions.format("[{0}][{1}][{2}] {3} [{4}][{5}] {6} {7}", [product, fm.icelink.IntExtensions.toString(this.getProcessId()), fm.icelink.IntExtensions.toString(logItem.getThreadId()), this.getLogLevelString(logItem.getLogLevel()), logItem.getTag(), ((fm.icelink.Global.equals(logItem.getScope(), null)) ? "-" : logItem.getScope()), this.getPrefixTimestamp(logItem.getTimeStamp()), logItem.getMessage()]);
                    if ((!fm.icelink.Global.equals(logItem.getException(), null))) {
                        str2 = fm.icelink.StringExtensions.concat(str2, fm.icelink.StringExtensions.format("\n{0}", logItem.getException().toString()));
                    }
                    return str2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getFilter'>&nbsp;</span>**/
            /**
             <div>
             Gets a filter on the log provider.
             </div>
    
    
            @return {fm.icelink.IFunction2<string,fm.icelink.LogLevel,boolean>}
            */
            LogProvider.prototype.getFilter = function () {
                if (arguments.length == 0) {
                    return this._filter;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getLevel'>&nbsp;</span>**/
            /**
             <div>
             Gets the log level.
             </div>
    
    
            @return {fm.icelink.LogLevel}
            */
            LogProvider.prototype.getLevel = function () {
                if (arguments.length == 0) {
                    return this._level;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getLogLevelString'>&nbsp;</span>**/
            /**
             <div>
             Converts a log-level to a 5-character string for
             consistently-spaced character sequences.
             </div>
    
            @param {fm.icelink.LogLevel} level The log level.
            @return {string} The log level as an upper-case string
             with right-side whitespace padding to ensure
             a 5-character sequence.
            */
            LogProvider.prototype.getLogLevelString = function (level) {
                if (arguments.length == 1) {
                    var _var0 = level;
                    if (_var0 == fm.icelink.LogLevel.Verbose) {
                        do {
                            return "VERBOSE";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.Debug) {
                        do {
                            return "DEBUG  ";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.Info) {
                        do {
                            return "INFO   ";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.Warn) {
                        do {
                            return "WARN   ";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.Error) {
                        do {
                            return "ERROR  ";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.Fatal) {
                        do {
                            return "FATAL  ";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LogLevel.None) {
                        do {
                            return "NONE   ";
                        } while (false);
                    }
                    return "?????  ";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getPrefix'>&nbsp;</span>**/
            /**
             <div>
             Converts a log-level to a 5-character string for
             consistently-spaced character sequences.
             </div>
    
            @param {fm.icelink.LogLevel} level The log level.
            @param {boolean} includeTimestamp Whether to include a timestamp in the prefix.
            @return {string} The log level as an upper-case string
             with right-side whitespace padding to ensure
             a 5-character sequence.
            */
            LogProvider.prototype.getPrefix = function (level, includeTimestamp) {
                if (arguments.length == 2) {
                    var logLevelString = this.getLogLevelString(level);
                    if (includeTimestamp) {
                        logLevelString = fm.icelink.StringExtensions.format("{0} {1}", logLevelString, this.getPrefixTimestamp(fm.icelink.DateTime.getUtcNow()));
                    }
                    return logLevelString;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getPrefixTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Converts a timestamp to a string formatted for
             rendering in a log message (yyyy/MM/dd-hh:mm:ss).
             </div>
    
            @param {fm.icelink.DateTime} timestamp The timestamp.
            @return {string} The timestamp as a formatted string.
            */
            LogProvider.prototype.getPrefixTimestamp = function (timestamp) {
                if (arguments.length == 1) {
                    var str = fm.icelink.IntExtensions.toString(timestamp.getYear());
                    var str2 = fm.icelink.IntExtensions.toString(timestamp.getMonth());
                    var str3 = fm.icelink.IntExtensions.toString(timestamp.getDay());
                    var str4 = fm.icelink.IntExtensions.toString(timestamp.getHour());
                    var str5 = fm.icelink.IntExtensions.toString(timestamp.getMinute());
                    var str6 = fm.icelink.IntExtensions.toString(timestamp.getSecond());
                    var str7 = fm.icelink.IntExtensions.toString(timestamp.getMillisecond());
                    while ((str.length < 4)) {
                        str = fm.icelink.StringExtensions.concat("0", str);
                    }
                    while ((str2.length < 2)) {
                        str2 = fm.icelink.StringExtensions.concat("0", str2);
                    }
                    while ((str3.length < 2)) {
                        str3 = fm.icelink.StringExtensions.concat("0", str3);
                    }
                    while ((str4.length < 2)) {
                        str4 = fm.icelink.StringExtensions.concat("0", str4);
                    }
                    while ((str5.length < 2)) {
                        str5 = fm.icelink.StringExtensions.concat("0", str5);
                    }
                    while ((str6.length < 2)) {
                        str6 = fm.icelink.StringExtensions.concat("0", str6);
                    }
                    while ((str7.length < 3)) {
                        str7 = fm.icelink.StringExtensions.concat("0", str7);
                    }
                    return fm.icelink.StringExtensions.format("{0}/{1}/{2}-{3}:{4}:{5}.{6}", [str, str2, str3, str4, str5, str6, str7]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getProcessId'>&nbsp;</span>**/
            /**
             <div>
             Gets the current process id.
             </div>
    
    
            @return {number}
            */
            LogProvider.prototype.getProcessId = function () {
                if (arguments.length == 0) {
                    return this._processId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-getProduct'>&nbsp;</span>**/
            /**
             <div>
             Returns the name of the current product.
             </div>
    
    
            @return {string}
            */
            LogProvider.prototype.getProduct = function () {
                if (arguments.length == 0) {
                    return "IceLink";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-log'>&nbsp;</span>**/
            /**
             <div>
             Log a message.
             </div>
    
            @param {fm.icelink.LogEvent} logItem The log event containing the details.
            @return {void}
            */
            LogProvider.prototype.log = function (logItem) {
                if (arguments.length == 1) {
                    if ((logItem.getLogLevel() >= this.getLevel())) {
                        try {
                            var flag = true;
                            if ((!fm.icelink.Global.equals(this.getFilter(), null))) {
                                flag = this.getFilter()(logItem.getTag(), logItem.getLogLevel());
                            }
                            if (flag) {
                                this.doLog(logItem);
                            }
                        }
                        catch (obj1) {
                        }
                        finally {
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-setFilter'>&nbsp;</span>**/
            /**
             <div>
             Sets a filter on the log provider.
             </div>
    
    
            @param {fm.icelink.IFunction2<string,fm.icelink.LogLevel,boolean>} value
            @return {void}
            */
            LogProvider.prototype.setFilter = function (value) {
                if (arguments.length == 1) {
                    this._filter = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogProvider-setLevel'>&nbsp;</span>**/
            /**
             <div>
             Sets the log level.
             </div>
    
    
            @param {fm.icelink.LogLevel} value
            @return {void}
            */
            LogProvider.prototype.setLevel = function (value) {
                if (arguments.length == 1) {
                    this._level = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogProvider.prototype.setProcessId = function (value) {
                if (arguments.length == 1) {
                    this._processId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LogProvider;
        }());
        icelink.LogProvider = LogProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LogProvider.ts" />

/// <reference path="LogProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var ConsoleLogProvider = /** @class */ (function (_super) {
            __extends(ConsoleLogProvider, _super);
            function ConsoleLogProvider(level) {
                var _this = _super.call(this) || this;
                if (typeof level === 'undefined') {
                    level = icelink.LogLevel.Warn;
                }
                _this.setLevel(level);
                return _this;
            }
            ConsoleLogProvider.prototype.getTypeString = function () {
                return '[fm.icelink.ConsoleLogProvider]' + ',' + _super.prototype.getTypeString.call(this);
            };
            ConsoleLogProvider.prototype.writeLine = function (text) {
                if (window.console && window.console.log) {
                    //window.console.log(text);
                }
            };
            ConsoleLogProvider.prototype.doLog = function (logItem) {
                var text = _super.prototype.generateLogLine.call(this, logItem);
                this.writeLine(text);
            };
            return ConsoleLogProvider;
        }(icelink.LogProvider));
        icelink.ConsoleLogProvider = ConsoleLogProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Convert = /** @class */ (function () {
            function Convert() {
            }
            Convert.prototype.getTypeString = function () {
                return '[fm.icelink.Convert]';
            };
            Convert.toInt32 = function (s, base) {
                return parseInt(s, base);
            };
            return Convert;
        }());
        icelink.Convert = Convert;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var DateTime = /** @class */ (function () {
            function DateTime() {
                if (arguments.length == 1) {
                    if (icelink.Util.isDate(arguments[0])) {
                        this._date = arguments[0];
                    }
                    else {
                        var ticks = arguments[0];
                        // Unix time is seconds, the Date constructor takes milliseconds.
                        this._date = new Date(icelink.UnixTimestamp.ticksToUnix(ticks) * 1000);
                    }
                }
                else if (arguments.length == 6) {
                    var year = arguments[0];
                    var month = arguments[1];
                    var day = arguments[2];
                    var hour = arguments[3];
                    var minute = arguments[4];
                    var second = arguments[5];
                    this._date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));
                }
            }
            DateTime.prototype.getTypeString = function () {
                return '[fm.icelink.DateTime]';
            };
            DateTime.getNow = function () {
                return new DateTime(new Date());
            };
            DateTime.getUtcNow = function () {
                return new DateTime(new Date());
            };
            DateTime.prototype.getDate = function () {
                return this._date;
            };
            DateTime.prototype.getTicks = function () {
                return 621355968000000000 + this._date.getTime() * 10000;
            };
            DateTime.prototype.toUniversalTime = function () {
                return new DateTime(this._date);
            };
            DateTime.prototype.getYear = function () {
                return this._date.getUTCFullYear();
            };
            DateTime.prototype.getMonth = function () {
                return this._date.getUTCMonth() + 1;
            };
            DateTime.prototype.getDay = function () {
                return this._date.getUTCDate();
            };
            DateTime.prototype.getHour = function () {
                return this._date.getUTCHours();
            };
            DateTime.prototype.getMinute = function () {
                return this._date.getUTCMinutes();
            };
            DateTime.prototype.getSecond = function () {
                return this._date.getUTCSeconds();
            };
            DateTime.prototype.getMillisecond = function () {
                return this._date.getUTCMilliseconds();
            };
            DateTime.prototype.addSeconds = function (seconds) {
                var newMilliseconds = this._date.getTime() + (seconds * 1000);
                var unixTime = newMilliseconds / 1000; // Get unix seconds.
                return new DateTime(icelink.UnixTimestamp.unixToTicks(unixTime));
            };
            DateTime.prototype.addMilliseconds = function (milliseconds) {
                var newMilliseconds = this._date.getTime() + milliseconds;
                var unixTime = newMilliseconds / 1000; // Get unix seconds.
                return new DateTime(icelink.UnixTimestamp.unixToTicks(unixTime));
            };
            return DateTime;
        }());
        icelink.DateTime = DateTime;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var DateTimeFormatInfo = /** @class */ (function () {
            function DateTimeFormatInfo() {
            }
            DateTimeFormatInfo.prototype.getTypeString = function () {
                return '[fm.icelink.DateTimeFormatInfo]';
            };
            DateTimeFormatInfo.getInvariantInfo = function () {
                return new DateTimeFormatInfo();
            };
            return DateTimeFormatInfo;
        }());
        icelink.DateTimeFormatInfo = DateTimeFormatInfo;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var DateTimeStyles;
        (function (DateTimeStyles) {
            DateTimeStyles[DateTimeStyles["AssumeUniversal"] = 1] = "AssumeUniversal";
            DateTimeStyles[DateTimeStyles["AdjustToUniversal"] = 2] = "AdjustToUniversal";
        })(DateTimeStyles = icelink.DateTimeStyles || (icelink.DateTimeStyles = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var DispatchQueue = /** @class */ (function () {
            function DispatchQueue(action) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    this._action = action;
                    this._count = new fm.icelink.AtomicLong();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DispatchQueue.prototype.getTypeString = function () {
                return '[fm.icelink.DispatchQueue]';
            };
            DispatchQueue.prototype.getQueueCount = function () {
                return this._count.getValue();
            };
            DispatchQueue.prototype.enqueue = function (item) {
                var action = this._action;
                var atomic = this._count;
                atomic.increment();
                window.setTimeout(function () {
                    try {
                        action(item);
                    }
                    finally {
                        atomic.decrement();
                    }
                }, 1);
            };
            return DispatchQueue;
        }());
        icelink.DispatchQueue = DispatchQueue;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LogProvider.ts" />

/// <reference path="LogProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DomLogProvider = /** @class */ (function (_super) {
            __extends(DomLogProvider, _super);
            function DomLogProvider(container, level) {
                var _this = _super.call(this) || this;
                _this._container = container;
                if (typeof level === 'undefined') {
                    level = icelink.LogLevel.Warn;
                }
                _this.setLevel(level);
                return _this;
            }
            DomLogProvider.prototype.getTypeString = function () {
                return '[fm.icelink.DomLogProvider]' + ',' + _super.prototype.getTypeString.call(this);
            };
            DomLogProvider.prototype.writeLine = function (text) {
                var div = document.createElement('div');
                div.innerHTML = text.replace(/\n/g, '<br />');
                this._container.appendChild(div);
            };
            DomLogProvider.prototype.doLog = function (logItem) {
                var text = _super.prototype.generateLogLine.call(this, logItem);
                this.writeLine(text);
            };
            return DomLogProvider;
        }(icelink.LogProvider));
        icelink.DomLogProvider = DomLogProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Encoding = /** @class */ (function () {
            function Encoding() {
            }
            Encoding.prototype.getTypeString = function () {
                return '[fm.icelink.Encoding]';
            };
            Encoding.getAscii = function () {
                return new Encoding();
            };
            Encoding.getUtf8 = function () {
                return new Encoding();
            };
            Encoding.prototype.getString = function (bytes, index, count) {
                if (typeof index === 'undefined') {
                    index = 0;
                }
                if (typeof count === 'undefined') {
                    count = bytes.length;
                }
                var str = '';
                var i = index;
                while (i < (index + count)) {
                    var c = void 0;
                    if (bytes[i] <= 0x7f) {
                        c = bytes[i];
                    }
                    else {
                        if ((bytes[i] >> 5) === 0x6) {
                            c = ((bytes[i] & 0x1f) << 6) | (bytes[++i] & 0x3f);
                        }
                        else if ((bytes[i] >> 4) === 0xe) {
                            c = ((bytes[i] & 0xf) << 12) | ((bytes[++i] & 0x3f) << 6) | (bytes[++i] & 0x3f);
                        }
                        else {
                            var s = 1;
                            while (bytes[i] & (0x20 >>> s)) {
                                s++;
                            }
                            c = bytes[i] & (0x1f >>> s);
                            while (s-- >= 0) {
                                c = (c << 6) ^ (bytes[++i] & 0x3f);
                            }
                        }
                    }
                    str += String.fromCharCode(c);
                    i++;
                }
                return str;
            };
            Encoding.prototype.getBytes = function (str) {
                if (!str) {
                    return null;
                }
                var n = str.length;
                var idx = 0;
                var utf8 = new Uint8Array(new ArrayBuffer(n * 4));
                var i = 0;
                while (i < n) {
                    var c = str.charCodeAt(i);
                    if (c <= 0x7F) {
                        utf8[idx++] = c;
                    }
                    else if (c <= 0x7FF) {
                        utf8[idx++] = 0xC0 | (c >>> 6);
                        utf8[idx++] = 0x80 | (c & 0x3F);
                    }
                    else if (c <= 0xFFFF) {
                        utf8[idx++] = 0xE0 | (c >>> 12);
                        utf8[idx++] = 0x80 | ((c >>> 6) & 0x3F);
                        utf8[idx++] = 0x80 | (c & 0x3F);
                    }
                    else {
                        var j = 4;
                        while (c >> (6 * j)) {
                            j++;
                        }
                        utf8[idx++] = ((0xFF00 >>> j) & 0xFF) | (c >>> (6 * --j));
                        while (j--) {
                            utf8[idx++] = 0x80 | ((c >>> (6 * j)) & 0x3F);
                        }
                    }
                    i++;
                }
                return utf8.subarray(0, idx);
            };
            Encoding.prototype.getByteCount = function (str) {
                return this.getBytes(str).length;
            };
            return Encoding;
        }());
        icelink.Encoding = Encoding;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
var fmicelinkGlobalError = /** @class */ (function (_super) {
    __extends(fmicelinkGlobalError, _super);
    function fmicelinkGlobalError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return fmicelinkGlobalError;
}(Error));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Exception = /** @class */ (function (_super) {
            __extends(Exception, _super);
            function Exception(message) {
                var _this = _super.call(this, message) || this;
                _this.message = message;
                _this.name = 'Exception';
                return _this;
            }
            return Exception;
        }(fmicelinkGlobalError));
        icelink.Exception = Exception;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Future base properties/methods.
         </div>
    
        */
        var FutureBase = /** @class */ (function () {
            function FutureBase() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            FutureBase.prototype.getTypeString = function () {
                return '[fm.icelink.FutureBase]';
            };
            /**<span id='method-fm.icelink.FutureBase-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception if rejected.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            FutureBase.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FutureBase-getResult'>&nbsp;</span>**/
            /**
             <div>
             Gets the result if resolved.
             </div>
    
    
            @return {T}
            */
            FutureBase.prototype.getResult = function () {
                if (arguments.length == 0) {
                    return this._result;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FutureBase-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the current state.
             </div>
    
    
            @return {fm.icelink.FutureState}
            */
            FutureBase.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this._state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FutureBase-setException'>&nbsp;</span>**/
            /**
             <div>
             Sets the exception if rejected.
             </div>
    
    
            @param {fm.icelink.Exception} value
            @return {void}
            */
            FutureBase.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FutureBase-setResult'>&nbsp;</span>**/
            /**
             <div>
             Sets the result if resolved.
             </div>
    
    
            @param {T} value
            @return {void}
            */
            FutureBase.prototype.setResult = function (value) {
                if (arguments.length == 1) {
                    this._result = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FutureBase-setState'>&nbsp;</span>**/
            /**
             <div>
             Sets the current state.
             </div>
    
    
            @param {fm.icelink.FutureState} value
            @return {void}
            */
            FutureBase.prototype.setState = function (value) {
                if (arguments.length == 1) {
                    this._state = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return FutureBase;
        }());
        icelink.FutureBase = FutureBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="FutureBase.ts" />

/// <reference path="FutureBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Future = /** @class */ (function (_super) {
            __extends(Future, _super);
            function Future() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Future.prototype.getTypeString = function () {
                return '[fm.icelink.Future]';
            };
            return Future;
        }(icelink.FutureBase));
        icelink.Future = Future;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Global = /** @class */ (function () {
            function Global() {
            }
            Global.prototype.getTypeString = function () {
                return '[fm.icelink.Global]';
            };
            Global.tryCast = function (x, t) {
                if (!x || x instanceof t) {
                    return x;
                }
                return null;
            };
            Global.tryCastArray = function (x) {
                if (!x || x instanceof Array) {
                    return x;
                }
                return null;
            };
            Global.tryCastObject = function (x) {
                if (!x || x instanceof Object) {
                    return x;
                }
                return null;
            };
            Global.tryCastString = function (x) {
                if (!x || typeof x === "string") {
                    return x;
                }
                return null;
            };
            Global.tryCastInt = function (x) {
                if (!x || !isNaN(parseInt(x))) {
                    return x;
                }
                return null;
            };
            Global.tryCastFloat = function (x) {
                if (!x || !isNaN(parseFloat(x))) {
                    return x;
                }
                return null;
            };
            Global.equals = function (x1, x2) {
                if (x1 === null || typeof x1 === 'undefined') {
                    return x2 === null || typeof x2 === 'undefined';
                }
                if (x2 === null || typeof x2 === 'undefined') {
                    return x1 === null || typeof x1 === 'undefined';
                }
                return x1 === x2;
            };
            return Global;
        }());
        icelink.Global = Global;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Guid = /** @class */ (function () {
            function Guid(guidString) {
                if (typeof guidString === 'undefined') {
                    this._guidString = '00000000-0000-0000-0000-000000000000';
                }
                else {
                    this._guidString = guidString;
                }
            }
            Guid.prototype.getTypeString = function () {
                return '[fm.icelink.Guid]';
            };
            Guid.prototype.equals = function (guid) {
                return (guid.toString() === this._guidString);
            };
            Guid.prototype.toString = function () {
                return this._guidString;
            };
            Guid.newGuid = function () {
                return new Guid('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0;
                    var v = (c === 'x' ? r : r & 0x3 | 0x8);
                    return v.toString(16);
                }));
            };
            Guid.equals = function (guid1, guid2) {
                if (guid1 === null || typeof guid1 === 'undefined') {
                    return guid2 === null || typeof guid2 === 'undefined';
                }
                if (guid2 === null || typeof guid2 === 'undefined') {
                    return guid1 === null || typeof guid1 === 'undefined';
                }
                return guid1.equals(guid2);
            };
            Guid.empty = new Guid();
            return Guid;
        }());
        icelink.Guid = Guid;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A hash context.
         </div>
    
        */
        var HashContextBase = /** @class */ (function () {
            /**<span id='method-fm.icelink.HashContextBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.hashContextBase` class.
             </div>
    
            @param {fm.icelink.HashType} type The type.
            @return {}
            */
            function HashContextBase(type) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var type_1 = __arguments[0];
                    //super();
                    this.setType(type_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HashContextBase.prototype.getTypeString = function () {
                return '[fm.icelink.HashContextBase]';
            };
            HashContextBase.compute = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isObjectType(arguments[1], '[fm.icelink.DataBuffer]'))) {
                    var type = arguments[0];
                    var input = arguments[1];
                    var context = new fm.icelink.HashContext(type);
                    var buffer = context.compute(input);
                    context.destroy();
                    return buffer;
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isString(arguments[1]))) {
                    var type = arguments[0];
                    var inputString = arguments[1];
                    var context = new fm.icelink.HashContext(type);
                    var buffer = context.compute(inputString);
                    context.destroy();
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            HashContextBase.prototype.compute = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var input = arguments[0];
                    return this.doCompute(input);
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isString(arguments[0]))) {
                    var inputString = arguments[0];
                    return this.doCompute(fm.icelink.DataBuffer.wrap(fm.icelink.Utf8.encode(inputString)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HashContextBase-destroy'>&nbsp;</span>**/
            /**
             <div>
             Destroys this instance.
             </div>
    
    
            @return {void}
            */
            HashContextBase.prototype.destroy = function () {
                if (arguments.length == 0) {
                    this.doDestroy();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HashContextBase-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.HashType}
            */
            HashContextBase.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HashContextBase.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HashContextBase;
        }());
        icelink.HashContextBase = HashContextBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="HashContextBase.ts" />

/// <reference path="HashContextBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var HashContext = /** @class */ (function (_super) {
            __extends(HashContext, _super);
            function HashContext(type) {
                return _super.call(this, type) || this;
            }
            HashContext.prototype.getTypeString = function () {
                return '[fm.icelink.HashContext]';
            };
            HashContext.prototype.doCompute = function (input) {
                if (this.getType() == icelink.HashType.Md5) {
                    return null;
                }
                else if (this.getType() == icelink.HashType.Sha1) {
                    return null;
                }
                else if (this.getType() == icelink.HashType.Sha256) {
                    var hash = new icelink.Sha256();
                    hash.update(input.getData());
                    var digest = hash.digest();
                    hash.clean();
                    return icelink.DataBuffer.wrap(digest);
                }
                throw new icelink.Exception('Unknown hash type.');
            };
            HashContext.prototype.doDestroy = function () { };
            return HashContext;
        }(icelink.HashContextBase));
        icelink.HashContext = HashContext;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var HashExtensions = /** @class */ (function () {
            function HashExtensions() {
            }
            HashExtensions.prototype.getTypeString = function () {
                return '[fm.icelink.HashExtensions]';
            };
            HashExtensions.getCount = function (obj) {
                var i = 0;
                for (var key in obj) {
                    i++;
                }
                return i;
            };
            HashExtensions.getKeys = function (obj) {
                var keys = [];
                for (var key in obj) {
                    keys.push(key);
                }
                return keys;
            };
            HashExtensions.getValues = function (obj) {
                var values = [];
                for (var key in obj) {
                    values.push(obj[key]);
                }
                return values;
            };
            HashExtensions.tryGetValue = function (obj, key, holder) {
                if (HashExtensions.containsKey(obj, key)) {
                    holder.setValue(obj[key]);
                    return true;
                }
                return false;
            };
            HashExtensions.containsKey = function (obj, key) {
                if (key in obj) {
                    return true;
                }
                else {
                    return false;
                }
            };
            HashExtensions.containsValue = function (obj, value) {
                for (var key in obj) {
                    if (obj[key] === value) {
                        return true;
                    }
                }
                return false;
            };
            HashExtensions.add = function (obj, key, value) {
                obj[key] = value;
                return value;
            };
            HashExtensions.remove = function (obj, key) {
                if (HashExtensions.containsKey(obj, key)) {
                    delete obj[key];
                    return true;
                }
                return false;
            };
            HashExtensions.clear = function (obj) {
                for (var key in obj) {
                    delete obj[key];
                }
            };
            return HashExtensions;
        }());
        icelink.HashExtensions = HashExtensions;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Holder = /** @class */ (function () {
            function Holder(value) {
                this._value = value;
            }
            Holder.prototype.getTypeString = function () {
                return '[fm.icelink.Holder]';
            };
            Holder.prototype.getValue = function () {
                return this._value;
            };
            Holder.prototype.setValue = function (value) {
                this._value = value;
            };
            return Holder;
        }());
        icelink.Holder = Holder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base class that defines methods for transferring content over HTTP.
         </div>
    
        */
        var HttpTransfer = /** @class */ (function () {
            function HttpTransfer() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpTransfer.prototype.getTypeString = function () {
                return '[fm.icelink.HttpTransfer]';
            };
            /**<span id='method-fm.icelink.HttpTransfer-addOnSendFinish'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised before an HTTP request is sent.
             </div>
    
            @param {fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>} value
            @return {void}
            */
            HttpTransfer.addOnSendFinish = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendFinish, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-addOnSendStart'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised before an HTTP request is sent.
             </div>
    
            @param {fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>} value
            @return {void}
            */
            HttpTransfer.addOnSendStart = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendStart, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            HttpTransfer.addQueryToUrl = function () {
                if (arguments.length == 3) {
                    var url = arguments[0];
                    var key = arguments[1];
                    var value = arguments[2];
                    if (fm.icelink.StringExtensions.isNullOrEmpty(key)) {
                        return url;
                    }
                    if ((fm.icelink.Global.equals(value, null))) {
                        value = fm.icelink.StringExtensions.empty;
                    }
                    key = fm.icelink.Uri.escapeDataString(key);
                    value = fm.icelink.Uri.escapeDataString(value);
                    return fm.icelink.StringExtensions.concat([url, ((fm.icelink.Global.equals(fm.icelink.StringExtensions.indexOf(url, "?", fm.icelink.StringComparison.OrdinalIgnoreCase), -1)) ? "?" : "&"), key, "=", value]);
                }
                else if (arguments.length == 2) {
                    var url = arguments[0];
                    var key = arguments[1];
                    return fm.icelink.HttpTransfer.addQueryToUrl(url, key, null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-getRandomWildcardCharacter'>&nbsp;</span>**/
            /**
             <div>
             Gets a random wildcard character.
             </div>
    
            @return {string} A random wildcard character.
            */
            HttpTransfer.getRandomWildcardCharacter = function () {
                if (arguments.length == 0) {
                    var wildcardCharacters = fm.icelink.HttpTransfer.getWildcardCharacters();
                    var startIndex = new fm.icelink.Randomizer().next(wildcardCharacters.length);
                    return fm.icelink.StringExtensions.substring(wildcardCharacters, startIndex, 1);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-getWildcardCharacters'>&nbsp;</span>**/
            /**
             <div>
             Gets the wildcard characters used
             to replace asterisks in ReplaceWildcards.
             </div>
    
    
            @return {string}
            */
            HttpTransfer.getWildcardCharacters = function () {
                if (arguments.length == 0) {
                    return fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___wildcardCharacters;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-removeOnSendFinish'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised before an HTTP request is sent.
             </div>
    
            @param {fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>} value
            @return {void}
            */
            HttpTransfer.removeOnSendFinish = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendFinish, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-removeOnSendStart'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised before an HTTP request is sent.
             </div>
    
            @param {fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>} value
            @return {void}
            */
            HttpTransfer.removeOnSendStart = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendStart, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-replaceWildcards'>&nbsp;</span>**/
            /**
             <div>
             Replaces asterisks in URLs with characters from
             WildcardCharacters.
             </div>
    
            @param {string} url The URL with asterisks.
            @return {string}
            */
            HttpTransfer.replaceWildcards = function (url) {
                if (arguments.length == 1) {
                    return fm.icelink.StringExtensions.replace(url, "*", fm.icelink.HttpTransfer.getRandomWildcardCharacter());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-setWildcardCharacters'>&nbsp;</span>**/
            /**
             <div>
             Sets the wildcard characters used
             to replace asterisks in ReplaceWildcards.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            HttpTransfer.setWildcardCharacters = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___wildcardCharacters = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpTransfer.prototype.finishRequest = function (responseArgs) {
                if (arguments.length == 1) {
                    this.raiseOnSendFinish(responseArgs);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpTransfer.prototype.raiseOnSendFinish = function (responseArgs) {
                if (arguments.length == 1) {
                    var onSendFinish = fm.icelink.HttpTransfer.fm_icelink_HttpTransfer__onSendFinish;
                    if ((!fm.icelink.Global.equals(onSendFinish, null))) {
                        var p = new fm.icelink.HttpSendFinishArgs();
                        p.setSender(responseArgs.getRequestArgs().getSender());
                        p.setRequestBinaryContent(responseArgs.getRequestArgs().getBinaryContent());
                        p.setRequestTextContent(responseArgs.getRequestArgs().getTextContent());
                        p.setResponseBinaryContent(responseArgs.getBinaryContent());
                        p.setResponseTextContent(responseArgs.getTextContent());
                        p.setResponseHeaders(responseArgs.getHeaders());
                        onSendFinish(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpTransfer.prototype.raiseOnSendStart = function (requestArgs) {
                if (arguments.length == 1) {
                    var onSendStart = fm.icelink.HttpTransfer.fm_icelink_HttpTransfer__onSendStart;
                    if ((!fm.icelink.Global.equals(onSendStart, null))) {
                        var p = new fm.icelink.HttpSendStartArgs();
                        p.setSender(requestArgs.getSender());
                        p.setRequestBinaryContent(requestArgs.getBinaryContent());
                        p.setRequestTextContent(requestArgs.getTextContent());
                        onSendStart(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-send'>&nbsp;</span>**/
            /**
             <div>
             Sends a request synchronously.
             </div>
    
            @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
            @return {fm.icelink.HttpResponseArgs} The resulting response.
            */
            HttpTransfer.prototype.send = function (requestArgs) {
                if (arguments.length == 1) {
                    var args = void 0;
                    this.startRequest(requestArgs);
                    try {
                        if ((!fm.icelink.Global.equals(requestArgs.getBinaryContent(), null))) {
                            args = this.sendBinary(requestArgs);
                        }
                        else {
                            args = this.sendText(requestArgs);
                        }
                    }
                    catch (exception) {
                        var args2 = new fm.icelink.HttpResponseArgs(requestArgs);
                        args2.setException(exception);
                        args = args2;
                    }
                    finally {
                    }
                    this.finishRequest(args);
                    return args;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransfer-sendAsync'>&nbsp;</span>**/
            /**
             <div>
             Sends a request asynchronously.
             </div>
    
            @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
            @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute with the resulting response.
            @return {void}
            */
            HttpTransfer.prototype.sendAsync = function (requestArgs, callback) {
                var _this = this;
                if (arguments.length == 2) {
                    var action = null;
                    var action2 = null;
                    this.startRequest(requestArgs);
                    try {
                        if ((!fm.icelink.Global.equals(requestArgs.getBinaryContent(), null))) {
                            if ((fm.icelink.Global.equals(action, null))) {
                                action = function (responseArgs) {
                                    _this.finishRequest(responseArgs);
                                    callback(responseArgs);
                                };
                            }
                            this.sendBinaryAsync(requestArgs, action);
                        }
                        else {
                            if ((fm.icelink.Global.equals(action2, null))) {
                                action2 = function (responseArgs) {
                                    _this.finishRequest(responseArgs);
                                    callback(responseArgs);
                                };
                            }
                            this.sendTextAsync(requestArgs, action2);
                        }
                    }
                    catch (exception) {
                        var p = new fm.icelink.HttpResponseArgs(requestArgs);
                        p.setException(exception);
                        callback(p);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpTransfer.prototype.startRequest = function (requestArgs) {
                if (arguments.length == 1) {
                    this.raiseOnSendStart(requestArgs);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            HttpTransfer.fmicelinkHttpTransferInitialize = function () {
                if (!fm.icelink.HttpTransfer.__fmicelinkHttpTransferInitialized) {
                    HttpTransfer.fm_icelink_HttpTransfer___onSendFinish = [];
                    HttpTransfer.fm_icelink_HttpTransfer___onSendStart = [];
                    HttpTransfer.fm_icelink_HttpTransfer__onSendFinish = function (p0) { for (var _i = 0, _a = fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendFinish; _i < _a.length; _i++) {
                        var action = _a[_i];
                        action(p0);
                    } };
                    HttpTransfer.fm_icelink_HttpTransfer__onSendStart = function (p0) { for (var _i = 0, _a = fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___onSendStart; _i < _a.length; _i++) {
                        var action = _a[_i];
                        action(p0);
                    } };
                    fm.icelink.HttpTransfer.fm_icelink_HttpTransfer___wildcardCharacters = "abcdefghijklmnopqrstuvwxyz";
                }
                fm.icelink.HttpTransfer.__fmicelinkHttpTransferInitialized = true;
            };
            /** @internal */
            HttpTransfer.__fmicelinkHttpTransferInitialized = false;
            return HttpTransfer;
        }());
        icelink.HttpTransfer = HttpTransfer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
var fmicelinkGlobalIsError = function (obj) {
    return (obj instanceof Error);
};

(function (fm) {
    var icelink;
    (function (icelink) {
        var Util = /** @class */ (function () {
            function Util() {
            }
            Util.prototype.getTypeString = function () {
                return '[fm.icelink.Util]';
            };
            Util.isNumber = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Number]';
            };
            Util.isString = function (obj) {
                return Object.prototype.toString.call(obj) === '[object String]';
            };
            Util.isBoolean = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Boolean]';
            };
            Util.isNull = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Null]';
            };
            Util.isUndefined = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Undefined]';
            };
            Util.isNullOrUndefined = function (obj) {
                return Util.isNull(obj) || Util.isUndefined(obj);
            };
            Util.isFunction = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Function]';
            };
            Util.isArray = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Array]';
            };
            Util.isUint8Array = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Uint8Array]';
            };
            Util.isDate = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Date]';
            };
            Util.isRegExp = function (obj) {
                return Object.prototype.toString.call(obj) === '[object RegExp]';
            };
            Util.isError = function (obj) {
                return fmicelinkGlobalIsError(obj);
            };
            Util.isObject = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Object]';
            };
            Util.isObjectType = function (obj, typeString) {
                return (Util.isObject(obj) && Util.isFunction(obj.getTypeString) && obj.getTypeString().indexOf(typeString) > -1);
            };
            Util.isArrayType = function (obj, typeString) {
                return (Util.isArray(obj) && (obj.length == 0 || (Util.isNullOrUndefined(obj[0]) || Util.isObjectType(obj[0], typeString))));
            };
            Util.isPlainObject = function (obj) {
                // following code from jQuery - excellent work!
                // ignore DOM nodes and window
                if (!obj || Object.prototype.toString.call(obj) !== '[object Object]' || obj.nodeType || obj === obj.window) {
                    return false;
                }
                // Because of IE, we also have to check the presence of the constructor property.
                try {
                    if (obj.constructor && !Object.prototype.hasOwnProperty.call(obj, "constructor") && !Object.prototype.hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                }
                catch (error) {
                    return false;
                }
                // Own properties are enumerated firstly, so to speed up,
                // if last one is own, then all properties are own.
                var key;
                for (key in obj) { }
                return (key === void 0 || Object.prototype.hasOwnProperty.call(obj, key));
            };
            Util.canAttachProperties = function (instance, obj) {
                for (var key in obj) {
                    var value = obj[key];
                    var setterName = 'set' + key.charAt(0).toUpperCase() + key.substring(1);
                    var setter = instance[setterName];
                    if (!setter || Object.prototype.toString.call(setter) !== '[object Function]') {
                        return false;
                    }
                }
                return true;
            };
            Util.attachProperties = function (instance, obj) {
                for (var key in obj) {
                    var value = obj[key];
                    var setterName = 'set' + key.charAt(0).toUpperCase() + key.substring(1);
                    var setter = instance[setterName];
                    if (setter && Object.prototype.toString.call(setter) === '[object Function]') {
                        setter.call(instance, value);
                    }
                    else {
                        setter = instance['setExtensionValue'];
                        if (setter && Object.prototype.toString.call(setter) === '[object Function]') {
                            if (Object.prototype.toString.call(value) === '[object Function]') {
                                icelink.Log.warn('Property "' + key + '" did not match any known setter and has a function as its value. Please verify your callback names are correct.');
                            }
                            else {
                                setter.call(instance, key, value);
                                icelink.Log.debug('Property "' + key + '" did not match any known setter and is assumed to be an extension value.');
                            }
                        }
                        else {
                            icelink.Log.debug('Property "' + key + '" did not match any known setter and was ignored.');
                        }
                    }
                }
                return instance;
            };
            Util.isIE = function () {
                return !!document.protocol;
            };
            Util.isIE6 = function () {
                return Util.isIE() && !window.XMLHttpRequest;
            };
            Util.isIE7 = function () {
                return Util.isIE() && window.XMLHttpRequest && !document.implementation;
            };
            Util.isIE8 = function () {
                return Util.isIE() && document.implementation && document.implementation.hasFeature && !document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
            };
            Util.isIE9 = function () {
                return Util.isIE() && document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
            };
            Util.isAndroid = function () {
                return navigator.userAgent.match(/Android/i) != null;
            };
            Util.isBlackBerry = function () {
                return navigator.userAgent.match(/BlackBerry/i) != null;
            };
            Util.isiOS = function () {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i) != null;
            };
            Util.isOpera = function () {
                return navigator.userAgent.match(/Opera Mini/i) != null;
            };
            Util.isWindows = function () {
                return navigator.userAgent.match(/IEMobile/i) != null;
            };
            Util.isMobile = function () {
                return Util.isAndroid() || Util.isBlackBerry() || Util.isiOS() || Util.isOpera() || Util.isWindows();
            };
            Util.hasActiveX = function () {
                var hasActiveX = window.ActiveXObject !== void 0;
                if (hasActiveX && typeof window.external.msActiveXFilteringEnabled !== 'undefined' && window.external.msActiveXFilteringEnabled()) {
                    hasActiveX = false;
                    icelink.Log.debug('ActiveX is filtered and cannot be used.');
                }
                return hasActiveX;
            };
            Util.hasJava = function () {
                return (Util.getJavaVersion() != null);
            };
            Util.getJavaVersion = function () {
                if (Util.isIE() && Util.hasActiveX()) {
                    if (Util.isJavaWebStartInstalledActiveX('1.9.0')) {
                        return '1.9.0';
                    }
                    if (Util.isJavaWebStartInstalledActiveX('1.8.0')) {
                        return '1.8.0';
                    }
                    if (Util.isJavaWebStartInstalledActiveX('1.7.0')) {
                        return '1.7.0';
                    }
                    if (Util.isJavaWebStartInstalledActiveX('1.6.0')) {
                        return '1.6.0';
                    }
                    if (Util.isJavaWebStartInstalledActiveX('1.5.0')) {
                        return '1.5.0';
                    }
                    if (Util.isJavaWebStartInstalledActiveX('1.4.2')) {
                        return '1.4.2';
                    }
                    return null;
                }
                else {
                    var version = null;
                    var mimes = window.navigator.mimeTypes;
                    if (mimes) {
                        for (var i = 0; i < mimes.length; i++) {
                            var mime = mimes[i];
                            var t = mime.type;
                            if (t.indexOf('java') > 0 && t.indexOf('jpi') > 0 && t.indexOf('applet') > 0) {
                                var parts = t.split('=');
                                version = parts[parts.length - 1];
                            }
                        }
                    }
                    return version;
                }
            };
            Util.isJavaWebStartInstalledActiveX = function (version) {
                try {
                    return Util.hasActiveX() && (new ActiveXObject('JavaWebStart.isInstalled.' + version + '.0') !== null);
                }
                catch (error) {
                    return false;
                }
            };
            Util.isXD = function (url1, url2) {
                try {
                    if (typeof url2 !== 'undefined') {
                        var host1 = Util.getHost(url1);
                        var host2 = Util.getHost(url2);
                        return Util.compareHost(host1, host2);
                    }
                    else {
                        if (!Util._xdCache[url1]) {
                            var handlerHost = Util.getHost(url1);
                            var thisHost = Util.getHost();
                            Util._xdCache[url1] = Util.compareHost(handlerHost, thisHost) ? 'y' : 'n';
                        }
                        return Util._xdCache[url1] === 'y';
                    }
                }
                catch (error) {
                    return false;
                }
            };
            Util.getHost = function (url) {
                if (!url) {
                    return Util.getCurrentHost();
                }
                var parsed = Util.parseUrl(url);
                if (!parsed.protocol) {
                    return Util.getCurrentHost();
                }
                return parsed;
            };
            Util.compareHost = function (host1, host2) {
                return host1.server !== host2.server || ((host1.port || host2.port) && host1.port !== host2.port);
            };
            Util.getCurrentHost = function () {
                var l = document.location;
                return {
                    protocol: l.protocol,
                    server: l.hostname,
                    port: l.port
                };
            };
            Util.parseUrl = function (url) {
                var parts = /(((http|ws)s?:)\/\/)?([\-\w\.\*]+)+(:(\d+))?(\/([^\?]*(\?\S+)?)?)?/i.exec(url);
                if (parts.length < 6) {
                    throw new icelink.Exception('Invalid URL (' + url + ').');
                }
                return {
                    prefix: parts[1],
                    protocol: parts[2],
                    server: parts[4],
                    postfix: parts[5],
                    port: parts[6],
                    path: parts[7]
                };
            };
            Util.absolutizeUrl = function (url) {
                if (!url) {
                    return url;
                }
                var parsed = Util.parseUrl(url);
                if (parsed.protocol) {
                    if (parsed.server.indexOf('*') === -1) {
                        return url;
                    }
                    url = parsed.prefix + Util.wildcard(parsed.server);
                    if (parsed.postfix) {
                        url += parsed.postfix;
                    }
                    if (parsed.path) {
                        url += parsed.path;
                    }
                    return url;
                }
                var l = document.location;
                var base = l.protocol + '//' + l.host;
                if (url.charAt(0) === '/') {
                    return base + url;
                }
                else {
                    return base + l.pathname.substring(0, l.pathname.lastIndexOf('/') + 1) + url;
                }
            };
            Util.wildcard = function (str) {
                return str.replace('*', Util.getWildcard());
            };
            Util.getWildcard = function () {
                if (Util._wildcard === null) {
                    Util._wildcard = Util.randomChar(Util._chars);
                }
                return Util._wildcard;
            };
            Util.randomChar = function (str) {
                if (!str) {
                    return str;
                }
                return str.charAt(Math.floor(Math.random() * str.length));
            };
            Util.observe = function (element, event, handler) {
                if (element.addEventListener) {
                    element.addEventListener(event, handler, false);
                }
                else if (element.attachEvent) {
                    element.attachEvent('on' + event, handler);
                }
                else {
                    element['on' + event] = handler;
                }
            };
            Util.unobserve = function (element, event, handler) {
                if (element.removeEventListener) {
                    element.removeEventListener(event, handler, false);
                }
                else {
                    element.detachEvent('on' + event, handler);
                }
            };
            Util.observeAttr = function (element, handler) {
                var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                var isDOMAttrModifiedSupported = function () {
                    var p = document.createElement('p');
                    var flag = false;
                    if (p.addEventListener) {
                        p.addEventListener('DOMAttrModified', function () {
                            return flag = true;
                        }, false);
                    }
                    else if (p.attachEvent) {
                        p.attachEvent('onDOMAttrModified', function () {
                            return flag = true;
                        });
                    }
                    else {
                        return false;
                    }
                    p.setAttribute('id', 'target');
                    return flag;
                };
                if (MutationObserver) {
                    var options = {
                        subtree: false,
                        attributes: true
                    };
                    var observer = new MutationObserver(function (mutations, observer) {
                        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
                            var mutation = mutations_1[_i];
                            handler.call(mutation.target, mutation.attributeName);
                        }
                    });
                    observer.observe(element, options);
                }
                else if (isDOMAttrModifiedSupported()) {
                    Util.observe(element, 'DOMAttrModified', function (e) {
                        handler.call(element, e.attrName);
                    });
                }
                else if ('onpropertychange' in document.body) {
                    Util.observe(element, 'propertychange', function (e) {
                        handler.call(element, window.event.propertyName);
                    });
                }
            };
            Util.construct = function (func, args) {
                return (function (func, args, ctor) {
                    ctor.prototype = func.prototype;
                    var child = new ctor, result = func.apply(child, args);
                    return Object(result) === result ? result : child;
                })(func, args, function () { });
            };
            Util.extend = function (dest, src) {
                for (var key in src) {
                    dest[key] = src[key];
                }
                return dest;
            };
            Util.addOnLoad = function (fn) {
                if (Util._readyRun) {
                    window.setTimeout(fn, 1);
                }
                else {
                    Util._loadFunctions.push(fn);
                }
            };
            Util.ready = function () {
                if (Util._readyRun) {
                    return;
                }
                Util._readyRun = true;
                window.setTimeout(function () {
                    for (var _i = 0, _a = Util._loadFunctions; _i < _a.length; _i++) {
                        var loadFunction = _a[_i];
                        loadFunction();
                    }
                }, 1);
            };
            Util.bindReady = function () {
                if (Util._readyBound) {
                    return;
                }
                // the below code is shamelessly stolen from jQuery.
                // awesome work guys!
                Util._readyBound = true;
                if (document.readyState === 'complete') {
                    window.setTimeout(function () {
                        Util.ready();
                    }, 1);
                }
                else if (document.addEventListener) {
                    // Mozilla, Opera, WebKit
                    document.addEventListener("DOMContentLoaded", function () {
                        document.removeEventListener("DOMContentLoaded", arguments.callee, false);
                        Util.ready();
                    }, false);
                    window.addEventListener("load", function () {
                        window.removeEventListener("load", arguments.callee, false);
                        Util.ready();
                    }, false);
                }
                else if (document.attachEvent) {
                    // for good ol' IE...
                    document.attachEvent("onreadystatechange", function () {
                        if (document.readyState === "complete") {
                            document.detachEvent("onreadystatechange", arguments.callee);
                            Util.ready();
                        }
                    });
                    var topLevel = void 0;
                    try {
                        topLevel = window.frameElement === null;
                    }
                    catch (undefined) { }
                    if (document.documentElement.doScroll && topLevel) {
                        (function () {
                            if (Util._loaded) {
                                return;
                            }
                            try {
                                document.documentElement.doScroll("left");
                            }
                            catch (error) {
                                window.setTimeout(arguments.callee, 0);
                                return;
                            }
                            Util.ready();
                        })();
                    }
                }
                else {
                    Util.ready();
                }
            };
            Util.initialize = function () {
                if (!Util.__initialized) {
                    if (!Util._loaded) {
                        Util.addOnLoad(function () {
                            Util._loaded = true;
                        });
                    }
                    Util.bindReady();
                }
                Util.__initialized = true;
            };
            Util._xdCache = {};
            Util._chars = 'abcdefghijklmnopqrstuvwxyz';
            Util._loadFunctions = [];
            Util._wildcard = null;
            Util._readyRun = false;
            Util._readyBound = false;
            Util._loaded = false;
            Util.__initialized = false;
            return Util;
        }());
        icelink.Util = Util;
        Util.initialize(); // static constructor
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="HttpTransfer.ts" />
/// <reference path="Util.ts" />

/// <reference path="HttpTransfer.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var HttpWebRequestTransfer = /** @class */ (function (_super) {
            __extends(HttpWebRequestTransfer, _super);
            function HttpWebRequestTransfer() {
                return _super.call(this) || this;
            }
            HttpWebRequestTransfer.prototype.getTypeString = function () {
                return '[fm.icelink.HttpWebRequestTransfer]' + ',' + _super.prototype.getTypeString.call(this);
            };
            HttpWebRequestTransfer.setDisableCors = function (disableCors) {
                HttpWebRequestTransfer._disableCors = disableCors;
            };
            HttpWebRequestTransfer.getDisableCors = function () {
                return HttpWebRequestTransfer._disableCors || false;
            };
            HttpWebRequestTransfer.setDisablePostMessage = function (disablePostMessage) {
                HttpWebRequestTransfer._disablePostMessage = disablePostMessage;
            };
            HttpWebRequestTransfer.getDisablePostMessage = function () {
                return HttpWebRequestTransfer._disablePostMessage || false;
            };
            HttpWebRequestTransfer.setDisableJsonp = function (disableJsonp) {
                HttpWebRequestTransfer._disableJsonp = disableJsonp;
            };
            HttpWebRequestTransfer.getDisableJsonp = function () {
                return HttpWebRequestTransfer._disableJsonp || false;
            };
            HttpWebRequestTransfer.setForceJsonp = function (forceJsonp) {
                HttpWebRequestTransfer._forceJsonp = forceJsonp;
            };
            HttpWebRequestTransfer.getForceJsonp = function () {
                return HttpWebRequestTransfer._forceJsonp || false;
            };
            HttpWebRequestTransfer.canCors = function () {
                return window.XMLHttpRequest && ('withCredentials' in new XMLHttpRequest());
            };
            HttpWebRequestTransfer.canPostMessage = function () {
                if (icelink.Util.isIE6() || icelink.Util.isIE7()) {
                    return false;
                }
                if (window.postMessage) {
                    return true;
                }
                else {
                    return false;
                }
            };
            HttpWebRequestTransfer.prototype.sendTextAsync = function (requestArgs, callback) {
                var _this = this;
                return icelink.Util.addOnLoad(function () {
                    return _this.process(requestArgs, callback);
                });
            };
            HttpWebRequestTransfer.prototype.sendText = function (requestArgs) {
                return this.process(requestArgs, null);
            };
            HttpWebRequestTransfer.prototype.sendBinaryAsync = function (requestArgs, callback) {
                var _this = this;
                return icelink.Util.addOnLoad(function () {
                    return _this.process(requestArgs, callback);
                });
            };
            HttpWebRequestTransfer.prototype.sendBinary = function (requestArgs) {
                return this.process(requestArgs, null);
            };
            HttpWebRequestTransfer.prototype.process = function (requestArgs, callback) {
                var hwrt = HttpWebRequestTransfer;
                var url = requestArgs.getUrl();
                if (!requestArgs._processed) {
                    url = icelink.Util.absolutizeUrl(url);
                    requestArgs.setUrl(url);
                    requestArgs._processed = true;
                }
                var sender = requestArgs.getSender();
                var disableCors = hwrt.getDisableCors() || (sender ? sender.getDisableCors() : false);
                var disablePostMessage = hwrt.getDisablePostMessage() || (sender ? sender.getDisablePostMessage() : false);
                var disableJsonp = hwrt.getDisableJsonp() || (sender ? sender.getDisableJsonp() : false);
                var forceJsonp = hwrt.getForceJsonp() || (sender ? sender.getForceJsonp() : false);
                var fn = icelink.Xhr.send;
                var cors = false;
                var pm = false;
                if (icelink.Util.isXD(url)) {
                    if (!disableCors && hwrt.canCors() && !hwrt._corsFailCache[url]) {
                        cors = true;
                    }
                    else if (!disablePostMessage && hwrt.canPostMessage() && !hwrt._pmFailCache[url]) {
                        pm = true;
                        fn = icelink.PostMessage.send;
                    }
                    else {
                        fn = icelink.Jsonp.send;
                    }
                    if (disableJsonp && fn === icelink.Jsonp.send) {
                        pm = true;
                        fn = icelink.PostMessage.send;
                    }
                }
                if (forceJsonp) {
                    fn = icelink.Jsonp.send;
                }
                return this.sendInternal(fn, cors, pm, requestArgs, callback);
            };
            HttpWebRequestTransfer.prototype.sendInternal = function (fn, cors, pm, requestArgs, callback) {
                var _this = this;
                var responseArgs = new icelink.HttpResponseArgs(requestArgs);
                responseArgs.setException(new icelink.Exception('Environment does not support synchronous requests.'));
                var url = requestArgs.getUrl();
                var frameUrl = requestArgs.getDynamicProperties()['frameUrl'];
                if (frameUrl && !requestArgs._processedFrame) {
                    frameUrl = icelink.Util.absolutizeUrl(frameUrl);
                    requestArgs.getDynamicProperties()['frameUrl'] = frameUrl;
                    requestArgs._processedFrame = true;
                }
                frameUrl = frameUrl || url;
                var method = 'GET';
                switch (requestArgs.getMethod()) {
                    case icelink.HttpMethod.Head:
                        method = 'HEAD';
                        break;
                    case icelink.HttpMethod.Post:
                        method = 'POST';
                        break;
                    case icelink.HttpMethod.Put:
                        method = 'PUT';
                        break;
                    case icelink.HttpMethod.Patch:
                        method = 'PATCH';
                        break;
                    case icelink.HttpMethod.Delete:
                        method = 'DELETE';
                }
                var options = {
                    sync: (callback ? false : true),
                    url: url,
                    frameUrl: frameUrl,
                    method: method,
                    content: requestArgs.getTextContent(),
                    contentBinary: requestArgs.getBinaryContent(),
                    headers: requestArgs.getHeaders().toHash(),
                    timeout: requestArgs.getTimeout(),
                    robustResponse: true
                };
                options.onRequestCreated = function (request) {
                    var onRequestCreated = requestArgs.getOnRequestCreated();
                    if (onRequestCreated) {
                        var args = new icelink.HttpRequestCreatedArgs();
                        args.setRequestArgs(requestArgs);
                        args.setSender(requestArgs.getSender());
                        args.setRequest(request);
                        onRequestCreated(args);
                        options.content = requestArgs.getTextContent();
                        options.contentBinary = requestArgs.getBinaryContent();
                        options.headers = requestArgs.getHeaders().toHash();
                        options.timeout = requestArgs.getTimeout();
                    }
                    return options;
                };
                options.onResponseReceived = function (response) {
                    var onResponseReceived = requestArgs.getOnResponseReceived();
                    if (onResponseReceived) {
                        var args = new icelink.HttpResponseReceivedArgs();
                        args.setRequestArgs(requestArgs);
                        args.setSender(requestArgs.getSender());
                        args.setResponse(response);
                        onResponseReceived(args);
                    }
                };
                options.onSuccess = function (e) {
                    if (e.statusCode === 0 && cors) {
                        if (!HttpWebRequestTransfer._corsSuccessCache[url]) {
                            HttpWebRequestTransfer._corsFailCache[url] = true;
                        }
                        if (callback) {
                            _this.sendTextAsync(requestArgs, callback);
                        }
                        else {
                            responseArgs = _this.sendText(requestArgs);
                        }
                        return;
                    }
                    else if (cors) {
                        HttpWebRequestTransfer._corsSuccessCache[url] = true;
                        delete HttpWebRequestTransfer._corsFailCache[url];
                    }
                    else if (pm) {
                        HttpWebRequestTransfer._pmSuccessCache[url] = true;
                        delete HttpWebRequestTransfer._pmFailCache[url];
                    }
                    responseArgs.setException(null);
                    responseArgs.setTextContent(e.content);
                    if (e.hasOwnProperty('contentBinary')) {
                        responseArgs.setBinaryContent(e.contentBinary);
                    }
                    responseArgs.setStatusCode(e.statusCode);
                    var headers = responseArgs.getHeaders();
                    for (var headerName in e.headers) {
                        headers.set(headerName, e.headers[headerName]);
                    }
                    if (callback) {
                        callback(responseArgs);
                    }
                };
                options.onFailure = function (e) {
                    if (cors && !HttpWebRequestTransfer._corsSuccessCache[url]) {
                        HttpWebRequestTransfer._corsFailCache[url] = true;
                        if (callback) {
                            _this.sendTextAsync(requestArgs, callback);
                        }
                        else {
                            responseArgs = _this.sendText(requestArgs);
                        }
                        return;
                    }
                    else if (pm && (e.local || !HttpWebRequestTransfer._pmSuccessCache[url])) {
                        HttpWebRequestTransfer._pmFailCache[url] = true;
                        if (callback) {
                            _this.sendTextAsync(requestArgs, callback);
                        }
                        else {
                            responseArgs = _this.sendText(requestArgs);
                        }
                        return;
                    }
                    var exception = new icelink.Exception(e.message);
                    responseArgs.setException(exception);
                    if (callback) {
                        callback(responseArgs);
                    }
                };
                fn(options);
                return responseArgs;
            };
            HttpWebRequestTransfer.prototype.shutdown = function () { };
            HttpWebRequestTransfer._corsFailCache = {};
            HttpWebRequestTransfer._corsSuccessCache = {};
            HttpWebRequestTransfer._pmFailCache = {};
            HttpWebRequestTransfer._pmSuccessCache = {};
            HttpWebRequestTransfer._disableCors = false;
            HttpWebRequestTransfer._disablePostMessage = false;
            HttpWebRequestTransfer._disableJsonp = false;
            HttpWebRequestTransfer._forceJsonp = false;
            HttpWebRequestTransfer.getPlatformCode = function () {
                return 'js';
            };
            return HttpWebRequestTransfer;
        }(icelink.HttpTransfer));
        icelink.HttpWebRequestTransfer = HttpWebRequestTransfer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var InternalConcurrentDictionary = /** @class */ (function () {
            function InternalConcurrentDictionary(hashCallback) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var hashCallback_1 = __arguments[0];
                    this.__hashFunction = hashCallback_1;
                    this.__dict = {};
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            InternalConcurrentDictionary.prototype.getTypeString = function () {
                return '[fm.icelink.InternalConcurrentHashTable]';
            };
            InternalConcurrentDictionary.prototype.getIsEmpty = function () {
                return this.getCount() == 0;
            };
            InternalConcurrentDictionary.prototype.getKeys = function () {
                var array = [];
                var pairs = fm.icelink.HashExtensions.getValues(this.__dict);
                for (var pair in pairs) {
                    array.push(pairs[pair].getItem1());
                }
                return array;
            };
            InternalConcurrentDictionary.prototype.getValues = function () {
                var array = [];
                var pairs = fm.icelink.HashExtensions.getValues(this.__dict);
                for (var pair in pairs) {
                    array.push(pairs[pair].getItem2());
                }
                return array;
            };
            InternalConcurrentDictionary.prototype.getCount = function () {
                return fm.icelink.HashExtensions.getCount(this.__dict);
            };
            InternalConcurrentDictionary.prototype.containsKey = function (key) {
                var hash = this.__hashFunction(key);
                return fm.icelink.HashExtensions.containsKey(this.__dict, hash);
            };
            InternalConcurrentDictionary.prototype.getOrAdd = function (key, valueFactory) {
                var hash = this.__hashFunction(key);
                var holder = new fm.icelink.Holder(null);
                if (fm.icelink.HashExtensions.tryGetValue(this.__dict, hash, holder)) {
                    return holder.getValue().getItem2();
                }
                else {
                    var pair = new fm.icelink.MutablePair(key, valueFactory(key));
                    fm.icelink.HashExtensions.add(this.__dict, hash, pair);
                    return pair.getItem2();
                }
            };
            InternalConcurrentDictionary.prototype.addOrUpdate = function (key, addValue, updateValueFactory) {
                var hash = this.__hashFunction(key);
                var holder = new fm.icelink.Holder(null);
                if (fm.icelink.HashExtensions.tryGetValue(this.__dict, hash, holder)) {
                    var pair = holder.getValue();
                    pair.setItem2(updateValueFactory(key, pair.getItem2()));
                    return pair.getItem2();
                }
                else {
                    var pair = new fm.icelink.MutablePair(key, addValue);
                    fm.icelink.HashExtensions.add(this.__dict, hash, pair);
                    return addValue;
                }
            };
            InternalConcurrentDictionary.prototype.tryAdd = function (key, value) {
                if (arguments.length == 2) {
                    var hash = this.__hashFunction(key);
                    if (fm.icelink.HashExtensions.containsKey(this.__dict, hash)) {
                        return false;
                    }
                    var pair = new fm.icelink.MutablePair(key, value);
                    fm.icelink.HashExtensions.add(this.__dict, hash, pair);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentDictionary.prototype.tryGetValue = function (key, holder) {
                var hash = this.__hashFunction(key);
                var innerHolder = new fm.icelink.Holder(null);
                if (fm.icelink.HashExtensions.tryGetValue(this.__dict, hash, innerHolder)) {
                    holder.setValue(innerHolder.getValue().getItem2());
                    return true;
                }
                else {
                    return false;
                }
            };
            InternalConcurrentDictionary.prototype.tryRemove = function (key, value) {
                if (arguments.length == 2) {
                    var hash = this.__hashFunction(key);
                    var holder = new fm.icelink.Holder(null);
                    if (fm.icelink.HashExtensions.tryGetValue(this.__dict, hash, holder)) {
                        fm.icelink.HashExtensions.remove(this.__dict, hash);
                        return true;
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentDictionary.prototype.tryUpdate = function (key, newValue, comparisonValue) {
                var hash = this.__hashFunction(key);
                var holder = new fm.icelink.Holder(null);
                if (fm.icelink.HashExtensions.tryGetValue(this.__dict, hash, holder)) {
                    var pair = holder.getValue();
                    if (pair.getItem2() === comparisonValue) {
                        pair.setItem2(newValue);
                        return true;
                    }
                }
                return false;
            };
            InternalConcurrentDictionary.prototype.clear = function () {
                fm.icelink.HashExtensions.clear(this.__dict);
            };
            return InternalConcurrentDictionary;
        }());
        icelink.InternalConcurrentDictionary = InternalConcurrentDictionary;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var IntExtensions = /** @class */ (function () {
            function IntExtensions() {
            }
            IntExtensions.prototype.getTypeString = function () {
                return '[fm.icelink.IntExtensions]';
            };
            IntExtensions.toString = function (value, format) {
                return value.toString();
            };
            return IntExtensions;
        }());
        icelink.IntExtensions = IntExtensions;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Provides Json serialize and deserialize methods for all browsers. It will also
         turn strings with form <code>"/Date(xxxxxxxxxx-xxxx)"</code> (Microsoft date serialization format) into actual dates.
         </div>
         */
        var Json = /** @class */ (function () {
            function Json() {
            }
            Json.prototype.getTypeString = function () {
                return '[fm.icelink.Json]';
            };
            Json._reviver = function (key, value) {
                if (value && typeof value === 'string' && Json._dateRegex.test(value)) {
                    var ticksAndZone = value.match(Json._dateRegex)[1];
                    var delim = ticksAndZone.indexOf('-') > -1 ? '-' : '+';
                    var parts = ticksAndZone.split(delim);
                    var ticks = parseInt(parts[0], 10);
                    return new Date(ticks);
                }
                return value;
            };
            Json._buildReviver = function (reviver) {
                var _this = this;
                if (this.useMicrosoftDateFormat) {
                    if (reviver != null) {
                        return function (key, value) {
                            return reviver(key, _this._reviver(key, value));
                        };
                    }
                    else {
                        return this._reviver;
                    }
                }
                else {
                    return reviver;
                }
            };
            Json.deserialize = function () {
                var args = Array.prototype.slice.call(arguments);
                if (args.length === 0 || args[0] === null || args[0] === '') {
                    return null;
                }
                args[1] = Json._buildReviver(args[1]);
                return JSON.parse.apply(Json, args);
            };
            Json.serialize = function () {
                if (Json.useMicrosoftDateFormat) {
                    var dateToJSON = Date.prototype.toJSON;
                    var stringToJSON = String.prototype.toJSON;
                    var numberToJSON = Number.prototype.toJSON;
                    var booleanToJSON = Boolean.prototype.toJSON;
                    Date.prototype.toJSON = Date.prototype.toJSONFM;
                    String.prototype.toJSON = String.prototype.toJSONFM;
                    Number.prototype.toJSON = Number.prototype.toJSONFM;
                    Boolean.prototype.toJSON = Boolean.prototype.toJSONFM;
                    var j = JSON.stringify.apply(Json, arguments);
                    if (j === 'undefined') {
                        throw new icelink.Exception('Cannot serialize undefined to JSON. Try using null instead.');
                    }
                    j = j.replace(/\//g, '\\/');
                    Date.prototype.toJSON = dateToJSON;
                    String.prototype.toJSON = stringToJSON;
                    Number.prototype.toJSON = numberToJSON;
                    Boolean.prototype.toJSON = booleanToJSON;
                    return j;
                }
                return JSON.stringify.apply(Json, arguments);
            };
            Json.useMicrosoftDateFormat = true;
            Json._dateRegex = /^\/Date\((\d+[\-|\+]?\d{0,4})\)\/$/;
            return Json;
        }());
        icelink.Json = Json;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
(function () {
    Date.prototype.toJSONFM = function (key) {
        if (isFinite(this.valueOf())) {
            return '/Date(' + this.getTime() + '-0000)/';
        }
        else {
            return null;
        }
    };
})();
/// <reference path="HttpWebRequestTransfer.ts" />
/// <reference path="Util.ts" />

/// <reference path="HttpWebRequestTransfer.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Jsonp = /** @class */ (function () {
            function Jsonp() {
            }
            Jsonp.prototype.getTypeString = function () {
                return '[fm.icelink.Jsonp]';
            };
            Jsonp.getNextCallback = function (options) {
                var name = 'cb' + (Jsonp._callbackCount++);
                var namespace = 'fm.icelink.Jsonp._cb.';
                Jsonp._cb[name] = function (response) {
                    try {
                        if (options.onResponseReceived) {
                            options.onResponseReceived(null);
                        }
                        if (options.onSuccess) {
                            if (options.robustResponse) {
                                var content = response[options.contentParameterName];
                                if (!content) {
                                    content = '';
                                }
                                else if (typeof content !== 'string') {
                                    content = icelink.Json.serialize(content);
                                }
                                options.onSuccess({
                                    content: content,
                                    contentBinary: null,
                                    statusCode: response[options.statusCodeParameterName] || 200,
                                    headers: response[options.headersParameterName] || {}
                                });
                            }
                            else {
                                var content = response;
                                if (!content) {
                                    content = '';
                                }
                                else if (typeof content !== 'string') {
                                    content = icelink.Json.serialize(content);
                                }
                                options.onSuccess({
                                    content: content,
                                    contentBinary: null,
                                    statusCode: 200,
                                    headers: {}
                                });
                            }
                        }
                    }
                    catch (error) {
                        throw error;
                    }
                    finally {
                        Jsonp.cleanup((options.useFrame ? 'parent.' : '') + namespace + name, options.useFrame);
                    }
                };
                return (options.useFrame ? 'parent.' : '') + namespace + name;
            };
            Jsonp.failureHandler = function (options, callbackName, message) {
                if (options.onFailure) {
                    options.onFailure({
                        message: message,
                        local: false
                    });
                }
                Jsonp.cleanup(callbackName, options.useFrame);
            };
            Jsonp.send = function (options) {
                options = icelink.Util.extend({
                    url: '',
                    method: 'POST',
                    content: null,
                    headers: {},
                    timeout: 15000,
                    canSegmentJsonArray: false,
                    robustResponse: false,
                    callbackParameterName: 'jsonp',
                    contentParameterName: 'content',
                    methodParameterName: 'method',
                    headersParameterName: 'headers',
                    statusCodeParameterName: 'statusCode',
                    cacheBusterParameterName: '_cb',
                    onRequestCreated: null,
                    onResponseReceived: null,
                    onFailure: null,
                    onSuccess: null
                }, options || {});
                options.useFrame = true;
                var callbackName = Jsonp.getNextCallback(options);
                try {
                    if (options.useFrame) {
                        if (!Jsonp._scriptFrameDestroyer) {
                            Jsonp._scriptFrameDestroyer = window.setInterval(function () {
                                if (Jsonp._scriptFrame !== null) {
                                    Jsonp._pastScriptFrames.push(Jsonp._scriptFrame);
                                    Jsonp._scriptFrame = null;
                                    Jsonp._scriptFrameLoaded = false;
                                    if (Jsonp._pastScriptFrames.length === 2) {
                                        var pastScriptFrame = Jsonp._pastScriptFrames[0];
                                        for (var prop in pastScriptFrame) {
                                            delete pastScriptFrame[prop];
                                        }
                                        document.body.removeChild(pastScriptFrame);
                                        Jsonp._pastScriptFrames.splice(0, 1);
                                    }
                                }
                            }, 300000);
                        }
                    }
                    var container = document.getElementsByTagName('head')[0];
                    var script_1;
                    if (options.useFrame) {
                        if (!Jsonp._scriptFrame) {
                            Jsonp._scriptFrame = document.createElement('iframe');
                            Jsonp._scriptFrame.style.display = 'none';
                            Jsonp._scriptFrame.src = 'PLEASE_IGNORE_THIS_404.htm';
                            document.body.appendChild(Jsonp._scriptFrame);
                        }
                        var doc = Jsonp._scriptFrame.contentWindow.document;
                        if (!doc) {
                            throw 'Could not create script frame.';
                        }
                        script_1 = doc.createElement('script');
                    }
                    else {
                        script_1 = document.createElement('script');
                    }
                    script_1.type = 'text/javascript';
                    script_1.charset = 'utf-8';
                    script_1.id = callbackName;
                    var url = options.url;
                    url = icelink.HttpTransfer.addQueryToUrl(url, options.methodParameterName, options.method);
                    url = icelink.HttpTransfer.addQueryToUrl(url, options.headersParameterName, icelink.Json.serialize(options.headers));
                    url = icelink.HttpTransfer.addQueryToUrl(url, options.callbackParameterName, callbackName);
                    url = icelink.HttpTransfer.addQueryToUrl(url, options.cacheBusterParameterName, (new Date()).getTime().toString());
                    url = icelink.HttpTransfer.addQueryToUrl(url, options.contentParameterName, options.content);
                    if (url.length > Jsonp.maxUrlLength) {
                        alert('URL length ' + url.length + ' exceeds maximum for JSON-P (' + Jsonp.maxUrlLength + ').');
                    }
                    script_1.src = url;
                    if (options.onRequestCreated) {
                        options.onRequestCreated(null);
                    }
                    window.setTimeout(function () {
                        if (Jsonp.callbackExists(callbackName)) {
                            Jsonp.failureHandler(options, callbackName, 'JSON-P request timed out.');
                        }
                    }, options.timeout);
                    if (options.useFrame) {
                        if (!Jsonp._scriptFrameLoaded) {
                            icelink.Util.observe(Jsonp._scriptFrame, 'load', function () {
                                window.setTimeout(function () {
                                    try {
                                        var container_1 = Jsonp._scriptFrame.contentWindow.document.body;
                                        container_1.appendChild(script_1);
                                    }
                                    catch (error) {
                                        Jsonp.failureHandler(options, callbackName, 'JSON-P request failed. Could not access script frame.');
                                    }
                                }, 10);
                                Jsonp._scriptFrameLoaded = true;
                            });
                        }
                        else {
                            try {
                                var container_2 = Jsonp._scriptFrame.contentWindow.document.body;
                                container_2.appendChild(script_1);
                            }
                            catch (error) {
                                Jsonp.failureHandler(options, callbackName, 'JSON-P request failed. Could not access script frame.');
                            }
                        }
                    }
                    else {
                        container.appendChild(script_1);
                    }
                }
                catch (error) {
                    Jsonp.failureHandler(options, callbackName, 'JSON-P request failed. ' + (error.message || error.error || error.description || error));
                }
            };
            Jsonp.cleanup = function (callbackName, useFrame) {
                var parts = callbackName.split('.');
                var name = parts[parts.length - 1];
                Jsonp._cb[name] = null;
                delete Jsonp._cb[name];
                try {
                    var script = void 0;
                    if (useFrame) {
                        var scriptFrames = Jsonp._pastScriptFrames.concat([]);
                        if (Jsonp._scriptFrame !== null) {
                            scriptFrames.push(Jsonp._scriptFrame);
                        }
                        var doc = void 0;
                        for (var i = scriptFrames.length - 1; i >= 0; i--) {
                            doc = scriptFrames[i].contentWindow.document;
                            if (doc) {
                                script = doc.getElementById(callbackName);
                            }
                            if (script) {
                                break;
                            }
                        }
                        if (script) {
                            doc.body.removeChild(script);
                        }
                    }
                    else {
                        script = document.getElementById(callbackName);
                        if (script) {
                            document.getElementsByTagName('head')[0].removeChild(script);
                        }
                    }
                }
                catch (error) {
                    icelink.Log.error('Could not remove script element.', error);
                }
            };
            Jsonp.callbackExists = function (callbackName) {
                var parts = callbackName.split('.');
                var name = parts[parts.length - 1];
                return icelink.HashExtensions.containsKey(Jsonp._cb, name);
            };
            ;
            Jsonp.maxUrlLength = 2048;
            Jsonp._scriptFrame = null;
            Jsonp._scriptFrameLoaded = false;
            Jsonp._callbackCount = 0;
            Jsonp._cb = {};
            Jsonp._pastScriptFrames = [];
            Jsonp._scriptFrameDestroyer = 0;
            return Jsonp;
        }());
        icelink.Jsonp = Jsonp;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A message authentication code (MAC) context.
         </div>
    
        */
        var MacContextBase = /** @class */ (function () {
            /**<span id='method-fm.icelink.MacContextBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.macContextBase` class.
             </div>
    
            @param {fm.icelink.MacType} type The type.
            @return {}
            */
            function MacContextBase(type) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var type_2 = __arguments[0];
                    //super();
                    this.setType(type_2);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MacContextBase.prototype.getTypeString = function () {
                return '[fm.icelink.MacContextBase]';
            };
            /**<span id='method-fm.icelink.MacContextBase-compute'>&nbsp;</span>**/
            /**
             <div>
             Computes the message authentication code (MAC) for a given type.
             </div>
    
            @param {fm.icelink.MacType} type The type.
            @param {fm.icelink.DataBuffer} key The key.
            @param {fm.icelink.DataBuffer} input The input.
            @return {fm.icelink.DataBuffer}
            */
            MacContextBase.compute = function (type, key, input) {
                if (arguments.length == 3) {
                    var context = new fm.icelink.MacContext(type, key);
                    var buffer = context.compute(input);
                    context.destroy();
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MacContextBase-compute'>&nbsp;</span>**/
            /**
             <div>
             Computes the message authentication code (MAC).
             </div>
    
            @param {fm.icelink.DataBuffer} input The input.
            @return {fm.icelink.DataBuffer}
            */
            MacContextBase.prototype.compute = function (input) {
                if (arguments.length == 1) {
                    return this.doCompute(input);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MacContextBase-destroy'>&nbsp;</span>**/
            /**
             <div>
             Destroys this instance.
             </div>
    
    
            @return {void}
            */
            MacContextBase.prototype.destroy = function () {
                if (arguments.length == 0) {
                    this.doDestroy();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MacContextBase-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.MacType}
            */
            MacContextBase.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MacContextBase.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MacContextBase;
        }());
        icelink.MacContextBase = MacContextBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MacContextBase.ts" />

/// <reference path="MacContextBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var MacContext = /** @class */ (function (_super) {
            __extends(MacContext, _super);
            function MacContext(type, key) {
                var _this = _super.call(this, type) || this;
                _this._key = key;
                return _this;
            }
            MacContext.prototype.getTypeString = function () {
                return '[fm.icelink.MacContext]';
            };
            MacContext.prototype.doCompute = function (input) {
                if (this.getType() == icelink.MacType.HmacMd5) {
                    return null;
                }
                else if (this.getType() == icelink.MacType.HmacSha1) {
                    return null;
                }
                else if (this.getType() == icelink.MacType.HmacSha256) {
                    var hmac = new icelink.HmacSha256(this._key.getData());
                    hmac.update(input.getData());
                    var digest = hmac.digest();
                    hmac.clean();
                    return icelink.DataBuffer.wrap(digest);
                }
                throw new icelink.Exception('Unknown MAC type.');
            };
            MacContext.prototype.doDestroy = function () { };
            return MacContext;
        }(icelink.MacContextBase));
        icelink.MacContext = MacContext;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ManagedStopwatch = /** @class */ (function () {
            function ManagedStopwatch() {
                this.startTime = 0;
                this.stopTime = 0;
            }
            ManagedStopwatch.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedStopwatch]';
            };
            ManagedStopwatch.dispatch = function (action) {
                window.setTimeout(function () {
                    action();
                }, 1);
            };
            ManagedStopwatch.getTimestamp = function () {
                return (new Date().getTime()) * icelink.Constants.getTicksPerMillisecond();
            };
            ManagedStopwatch.prototype.getElapsedTicks = function () {
                return this.getElapsedMilliseconds() * icelink.Constants.getTicksPerMillisecond();
            };
            ManagedStopwatch.prototype.getElapsedMilliseconds = function () {
                if (this.startTime == 0) {
                    return 0;
                }
                if (this.stopTime == 0) {
                    return ((new Date().getTime()) - this.startTime);
                }
                return (this.stopTime - this.startTime);
            };
            ManagedStopwatch.prototype.start = function () {
                this.startTime = (new Date().getTime());
                this.stopTime = 0;
            };
            ManagedStopwatch.prototype.stop = function () {
                this.stopTime = (new Date().getTime());
            };
            ManagedStopwatch.prototype.restart = function () {
                this.start();
            };
            return ManagedStopwatch;
        }());
        icelink.ManagedStopwatch = ManagedStopwatch;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ManagedThread = /** @class */ (function () {
            function ManagedThread() {
            }
            ManagedThread.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedThread]';
            };
            ManagedThread.getCurrentThreadId = function () {
                return 1;
            };
            ManagedThread.dispatch = function (action) {
                window.setTimeout(function () {
                    action();
                }, 1);
            };
            return ManagedThread;
        }());
        icelink.ManagedThread = ManagedThread;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var MathAssistant = /** @class */ (function () {
            function MathAssistant() {
            }
            MathAssistant.prototype.getTypeString = function () {
                return '[fm.icelink.MathAssistant]';
            };
            MathAssistant.getPi = function () {
                return Math.PI;
            };
            MathAssistant.getE = function () {
                return Math.E;
            };
            MathAssistant.abs = function (val) {
                return Math.abs(val);
            };
            MathAssistant.acos = function (val) {
                return Math.acos(val);
            };
            MathAssistant.asin = function (val) {
                return Math.asin(val);
            };
            MathAssistant.atan = function (val) {
                return Math.atan(val);
            };
            MathAssistant.atan2 = function (y, x) {
                return Math.atan2(y, x);
            };
            MathAssistant.ceil = function (val) {
                return Math.ceil(val);
            };
            MathAssistant.cos = function (val) {
                return Math.cos(val);
            };
            MathAssistant.cosh = function (val) {
                return (Math.exp(val) + Math.exp(-val)) / 2;
            };
            MathAssistant.exp = function (val) {
                return Math.exp(val);
            };
            MathAssistant.floor = function (val) {
                return Math.floor(val);
            };
            MathAssistant.log = function (val) {
                return Math.log(val);
            };
            MathAssistant.log10 = function (val) {
                return Math.log(val) / Math.LN10;
            };
            MathAssistant.max = function (val1, val2) {
                return Math.max(val1, val2);
            };
            MathAssistant.min = function (val1, val2) {
                return Math.min(val1, val2);
            };
            MathAssistant.pow = function (x, y) {
                return Math.pow(x, y);
            };
            MathAssistant.round = function (value) {
                return Math.round(value);
            };
            MathAssistant.sin = function (val) {
                return Math.sin(val);
            };
            MathAssistant.sinh = function (val) {
                return (Math.exp(val) - Math.exp(-val)) / 2;
            };
            MathAssistant.sqrt = function (val) {
                return Math.sqrt(val);
            };
            MathAssistant.tan = function (val) {
                return Math.tan(val);
            };
            MathAssistant.tanh = function (val) {
                return (Math.exp(val) - Math.exp(-val)) / (Math.exp(val) + Math.exp(-val));
            };
            return MathAssistant;
        }());
        icelink.MathAssistant = MathAssistant;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var NameValueCollection = /** @class */ (function () {
            function NameValueCollection(value) {
                this.source = function () {
                    return this._value;
                };
                this._value = {};
                if (typeof value !== 'undefined') {
                    for (var n in value) {
                        this._value[n] = value[n];
                    }
                }
            }
            NameValueCollection.prototype.getTypeString = function () {
                return '[fm.icelink.NameValueCollection]';
            };
            NameValueCollection.prototype.get = function (name) {
                for (var n in this._value) {
                    if (n.toLowerCase() === name.toLowerCase()) {
                        return this._value[n];
                    }
                }
                return null;
            };
            NameValueCollection.prototype.set = function (name, value) {
                for (var n in this._value) {
                    if (n.toLowerCase() === name.toLowerCase()) {
                        this._value[n] = value;
                        return;
                    }
                }
                this._value[name] = value;
            };
            NameValueCollection.prototype.getCount = function () {
                var i = 0;
                for (var n in this._value) {
                    i++;
                }
                return i;
            };
            NameValueCollection.prototype.toHash = function () {
                return this._value;
            };
            NameValueCollection.prototype.getKeys = function () {
                return this.getAllKeys();
            };
            NameValueCollection.prototype.getAllKeys = function () {
                var keys = [];
                for (var k in this._value) {
                    keys.push(k);
                }
                return keys;
            };
            return NameValueCollection;
        }());
        icelink.NameValueCollection = NameValueCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ObjectExtensions = /** @class */ (function () {
            function ObjectExtensions() {
            }
            ObjectExtensions.prototype.getTypeString = function () {
                return '[fm.icelink.ObjectExtensions]';
            };
            ObjectExtensions.getType = function (obj) {
                return new icelink.Type(obj.getTypeString());
            };
            ObjectExtensions.getHashCode = function (obj) {
                if (typeof obj.getHashCode === 'function') {
                    return obj.getHashCode();
                }
                else if (fm.icelink.Util.isString(obj)) {
                    return fm.icelink.StringExtensions.getHashCode(obj);
                }
                else {
                    return fm.icelink.StringExtensions.getHashCode(JSON.stringify(obj));
                }
            };
            return ObjectExtensions;
        }());
        icelink.ObjectExtensions = ObjectExtensions;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ParseAssistant = /** @class */ (function () {
            function ParseAssistant() {
            }
            ParseAssistant.prototype.getTypeString = function () {
                return '[fm.icelink.ParseAssistant]';
            };
            ParseAssistant.parseByteValue = function (s) {
                return parseInt(s);
            };
            ParseAssistant.parseShortValue = function (s) {
                return parseInt(s);
            };
            ParseAssistant.parseIntegerValue = function (s) {
                return parseInt(s);
            };
            ParseAssistant.parseLongValue = function (s) {
                return parseInt(s);
            };
            ParseAssistant.parseFloatValue = function (s) {
                return parseFloat(s);
            };
            ParseAssistant.parseDoubleValue = function (s) {
                return parseFloat(s);
            };
            ParseAssistant.parseDecimalValue = function (s) {
                return parseFloat(s);
            };
            ParseAssistant.parseBooleanValue = function (s) {
                if (s.toLowerCase() === "true" || s.toLowerCase() === "y" || s === "1") {
                    return true;
                }
                else {
                    return false;
                }
            };
            ParseAssistant.parseGuidValue = function (s) {
                return new icelink.Guid(s);
            };
            ParseAssistant.tryParseByteValue = function (s, h) {
                if (isNaN(parseInt(s))) {
                    return false;
                }
                h.setValue(parseInt(s));
                return true;
            };
            ParseAssistant.tryParseShortValue = function (s, h) {
                if (isNaN(parseInt(s))) {
                    return false;
                }
                h.setValue(parseInt(s));
                return true;
            };
            ParseAssistant.tryParseIntegerValue = function (s, h) {
                if (isNaN(parseInt(s))) {
                    return false;
                }
                h.setValue(parseInt(s));
                return true;
            };
            ParseAssistant.tryParseLongValue = function (s, h) {
                if (isNaN(parseInt(s))) {
                    return false;
                }
                h.setValue(parseInt(s));
                return true;
            };
            ParseAssistant.tryParseFloatValue = function (s, h) {
                if (isNaN(parseFloat(s))) {
                    return false;
                }
                h.setValue(parseFloat(s));
                return true;
            };
            ParseAssistant.tryParseDoubleValue = function (s, h) {
                if (isNaN(parseFloat(s))) {
                    return false;
                }
                h.setValue(parseFloat(s));
                return true;
            };
            ParseAssistant.tryParseDecimalValue = function (s, h) {
                if (isNaN(parseFloat(s))) {
                    return false;
                }
                h.setValue(parseFloat(s));
                return true;
            };
            ParseAssistant.tryParseBooleanValue = function (s, h) {
                if (s.toLowerCase() === "true" || s.toLowerCase() === "y" || s === "1") {
                    h.setValue(true);
                }
                else {
                    h.setValue(false);
                }
                return true;
            };
            ParseAssistant.tryParseGuidValue = function (s, h) {
                if (!(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/i.test(s))) {
                    return false;
                }
                h.setValue(new icelink.Guid(s));
                return true;
            };
            return ParseAssistant;
        }());
        icelink.ParseAssistant = ParseAssistant;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="IPlatform.ts" />

/// <reference path="IPlatform.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Platform = /** @class */ (function () {
            function Platform() {
                this.littleEndianChecked = false;
                this.isLittleEndian = false;
                this.isMobile = false;
                var check = false;
                // http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
                (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                    check = true; })(navigator.userAgent || navigator.vendor || window.opera);
                this.isMobile = check;
            }
            Platform.getInstance = function () {
                return Platform.instance;
            };
            Platform.prototype.getIsMobile = function () {
                return this.isMobile;
            };
            Platform.prototype.setIsMobile = function (isMobile) {
                this.isMobile = isMobile;
            };
            Platform.prototype.getIsLittleEndian = function () {
                // http://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness
                if (!this.littleEndianChecked) {
                    this.littleEndianChecked = true;
                    var a = new ArrayBuffer(4);
                    var b = new Uint8Array(a);
                    var c = new Uint32Array(a);
                    b[0] = 0xa1;
                    b[1] = 0xb2;
                    b[2] = 0xc3;
                    b[3] = 0xd4;
                    this.isLittleEndian = (c[0] == 0xd4c3b2a1);
                }
                return this.isLittleEndian;
            };
            Platform.prototype.getOperatingSystem = function () {
                //TODO
                return icelink.OperatingSystem.Unknown;
            };
            Platform.prototype.getArchitecture = function () {
                //TODO
                return icelink.Architecture.Unknown;
            };
            Platform.prototype.getSourceLanguage = function () {
                //TODO
                return icelink.SourceLanguage.TypeScript;
            };
            Platform.prototype.getDirectorySeparator = function () {
                return '/';
            };
            Platform.prototype.getProcessId = function () {
                return 1;
            };
            Platform.instance = new Platform();
            return Platform;
        }());
        icelink.Platform = Platform;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="HttpWebRequestTransfer.ts" />
/// <reference path="Util.ts" />

/// <reference path="HttpWebRequestTransfer.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Xhr = /** @class */ (function () {
            function Xhr() {
            }
            Xhr.prototype.getTypeString = function () {
                return '[fm.icelink.Xhr]';
            };
            Xhr.setDisableBinary = function (disableBinary) {
                Xhr._disableBinary = disableBinary;
            };
            Xhr.getDisableBinary = function () {
                if (typeof Uint8Array === 'undefined') {
                    return true;
                }
                return Xhr._disableBinary;
            };
            Xhr.setDefaultWithCredentials = function (defaultWithCredentials) {
                Xhr._defaultWithCredentials = defaultWithCredentials;
            };
            Xhr.getDefaultWithCredentials = function () {
                return Xhr._defaultWithCredentials;
            };
            Xhr.failureHandler = function (options, message) {
                if (options.onFailure) {
                    return options.onFailure({
                        message: message,
                        local: false
                    });
                }
            };
            Xhr.successHandler = function (options, x) {
                if (options.onSuccess) {
                    var headers = {};
                    var headerString = x.getAllResponseHeaders();
                    if (headerString) {
                        for (var _i = 0, _a = headerString.split(/\r?\n/); _i < _a.length; _i++) {
                            var line = _a[_i];
                            var parts = line.split(':');
                            if (parts.length !== 2) {
                                continue;
                            }
                            var name_1 = parts[0].replace(/\s+$/, '');
                            var value = parts[1].replace(/^\s+/, '');
                            headers[name_1] = value;
                        }
                    }
                    var content = null;
                    var contentBinary = null;
                    var receivedBinary = false;
                    if (!Xhr.getDisableBinary()) {
                        try {
                            if (x.responseType === 'arraybuffer' && x.response) {
                                contentBinary = new Uint8Array(x.response);
                                if (headers['Content-Type'] !== 'application/octet-stream') {
                                    content = icelink.Encoding.getUtf8().getString(contentBinary);
                                }
                                receivedBinary = true;
                            }
                        }
                        catch (error) {
                            Xhr.setDisableBinary(true);
                        }
                    }
                    if (!receivedBinary) {
                        content = x.responseText;
                    }
                    return options.onSuccess({
                        content: content,
                        contentBinary: contentBinary,
                        statusCode: x.status,
                        headers: headers
                    });
                }
            };
            Xhr.handler = function (options, x) {
                if (x._aborting) {
                    return Xhr.failureHandler(options, 'XHR request timed out.');
                }
                else {
                    if (options.onResponseReceived) {
                        options.onResponseReceived(x);
                    }
                    return Xhr.successHandler(options, x);
                }
            };
            Xhr.send = function (options) {
                options = icelink.Util.extend({
                    sync: false,
                    url: '',
                    method: 'POST',
                    content: null,
                    contentBinary: null,
                    headers: {},
                    timeout: 15000,
                    abortOnUnload: false,
                    cacheBusterParameterName: '_cb',
                    onRequestCreated: null,
                    onResponseReceived: null,
                    onFailure: null,
                    onSuccess: null
                }, options || {});
                try {
                    var x_1;
                    if (window.XMLHttpRequest) {
                        x_1 = new XMLHttpRequest();
                    }
                    else {
                        try {
                            x_1 = new ActiveXObject('MSXML2.XMLHTTP.3.0');
                        }
                        catch (undefined) { }
                        if (!x_1) {
                            try {
                                x_1 = new ActiveXObject('Microsoft.XMLHTTP');
                            }
                            catch (undefined) { }
                        }
                    }
                    if (!x_1) {
                        return false;
                    }
                    var url = options.url;
                    if (options.method === 'GET') {
                        url = url + (url.indexOf('?') === -1 ? '?' : '&') + options.cacheBusterParameterName + '=' + (new Date()).getTime();
                    }
                    x_1.open(options.method, url, !options.sync);
                    if (Xhr.getDisableBinary()) {
                        x_1.setRequestHeader('X-FM-DisableBinary', 'true');
                    }
                    if ('withCredentials' in x_1) {
                        x_1.withCredentials = Xhr._defaultWithCredentials;
                    }
                    if (!Xhr.getDisableBinary() && !options.sync) {
                        try {
                            x_1.responseType = 'arraybuffer';
                        }
                        catch (error) {
                            Xhr.setDisableBinary(true);
                        }
                    }
                    if (options.onRequestCreated) {
                        options = options.onRequestCreated(x_1);
                    }
                    var useDefaultContentType = true;
                    for (var name_2 in options.headers) {
                        var value = options.headers[name_2];
                        if (name_2.toLowerCase() !== 'referer' && name_2.toLowerCase() !== 'origin') {
                            if (name_2.toLowerCase() === 'content-type') {
                                useDefaultContentType = false;
                            }
                            x_1.setRequestHeader(name_2, value);
                        }
                    }
                    var c_1;
                    if (options.abortOnUnload) {
                        c_1 = ++Xhr._count;
                        Xhr._current[c_1] = x_1;
                    }
                    var xhrTimeout_1;
                    if (!options.sync) {
                        x_1.onreadystatechange = function () {
                            if (x_1.readyState > 3 && !x_1._abortingOnUnload) {
                                clearTimeout(xhrTimeout_1);
                                try {
                                    x_1.onreadystatechange = null;
                                }
                                catch (error) {
                                    x_1.onreadystatechange = function () { };
                                }
                                if (x_1.status > 0) {
                                    Xhr.handler(options, x_1);
                                }
                                else {
                                    Xhr.failureHandler(options, 'Invalid XHR response.');
                                }
                                if (options.abortOnUnload) {
                                    return delete Xhr._current[c_1];
                                }
                            }
                        };
                    }
                    var sentBinary = false;
                    if (!Xhr.getDisableBinary() && options.contentBinary) {
                        try {
                            x_1.send(options.contentBinary.buffer);
                            sentBinary = true;
                        }
                        catch (error) {
                            try {
                                x_1.send(options.contentBinary);
                                sentBinary = true;
                            }
                            catch (error) {
                                Xhr.setDisableBinary(true);
                            }
                        }
                    }
                    if (!sentBinary) {
                        if (options.content) {
                            if (useDefaultContentType) {
                                x_1.setRequestHeader('Content-Type', 'application/json');
                            }
                            x_1.send(options.content);
                        }
                        else {
                            x_1.send();
                        }
                    }
                    xhrTimeout_1 = window.setTimeout(function () {
                        try {
                            x_1._aborting = true;
                            x_1.abort();
                        }
                        catch (undefined) { }
                    }, options.timeout);
                    if (options.sync) {
                        Xhr.handler(options, x_1);
                        if (options.abortOnUnload) {
                            delete Xhr._current[c_1];
                        }
                    }
                    return true;
                }
                catch (error) {
                    Xhr.failureHandler(options, 'XHR request failed. ' + (error.message || error.error || error.description || error));
                    return false;
                }
            };
            Xhr.initialize = function () {
                if (!Xhr.__initialized) {
                    icelink.Util.observe(window, 'unload', function () {
                        for (var c in Xhr._current) {
                            var x = Xhr._current[c];
                            try {
                                x._abortingOnUnload = true;
                                x.abort();
                            }
                            catch (undefined) { }
                        }
                    });
                }
                Xhr.__initialized = true;
            };
            Xhr._count = 0;
            Xhr._current = {};
            Xhr._disableBinary = false;
            Xhr._defaultWithCredentials = true;
            Xhr.__initialized = false;
            return Xhr;
        }());
        icelink.Xhr = Xhr;
        Xhr.initialize(); // static constructor
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Xhr.ts" />
/// <reference path="Util.ts" />

/// <reference path="Xhr.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PostMessage = /** @class */ (function () {
            function PostMessage() {
            }
            PostMessage.prototype.getTypeString = function () {
                return '[fm.icelink.PostMessage]';
            };
            PostMessage.getOrigin = function (url) {
                return /\w+:\/\/[^\/]+/.exec(url)[0];
            };
            ;
            PostMessage.createFrame = function (options, callback) {
                var record = PostMessage._cache[options.frameUrl];
                if (!record) {
                    var frame_1 = document.createElement('iframe');
                    frame_1.style.display = 'none';
                    document.body.appendChild(frame_1);
                    var callbacks_1 = [callback];
                    frame_1.loading = true;
                    PostMessage._cache[options.frameUrl] = record = {
                        frame: frame_1,
                        callbacks: callbacks_1
                    };
                    var loadTimeout_1 = window.setTimeout(function () {
                        frame_1.loading = false;
                        frame_1.loaded = false;
                        frame_1.timedOut = true;
                        while (callbacks_1.length > 0) {
                            callbacks_1.shift()(null, 'Frame load timed out.');
                        }
                    }, options.timeout);
                    icelink.Util.observe(frame_1, 'load', function () {
                        if (frame_1.timedOut) {
                            return;
                        }
                        clearTimeout(loadTimeout_1);
                        var receivePong = function (e) {
                            if (e.source === frame_1.contentWindow && e.data === 'pong') {
                                if (frame_1.timedOut) {
                                    return;
                                }
                                clearTimeout(pongTimeout);
                                frame_1.loading = false;
                                frame_1.loaded = true;
                                frame_1.timedOut = false;
                                PostMessage.listen(options, frame_1);
                                while (callbacks_1.length > 0) {
                                    callbacks_1.shift()(frame_1, null);
                                }
                                return icelink.Util.unobserve(window, 'message', receivePong);
                            }
                        };
                        var pongTimeout = window.setTimeout(function () {
                            frame_1.loading = false;
                            frame_1.loaded = false;
                            frame_1.timedOut = true;
                            while (callbacks_1.length > 0) {
                                callbacks_1.shift()(null, 'Frame pong timed out.');
                            }
                            if (receivePong) {
                                return icelink.Util.unobserve(window, 'message', receivePong);
                            }
                        }, 500);
                        icelink.Util.observe(window, 'message', receivePong);
                        frame_1.contentWindow.postMessage('ping', PostMessage.getOrigin(options.url));
                    });
                    frame_1.src = icelink.HttpTransfer.addQueryToUrl(options.frameUrl, 'type', 'pmf');
                }
                else {
                    if (record.frame.loading) {
                        record.callbacks.push(callback);
                    }
                    else {
                        window.setTimeout(function () {
                            if (record.frame.loaded) {
                                callback(record.frame, null);
                            }
                            else {
                                callback(null, 'Frame not loaded.');
                            }
                        }, 1);
                    }
                }
            };
            PostMessage.send = function (options) {
                options = icelink.Util.extend({
                    url: '',
                    onFailure: null,
                    onSuccess: null,
                    onRequestCreated: null,
                    onResponseReceived: null
                }, options || {});
                options.contentBinary = null;
                PostMessage.createFrame(options, function (frame, error) {
                    if (frame) {
                        options.id = ++PostMessage._optionsCounter;
                        PostMessage._optionsCache[options.id] = options;
                        return frame.contentWindow.postMessage(icelink.Json.serialize(options), PostMessage.getOrigin(options.url));
                    }
                    else {
                        if (options.onFailure) {
                            var message = 'Could not initialize postMessage frame.';
                            if (error) {
                                message += ' ' + error;
                            }
                            return options.onFailure({
                                message: message,
                                local: true
                            });
                        }
                    }
                });
            };
            PostMessage.listen = function (options, frame) {
                icelink.Util.observe(window, 'message', function (e) {
                    if (e.source === frame.contentWindow) {
                        try {
                            e = icelink.Json.deserialize(e.data);
                        }
                        catch (error) {
                            return;
                        }
                        if (!e.id) {
                            return;
                        }
                        options = PostMessage._optionsCache[e.id];
                        if (!options) {
                            return;
                        }
                        if (e.type === 1 || e.type === 2) {
                            delete PostMessage._optionsCache[e.id];
                        }
                        if (e.type === 1) {
                            if (options.onFailure) {
                                options.onFailure(e);
                            }
                        }
                        else if (e.type === 2) {
                            if (options.onSuccess) {
                                options.onSuccess(e);
                            }
                        }
                        else if (e.type === 3) {
                            if (options.onRequestCreated) {
                                options.onRequestCreated(null);
                            }
                        }
                        else if (e.type === 4) {
                            if (options.onResponseReceived) {
                                options.onResponseReceived(null);
                            }
                        }
                    }
                });
            };
            PostMessage._cache = {};
            PostMessage._optionsCounter = 0;
            PostMessage._optionsCache = {};
            return PostMessage;
        }());
        icelink.PostMessage = PostMessage;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Future.ts" />

/// <reference path="Future.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Promise base properties/methods.
         </div><typeparam name="T">The type of the result.</typeparam>
    
        */
        var PromiseBase = /** @class */ (function (_super) {
            __extends(PromiseBase, _super);
            /**<span id='method-fm.icelink.PromiseBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.promiseBase` class.
             </div>
    
    
            @return {}
            */
            function PromiseBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                    _this.__stateLock = new Object();
                    _this.__pendingPromisesToResolve = new Array();
                    _this.__pendingPromisesToReject = new Array();
                    _this.__pendingResolves = new Array();
                    _this.__pendingRejects = new Array();
                    _super.prototype.setState.call(_this, fm.icelink.FutureState.Pending);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            PromiseBase.prototype.getTypeString = function () {
                return '[fm.icelink.PromiseBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.PromiseBase-all'>&nbsp;</span>**/
            /**
             <div>
             Returns a promise that resolves when all passed in promises resolve.
             </div>
    
            @param {fm.icelink.Future<R>[]} promises The promises to check.
            @return {fm.icelink.Future<R>}
            */
            PromiseBase.all = function (promises) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    if (((fm.icelink.Global.equals(promises, null)) || (fm.icelink.Global.equals(promises.length, 0)))) {
                        promise.resolve(null);
                        return promise;
                    }
                    var counter = new fm.icelink.AtomicInteger(promises.length);
                    promise.doAll(promises, counter);
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-rejectNow'>&nbsp;</span>**/
            /**
             <div>
             Creates a promise and rejects it immediately.
             </div>
    
            @param {fm.icelink.Exception} ex The exception.
            @return {fm.icelink.Future<R>}
            */
            PromiseBase.rejectNow = function (ex) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    promise.reject(ex);
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            PromiseBase.resolveNow = function () {
                if (arguments.length == 0) {
                    return fm.icelink.PromiseBase.resolveNow(null);
                }
                else if (arguments.length == 1) {
                    var result = arguments[0];
                    var promise = new fm.icelink.Promise();
                    promise.resolve(result);
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-wrapPromise'>&nbsp;</span>**/
            /**
             <div>
             Creates a promise and resolves it using the result from a
             callback function, or rejects it if an exception is thrown.
             </div>
    
            @param {fm.icelink.IFunction0<fm.icelink.Future<R>>} callback The callback function.
            @return {fm.icelink.Future<R>}
            */
            PromiseBase.wrapPromise = function (callback) {
                if (arguments.length == 1) {
                    try {
                        if ((fm.icelink.Global.equals(callback, null))) {
                            throw new fm.icelink.Exception("callback cannot be null.");
                        }
                        return callback();
                    }
                    catch (exception) {
                        return fm.icelink.PromiseBase.rejectNow(exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.addReject = function (promise, reject) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(this.__pendingPromisesToReject, null))) {
                        this.__pendingPromisesToReject = new Array();
                    }
                    if ((fm.icelink.Global.equals(this.__pendingRejects, null))) {
                        this.__pendingRejects = new Array();
                    }
                    fm.icelink.ArrayExtensions.add(this.__pendingPromisesToReject, promise);
                    fm.icelink.ArrayExtensions.add(this.__pendingRejects, reject);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.addResolve = function (promise, resolve) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(this.__pendingPromisesToResolve, null))) {
                        this.__pendingPromisesToResolve = new Array();
                    }
                    if ((fm.icelink.Global.equals(this.__pendingResolves, null))) {
                        this.__pendingResolves = new Array();
                    }
                    fm.icelink.ArrayExtensions.add(this.__pendingPromisesToResolve, promise);
                    fm.icelink.ArrayExtensions.add(this.__pendingResolves, resolve);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-doAll'>&nbsp;</span>**/
            /**
             <div>
             Internal DoAll.
             </div>
    
    
            @param {fm.icelink.Future<R>[]} promises
            @param {fm.icelink.AtomicInteger} counter
            @return {void}
            */
            PromiseBase.prototype.doAll = function (promises, counter) {
                var _this = this;
                if (arguments.length == 2) {
                    var resolveAction = null;
                    var rejectAction = null;
                    for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {
                        var future = promises_1[_i];
                        if ((fm.icelink.Global.equals(resolveAction, null))) {
                            resolveAction = function (result) {
                                if ((fm.icelink.Global.equals(counter.decrement(), 0))) {
                                    _this.resolve(null);
                                }
                            };
                        }
                        if ((fm.icelink.Global.equals(rejectAction, null))) {
                            rejectAction = function (ex) {
                                _this.reject(ex);
                            };
                        }
                        future.then(resolveAction, rejectAction);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.doRejectAsync = function (promise, exception) {
                var _this = this;
                if (arguments.length == 2) {
                    fm.icelink.ManagedThread.dispatch(function () {
                        if (_this.reject(exception)) {
                            promise.resolve(null);
                        }
                        else {
                            promise.reject(new fm.icelink.Exception("Promise was already fulfilled."));
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.doResolveAsync = function (promise, result) {
                var _this = this;
                if (arguments.length == 2) {
                    fm.icelink.ManagedThread.dispatch(function () {
                        if (_this.resolve(result)) {
                            promise.resolve(null);
                        }
                        else {
                            promise.reject(new fm.icelink.Exception("Promise was already fulfilled."));
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier of this promise.
             </div>
    
    
            @return {string}
            */
            PromiseBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-process'>&nbsp;</span>**/
            /**
             <div>
             Processes the specified promise.
             </div>
    
            @param {fm.icelink.IPromise} promise The promise.
            @param {fm.icelink.IAction1<T>} resolve The resolve.
            @param {fm.icelink.IAction1<fm.icelink.Exception>} reject The reject.
            @return {void}
            */
            PromiseBase.prototype.process = function (promise, resolve, reject) {
                if (arguments.length == 3) {
                    if ((fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.FutureState.Resolved))) {
                        this.raiseResolve(resolve, _super.prototype.getResult.call(this), promise);
                    }
                    else {
                        if ((fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.FutureState.Rejected))) {
                            this.raiseReject(reject, _super.prototype.getException.call(this), promise);
                        }
                        else {
                            this.addResolve(promise, resolve);
                            this.addReject(promise, reject);
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.raiseReject = function (callback, exception, promise) {
                if (arguments.length == 3) {
                    try {
                        callback(exception);
                    }
                    catch (exception2) {
                        fm.icelink.Log.error("Could not reject promise. Promise rejection callback threw an unhandled exception.", exception2);
                        promise.reject(exception2);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.raiseRejects = function (exception) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__pendingRejects, null))) {
                        for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__pendingRejects)); i++) {
                            this.raiseReject(this.__pendingRejects[i], exception, this.__pendingPromisesToReject[i]);
                        }
                    }
                    this.reset();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.raiseResolve = function (callback, result, promise) {
                if (arguments.length == 3) {
                    try {
                        callback(result);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not resolve promise. Promise resolution callback threw an unhandled exception.", exception);
                        promise.reject(exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.raiseResolves = function (result) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__pendingResolves, null))) {
                        for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__pendingResolves)); i++) {
                            this.raiseResolve(this.__pendingResolves[i], result, this.__pendingPromisesToResolve[i]);
                        }
                    }
                    this.reset();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-reject'>&nbsp;</span>**/
            /**
             <div>
             Rejects the promise.
             </div>
    
            @param {fm.icelink.Exception} exception The exception.
            @return {boolean}
            */
            PromiseBase.prototype.reject = function (exception) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.FutureState.Pending))) {
                        return false;
                    }
                    _super.prototype.setException.call(this, exception);
                    _super.prototype.setState.call(this, fm.icelink.FutureState.Rejected);
                    this.raiseRejects(exception);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-rejectAsync'>&nbsp;</span>**/
            /**
             <div>
             Rejects the promise asynchronously.
             </div>
    
            @param {fm.icelink.Exception} exception The exception.
            @return {fm.icelink.Future<Object>}
            */
            PromiseBase.prototype.rejectAsync = function (exception) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    this.doRejectAsync(promise, exception);
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            PromiseBase.prototype.reset = function () {
                if (arguments.length == 0) {
                    fm.icelink.ArrayExtensions.clear(this.__pendingPromisesToResolve);
                    fm.icelink.ArrayExtensions.clear(this.__pendingPromisesToReject);
                    fm.icelink.ArrayExtensions.clear(this.__pendingResolves);
                    fm.icelink.ArrayExtensions.clear(this.__pendingRejects);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-resolve'>&nbsp;</span>**/
            /**
             <div>
             Resolves the promise.
             </div>
    
            @param {T} result The result.
            @return {boolean}
            */
            PromiseBase.prototype.resolve = function (result) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.FutureState.Pending))) {
                        return false;
                    }
                    _super.prototype.setResult.call(this, result);
                    _super.prototype.setState.call(this, fm.icelink.FutureState.Resolved);
                    this.raiseResolves(result);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.PromiseBase-resolveAsync'>&nbsp;</span>**/
            /**
             <div>
             Resolves the promise asynchronously.
             </div>
    
            @param {T} result The result.
            @return {fm.icelink.Future<Object>}
            */
            PromiseBase.prototype.resolveAsync = function (result) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    this.doResolveAsync(promise, result);
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return PromiseBase;
        }(fm.icelink.Future));
        icelink.PromiseBase = PromiseBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PromiseBase.ts" />
/// <reference path="Util.ts" />

/// <reference path="PromiseBase.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Promise = /** @class */ (function (_super) {
            __extends(Promise, _super);
            function Promise() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Promise.prototype.getTypeString = function () {
                return '[fm.icelink.Promise]' + ',' + _super.prototype.getTypeString.call(this);
            };
            Promise.prototype.then = function (resolve, reject) {
                var promise = new Promise();
                this.process(promise, function (result) {
                    if (resolve == null) {
                        promise.resolve(result);
                    }
                    else {
                        var resolveResult = resolve(result);
                        if (icelink.Util.isObjectType(resolveResult, '[fm.icelink.Future]')) {
                            resolveResult.then(function (chainedResult) {
                                promise.resolve(chainedResult);
                            }, function (exception) {
                                promise.reject(exception);
                            });
                        }
                        else {
                            promise.resolve(resolveResult);
                        }
                    }
                }, function (exception) {
                    if (reject != null) {
                        reject(exception);
                    }
                    promise.reject(exception);
                });
                return promise;
            };
            Promise.prototype.fail = function (reject) {
                var promise = new Promise();
                this.process(promise, function (result) {
                    promise.resolve(result);
                }, function (exception) {
                    if (reject != null) {
                        reject(exception);
                    }
                    promise.reject(exception);
                });
                return promise;
            };
            Promise.wrap = function (callbackActionOrFunction) {
                var promise = new Promise();
                try {
                    if (callbackActionOrFunction == null) {
                        promise.resolve(null);
                    }
                    else {
                        var result = callbackActionOrFunction();
                        if (result) {
                            promise.resolve(result);
                        }
                        else {
                            promise.resolve(null);
                        }
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            Promise.wrapAsync = function (callbackActionOrFunction) {
                var promise = new Promise();
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (callbackActionOrFunction == null) {
                            promise.resolve(null);
                        }
                        else {
                            var result = callbackActionOrFunction();
                            if (result) {
                                promise.resolve(result);
                            }
                            else {
                                promise.resolve(null);
                            }
                        }
                    }
                    catch (ex) {
                        promise.reject(ex);
                    }
                });
                return promise;
            };
            return Promise;
        }(icelink.PromiseBase));
        icelink.Promise = Promise;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Randomizer = /** @class */ (function () {
            function Randomizer() {
            }
            Randomizer.prototype.getTypeString = function () {
                return '[fm.icelink.Randomizer]';
            };
            Randomizer.prototype.next = function () {
                if (arguments.length == 0) {
                    return this.next(0, 2147483647);
                }
                else if (arguments.length == 1) {
                    var maxValue = arguments[0];
                    return this.next(0, maxValue);
                }
                else if (arguments.length == 2) {
                    var minValue = arguments[0];
                    var maxValue = arguments[1];
                    return Math.floor(Math.random() * (maxValue - minValue)) + minValue;
                }
            };
            Randomizer.prototype.nextDouble = function () {
                return Math.random();
            };
            Randomizer.prototype.nextBytes = function (buffer) {
                for (var i = 0; i < buffer.length; i++) {
                    buffer[i] = this.next(256);
                }
            };
            Randomizer.prototype.randomString = function (size) {
                var s = '';
                for (var i = 0; i < size; i++) {
                    s += Randomizer._randomCharset.charAt(this.next(Randomizer._randomCharset.length));
                }
                return s;
            };
            Randomizer._randomCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';
            return Randomizer;
        }());
        icelink.Randomizer = Randomizer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Regex = /** @class */ (function () {
            function Regex(pattern) {
                this.pattern = pattern;
            }
            Regex.prototype.getTypeString = function () {
                return '[fm.icelink.Regex]';
            };
            Regex.isMatch = function (input, pattern) {
                return new RegExp(pattern).test(input);
            };
            Regex.prototype.isMatch = function (input) {
                return new RegExp(this.pattern).test(input);
            };
            return Regex;
        }());
        icelink.Regex = Regex;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        // SHA-256 (+ HMAC and PBKDF2) for JavaScript.
        //
        // Written in 2014-2016 by Dmitry Chestnykh.
        // Public domain, no warranty.
        var digestLength = 32;
        var blockSize = 64;
        // SHA-256 constants
        var K = new Uint32Array([
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
            0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
            0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
            0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
            0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
            0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
            0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
            0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
            0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
            0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ]);
        function hashBlocks(w, v, p, pos, len) {
            var a, b, c, d, e, f, g, h, u, i, j, t1, t2;
            while (len >= 64) {
                a = v[0];
                b = v[1];
                c = v[2];
                d = v[3];
                e = v[4];
                f = v[5];
                g = v[6];
                h = v[7];
                for (i = 0; i < 16; i++) {
                    j = pos + i * 4;
                    w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |
                        ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));
                }
                for (i = 16; i < 64; i++) {
                    u = w[i - 2];
                    t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
                    u = w[i - 15];
                    t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
                }
                for (i = 0; i < 64; i++) {
                    t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
                        (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
                        ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
                    t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
                        (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
                    h = g;
                    g = f;
                    f = e;
                    e = (d + t1) | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (t1 + t2) | 0;
                }
                v[0] += a;
                v[1] += b;
                v[2] += c;
                v[3] += d;
                v[4] += e;
                v[5] += f;
                v[6] += g;
                v[7] += h;
                pos += 64;
                len -= 64;
            }
            return pos;
        }
        // Hash implements SHA256 hash algorithm.
        var Sha256 = /** @class */ (function () {
            function Sha256() {
                this.digestLength = digestLength;
                this.blockSize = blockSize;
                // Note: Int32Array is used instead of Uint32Array for performance reasons.
                this.state = new Int32Array(8); // hash state
                this.temp = new Int32Array(64); // temporary state
                this.buffer = new Uint8Array(128); // buffer for data to hash
                this.bufferLength = 0; // number of bytes in buffer
                this.bytesHashed = 0; // number of total bytes hashed
                this.finished = false; // indicates whether the hash was finalized
                this.reset();
            }
            // Resets hash state making it possible
            // to re-use this instance to hash other data.
            Sha256.prototype.reset = function () {
                this.state[0] = 0x6a09e667;
                this.state[1] = 0xbb67ae85;
                this.state[2] = 0x3c6ef372;
                this.state[3] = 0xa54ff53a;
                this.state[4] = 0x510e527f;
                this.state[5] = 0x9b05688c;
                this.state[6] = 0x1f83d9ab;
                this.state[7] = 0x5be0cd19;
                this.bufferLength = 0;
                this.bytesHashed = 0;
                this.finished = false;
                return this;
            };
            // Cleans internal buffers and re-initializes hash state.
            Sha256.prototype.clean = function () {
                for (var i = 0; i < this.buffer.length; i++) {
                    this.buffer[i] = 0;
                }
                for (var i = 0; i < this.temp.length; i++) {
                    this.temp[i] = 0;
                }
                this.reset();
            };
            // Updates hash state with the given data.
            //
            // Optionally, length of the data can be specified to hash
            // fewer bytes than data.length.
            //
            // Throws error when trying to update already finalized hash:
            // instance must be reset to use it again.
            Sha256.prototype.update = function (data, dataLength) {
                if (dataLength === void 0) { dataLength = data.length; }
                if (this.finished) {
                    throw new icelink.Exception("SHA256: can't update because hash was finished.");
                }
                var dataPos = 0;
                this.bytesHashed += dataLength;
                if (this.bufferLength > 0) {
                    while (this.bufferLength < 64 && dataLength > 0) {
                        this.buffer[this.bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this.bufferLength === 64) {
                        hashBlocks(this.temp, this.state, this.buffer, 0, 64);
                        this.bufferLength = 0;
                    }
                }
                if (dataLength >= 64) {
                    dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);
                    dataLength %= 64;
                }
                while (dataLength > 0) {
                    this.buffer[this.bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            // Finalizes hash state and puts hash into out.
            //
            // If hash was already finalized, puts the same value.
            Sha256.prototype.finish = function (out) {
                if (!this.finished) {
                    var bytesHashed = this.bytesHashed;
                    var left = this.bufferLength;
                    var bitLenHi = (bytesHashed / 0x20000000) | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
                    this.buffer[left] = 0x80;
                    for (var i = left + 1; i < padLength - 8; i++) {
                        this.buffer[i] = 0;
                    }
                    this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;
                    this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;
                    this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;
                    this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;
                    this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;
                    this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;
                    this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;
                    this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;
                    hashBlocks(this.temp, this.state, this.buffer, 0, padLength);
                    this.finished = true;
                }
                for (var i = 0; i < 8; i++) {
                    out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;
                    out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
                    out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
                    out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
                }
                return this;
            };
            // Returns the final hash digest.
            Sha256.prototype.digest = function () {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            // Internal function for use in HMAC for optimization.
            Sha256.prototype._saveState = function (out) {
                for (var i = 0; i < this.state.length; i++) {
                    out[i] = this.state[i];
                }
            };
            // Internal function for use in HMAC for optimization.
            Sha256.prototype._restoreState = function (from, bytesHashed) {
                for (var i = 0; i < this.state.length; i++) {
                    this.state[i] = from[i];
                }
                this.bytesHashed = bytesHashed;
                this.finished = false;
                this.bufferLength = 0;
            };
            return Sha256;
        }());
        icelink.Sha256 = Sha256;
        // HMAC implements HMAC-SHA256 message authentication algorithm.
        var HmacSha256 = /** @class */ (function () {
            function HmacSha256(key) {
                this.inner = new Sha256();
                this.outer = new Sha256();
                this.blockSize = this.inner.blockSize;
                this.digestLength = this.inner.digestLength;
                var pad = new Uint8Array(this.blockSize);
                if (key.length > this.blockSize) {
                    (new Sha256()).update(key).finish(pad).clean();
                }
                else {
                    for (var i = 0; i < key.length; i++) {
                        pad[i] = key[i];
                    }
                }
                for (var i = 0; i < pad.length; i++) {
                    pad[i] ^= 0x36;
                }
                this.inner.update(pad);
                for (var i = 0; i < pad.length; i++) {
                    pad[i] ^= 0x36 ^ 0x5c;
                }
                this.outer.update(pad);
                this.istate = new Uint32Array(8);
                this.ostate = new Uint32Array(8);
                this.inner._saveState(this.istate);
                this.outer._saveState(this.ostate);
                for (var i = 0; i < pad.length; i++) {
                    pad[i] = 0;
                }
            }
            // Returns HMAC state to the state initialized with key
            // to make it possible to run HMAC over the other data with the same
            // key without creating a new instance.
            HmacSha256.prototype.reset = function () {
                this.inner._restoreState(this.istate, this.inner.blockSize);
                this.outer._restoreState(this.ostate, this.outer.blockSize);
                return this;
            };
            // Cleans HMAC state.
            HmacSha256.prototype.clean = function () {
                for (var i = 0; i < this.istate.length; i++) {
                    this.ostate[i] = this.istate[i] = 0;
                }
                this.inner.clean();
                this.outer.clean();
            };
            // Updates state with provided data.
            HmacSha256.prototype.update = function (data) {
                this.inner.update(data);
                return this;
            };
            // Finalizes HMAC and puts the result in out.
            HmacSha256.prototype.finish = function (out) {
                if (this.outer.finished) {
                    this.outer.finish(out);
                }
                else {
                    this.inner.finish(out);
                    this.outer.update(out, this.digestLength).finish(out);
                }
                return this;
            };
            // Returns message authentication code.
            HmacSha256.prototype.digest = function () {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            return HmacSha256;
        }());
        icelink.HmacSha256 = HmacSha256;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="HttpTransfer.ts" />

/// <reference path="HttpTransfer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        (function () {
            icelink.HttpTransfer.addQueryToUrl = function (url, key, value) {
                if (typeof key === 'undefined' || icelink.StringExtensions.isNullOrEmpty(key)) {
                    return url;
                }
                if (typeof value === 'undefined' || value === null) {
                    value = '';
                }
                value = encodeURIComponent(value);
                return icelink.StringExtensions.concat([url, (icelink.StringExtensions.indexOf(url, "?", icelink.StringComparison.OrdinalIgnoreCase) === -1 ? "?" : "&"), key, "=", value]);
            };
        })();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Stack = /** @class */ (function () {
            function Stack(depth) {
                this._list = [];
                if (typeof depth !== 'undefined') {
                    this._depth = depth;
                }
                else {
                    this._depth = 0;
                }
            }
            Stack.prototype.getTypeString = function () {
                return '[fm.icelink.Stack]';
            };
            Stack.prototype.push = function (o) {
                if (this._depth !== 0 && this.getCount() === this._depth) {
                    throw new icelink.Exception('Depth of stack would be exceeded by pushing value.');
                }
                this._list.push(o);
            };
            Stack.prototype.pop = function () {
                return this._list.pop();
            };
            Stack.prototype.peek = function () {
                if (this._list.length === 0) {
                    return null;
                }
                return this._list[this._list.length - 1];
            };
            Stack.prototype.getCount = function () {
                return this._list.length;
            };
            return Stack;
        }());
        icelink.Stack = Stack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var StringBuilder = /** @class */ (function () {
            function StringBuilder(value) {
                if (typeof value === 'undefined') {
                    this._value = '';
                }
                else {
                    this._value = value;
                }
            }
            StringBuilder.prototype.getTypeString = function () {
                return '[fm.icelink.StringBuilder]';
            };
            StringBuilder.prototype.append = function (s, startIndex, count) {
                if (typeof startIndex === 'undefined' && typeof count === 'undefined') {
                    this._value = this._value + s;
                }
                else if (typeof count === 'undefined') {
                    this._value = this._value + s.substring(startIndex);
                }
                else {
                    this._value = this._value + s.substring(startIndex, startIndex + count);
                }
                return this;
            };
            StringBuilder.prototype.toString = function () {
                return this._value;
            };
            StringBuilder.prototype.getLength = function () {
                return this._value.length;
            };
            StringBuilder.prototype.remove = function (startIndex, length) {
                this._value = this._value.substring(0, startIndex) + this._value.substring(startIndex + length);
                return this;
            };
            return StringBuilder;
        }());
        icelink.StringBuilder = StringBuilder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var StringComparison;
        (function (StringComparison) {
            StringComparison[StringComparison["CurrentCulture"] = 0] = "CurrentCulture";
            StringComparison[StringComparison["CurrentCultureIgnoreCase"] = 1] = "CurrentCultureIgnoreCase";
            StringComparison[StringComparison["InvariantCulture"] = 2] = "InvariantCulture";
            StringComparison[StringComparison["InvariantCultureIgnoreCase"] = 3] = "InvariantCultureIgnoreCase";
            StringComparison[StringComparison["Ordinal"] = 4] = "Ordinal";
            StringComparison[StringComparison["OrdinalIgnoreCase"] = 5] = "OrdinalIgnoreCase";
        })(StringComparison = icelink.StringComparison || (icelink.StringComparison = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Util.ts" />

/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var StringExtensions = /** @class */ (function () {
            function StringExtensions() {
            }
            StringExtensions.prototype.getTypeString = function () {
                return '[fm.icelink.StringExtensions]';
            };
            StringExtensions.toString = function (s) {
                return s;
            };
            StringExtensions.trim = function (s) {
                return s.replace(/^\s+|\s+$/g, '');
            };
            StringExtensions.trimEnd = function (s, chars) {
                var expression = '[';
                for (var _i = 0, chars_1 = chars; _i < chars_1.length; _i++) {
                    var c = chars_1[_i];
                    expression += String.fromCharCode(c);
                }
                expression += ']*$';
                return s.replace(new RegExp(expression, 'g'), '');
            };
            StringExtensions.trimStart = function (s, chars) {
                var expression = '^[';
                for (var _i = 0, chars_2 = chars; _i < chars_2.length; _i++) {
                    var c = chars_2[_i];
                    expression += String.fromCharCode(c);
                }
                expression += ']*';
                return s.replace(new RegExp(expression, 'g'), '');
            };
            StringExtensions.replace = function (s, search, replace) {
                return s.replace(new RegExp(search.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"), 'g'), replace);
            };
            StringExtensions.concat = function () {
                var strings = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    strings[_i] = arguments[_i];
                }
                if (strings.length == 1 && icelink.Util.isArray(strings[0])) {
                    strings = strings[0];
                }
                var s = '';
                for (var _a = 0, strings_1 = strings; _a < strings_1.length; _a++) {
                    var str = strings_1[_a];
                    s += str;
                }
                return s;
            };
            StringExtensions.contains = function (str, s) {
                return (str.indexOf(s) > -1);
            };
            StringExtensions.join = function (separator) {
                var array = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    array[_i - 1] = arguments[_i];
                }
                if (array.length == 1 && icelink.Util.isArray(array[0])) {
                    array = array[0];
                }
                var sb = new icelink.StringBuilder();
                for (var i = 0; i < array.length; i++) {
                    if (i > 0) {
                        sb.append(separator);
                    }
                    sb.append(array[i]);
                }
                return sb.toString();
            };
            StringExtensions.split = function (s, chars) {
                var splits = [];
                var start = 0;
                for (var i = 0; i < s.length; i++) {
                    for (var _i = 0, chars_3 = chars; _i < chars_3.length; _i++) {
                        var c = chars_3[_i];
                        if (c == s.charCodeAt(i)) {
                            splits.push(s.substring(start, i));
                            start = i + 1;
                        }
                    }
                }
                splits.push(s.substring(start, s.length));
                return splits;
            };
            StringExtensions.isNullOrEmpty = function (s) {
                var noe = typeof s === 'undefined' || s === null || s === '';
                if (!noe) {
                    if (typeof s !== 'string' && !(s instanceof String)) {
                        throw new icelink.Exception('Object is not a string.');
                    }
                }
                return noe;
            };
            StringExtensions.isEqual = function (str, s, stringComparison) {
                if (typeof stringComparison !== 'undefined') {
                    if (stringComparison === icelink.StringComparison.CurrentCultureIgnoreCase || stringComparison === icelink.StringComparison.InvariantCultureIgnoreCase || stringComparison === icelink.StringComparison.OrdinalIgnoreCase) {
                        return str.toLowerCase() === s.toLowerCase();
                    }
                }
                return str === s;
            };
            StringExtensions.indexOf = function (str, s, stringComparison) {
                if (typeof stringComparison !== 'undefined') {
                    if (stringComparison === icelink.StringComparison.CurrentCultureIgnoreCase || stringComparison === icelink.StringComparison.InvariantCultureIgnoreCase || stringComparison === icelink.StringComparison.OrdinalIgnoreCase) {
                        return str.toLowerCase().indexOf(s.toLowerCase());
                    }
                }
                return str.indexOf(s);
            };
            StringExtensions.lastIndexOf = function (str, s, stringComparison) {
                if (typeof stringComparison !== 'undefined') {
                    if (stringComparison === icelink.StringComparison.CurrentCultureIgnoreCase || stringComparison === icelink.StringComparison.InvariantCultureIgnoreCase || stringComparison === icelink.StringComparison.OrdinalIgnoreCase) {
                        return str.toLowerCase().lastIndexOf(s.toLowerCase());
                    }
                }
                return str.lastIndexOf(s);
            };
            StringExtensions.startsWith = function (str, s, stringComparison) {
                if (typeof stringComparison !== 'undefined') {
                    if (stringComparison === icelink.StringComparison.CurrentCultureIgnoreCase || stringComparison === icelink.StringComparison.InvariantCultureIgnoreCase || stringComparison === icelink.StringComparison.OrdinalIgnoreCase) {
                        return str.toLowerCase().indexOf(s.toLowerCase()) === 0;
                    }
                }
                return str.indexOf(s) === 0;
            };
            StringExtensions.endsWith = function (str, s, stringComparison) {
                if (typeof stringComparison !== 'undefined') {
                    if (stringComparison === icelink.StringComparison.CurrentCultureIgnoreCase || stringComparison === icelink.StringComparison.InvariantCultureIgnoreCase || stringComparison === icelink.StringComparison.OrdinalIgnoreCase) {
                        return str.toLowerCase().indexOf(s.toLowerCase(), str.length - s.length) !== -1;
                    }
                }
                return str.indexOf(s, str.length - s.length) !== -1;
            };
            StringExtensions.compareTo = function (s1, s2) {
                if (s1.toString() < s2.toString()) {
                    return -1;
                }
                if (s1.toString() > s2.toString()) {
                    return 1;
                }
                return 0;
            };
            StringExtensions.format = function (format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (args.length == 1 && icelink.Util.isArray(args[0])) {
                    args = args[0];
                }
                var formatter = function (match, number) {
                    if (args[number] != null) {
                        return args[number];
                    }
                    return match;
                };
                return format.replace(/{(\d+)}/g, formatter);
            };
            StringExtensions.toLower = function (str) {
                return str.toLowerCase();
            };
            StringExtensions.toUpper = function (str) {
                return str.toUpperCase();
            };
            StringExtensions.getChars = function (str) {
                var chars = [];
                for (var i = 0; i < str.length; i++) {
                    chars.push(str[i]);
                }
                return chars;
            };
            StringExtensions.substring = function (str, startIndex, length) {
                return str.substring(startIndex, startIndex + length);
            };
            StringExtensions.getHashCode = function (str) {
                var hash = 0, i = 0, chr = 0;
                if (str.length == 0) {
                    return hash;
                }
                for (i = 0; i < str.length; i++) {
                    chr = str.charCodeAt(i);
                    hash = ((hash << 5) - hash) + chr;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            };
            StringExtensions.empty = '';
            return StringExtensions;
        }());
        icelink.StringExtensions = StringExtensions;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="ITimeoutTimer.ts" />

/// <reference path="ITimeoutTimer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var TimeoutTimer = /** @class */ (function () {
            function TimeoutTimer(callback, state) {
                this._timer = 0;
                this._callback = callback;
                this._state = state;
                this._currentTimeout = 0;
            }
            TimeoutTimer.prototype.getTypeString = function () {
                return '[fm.icelink.TimeoutTimer]';
            };
            TimeoutTimer.prototype.start = function (timeout) {
                var _this = this;
                if (this._timer) {
                    throw new icelink.Exception('Timer is currently active.');
                }
                this._currentTimeout = timeout;
                timeout = Math.max(0, timeout);
                this._timer = setTimeout(function () {
                    if (_this._currentTimeout >= 0 && _this.stop() && _this._callback) {
                        _this._callback(_this._state);
                    }
                }, timeout);
            };
            TimeoutTimer.prototype.stop = function () {
                if (!this._timer) {
                    return false;
                }
                clearTimeout(this._timer);
                this._timer = null;
                return true;
            };
            return TimeoutTimer;
        }());
        icelink.TimeoutTimer = TimeoutTimer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var TimeSpan = /** @class */ (function () {
            function TimeSpan() {
                if (arguments.length == 1) {
                    var ticks = arguments[0];
                    var milliseconds = ticks / 10000;
                    this._milliseconds = (milliseconds % 1000);
                    milliseconds -= this._milliseconds;
                    var seconds = milliseconds / 1000;
                    this._seconds = (seconds % 60);
                    seconds -= this._seconds;
                    var minutes = seconds / 60;
                    this._minutes = (minutes % 60);
                    minutes -= this._minutes;
                    var hours = minutes / 60;
                    this._hours = hours;
                }
                else {
                    var hours = arguments[0];
                    var minutes = arguments[0];
                    var seconds = arguments[0];
                    this._hours = hours;
                    this._minutes = minutes;
                    this._seconds = seconds;
                }
            }
            TimeSpan.prototype.getTotalSeconds = function () {
                return ((this._hours * 3600) + (this._minutes * 60) + this._seconds);
            };
            TimeSpan.prototype.getTotalMilliseconds = function () {
                return ((this._hours * 3600000) + (this._minutes * 60000) + (this._seconds * 1000) + this._milliseconds);
            };
            return TimeSpan;
        }());
        icelink.TimeSpan = TimeSpan;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Type = /** @class */ (function () {
            function Type(typeString) {
                this._typeString = typeString;
            }
            Type.prototype.getTypeString = function () {
                return '[fm.icelink.Type]';
            };
            Type.prototype.getFullName = function () {
                return this._typeString.substr(1, this._typeString.indexOf(']') - 1);
            };
            Type.prototype.getBaseType = function () {
                var typeStrings = icelink.StringExtensions.split(this._typeString, [','.charCodeAt(0)]);
                if (typeStrings.length == 1) {
                    return new Type('[Object]');
                }
                return new Type(typeStrings[1]);
            };
            return Type;
        }());
        icelink.Type = Type;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Uri = /** @class */ (function () {
            function Uri(uriString) {
                this._uriString = uriString;
            }
            Uri.prototype.getTypeString = function () {
                return '[fm.icelink.Uri]';
            };
            Uri.prototype.toString = function () {
                return this._uriString;
            };
            Uri.escapeDataString = function (s) {
                return encodeURIComponent(s);
            };
            return Uri;
        }());
        icelink.Uri = Uri;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         WebSocket base properties/methods.
         </div>
    
        */
        var WebSocketBase = /** @class */ (function () {
            function WebSocketBase() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketBase]';
            };
            /**<span id='method-fm.icelink.WebSocketBase-raiseCloseComplete'>&nbsp;</span>**/
            /**
             <div>
             Raises the close complete callback.
             </div>
    
            @param {fm.icelink.WebSocketCloseArgs} closeArgs The close arguments.
            @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
            @param {string} reason The reason.
            @return {void}
            */
            WebSocketBase.prototype.raiseCloseComplete = function (closeArgs, statusCode, reason) {
                if (arguments.length == 3) {
                    if (((!fm.icelink.Global.equals(closeArgs, null)) && (!fm.icelink.Global.equals(closeArgs.getOnComplete(), null)))) {
                        var p = new fm.icelink.WebSocketCloseCompleteArgs();
                        p.setCloseArgs(closeArgs);
                        p.setStatusCode(statusCode);
                        p.setReason(reason);
                        closeArgs.getOnComplete()(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketBase-raiseOpenFailure'>&nbsp;</span>**/
            /**
             <div>
             Raises the open failure callback.
             </div>
    
            @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
            @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
            @param {fm.icelink.Exception} exception The exception.
            @return {void}
            */
            WebSocketBase.prototype.raiseOpenFailure = function (openArgs, statusCode, exception) {
                if (arguments.length == 3) {
                    if (((!fm.icelink.Global.equals(openArgs, null)) && (!fm.icelink.Global.equals(openArgs.getOnFailure(), null)))) {
                        var p = new fm.icelink.WebSocketOpenFailureArgs();
                        p.setOpenArgs(openArgs);
                        p.setStatusCode(statusCode);
                        p.setException(exception);
                        openArgs.getOnFailure()(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketBase-raiseOpenSuccess'>&nbsp;</span>**/
            /**
             <div>
             Raises the open success callback.
             </div>
    
            @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
            @return {void}
            */
            WebSocketBase.prototype.raiseOpenSuccess = function (openArgs) {
                if (arguments.length == 1) {
                    if (((!fm.icelink.Global.equals(openArgs, null)) && (!fm.icelink.Global.equals(openArgs.getOnSuccess(), null)))) {
                        var p = new fm.icelink.WebSocketOpenSuccessArgs();
                        p.setOpenArgs(openArgs);
                        openArgs.getOnSuccess()(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketBase-raiseReceive'>&nbsp;</span>**/
            /**
             <div>
             Raises the receive callback.
             </div>
    
            @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
            @param {string} textMessage The text message.
            @param {Uint8Array} binaryMessage The binary message.
            @return {void}
            */
            WebSocketBase.prototype.raiseReceive = function (openArgs, textMessage, binaryMessage) {
                if (arguments.length == 3) {
                    if (((!fm.icelink.Global.equals(openArgs, null)) && (!fm.icelink.Global.equals(openArgs.getOnReceive(), null)))) {
                        var p = new fm.icelink.WebSocketReceiveArgs();
                        p.setOpenArgs(openArgs);
                        p.setTextMessage(textMessage);
                        p.setBinaryMessage(binaryMessage);
                        openArgs.getOnReceive()(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketBase-raiseStreamFailure'>&nbsp;</span>**/
            /**
             <div>
             Raises the stream failure callback.
             </div>
    
            @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
            @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
            @param {fm.icelink.Exception} exception The exception.
            @return {void}
            */
            WebSocketBase.prototype.raiseStreamFailure = function (openArgs, statusCode, exception) {
                if (arguments.length == 3) {
                    if (((!fm.icelink.Global.equals(openArgs, null)) && (!fm.icelink.Global.equals(openArgs.getOnStreamFailure(), null)))) {
                        var p = new fm.icelink.WebSocketStreamFailureArgs();
                        p.setOpenArgs(openArgs);
                        p.setStatusCode(statusCode);
                        p.setException(exception);
                        openArgs.getOnStreamFailure()(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketBase;
        }());
        icelink.WebSocketBase = WebSocketBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebSocketBase.ts" />
/// <reference path="Util.ts" />

/// <reference path="WebSocketBase.ts" />
/// <reference path="Util.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebSocket = /** @class */ (function (_super) {
            __extends(WebSocket, _super);
            function WebSocket(requestUrl, protocol) {
                var _this = _super.call(this) || this;
                _this.onOpen = function (e) {
                    _this.raiseOnResponseReceived();
                    _this._opening = false;
                    _this.raiseOpenSuccess(_this._openArgs);
                };
                _this.onError = function (e) {
                    if (_this._opening) {
                        _this._opening = false;
                        if (!_this._raisedOpenFailure) {
                            _this._raisedOpenFailure = true;
                            _this.raiseOpenFailure(_this._openArgs, icelink.WebSocketStatusCode.Abnormal, new icelink.Exception('WebSocket error.'));
                        }
                    }
                    else if (!_this._closing) {
                        if (!_this._raisedStreamFailure) {
                            _this._raisedStreamFailure = true;
                            _this.raiseStreamFailure(_this._openArgs, icelink.WebSocketStatusCode.Abnormal, new icelink.Exception('WebSocket error.'));
                        }
                    }
                };
                _this.onClose = function (e) {
                    _this.processOnClose(e.code, e.reason);
                };
                _this.onMessage = function (e) {
                    if (_this._timer) {
                        window.clearTimeout(_this._timer);
                    }
                    //this.raiseOnResponseReceived();
                    _this._sendArgs = null;
                    var binaryMessage = null;
                    var textMessage = null;
                    if (!WebSocket.getDisableBinary() && e.data instanceof ArrayBuffer) {
                        binaryMessage = new Uint8Array(e.data);
                    }
                    else {
                        textMessage = e.data;
                    }
                    return _this.raiseReceive(_this._openArgs, textMessage, binaryMessage);
                };
                requestUrl = icelink.Util.absolutizeUrl(requestUrl);
                requestUrl = requestUrl.replace('https://', 'wss://');
                requestUrl = requestUrl.replace('http://', 'ws://');
                _this._requestUrl = requestUrl;
                _this._protocol = protocol || null;
                _this._webSocket = null;
                _this._onRequestCreated = null;
                _this._onResponseReceived = null;
                _this._opening = false;
                _this._closing = false;
                _this._aborting = false;
                _this._openArgs = null;
                _this._sendArgs = null;
                _this._timer = 0;
                _this._raisedStreamFailure = false;
                _this._raisedOpenFailure = false;
                return _this;
            }
            WebSocket.prototype.getTypeString = function () {
                return '[fm.icelink.Websocket]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebSocket.getExists = function () {
                return true;
            };
            WebSocket.setDisableBinary = function (disableBinary) {
                WebSocket._disableBinary = disableBinary;
            };
            WebSocket.getDisableBinary = function () {
                if (typeof Uint8Array === 'undefined') {
                    return true;
                }
                return WebSocket._disableBinary;
            };
            WebSocket.prototype.getSecure = function () {
                return (this._requestUrl.indexOf('wss://') === 0);
            };
            WebSocket.prototype.getBufferedAmount = function () {
                if (!this._webSocket) {
                    return 0;
                }
                return this._webSocket.bufferedAmount;
            };
            WebSocket.prototype.getIsOpen = function () {
                if (!this._webSocket) {
                    return false;
                }
                return (this._webSocket.readyState === 1);
            };
            WebSocket.prototype.open = function (args) {
                var url = this._requestUrl;
                this._openArgs = args;
                this._onRequestCreated = args.getOnRequestCreated();
                this._onResponseReceived = args.getOnResponseReceived();
                this.raiseOnRequestCreated();
                var headers = args.getHeaders();
                var headersHash = {};
                if (headers) {
                    headersHash = headers.toHash();
                }
                if (WebSocket.getDisableBinary()) {
                    headersHash['X-FM-DisableBinary'] = 'true';
                }
                url = icelink.HttpTransfer.addQueryToUrl(url, 'headers', icelink.Json.serialize(headersHash));
                if ('WebSocket' in window) {
                    this._webSocket = (this._protocol ? new window.WebSocket(url, this._protocol) : new window.WebSocket(url));
                }
                if (!this._webSocket) {
                    this.raiseOpenFailure(args, icelink.WebSocketStatusCode.NoStatus, new icelink.Exception('Could not create WebSocket.'));
                    return;
                }
                if (!WebSocket.getDisableBinary()) {
                    try {
                        this._webSocket.binaryType = 'arraybuffer';
                    }
                    catch (error) {
                        WebSocket.setDisableBinary(true);
                    }
                }
                this._opening = true;
                this._closing = false;
                this._raisedStreamFailure = false;
                this._raisedOpenFailure = false;
                this._webSocket.onopen = this.onOpen;
                this._webSocket.onerror = this.onError;
                this._webSocket.onclose = this.onClose;
                this._webSocket.onmessage = this.onMessage;
            };
            WebSocket.prototype.processOnClose = function (code, reason) {
                var reasonText = '';
                if (!icelink.StringExtensions.isNullOrEmpty(reason)) {
                    reasonText = ' (' + reason + ')';
                }
                if (this._opening) {
                    this._opening = false;
                    if (!this._raisedOpenFailure) {
                        this._raisedOpenFailure = true;
                        this.raiseOpenFailure(this._openArgs, code, new icelink.Exception('Could not open WebSocket.' + reasonText));
                    }
                }
                else if (this._aborting) {
                    if (!this._raisedStreamFailure) {
                        this._raisedStreamFailure = true;
                        this.raiseStreamFailure(this._openArgs, code, new icelink.Exception('WebSocket request timed out.' + reasonText));
                    }
                }
                else if (!this._closing) {
                    if (!this._raisedStreamFailure) {
                        this._raisedStreamFailure = true;
                        this.raiseStreamFailure(this._openArgs, code, new icelink.Exception('WebSocket closed.' + reasonText));
                    }
                }
            };
            WebSocket.prototype.send = function (args) {
                var _this = this;
                if (!this._webSocket) {
                    return;
                }
                this._sendArgs = args;
                //this.raiseOnRequestCreated();
                if (this._timer) {
                    window.clearTimeout(this._timer);
                }
                var timeout = args.getTimeout();
                if (timeout > 0) {
                    this._timer = window.setTimeout(function () {
                        if (!_this._webSocket) {
                            return;
                        }
                        _this._aborting = true;
                        _this._webSocket.close();
                        _this.processOnClose(4000, 'Timeout');
                    }, timeout);
                }
                var sentBinary = false;
                var binary = args.getBinaryMessage();
                if (!WebSocket.getDisableBinary() && binary) {
                    try {
                        this._webSocket.send(binary.buffer);
                        sentBinary = true;
                    }
                    catch (error) {
                        WebSocket.setDisableBinary(true);
                    }
                }
                if (!sentBinary) {
                    return this._webSocket.send(args.getTextMessage());
                }
            };
            WebSocket.prototype.close = function (args) {
                if (typeof args === 'undefined') {
                    this.close(new icelink.WebSocketCloseArgs());
                }
                var code = args.getStatusCode() || icelink.WebSocketStatusCode.Normal;
                var reason = args.getReason() || '';
                var e = new icelink.WebSocketCloseCompleteArgs();
                e.setStatusCode(code);
                e.setReason(reason);
                window.clearTimeout(this._timer);
                if (this._webSocket) {
                    this._closing = true;
                    this._webSocket.close(code, reason);
                    this._webSocket = null;
                }
                this.raiseCloseComplete(args, code, reason);
            };
            WebSocket.prototype.raiseOnRequestCreated = function () {
                if (this._onRequestCreated) {
                    var args = new icelink.HttpRequestCreatedArgs();
                    args.setSender(this._openArgs.getSender());
                    args.setRequest(null);
                    this._onRequestCreated(args);
                }
            };
            WebSocket.prototype.raiseOnResponseReceived = function () {
                if (this._onResponseReceived) {
                    var args = new icelink.HttpResponseReceivedArgs();
                    args.setSender(this._openArgs.getSender());
                    args.setResponse(null);
                    this._onResponseReceived(args);
                }
            };
            WebSocket._disableBinary = false;
            return WebSocket;
        }(icelink.WebSocketBase));
        icelink.WebSocket = WebSocket;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base definition for classes that allow serialization to/from JSON.
         </div>
    
        */
        var Serializable = /** @class */ (function () {
            /**<span id='method-fm.icelink.Serializable-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.serializable` class.
             </div>
    
    
            @return {}
            */
            function Serializable() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkSerializableInit();
                    this.setIsSerialized(false);
                    this.setIsDirty(false);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Serializable.prototype.getTypeString = function () {
                return '[fm.icelink.Serializable]';
            };
            Serializable.prototype.fmicelinkSerializableInit = function () {
                this._isDirty = false;
                this._isSerialized = false;
            };
            /**<span id='method-fm.icelink.Serializable-getIsDirty'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this instance is dirty.
             </div>
    
    
            @return {boolean}
            @internal
    
            */
            Serializable.prototype.getIsDirty = function () {
                if (arguments.length == 0) {
                    return this._isDirty;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Serializable.prototype.getIsSerialized = function () {
                if (arguments.length == 0) {
                    return this._isSerialized;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Serializable.prototype.getSerialized = function () {
                if (arguments.length == 0) {
                    return this.__serialized;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Serializable-setIsDirty'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether this instance is dirty.
             </div>
    
    
            @param {boolean} value
            @return {void}
            @internal
    
            */
            Serializable.prototype.setIsDirty = function (value) {
                if (arguments.length == 1) {
                    this._isDirty = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Serializable.prototype.setIsSerialized = function (value) {
                if (arguments.length == 1) {
                    this._isSerialized = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Serializable.prototype.setSerialized = function (value) {
                if (arguments.length == 1) {
                    this.__serialized = value;
                    this.setIsSerialized(true);
                    this.setIsDirty(false);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Serializable;
        }());
        icelink.Serializable = Serializable;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Serializable.ts" />

/// <reference path="Serializable.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Supplies class instances with a key-value
         mapping to support dynamic property storage.
         </div>
    
        */
        var Dynamic = /** @class */ (function (_super) {
            __extends(Dynamic, _super);
            function Dynamic() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__dynamicProperties = null;
                    _this.__dynamicPropertiesLock = new Object();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            Dynamic.prototype.getTypeString = function () {
                return '[fm.icelink.Dynamic]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.Dynamic-getDynamicProperties'>&nbsp;</span>**/
            /**
             <div>
             Gets the dynamic properties on this instance.
             </div>
    
    
            @return {fm.icelink.Hash<string,Object>}
            */
            Dynamic.prototype.getDynamicProperties = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.__dynamicProperties, null))) {
                        return null;
                    }
                    var dictionary = {};
                    for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(this.__dynamicProperties); _i < _a.length; _i++) {
                        var str = _a[_i];
                        dictionary[str] = this.__dynamicProperties[str];
                    }
                    return dictionary;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Dynamic-getDynamicValue'>&nbsp;</span>**/
            /**
             <div>
             Gets a property value from the local cache.
             </div>
    
            @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
            @return {Object} The stored value, if found; otherwise null.
            */
            Dynamic.prototype.getDynamicValue = function (key) {
                if (arguments.length == 1) {
                    var obj2 = null;
                    this.tryInitDynamicProperties();
                    var _var0 = new fm.icelink.Holder(obj2);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__dynamicProperties, key, _var0);
                    obj2 = _var0.getValue();
                    if (_var1) {
                        return obj2;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Dynamic.prototype.setDynamicProperties = function (value) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(value, null))) {
                        this.__dynamicProperties = null;
                    }
                    else {
                        this.__dynamicProperties = {};
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(value); _i < _a.length; _i++) {
                            var str = _a[_i];
                            this.__dynamicProperties[str] = value[str];
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Dynamic-setDynamicValue'>&nbsp;</span>**/
            /**
             <div>
             Sets a property value in the local cache.
             </div>
    
            @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
            @param {Object} value The property value. This can be any object that needs to be stored for future use.
            @return {void}
            */
            Dynamic.prototype.setDynamicValue = function (key, value) {
                if (arguments.length == 2) {
                    this.tryInitDynamicProperties();
                    this.__dynamicProperties[key] = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Dynamic.prototype.tryInitDynamicProperties = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.__dynamicProperties, null))) {
                        this.__dynamicProperties = {};
                        return true;
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Dynamic-unsetDynamicValue'>&nbsp;</span>**/
            /**
             <div>
             Unsets a property value in the local cache.
             </div>
    
            @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
            @return {boolean} true if the value was removed; otherwise, false.
            */
            Dynamic.prototype.unsetDynamicValue = function (key) {
                if (arguments.length == 1) {
                    this.tryInitDynamicProperties();
                    return fm.icelink.HashExtensions.remove(this.__dynamicProperties, key);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Dynamic;
        }(fm.icelink.Serializable));
        icelink.Dynamic = Dynamic;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Stream = /** @class */ (function (_super) {
            __extends(Stream, _super);
            function Stream() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Stream.prototype.getTypeString = function () {
                return '[fm.icelink.Stream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            Stream.prototype.getState = function () {
                return this._getInternal().getState();
            };
            Stream.prototype.addOnStateChange = function (value) {
                this._getInternal().addOnStateChange(value);
            };
            Stream.prototype.removeOnStateChange = function (value) {
                this._getInternal().removeOnStateChange(value);
            };
            Stream.prototype.changeDirection = function (newDirection) {
                return this._getInternal().changeDirection(newDirection);
            };
            Stream.prototype.getDirection = function () {
                return this._getInternal().getDirection();
            };
            Stream.prototype.getLocalReceive = function () {
                return this._getInternal().getLocalReceive();
            };
            ;
            Stream.prototype.setLocalReceive = function (receiveEnabled) {
                return this._getInternal().setLocalReceive(receiveEnabled);
            };
            ;
            Stream.prototype.getLocalSend = function () {
                return this._getInternal().getLocalSend();
            };
            ;
            Stream.prototype.setLocalSend = function (sendEnabled) {
                return this._getInternal().setLocalSend(sendEnabled);
            };
            ;
            Stream.prototype.getRemoteReceive = function () {
                return this._getInternal().getRemoteReceive();
            };
            ;
            Stream.prototype.getRemoteSend = function () {
                return this._getInternal().getRemoteSend();
            };
            ;
            Stream.prototype.getRemoteDirection = function () {
                return this._getInternal().getRemoteDirection();
            };
            Stream.prototype.getId = function () {
                return this._getInternal().getId();
            };
            Stream.prototype.getLabel = function () {
                return this._getInternal().getId();
            };
            Stream.prototype.getLocalDirection = function () {
                return this._getInternal().getLocalDirection();
            };
            Stream.prototype.getTag = function () {
                return this._getInternal().getTag();
            };
            Stream.prototype.getType = function () {
                return this._getInternal().getType();
            };
            Stream.prototype.setLocalDirection = function (value) {
                this._getInternal().setLocalDirection(value);
            };
            Stream.prototype.setTag = function (value) {
                this._getInternal().setTag(value);
            };
            Stream.prototype.addOnDirectionChange = function (value) {
                this._getInternal().addOnDirectionChange(value);
            };
            Stream.prototype.removeOnDirectionChange = function (value) {
                this._getInternal().removeOnDirectionChange(value);
            };
            return Stream;
        }(icelink.Dynamic));
        icelink.Stream = Stream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Stream.ts" />

/// <reference path="Stream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var MediaStream = /** @class */ (function (_super) {
            __extends(MediaStream, _super);
            function MediaStream(localTrack, remoteTrack) {
                var _this = _super.call(this) || this;
                _this.localTrack = localTrack;
                _this.remoteTrack = remoteTrack;
                return _this;
            }
            MediaStream.prototype.getTypeString = function () {
                return '[fm.icelink.MediaStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaStream.prototype.getLocalTrack = function () {
                return this.localTrack;
            };
            MediaStream.prototype.getRemoteTrack = function () {
                return this.remoteTrack;
            };
            MediaStream.prototype.getLocalBandwidth = function () {
                return this._getInternal().getLocalBandwidth();
            };
            MediaStream.prototype.getMuted = function () {
                return this._getInternal().getMuted();
            };
            MediaStream.prototype.getRemoteBandwidth = function () {
                return this._getInternal().getRemoteBandwidth();
            };
            MediaStream.prototype.setLocalBandwidth = function (value) {
                this._getInternal().setLocalBandwidth(value);
            };
            MediaStream.prototype.setMuted = function (value) {
                this._getInternal().setMuted(value);
            };
            return MediaStream;
        }(icelink.Stream));
        icelink.MediaStream = MediaStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaStream.ts" />

/// <reference path="MediaStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var AudioStream = /** @class */ (function (_super) {
            __extends(AudioStream, _super);
            function AudioStream() {
                var _this = this;
                if (arguments.length == 0) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                var localTrack = null;
                var localMedia = null;
                var remoteTrack = null;
                var remoteMedia = null;
                if (arguments.length >= 1 && icelink.Util.isNullOrUndefined(arguments[0])) {
                    //throw new Exception('Local track/media cannot be null.');
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.AudioTrack]')) {
                    localTrack = arguments[0];
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.LocalMedia]')) {
                    localMedia = arguments[0];
                    localTrack = localMedia.getAudioTrack();
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.RemoteMedia]')) {
                    remoteMedia = arguments[0];
                    remoteTrack = remoteMedia.getAudioTrack();
                }
                else if (arguments.length >= 1) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                if (arguments.length >= 2 && icelink.Util.isNullOrUndefined(arguments[1])) {
                    //throw new Exception('Remote track/media cannot be null.');
                }
                else if (arguments.length >= 2 && icelink.Util.isObjectType(arguments[1], '[fm.icelink.AudioTrack]')) {
                    remoteTrack = arguments[1];
                }
                else if (arguments.length >= 2 && icelink.Util.isObjectType(arguments[1], '[fm.icelink.RemoteMedia]')) {
                    remoteMedia = arguments[1];
                    remoteTrack = remoteMedia.getAudioTrack();
                }
                else if (arguments.length >= 2) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                _this = _super.call(this, localTrack, remoteTrack) || this;
                _this.localMedia = localMedia;
                _this.remoteMedia = remoteMedia;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginAudioStream(_this, (localTrack == null ? null : localTrack._getInternal()), (remoteTrack == null ? null : remoteTrack._getInternal()));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcAudioStream(_this, (localTrack == null ? null : localTrack._getInternal()), (remoteTrack == null ? null : remoteTrack._getInternal()));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            AudioStream.prototype.getTypeString = function () {
                return '[fm.icelink.AudioStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            AudioStream.prototype._getInternal = function () {
                return this._internal;
            };
            AudioStream.prototype.getLocalMedia = function () {
                return this.localMedia;
            };
            AudioStream.prototype.getRemoteMedia = function () {
                return this.remoteMedia;
            };
            AudioStream.prototype.addOnReceiveDtmfTone = function (value) {
                this._getInternal().addOnReceiveDtmfTone(value);
            };
            AudioStream.prototype.addOnReceiveDtmfToneChange = function (value) {
                this._getInternal().addOnReceiveDtmfToneChange(value);
            };
            AudioStream.prototype.addOnSendDtmfTone = function (value) {
                this._getInternal().addOnSendDtmfTone(value);
            };
            AudioStream.prototype.addOnSendDtmfToneChange = function (value) {
                this._getInternal().addOnSendDtmfToneChange(value);
            };
            AudioStream.prototype.insertDtmfTone = function (dtmfTone) {
                return this._getInternal().insertDtmfTone(dtmfTone);
            };
            AudioStream.prototype.insertDtmfTones = function (dtmfTones) {
                return this._getInternal().insertDtmfTones(dtmfTones);
            };
            AudioStream.prototype.removeOnReceiveDtmfTone = function (value) {
                this._getInternal().removeOnReceiveDtmfTone(value);
            };
            AudioStream.prototype.removeOnReceiveDtmfToneChange = function (value) {
                this._getInternal().removeOnReceiveDtmfToneChange(value);
            };
            AudioStream.prototype.removeOnSendDtmfTone = function (value) {
                this._getInternal().removeOnSendDtmfTone(value);
            };
            AudioStream.prototype.removeOnSendDtmfToneChange = function (value) {
                this._getInternal().removeOnSendDtmfToneChange(value);
            };
            return AudioStream;
        }(icelink.MediaStream));
        icelink.AudioStream = AudioStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var MediaTrack = /** @class */ (function (_super) {
            __extends(MediaTrack, _super);
            function MediaTrack(media) {
                var _this = _super.call(this) || this;
                _this.media = media;
                return _this;
            }
            MediaTrack.prototype.getTypeString = function () {
                return '[fm.icelink.MediaTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaTrack.prototype.getMedia = function () {
                return this.media;
            };
            MediaTrack.prototype.addOnStarted = function (value) {
                return this._getInternal().addOnStarted(value);
            };
            MediaTrack.prototype.addOnStopped = function (value) {
                return this._getInternal().addOnStopped(value);
            };
            MediaTrack.prototype.addOnDestroyed = function (value) {
                return this._getInternal().addOnDestroyed(value);
            };
            MediaTrack.prototype.removeOnStarted = function (value) {
                return this._getInternal().removeOnStarted(value);
            };
            MediaTrack.prototype.removeOnStopped = function (value) {
                return this._getInternal().removeOnStopped(value);
            };
            MediaTrack.prototype.removeOnDestroyed = function (value) {
                return this._getInternal().removeOnDestroyed(value);
            };
            MediaTrack.prototype.changeSinkOutput = function (sinkOutput) {
                return this._getInternal().changeSinkOutput(sinkOutput);
            };
            MediaTrack.prototype.changeSourceInput = function (sourceInput) {
                return this._getInternal().changeSourceInput(sourceInput);
            };
            MediaTrack.prototype.destroy = function () {
                return this._getInternal().destroy();
            };
            MediaTrack.prototype.getMuted = function () {
                return this._getInternal().getMuted();
            };
            MediaTrack.prototype.getSinkOutput = function () {
                return this._getInternal().getSinkOutput();
            };
            MediaTrack.prototype.getSinkOutputs = function () {
                return this._getInternal().getSinkOutputs();
            };
            MediaTrack.prototype.getSourceInput = function () {
                return this._getInternal().getSourceInput();
            };
            MediaTrack.prototype.getSourceInputs = function () {
                return this._getInternal().getSourceInputs();
            };
            MediaTrack.prototype.setMuted = function (value) {
                this._getInternal().setMuted(value);
            };
            MediaTrack.prototype.setSinkOutput = function (value) {
                this._getInternal().setSinkOutput(value);
            };
            MediaTrack.prototype.setSourceInput = function (value) {
                this._getInternal().setSourceInput(value);
            };
            return MediaTrack;
        }(icelink.Dynamic));
        icelink.MediaTrack = MediaTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaTrack.ts" />

/// <reference path="MediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var AudioTrack = /** @class */ (function (_super) {
            __extends(AudioTrack, _super);
            function AudioTrack(media, internalMedia) {
                var _this = _super.call(this, media) || this;
                if (icelink.Util.isNullOrUndefined(media)) {
                    throw new icelink.Exception('Media cannot be null.');
                }
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginAudioTrack(_this, (media._getInternal() || internalMedia));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcAudioTrack(_this, (media._getInternal() || internalMedia));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            AudioTrack.prototype.getTypeString = function () {
                return '[fm.icelink.AudioTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            AudioTrack.prototype._getInternal = function () {
                return this._internal;
            };
            AudioTrack.prototype.addOnLevel = function (value) {
                return this._internal.addOnLevel(value);
            };
            AudioTrack.prototype.getGain = function () {
                return this._internal.getGain();
            };
            AudioTrack.prototype.getVolume = function () {
                return this._internal.getVolume();
            };
            AudioTrack.prototype.removeOnLevel = function (value) {
                return this._internal.removeOnLevel(value);
            };
            AudioTrack.prototype.setGain = function (value) {
                this._internal.setGain(value);
            };
            AudioTrack.prototype.setVolume = function (value) {
                this._internal.setVolume(value);
            };
            return AudioTrack;
        }(icelink.MediaTrack));
        icelink.AudioTrack = AudioTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Connection = /** @class */ (function (_super) {
            __extends(Connection, _super);
            function Connection() {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onGatheringStateChangeValues = [];
                /** @internal */
                _this._onIceConnectionStateChangeValues = [];
                /** @internal */
                _this._onLocalCandidateValues = [];
                /** @internal */
                _this._onLocalDescriptionValues = [];
                /** @internal */
                _this._onRemoteCandidateValues = [];
                /** @internal */
                _this._onRemoteDescriptionValues = [];
                /** @internal */
                _this._onSignallingStateChangeValues = [];
                /** @internal */
                _this._onStateChangeValues = [];
                _this._onExternalIdChangeValues = [];
                var streams = null;
                if (arguments.length == 0 || (arguments.length >= 1 && icelink.Util.isNullOrUndefined(arguments[0]))) {
                    throw new icelink.Exception('Stream(s) cannot be null.');
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.Stream]')) {
                    streams = [arguments[0]];
                }
                else if (arguments.length >= 1 && icelink.Util.isArrayType(arguments[0], '[fm.icelink.Stream]')) {
                    streams = arguments[0];
                }
                else if (arguments.length >= 1) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                var remoteMedia = null;
                for (var _i = 0, streams_1 = streams; _i < streams_1.length; _i++) {
                    var stream = streams_1[_i];
                    if (icelink.Util.isObjectType(stream, '[fm.icelink.AudioStream]')) {
                        var audioStream = stream;
                        var remoteAudioTrack = audioStream.getRemoteTrack();
                        if (remoteAudioTrack) {
                            var remoteAudioMedia = remoteAudioTrack.getMedia();
                            if (remoteMedia == null) {
                                remoteMedia = remoteAudioMedia;
                            }
                            else if (remoteMedia != remoteAudioMedia) {
                                throw new icelink.Exception('Remote media for streams does not match.');
                            }
                        }
                    }
                    else if (icelink.Util.isObjectType(stream, '[fm.icelink.VideoStream]')) {
                        var videoStream = stream;
                        var remoteVideoTrack = videoStream.getRemoteTrack();
                        if (remoteVideoTrack) {
                            var remoteVideoMedia = remoteVideoTrack.getMedia();
                            if (remoteMedia == null) {
                                remoteMedia = remoteVideoMedia;
                            }
                            else if (remoteMedia != remoteVideoMedia) {
                                throw new icelink.Exception('Remote media for streams does not match.');
                            }
                        }
                    }
                }
                if (remoteMedia == null) {
                    remoteMedia = new icelink.RemoteMedia();
                }
                _this._remoteMedia = remoteMedia;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginConnection(_this, _this.externalsToInternals(streams));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcConnection(_this, _this.externalsToInternals(streams), _this._remoteMedia._getInternal());
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                // event proxy
                _this._internal.addOnExternalIdChange(function (id1, id2) {
                    for (var _i = 0, _a = _this._onExternalIdChangeValues; _i < _a.length; _i++) {
                        var onExternalIdChangeValue = _a[_i];
                        onExternalIdChangeValue(id1, id2);
                    }
                });
                _this._internal.addOnGatheringStateChange(function (c) {
                    for (var _i = 0, _a = _this._onGatheringStateChangeValues; _i < _a.length; _i++) {
                        var onGatheringStateChangeValue = _a[_i];
                        onGatheringStateChangeValue(_this);
                    }
                });
                _this._internal.addOnIceConnectionStateChange(function (c) {
                    for (var _i = 0, _a = _this._onIceConnectionStateChangeValues; _i < _a.length; _i++) {
                        var onIceConnectionStateChangeValue = _a[_i];
                        onIceConnectionStateChangeValue(_this);
                    }
                });
                _this._internal.addOnLocalCandidate(function (c, candidate) {
                    for (var _i = 0, _a = _this._onLocalCandidateValues; _i < _a.length; _i++) {
                        var onLocalCandidateValue = _a[_i];
                        onLocalCandidateValue(_this, candidate);
                    }
                });
                _this._internal.addOnLocalDescription(function (c, sessionDescription) {
                    for (var _i = 0, _a = _this._onLocalDescriptionValues; _i < _a.length; _i++) {
                        var onLocalDescriptionValue = _a[_i];
                        onLocalDescriptionValue(_this, sessionDescription);
                    }
                });
                _this._internal.addOnRemoteCandidate(function (c, candidate) {
                    for (var _i = 0, _a = _this._onRemoteCandidateValues; _i < _a.length; _i++) {
                        var onRemoteCandidateValue = _a[_i];
                        onRemoteCandidateValue(_this, candidate);
                    }
                });
                _this._internal.addOnRemoteDescription(function (c, sessionDescription) {
                    for (var _i = 0, _a = _this._onRemoteDescriptionValues; _i < _a.length; _i++) {
                        var onRemoteDescriptionValue = _a[_i];
                        onRemoteDescriptionValue(_this, sessionDescription);
                    }
                });
                _this._internal.addOnSignallingStateChange(function (c) {
                    for (var _i = 0, _a = _this._onSignallingStateChangeValues; _i < _a.length; _i++) {
                        var onSignallingStateChangeValue = _a[_i];
                        onSignallingStateChangeValue(_this);
                    }
                });
                _this._internal.addOnStateChange(function (c) {
                    for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                        var onStateChangeValue = _a[_i];
                        onStateChangeValue(_this);
                    }
                });
                return _this;
            }
            Connection.prototype.getTypeString = function () {
                return '[fm.icelink.Connection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            Connection.prototype._getInternal = function () {
                return this._internal;
            };
            Connection.prototype.addIceServer = function (iceServer) {
                this._internal.addIceServer(iceServer);
            };
            Connection.prototype.addIceServers = function (iceServers) {
                this._internal.addIceServers(iceServers);
            };
            Connection.prototype.addOnGatheringStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onGatheringStateChangeValues, value);
            };
            Connection.prototype.addOnIceConnectionStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onIceConnectionStateChangeValues, value);
            };
            Connection.prototype.addOnLocalCandidate = function (value) {
                icelink.ArrayExtensions.add(this._onLocalCandidateValues, value);
            };
            Connection.prototype.addOnLocalDescription = function (value) {
                icelink.ArrayExtensions.add(this._onLocalDescriptionValues, value);
            };
            Connection.prototype.addOnRemoteCandidate = function (value) {
                icelink.ArrayExtensions.add(this._onRemoteCandidateValues, value);
            };
            Connection.prototype.addOnRemoteDescription = function (value) {
                icelink.ArrayExtensions.add(this._onRemoteDescriptionValues, value);
            };
            Connection.prototype.addOnSignallingStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onSignallingStateChangeValues, value);
            };
            Connection.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            Connection.prototype.addRemoteCandidate = function (remoteCandidate) {
                return this._internal.addRemoteCandidate(remoteCandidate);
            };
            Connection.prototype.close = function () {
                this._internal.close();
            };
            Connection.prototype.createAnswer = function () {
                return this._internal.createAnswer();
            };
            Connection.prototype.createOffer = function () {
                return this._internal.createOffer();
            };
            ;
            Connection.prototype.getDeadStreamTimeout = function () {
                return this._internal.getDeadStreamTimeout();
            };
            Connection.prototype.getError = function () {
                return this._internal.getError();
            };
            Connection.prototype.getExternalId = function () {
                return this._internal.getExternalId();
            };
            Connection.prototype.getIceGatherPolicy = function () {
                return this._internal.getIceGatherPolicy();
            };
            Connection.prototype.getIceServer = function () {
                return this._internal.getIceServer();
            };
            Connection.prototype.getGatheringState = function () {
                return this._internal.getGatheringState();
            };
            Connection.prototype.getIceConnectionState = function () {
                return this._internal.getIceConnectionState();
            };
            Connection.prototype.getIceServers = function () {
                return this._internal.getIceServers();
            };
            Connection.prototype.getId = function () {
                return this._internal.getId();
            };
            Connection.prototype.getLocalDescription = function () {
                return this._internal.getLocalDescription();
            };
            Connection.prototype.getRemoteDescription = function () {
                return this._internal.getRemoteDescription();
            };
            Connection.prototype.getSignallingState = function () {
                return this._internal.getSignallingState();
            };
            Connection.prototype.getState = function () {
                return this._internal.getState();
            };
            Connection.prototype.getStats = function () {
                return this._internal.getStats();
            };
            Connection.prototype.getStreams = function () {
                return this.internalsToExternals(this._internal.getStreams());
            };
            Connection.prototype.getTieBreaker = function () {
                return this._internal.getTieBreaker();
            };
            Connection.prototype.getTimeout = function () {
                return this._internal.getTimeout();
            };
            Connection.prototype.getTrickleIcePolicy = function () {
                return this._internal.getTrickleIcePolicy();
            };
            Connection.prototype.getHasAudio = function () {
                return this._internal.getHasAudio();
            };
            Connection.prototype.getHasVideo = function () {
                return this._internal.getHasVideo();
            };
            Connection.prototype.getHasData = function () {
                return this._internal.getHasData();
            };
            Connection.prototype.getAudioStream = function () {
                return this.internalToExternal(this._internal.getAudioStream());
            };
            Connection.prototype.getAudioStreams = function () {
                return this.internalsToExternals(this._internal.getAudioStreams());
            };
            Connection.prototype.getVideoStream = function () {
                return this.internalToExternal(this._internal.getVideoStream());
            };
            Connection.prototype.getVideoStreams = function () {
                return this.internalsToExternals(this._internal.getVideoStreams());
            };
            Connection.prototype.getDataStream = function () {
                return this.internalToExternal(this._internal.getDataStream());
            };
            Connection.prototype.getDataStreams = function () {
                return this.internalsToExternals(this._internal.getDataStreams());
            };
            Connection.prototype.removeIceServer = function (iceServer) {
                this._internal.removeIceServer(iceServer);
            };
            Connection.prototype.removeIceServers = function (iceServers) {
                this._internal.removeIceServers(iceServers);
            };
            Connection.prototype.removeOnGatheringStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onGatheringStateChangeValues, value);
            };
            Connection.prototype.removeOnIceConnectionStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onIceConnectionStateChangeValues, value);
            };
            Connection.prototype.removeOnLocalCandidate = function (value) {
                icelink.ArrayExtensions.remove(this._onLocalCandidateValues, value);
            };
            Connection.prototype.removeOnLocalDescription = function (value) {
                icelink.ArrayExtensions.remove(this._onLocalDescriptionValues, value);
            };
            Connection.prototype.removeOnRemoteCandidate = function (value) {
                icelink.ArrayExtensions.remove(this._onRemoteCandidateValues, value);
            };
            Connection.prototype.removeOnRemoteDescription = function (value) {
                icelink.ArrayExtensions.remove(this._onRemoteDescriptionValues, value);
            };
            Connection.prototype.removeOnSignallingStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onSignallingStateChangeValues, value);
            };
            Connection.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            Connection.prototype.setDeadStreamTimeout = function (value) {
                this._internal.setDeadStreamTimeout(value);
            };
            Connection.prototype.setExternalId = function (value) {
                this._internal.setExternalId(value);
            };
            Connection.prototype.addOnExternalIdChange = function (value) {
                icelink.ArrayExtensions.add(this._onExternalIdChangeValues, value);
            };
            Connection.prototype.removeOnExternalIdChange = function (value) {
                icelink.ArrayExtensions.remove(this._onExternalIdChangeValues, value);
            };
            Connection.prototype.setIceGatherPolicy = function (value) {
                this._internal.setIceGatherPolicy(value);
            };
            Connection.prototype.setIceServer = function (value) {
                this._internal.setIceServer(value);
            };
            Connection.prototype.setIceServers = function (value) {
                this._internal.setIceServers(value);
            };
            Connection.prototype.setLocalDescription = function (localDescription) {
                return this._internal.setLocalDescription(localDescription);
            };
            Connection.prototype.setRemoteDescription = function (remoteDescription) {
                return this._internal.setRemoteDescription(remoteDescription);
            };
            Connection.prototype.setTimeout = function (value) {
                this._internal.setTimeout(value);
            };
            Connection.prototype.setTrickleIcePolicy = function (value) {
                this._internal.setTrickleIcePolicy(value);
            };
            Connection.prototype.setTieBreaker = function (value) {
                this._internal.setTieBreaker(value);
            };
            Connection.prototype.getRemoteMedia = function () {
                //TODO: review this
                return this._remoteMedia;
            };
            Connection.prototype.externalsToInternals = function (externals) {
                var _this = this;
                return icelink.ArrayExtensions.map(externals, function (external) {
                    return _this.externalToInternal(external);
                });
            };
            Connection.prototype.externalToInternal = function (external) {
                return external._getInternal();
            };
            Connection.prototype.internalsToExternals = function (internals) {
                var _this = this;
                return icelink.ArrayExtensions.map(internals, function (internal) {
                    return _this.internalToExternal(internal);
                });
            };
            Connection.prototype.internalToExternal = function (internal) {
                if (internal == null) {
                    return null;
                }
                return internal._getExternal();
            };
            return Connection;
        }(icelink.Dynamic));
        icelink.Connection = Connection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DataChannel = /** @class */ (function (_super) {
            __extends(DataChannel, _super);
            function DataChannel(label, ordered, subprotocol) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onStateChangeValues = [];
                if (icelink.Util.isNullOrUndefined(ordered)) {
                    ordered = true;
                }
                if (icelink.Util.isNullOrUndefined(subprotocol)) {
                    subprotocol = '';
                }
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginDataChannel(_this, label, ordered, subprotocol);
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcDataChannel(_this, label, ordered, subprotocol);
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                // event proxy
                _this._internal.addOnStateChange(function (c) {
                    for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                        var onStateChangeValue = _a[_i];
                        onStateChangeValue(_this);
                    }
                });
                return _this;
            }
            DataChannel.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannel]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            DataChannel.prototype._getInternal = function () {
                return this._internal;
            };
            DataChannel.prototype.setOnReceive = function (value) {
                return this._getInternal().setOnReceive(value);
            };
            DataChannel.prototype.getSubprotocol = function () {
                return this._getInternal().getSubprotocol();
            };
            DataChannel.prototype.getOnReceive = function () {
                return this._getInternal().getOnReceive();
            };
            DataChannel.prototype.sendDataString = function (dataString) {
                return this._getInternal().sendDataString(dataString);
            };
            DataChannel.prototype.sendDataBytes = function (dataBytes) {
                return this._getInternal().sendDataBytes(dataBytes);
            };
            DataChannel.prototype.getState = function () {
                return this._getInternal().getState();
            };
            DataChannel.prototype.getLabel = function () {
                return this._getInternal().getLabel();
            };
            DataChannel.prototype.getId = function () {
                return this._getInternal().getId();
            };
            DataChannel.prototype.getOrdered = function () {
                return this._getInternal().getOrdered();
            };
            DataChannel.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            DataChannel.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            return DataChannel;
        }(icelink.Dynamic));
        icelink.DataChannel = DataChannel;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Stream.ts" />

/// <reference path="Stream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DataStream = /** @class */ (function (_super) {
            __extends(DataStream, _super);
            function DataStream() {
                var _this = _super.call(this) || this;
                if (arguments.length == 0) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                var channels = null;
                if (arguments.length >= 1 && icelink.Util.isNullOrUndefined(arguments[0])) {
                    throw new icelink.Exception('Data channels(s) cannot be null.');
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataChannel]')) {
                    channels = [arguments[0]];
                }
                else if (arguments.length >= 1 && icelink.Util.isArrayType(arguments[0], '[fm.icelink.DataChannel]')) {
                    channels = arguments[0];
                }
                else if (arguments.length >= 1) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                var channelsInternal = icelink.ArrayExtensions.map(channels, function (channel) {
                    return channel._getInternal();
                });
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginDataStream(_this, channelsInternal);
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcDataStream(_this, channelsInternal);
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            DataStream.prototype.getTypeString = function () {
                return '[fm.icelink.DataStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            DataStream.prototype._getInternal = function () {
                return this._internal;
            };
            DataStream.prototype.getChannels = function () {
                return this.internalsToExternals(this._getInternal().getChannels());
            };
            DataStream.prototype.externalToInternal = function (external) {
                return external._getInternal();
            };
            DataStream.prototype.externalsToInternals = function (externals) {
                return icelink.ArrayExtensions.map(externals, function (external) {
                    return external._getInternal();
                });
            };
            DataStream.prototype.internalToExternal = function (internal) {
                return internal._getExternal();
            };
            DataStream.prototype.internalsToExternals = function (internals) {
                return icelink.ArrayExtensions.map(internals, function (internal) {
                    return internal._getExternal();
                });
            };
            return DataStream;
        }(icelink.Stream));
        icelink.DataStream = DataStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DomAudioSink = /** @class */ (function (_super) {
            __extends(DomAudioSink, _super); /*implements ISoundSink<HTMLElement>, IExternal<ISoundSink<HTMLElement>>*/
            function DomAudioSink(track) {
                var _this = _super.call(this) || this;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginDomAudioSink(_this, (track == null ? null : track._getInternal()));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcDomAudioSink(_this, (track == null ? null : track._getInternal()));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            DomAudioSink.prototype.getTypeString = function () {
                return '[fm.icelink.DomAudioSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            DomAudioSink.prototype._getInternal = function () {
                return this._internal;
            };
            return DomAudioSink;
        }(icelink.Dynamic /*implements ISoundSink<HTMLElement>, IExternal<ISoundSink<HTMLElement>>*/));
        icelink.DomAudioSink = DomAudioSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A layout preset.
         </div>
    
        */
        var LayoutPreset = /** @class */ (function (_super) {
            __extends(LayoutPreset, _super);
            /**<span id='method-fm.icelink.LayoutPreset-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.layoutPreset` class.
             </div>
    
    
            @return {}
            */
            function LayoutPreset() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkLayoutPresetInit();
                    _this.__floatWidthPercent = 0;
                    _this.__floatHeightPercent = 0;
                    _this.__floatMarginXPercent = 0;
                    _this.__floatMarginYPercent = 0;
                    _this.__floatWidth = 0;
                    _this.__floatHeight = 0;
                    _this.__floatMarginX = 0;
                    _this.__floatMarginY = 0;
                    _this.__blockWidthPercent = 0;
                    _this.__blockHeightPercent = 0;
                    _this.__blockMarginXPercent = 0;
                    _this.__blockMarginYPercent = 0;
                    _this.__blockWidth = 0;
                    _this.__blockHeight = 0;
                    _this.__blockMarginX = 0;
                    _this.__blockMarginY = 0;
                    _this.setMode(fm.icelink.LayoutMode.FloatLocal);
                    _this.setDirection(fm.icelink.LayoutDirection.Horizontal);
                    _this.setAlignment(fm.icelink.LayoutAlignment.BottomRight);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            LayoutPreset.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutPreset]' + ',' + _super.prototype.getTypeString.call(this);
            };
            LayoutPreset.prototype.fmicelinkLayoutPresetInit = function () {
                this.__blockHeight = 0;
                this.__blockHeightPercent = 0;
                this.__blockMarginX = 0;
                this.__blockMarginXPercent = 0;
                this.__blockMarginY = 0;
                this.__blockMarginYPercent = 0;
                this.__blockWidth = 0;
                this.__blockWidthPercent = 0;
                this.__floatHeight = 0;
                this.__floatHeightPercent = 0;
                this.__floatMarginX = 0;
                this.__floatMarginXPercent = 0;
                this.__floatMarginY = 0;
                this.__floatMarginYPercent = 0;
                this.__floatWidth = 0;
                this.__floatWidthPercent = 0;
                this._inlineMargin = 0;
            };
            /**
            @internal
    
            */
            LayoutPreset.calculateTable = function (tableWidth, tableHeight, count) {
                if (arguments.length == 3) {
                    var num = 0;
                    var num2 = 1;
                    var num3 = 1;
                    for (var i = count; (i >= 1); i--) {
                        var num5 = fm.icelink.MathAssistant.ceil((count / i));
                        var num6 = (tableWidth / i);
                        var num7 = (tableHeight / num5);
                        var num8 = ((num6 < num7) ? num6 : num7);
                        if ((num8 >= num)) {
                            num = num8;
                            num2 = i;
                            num3 = num5;
                        }
                    }
                    var cellWidth = fm.icelink.MathAssistant.floor((tableWidth / num2));
                    return new fm.icelink.LayoutTable(num2, num3, cellWidth, fm.icelink.MathAssistant.floor((tableHeight / num3)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.divideByTwo = function (value) {
                if (arguments.length == 1) {
                    return fm.icelink.MathAssistant.floor((value / 2));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFacetime'>&nbsp;</span>**/
            /**
             <div>
             Gets a Facetime-style layout preset.
             </div>
    
    
            @return {fm.icelink.LayoutPreset}
            */
            LayoutPreset.getFacetime = function () {
                if (arguments.length == 0) {
                    var preset = new fm.icelink.LayoutPreset();
                    preset.setMode(fm.icelink.LayoutMode.FloatLocal);
                    preset.setAlignment(fm.icelink.LayoutAlignment.BottomRight);
                    preset.setFloatMarginX(10);
                    preset.setFloatMarginY(10);
                    preset.setFloatWidthPercent(0.25);
                    preset.setFloatHeightPercent(0.25);
                    preset.setInlineMargin(0);
                    return preset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getGoogleHangouts'>&nbsp;</span>**/
            /**
             <div>
             Gets a Google Hangouts-style layout preset.
             Note that this will present differently
             on mobile devices.
             </div>
    
    
            @return {fm.icelink.LayoutPreset}
            */
            LayoutPreset.getGoogleHangouts = function () {
                if (arguments.length == 0) {
                    if (fm.icelink.Platform.getInstance().getIsMobile()) {
                        var preset = new fm.icelink.LayoutPreset();
                        preset.setMode(fm.icelink.LayoutMode.FloatRemote);
                        preset.setAlignment(fm.icelink.LayoutAlignment.BottomRight);
                        preset.setFloatMarginX(0);
                        preset.setFloatMarginY(10);
                        preset.setFloatWidthPercent(0.25);
                        preset.setFloatHeightPercent(0.25);
                        preset.setInlineMargin(5);
                        return preset;
                    }
                    var preset2 = new fm.icelink.LayoutPreset();
                    preset2.setMode(fm.icelink.LayoutMode.Block);
                    preset2.setAlignment(fm.icelink.LayoutAlignment.Top);
                    preset2.setBlockWidthPercent(0.666666666666667);
                    preset2.setBlockHeightPercent(0.666666666666667);
                    preset2.setInlineMargin(0);
                    return preset2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getSingleLayout = function (layoutWidth, layoutHeight) {
                if (arguments.length == 2) {
                    var layout = new fm.icelink.Layout();
                    layout.setLocalFrame(new fm.icelink.LayoutFrame(0, 0, layoutWidth, layoutHeight));
                    return layout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getSkype'>&nbsp;</span>**/
            /**
             <div>
             Gets a Skype-style layout preset.
             Note that this will present differently
             on mobile devices.
             </div>
    
    
            @return {fm.icelink.LayoutPreset}
            */
            LayoutPreset.getSkype = function () {
                if (arguments.length == 0) {
                    if (fm.icelink.Platform.getInstance().getIsMobile()) {
                        return fm.icelink.LayoutPreset.getFacetime();
                    }
                    var preset = new fm.icelink.LayoutPreset();
                    preset.setMode(fm.icelink.LayoutMode.Block);
                    preset.setDirection(fm.icelink.LayoutDirection.Horizontal);
                    preset.setAlignment(fm.icelink.LayoutAlignment.Bottom);
                    preset.setBlockMarginX(10);
                    preset.setBlockMarginY(10);
                    preset.setBlockWidthPercent(0.333333333333333);
                    preset.setBlockHeightPercent(0.333333333333333);
                    preset.setInlineMargin(10);
                    return preset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getXMax = function (frames) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(frames.length, 0))) {
                        return frames[0].getX();
                    }
                    var x = frames[0].getX();
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        if ((frame.getX() > x)) {
                            x = frame.getX();
                        }
                    }
                    return x;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getXMid = function (frames) {
                if (arguments.length == 1) {
                    var xMin = fm.icelink.LayoutPreset.getXMin(frames);
                    var xMax = fm.icelink.LayoutPreset.getXMax(frames);
                    if ((fm.icelink.Global.equals(xMin, xMax))) {
                        return xMin;
                    }
                    var num3 = fm.icelink.LayoutPreset.divideByTwo((xMin + xMax));
                    var x = frames[0].getX();
                    var num5 = fm.icelink.MathAssistant.abs((num3 - x));
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        var num7 = fm.icelink.MathAssistant.abs((num3 - frame.getX()));
                        if ((num7 < num5)) {
                            x = frame.getX();
                            num5 = num7;
                        }
                    }
                    return x;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getXMin = function (frames) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(frames.length, 0))) {
                        return frames[0].getX();
                    }
                    var x = frames[0].getX();
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        if ((frame.getX() < x)) {
                            x = frame.getX();
                        }
                    }
                    return x;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getYMax = function (frames) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(frames.length, 0))) {
                        return frames[0].getY();
                    }
                    var y = frames[0].getY();
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        if ((frame.getY() > y)) {
                            y = frame.getY();
                        }
                    }
                    return y;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getYMid = function (frames) {
                if (arguments.length == 1) {
                    var yMin = fm.icelink.LayoutPreset.getYMin(frames);
                    var yMax = fm.icelink.LayoutPreset.getYMax(frames);
                    if ((fm.icelink.Global.equals(yMin, yMax))) {
                        return yMin;
                    }
                    var num3 = fm.icelink.LayoutPreset.divideByTwo((yMin + yMax));
                    var y = frames[0].getY();
                    var num5 = fm.icelink.MathAssistant.abs((num3 - y));
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        var num7 = fm.icelink.MathAssistant.abs((num3 - frame.getY()));
                        if ((num7 < num5)) {
                            y = frame.getY();
                            num5 = num7;
                        }
                    }
                    return y;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.getYMin = function (frames) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(frames.length, 0))) {
                        return frames[0].getY();
                    }
                    var y = frames[0].getY();
                    for (var i = 1; (i < frames.length); i++) {
                        var frame = frames[i];
                        if ((frame.getY() < y)) {
                            y = frame.getY();
                        }
                    }
                    return y;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.mergeLayoutFrames = function (firstFrames, lastFrames) {
                if (arguments.length == 2) {
                    var num3 = void 0;
                    var length_4 = firstFrames.length;
                    var num2 = lastFrames.length;
                    var frameArray = new Array((length_4 + num2));
                    for (num3 = 0; (num3 < length_4); num3++) {
                        frameArray[num3] = firstFrames[num3];
                    }
                    for (num3 = 0; (num3 < num2); num3++) {
                        frameArray[(num3 + length_4)] = lastFrames[num3];
                    }
                    return frameArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.spliceLayoutFrame = function (frames, index) {
                if (arguments.length == 2) {
                    var start = (index + 1);
                    return fm.icelink.LayoutPreset.mergeLayoutFrames(fm.icelink.LayoutPreset.takeLayoutFrames(frames, 0, index), fm.icelink.LayoutPreset.takeLayoutFrames(frames, start, (frames.length - start)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.takeLayoutFrames = function (frames, start, length) {
                if (arguments.length == 3) {
                    var frameArray = new Array(length);
                    for (var i = 0; (i < frameArray.length); i++) {
                        frameArray[i] = frames[(start + i)];
                    }
                    return frameArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.transformFrame = function (frame, origin, layoutWidth, layoutHeight) {
                if (arguments.length == 4) {
                    var flag = false;
                    var flag2 = false;
                    var _var0 = origin;
                    if (_var0 == fm.icelink.LayoutOrigin.TopRight) {
                        do {
                            flag = true;
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LayoutOrigin.BottomRight) {
                        do {
                            flag = true;
                            flag2 = true;
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LayoutOrigin.BottomLeft) {
                        do {
                            flag2 = true;
                            break;
                        } while (false);
                    }
                    if (flag) {
                        frame.setX(((layoutWidth - frame.getX()) - frame.getWidth()));
                    }
                    if (flag2) {
                        frame.setY(((layoutHeight - frame.getY()) - frame.getHeight()));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-applyPreset'>&nbsp;</span>**/
            /**
             <div>
             Applies a preset.
             </div>
    
            @param {fm.icelink.LayoutPreset} preset The preset to apply.
            @return {void}
            */
            LayoutPreset.prototype.applyPreset = function (preset) {
                if (arguments.length == 1) {
                    this.setMode(preset.getMode());
                    this.setDirection(preset.getDirection());
                    this.setAlignment(preset.getAlignment());
                    this.setFloatWidth(0);
                    this.setFloatHeight(0);
                    this.setFloatMarginX(0);
                    this.setFloatMarginY(0);
                    this.setFloatWidthPercent(0);
                    this.setFloatHeightPercent(0);
                    this.setFloatMarginXPercent(0);
                    this.setFloatMarginYPercent(0);
                    this.setBlockWidth(0);
                    this.setBlockHeight(0);
                    this.setBlockMarginX(0);
                    this.setBlockMarginY(0);
                    this.setBlockWidthPercent(0);
                    this.setBlockHeightPercent(0);
                    this.setBlockMarginXPercent(0);
                    this.setBlockMarginYPercent(0);
                    this.setInlineMargin(0);
                    if ((preset.getFloatWidth() > 0)) {
                        this.setFloatWidth(preset.getFloatWidth());
                    }
                    if ((preset.getFloatHeight() > 0)) {
                        this.setFloatHeight(preset.getFloatHeight());
                    }
                    if ((preset.getFloatMarginX() > 0)) {
                        this.setFloatMarginX(preset.getFloatMarginX());
                    }
                    if ((preset.getFloatMarginY() > 0)) {
                        this.setFloatMarginY(preset.getFloatMarginY());
                    }
                    if ((preset.getFloatWidthPercent() > 0)) {
                        this.setFloatWidthPercent(preset.getFloatWidthPercent());
                    }
                    if ((preset.getFloatHeightPercent() > 0)) {
                        this.setFloatHeightPercent(preset.getFloatHeightPercent());
                    }
                    if ((preset.getFloatMarginXPercent() > 0)) {
                        this.setFloatMarginXPercent(preset.getFloatMarginXPercent());
                    }
                    if ((preset.getFloatMarginYPercent() > 0)) {
                        this.setFloatMarginYPercent(preset.getFloatMarginYPercent());
                    }
                    if ((preset.getBlockWidth() > 0)) {
                        this.setBlockWidth(preset.getBlockWidth());
                    }
                    if ((preset.getBlockHeight() > 0)) {
                        this.setBlockHeight(preset.getBlockHeight());
                    }
                    if ((preset.getBlockMarginX() > 0)) {
                        this.setBlockMarginX(preset.getBlockMarginX());
                    }
                    if ((preset.getBlockMarginY() > 0)) {
                        this.setBlockMarginY(preset.getBlockMarginY());
                    }
                    if ((preset.getBlockWidthPercent() > 0)) {
                        this.setBlockWidthPercent(preset.getBlockWidthPercent());
                    }
                    if ((preset.getBlockHeightPercent() > 0)) {
                        this.setBlockHeightPercent(preset.getBlockHeightPercent());
                    }
                    if ((preset.getBlockMarginXPercent() > 0)) {
                        this.setBlockMarginXPercent(preset.getBlockMarginXPercent());
                    }
                    if ((preset.getBlockMarginYPercent() > 0)) {
                        this.setBlockMarginYPercent(preset.getBlockMarginYPercent());
                    }
                    if ((preset.getInlineMargin() > 0)) {
                        this.setInlineMargin(preset.getInlineMargin());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateBlockFrame = function (layoutWidth, layoutHeight, marginX, marginY) {
                if (arguments.length == 4) {
                    if (((fm.icelink.Global.equals(this.getBlockWidth(), 0)) && (fm.icelink.Global.equals(this.getBlockWidthPercent(), 0)))) {
                        this.setBlockWidthPercent(0.25);
                    }
                    if (((fm.icelink.Global.equals(this.getBlockHeight(), 0)) && (fm.icelink.Global.equals(this.getBlockHeightPercent(), 0)))) {
                        this.setBlockHeightPercent(0.25);
                    }
                    var width = ((this.getBlockWidth() > 0) ? this.getBlockWidth() : (layoutWidth * this.getBlockWidthPercent()));
                    var height = ((this.getBlockHeight() > 0) ? this.getBlockHeight() : (layoutHeight * this.getBlockHeightPercent()));
                    marginX.setValue(((this.getBlockMarginX() > 0) ? this.getBlockMarginX() : (layoutWidth * this.getBlockMarginXPercent())));
                    marginY.setValue(((this.getBlockMarginY() > 0) ? this.getBlockMarginY() : (layoutHeight * this.getBlockMarginYPercent())));
                    var x = 0;
                    var _var0 = this.getAlignment();
                    if (_var0 == fm.icelink.LayoutAlignment.Top || _var0 == fm.icelink.LayoutAlignment.Center || _var0 == fm.icelink.LayoutAlignment.Bottom) {
                        do {
                            x = fm.icelink.LayoutPreset.divideByTwo((layoutWidth - width));
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LayoutAlignment.TopRight || _var0 == fm.icelink.LayoutAlignment.Right || _var0 == fm.icelink.LayoutAlignment.BottomRight) {
                        do {
                            x = (layoutWidth - width);
                            break;
                        } while (false);
                    }
                    else {
                        do {
                            x = 0;
                            break;
                        } while (false);
                    }
                    var y = 0;
                    var _var1 = this.getAlignment();
                    if (_var1 == fm.icelink.LayoutAlignment.Left || _var1 == fm.icelink.LayoutAlignment.Center || _var1 == fm.icelink.LayoutAlignment.Right) {
                        do {
                            y = fm.icelink.LayoutPreset.divideByTwo((layoutHeight - height));
                            break;
                        } while (false);
                    }
                    else if (_var1 == fm.icelink.LayoutAlignment.BottomLeft || _var1 == fm.icelink.LayoutAlignment.Bottom || _var1 == fm.icelink.LayoutAlignment.BottomRight) {
                        do {
                            y = (layoutHeight - height);
                            break;
                        } while (false);
                    }
                    else {
                        do {
                            y = 0;
                            break;
                        } while (false);
                    }
                    return new fm.icelink.LayoutFrame(x, y, width, height);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateFillFrame = function (layoutWidth, layoutHeight) {
                if (arguments.length == 2) {
                    return new fm.icelink.LayoutFrame(0, 0, layoutWidth, layoutHeight);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateFloatFrame = function (layoutWidth, layoutHeight) {
                if (arguments.length == 2) {
                    return this.calculateFloatFrames(layoutWidth, layoutHeight, 1)[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateFloatFrames = function (layoutWidth, layoutHeight, count) {
                if (arguments.length == 3) {
                    if (((fm.icelink.Global.equals(this.getFloatWidth(), 0)) && (fm.icelink.Global.equals(this.getFloatWidthPercent(), 0)))) {
                        this.setFloatWidthPercent(0.25);
                    }
                    if (((fm.icelink.Global.equals(this.getFloatHeight(), 0)) && (fm.icelink.Global.equals(this.getFloatHeightPercent(), 0)))) {
                        this.setFloatHeightPercent(0.25);
                    }
                    var num = ((this.getFloatWidth() > 0) ? this.getFloatWidth() : (layoutWidth * this.getFloatWidthPercent()));
                    var num2 = ((this.getFloatHeight() > 0) ? this.getFloatHeight() : (layoutHeight * this.getFloatHeightPercent()));
                    var num3 = ((this.getFloatMarginX() > 0) ? this.getFloatMarginX() : (layoutWidth * this.getFloatMarginXPercent()));
                    var num4 = ((this.getFloatMarginY() > 0) ? this.getFloatMarginY() : (layoutHeight * this.getFloatMarginYPercent()));
                    if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Horizontal))) {
                        num = fm.icelink.MathAssistant.min(layoutWidth, (num * count));
                    }
                    else {
                        num2 = fm.icelink.MathAssistant.min(layoutHeight, (num2 * count));
                    }
                    var frameArray = this.calculateInlineFrames(num, num2, count, 0, 0);
                    var _var0 = this.getAlignment();
                    if (_var0 == fm.icelink.LayoutAlignment.TopLeft || _var0 == fm.icelink.LayoutAlignment.Top || _var0 == fm.icelink.LayoutAlignment.TopRight) {
                        do {
                            for (var _i = 0, frameArray_1 = frameArray; _i < frameArray_1.length; _i++) {
                                var frame = frameArray_1[_i];
                                frame.setY((frame.getY() + num4));
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LayoutAlignment.Left || _var0 == fm.icelink.LayoutAlignment.Center || _var0 == fm.icelink.LayoutAlignment.Right) {
                        do {
                            for (var _a = 0, frameArray_2 = frameArray; _a < frameArray_2.length; _a++) {
                                var frame = frameArray_2[_a];
                                frame.setY((frame.getY() + fm.icelink.LayoutPreset.divideByTwo((layoutHeight - num2))));
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LayoutAlignment.BottomLeft || _var0 == fm.icelink.LayoutAlignment.Bottom || _var0 == fm.icelink.LayoutAlignment.BottomRight) {
                        do {
                            for (var _b = 0, frameArray_3 = frameArray; _b < frameArray_3.length; _b++) {
                                var frame = frameArray_3[_b];
                                frame.setY((frame.getY() + ((layoutHeight - num2) - num4)));
                            }
                            break;
                        } while (false);
                    }
                    var _var1 = this.getAlignment();
                    if (_var1 == fm.icelink.LayoutAlignment.TopLeft || _var1 == fm.icelink.LayoutAlignment.Left || _var1 == fm.icelink.LayoutAlignment.BottomLeft) {
                        do {
                            for (var _c = 0, frameArray_4 = frameArray; _c < frameArray_4.length; _c++) {
                                var frame = frameArray_4[_c];
                                frame.setX((frame.getX() + num3));
                            }
                            return frameArray;
                        } while (false);
                    }
                    else if (_var1 == fm.icelink.LayoutAlignment.Top || _var1 == fm.icelink.LayoutAlignment.Center || _var1 == fm.icelink.LayoutAlignment.Bottom) {
                        do {
                            for (var _d = 0, frameArray_5 = frameArray; _d < frameArray_5.length; _d++) {
                                var frame = frameArray_5[_d];
                                frame.setX((frame.getX() + fm.icelink.LayoutPreset.divideByTwo((layoutWidth - num))));
                            }
                            return frameArray;
                        } while (false);
                    }
                    else if (_var1 == fm.icelink.LayoutAlignment.TopRight || _var1 == fm.icelink.LayoutAlignment.Right || _var1 == fm.icelink.LayoutAlignment.BottomRight) {
                        do {
                            for (var _e = 0, frameArray_6 = frameArray; _e < frameArray_6.length; _e++) {
                                var frame = frameArray_6[_e];
                                frame.setX((frame.getX() + ((layoutWidth - num) - num3)));
                            }
                            return frameArray;
                        } while (false);
                    }
                    return frameArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateInlineFrame = function (cellX, cellY, cellWidth, cellHeight) {
                if (arguments.length == 4) {
                    var num = fm.icelink.LayoutPreset.divideByTwo(this.getInlineMargin());
                    var x = (cellX - num);
                    var y = (cellY - num);
                    var width = (cellWidth - this.getInlineMargin());
                    return new fm.icelink.LayoutFrame(x, y, width, (cellHeight - this.getInlineMargin()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.calculateInlineFrames = function (layoutWidth, layoutHeight, count, baseX, baseY) {
                if (arguments.length == 5) {
                    var num6 = void 0;
                    var num7 = void 0;
                    var num8 = void 0;
                    var num9 = void 0;
                    var num10 = void 0;
                    var num12 = void 0;
                    var num13 = void 0;
                    var num14 = void 0;
                    var num15 = void 0;
                    var num16 = void 0;
                    var num17 = void 0;
                    var frame = void 0;
                    var list = new Array();
                    var table = fm.icelink.LayoutPreset.calculateTable((layoutWidth + this.getInlineMargin()), (layoutHeight + this.getInlineMargin()), count);
                    var columnCount = table.getColumnCount();
                    var rowCount = table.getRowCount();
                    var cellWidth = table.getCellWidth();
                    var cellHeight = table.getCellHeight();
                    var num5 = fm.icelink.LayoutPreset.divideByTwo(this.getInlineMargin());
                    if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Horizontal))) {
                        num6 = 0;
                        num7 = (baseY + num5);
                        num8 = ((layoutHeight - (rowCount * cellHeight)) + this.getInlineMargin());
                        num9 = 0;
                        while ((num9 < rowCount)) {
                            num10 = ((num9 < num8) ? 1 : 0);
                            var num11 = columnCount;
                            if ((fm.icelink.Global.equals(num9, (rowCount - 1)))) {
                                num11 = (count - num6);
                            }
                            num12 = (baseX + num5);
                            if (((fm.icelink.Global.equals(num9, (rowCount - 1))) && (rowCount > 1))) {
                                num13 = (num12 - num5);
                                num14 = (num7 - num5);
                                fm.icelink.ArrayExtensions.addRange(list, this.calculateInlineFrames((baseX + layoutWidth), ((baseY + layoutHeight) - num14), num11, num13, num14));
                            }
                            else {
                                num15 = ((layoutWidth - (num11 * cellWidth)) + this.getInlineMargin());
                                num16 = 0;
                                while ((num16 < num11)) {
                                    num17 = ((num16 < num15) ? 1 : 0);
                                    frame = this.calculateInlineFrame(num12, num7, (cellWidth + num17), (cellHeight + num10));
                                    fm.icelink.ArrayExtensions.add(list, frame);
                                    num12 = (num12 + (cellWidth + num17));
                                    num16++;
                                    num6++;
                                }
                            }
                            num7 = (num7 + (cellHeight + num10));
                            num9++;
                        }
                    }
                    else {
                        num6 = 0;
                        num12 = (baseX + num5);
                        num15 = ((layoutWidth - (columnCount * cellWidth)) + this.getInlineMargin());
                        for (num16 = 0; (num16 < columnCount); num16++) {
                            num17 = ((num16 < num15) ? 1 : 0);
                            var num18 = rowCount;
                            if ((fm.icelink.Global.equals(num16, (columnCount - 1)))) {
                                num18 = (count - num6);
                            }
                            num7 = (baseY + num5);
                            if (((fm.icelink.Global.equals(num16, (columnCount - 1))) && (columnCount > 1))) {
                                num13 = (num12 - num5);
                                num14 = (num7 - num5);
                                fm.icelink.ArrayExtensions.addRange(list, this.calculateInlineFrames(((baseX + layoutWidth) - num13), (baseY + layoutHeight), num18, num13, num14));
                            }
                            else {
                                num8 = ((layoutHeight - (num18 * cellHeight)) + this.getInlineMargin());
                                num9 = 0;
                                while ((num9 < num18)) {
                                    num10 = ((num9 < num8) ? 1 : 0);
                                    frame = this.calculateInlineFrame(num12, num7, (cellWidth + num17), (cellHeight + num10));
                                    fm.icelink.ArrayExtensions.add(list, frame);
                                    num7 = (num7 + (cellHeight + num10));
                                    num9++;
                                    num6++;
                                }
                            }
                            num12 = (num12 + (cellWidth + num17));
                        }
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-calculateLayout'>&nbsp;</span>**/
            /**
             <div>
             Gets a video frame layout.
             </div>
    
            @param {number} layoutWidth The total width of the layout.
            @param {number} layoutHeight The total height of the layout.
            @param {number} remoteCount The number of remote frames.
            @param {fm.icelink.LayoutOrigin} origin The layout origin
            @return {fm.icelink.Layout} The video frame layout.
            */
            LayoutPreset.prototype.calculateLayout = function (layoutWidth, layoutHeight, remoteCount, origin) {
                if (arguments.length == 4) {
                    if ((layoutWidth < 0)) {
                        layoutWidth = 0;
                    }
                    if ((layoutHeight < 0)) {
                        layoutHeight = 0;
                    }
                    var singleLayout = null;
                    if ((fm.icelink.Global.equals(remoteCount, 0))) {
                        singleLayout = fm.icelink.LayoutPreset.getSingleLayout(layoutWidth, layoutHeight);
                    }
                    else {
                        if ((fm.icelink.Global.equals(this.getMode(), fm.icelink.LayoutMode.FloatLocal))) {
                            singleLayout = this.getFloatLocalLayout(layoutWidth, layoutHeight, remoteCount);
                        }
                        else {
                            if ((fm.icelink.Global.equals(this.getMode(), fm.icelink.LayoutMode.FloatRemote))) {
                                singleLayout = this.getFloatRemoteLayout(layoutWidth, layoutHeight, remoteCount);
                            }
                            else {
                                if ((fm.icelink.Global.equals(this.getMode(), fm.icelink.LayoutMode.Block))) {
                                    singleLayout = this.getBlockLayout(layoutWidth, layoutHeight, remoteCount);
                                }
                                else {
                                    singleLayout = this.getInlineLayout(layoutWidth, layoutHeight, remoteCount);
                                }
                            }
                        }
                    }
                    fm.icelink.LayoutPreset.transformFrame(singleLayout.getLocalFrame(), origin, layoutWidth, layoutHeight);
                    for (var _i = 0, _a = singleLayout.getRemoteFrames(); _i < _a.length; _i++) {
                        var frame = _a[_i];
                        fm.icelink.LayoutPreset.transformFrame(frame, origin, layoutWidth, layoutHeight);
                    }
                    singleLayout.setWidth(layoutWidth);
                    singleLayout.setHeight(layoutHeight);
                    singleLayout.setOrigin(origin);
                    return singleLayout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-copyToPreset'>&nbsp;</span>**/
            /**
             <div>
             Copies this preset's properties to another preset.
             </div>
    
            @param {fm.icelink.LayoutPreset} preset The target preset.
            @return {void}
            */
            LayoutPreset.prototype.copyToPreset = function (preset) {
                if (arguments.length == 1) {
                    preset.setMode(this.getMode());
                    preset.setDirection(this.getDirection());
                    preset.setAlignment(this.getAlignment());
                    preset.setFloatWidth(0);
                    preset.setFloatHeight(0);
                    preset.setFloatMarginX(0);
                    preset.setFloatMarginY(0);
                    preset.setFloatWidthPercent(0);
                    preset.setFloatHeightPercent(0);
                    preset.setFloatMarginXPercent(0);
                    preset.setFloatMarginYPercent(0);
                    preset.setBlockWidth(0);
                    preset.setBlockHeight(0);
                    preset.setBlockMarginX(0);
                    preset.setBlockMarginY(0);
                    preset.setBlockWidthPercent(0);
                    preset.setBlockHeightPercent(0);
                    preset.setBlockMarginXPercent(0);
                    preset.setBlockMarginYPercent(0);
                    preset.setInlineMargin(0);
                    if ((this.getFloatWidth() > 0)) {
                        preset.setFloatWidth(this.getFloatWidth());
                    }
                    if ((this.getFloatHeight() > 0)) {
                        preset.setFloatHeight(this.getFloatHeight());
                    }
                    if ((this.getFloatMarginX() > 0)) {
                        preset.setFloatMarginX(this.getFloatMarginX());
                    }
                    if ((this.getFloatMarginY() > 0)) {
                        preset.setFloatMarginY(this.getFloatMarginY());
                    }
                    if ((this.getFloatWidthPercent() > 0)) {
                        preset.setFloatWidthPercent(this.getFloatWidthPercent());
                    }
                    if ((this.getFloatHeightPercent() > 0)) {
                        preset.setFloatHeightPercent(this.getFloatHeightPercent());
                    }
                    if ((this.getFloatMarginXPercent() > 0)) {
                        preset.setFloatMarginXPercent(this.getFloatMarginXPercent());
                    }
                    if ((this.getFloatMarginYPercent() > 0)) {
                        preset.setFloatMarginYPercent(this.getFloatMarginYPercent());
                    }
                    if ((this.getBlockWidth() > 0)) {
                        preset.setBlockWidth(this.getBlockWidth());
                    }
                    if ((this.getBlockHeight() > 0)) {
                        preset.setBlockHeight(this.getBlockHeight());
                    }
                    if ((this.getBlockMarginX() > 0)) {
                        preset.setBlockMarginX(this.getBlockMarginX());
                    }
                    if ((this.getBlockMarginY() > 0)) {
                        preset.setBlockMarginY(this.getBlockMarginY());
                    }
                    if ((this.getBlockWidthPercent() > 0)) {
                        preset.setBlockWidthPercent(this.getBlockWidthPercent());
                    }
                    if ((this.getBlockHeightPercent() > 0)) {
                        preset.setBlockHeightPercent(this.getBlockHeightPercent());
                    }
                    if ((this.getBlockMarginXPercent() > 0)) {
                        preset.setBlockMarginXPercent(this.getBlockMarginXPercent());
                    }
                    if ((this.getBlockMarginYPercent() > 0)) {
                        preset.setBlockMarginYPercent(this.getBlockMarginYPercent());
                    }
                    if ((this.getInlineMargin() > 0)) {
                        preset.setInlineMargin(this.getInlineMargin());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getAlignment'>&nbsp;</span>**/
            /**
             <div>
             Gets the alignment of the layout.
             Defaults to `fm.icelink.layoutAlignment.BottomRight`.
             </div>
    
    
            @return {fm.icelink.LayoutAlignment}
            */
            LayoutPreset.prototype.getAlignment = function () {
                if (arguments.length == 0) {
                    return this._alignment;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height of block elements in pixels.
             Overrides `fm.icelink.layoutPreset.blockHeightPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockHeight = function () {
                if (arguments.length == 0) {
                    return this.__blockHeight;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockHeightPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the height of block elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockHeight`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockHeightPercent = function () {
                if (arguments.length == 0) {
                    return this.__blockHeightPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getBlockLayout = function (layoutWidth, layoutHeight, remoteCount) {
                if (arguments.length == 3) {
                    var num7 = void 0;
                    var num8 = void 0;
                    var marginX = 0;
                    var marginY = 0;
                    var _var0 = new fm.icelink.Holder(marginX);
                    var _var1 = new fm.icelink.Holder(marginY);
                    var _var2 = this.calculateBlockFrame(layoutWidth, layoutHeight, _var0, _var1);
                    marginX = _var0.getValue();
                    marginY = _var1.getValue();
                    var frame = _var2;
                    var list = new Array();
                    if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Center))) {
                        var count = fm.icelink.LayoutPreset.divideByTwo(remoteCount);
                        var num4 = (remoteCount - count);
                        var baseX = 0;
                        var baseY = 0;
                        if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Vertical))) {
                            num7 = ((frame.getWidth() + marginX) + marginX);
                            layoutWidth = fm.icelink.LayoutPreset.divideByTwo((layoutWidth - num7));
                            baseX = (layoutWidth + num7);
                        }
                        else {
                            num8 = ((frame.getHeight() + marginY) + marginY);
                            layoutHeight = fm.icelink.LayoutPreset.divideByTwo((layoutHeight - num8));
                            baseY = (layoutHeight + num8);
                        }
                        if ((count > 0)) {
                            fm.icelink.ArrayExtensions.addRange(list, this.calculateInlineFrames(layoutWidth, layoutHeight, count, 0, 0));
                        }
                        if ((num4 > 0)) {
                            fm.icelink.ArrayExtensions.addRange(list, this.calculateInlineFrames(layoutWidth, layoutHeight, num4, baseX, baseY));
                        }
                    }
                    else {
                        var num9 = 0;
                        var num10 = 0;
                        num7 = (frame.getWidth() + marginX);
                        num8 = (frame.getHeight() + marginY);
                        if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Top))) {
                            num10 = num8;
                            layoutHeight = (layoutHeight - num8);
                        }
                        else {
                            if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Bottom))) {
                                layoutHeight = (layoutHeight - num8);
                            }
                            else {
                                if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Left))) {
                                    num9 = num7;
                                    layoutWidth = (layoutWidth - num7);
                                }
                                else {
                                    if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Right))) {
                                        layoutWidth = (layoutWidth - num7);
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Vertical))) {
                                            if (((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.TopLeft)) || (fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.BottomLeft)))) {
                                                num9 = num7;
                                            }
                                            layoutWidth = (layoutWidth - num7);
                                        }
                                        else {
                                            if (((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.TopLeft)) || (fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.TopRight)))) {
                                                num10 = num8;
                                            }
                                            layoutHeight = (layoutHeight - num8);
                                        }
                                    }
                                }
                            }
                        }
                        fm.icelink.ArrayExtensions.addRange(list, this.calculateInlineFrames(layoutWidth, layoutHeight, remoteCount, num9, num10));
                    }
                    var layout = new fm.icelink.Layout();
                    layout.setLocalFrame(frame);
                    layout.setRemoteFrames(fm.icelink.ArrayExtensions.toArray(list));
                    return layout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginX'>&nbsp;</span>**/
            /**
             <div>
             Gets the X-margin between block elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.blockMarginXPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockMarginX = function () {
                if (arguments.length == 0) {
                    return this.__blockMarginX;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginXPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the X-margin between block elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockMarginX`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockMarginXPercent = function () {
                if (arguments.length == 0) {
                    return this.__blockMarginXPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginY'>&nbsp;</span>**/
            /**
             <div>
             Gets the Y-margin between block elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.blockMarginYPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockMarginY = function () {
                if (arguments.length == 0) {
                    return this.__blockMarginY;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginYPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the Y-margin between block elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockMarginY`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockMarginYPercent = function () {
                if (arguments.length == 0) {
                    return this.__blockMarginYPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width of block elements in pixels.
             Overrides `fm.icelink.layoutPreset.blockWidthPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockWidth = function () {
                if (arguments.length == 0) {
                    return this.__blockWidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getBlockWidthPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the width of block elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockWidth`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getBlockWidthPercent = function () {
                if (arguments.length == 0) {
                    return this.__blockWidthPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getBottomRowIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var yMax = fm.icelink.LayoutPreset.getYMax(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMax))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMax))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getCenterColumnIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var xMid = fm.icelink.LayoutPreset.getXMid(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMid))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMid))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getCenterRowIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var yMid = fm.icelink.LayoutPreset.getYMid(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMid))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMid))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the direction of the layout flow.
             Defaults to `fm.icelink.layoutDirection.Horizontal`.
             </div>
    
    
            @return {fm.icelink.LayoutDirection}
            */
            LayoutPreset.prototype.getDirection = function () {
                if (arguments.length == 0) {
                    return this._direction;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height of floating elements in pixels.
             Overrides `fm.icelink.layoutPreset.floatHeightPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatHeight = function () {
                if (arguments.length == 0) {
                    return this.__floatHeight;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatHeightPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the height of floating elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatHeight`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatHeightPercent = function () {
                if (arguments.length == 0) {
                    return this.__floatHeightPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getFloatLocalLayout = function (layoutWidth, layoutHeight, remoteCount) {
                if (arguments.length == 3) {
                    var layout = new fm.icelink.Layout();
                    layout.setLocalFrame(this.calculateFloatFrame(layoutWidth, layoutHeight));
                    layout.setRemoteFrames(this.calculateInlineFrames(layoutWidth, layoutHeight, remoteCount, 0, 0));
                    return layout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginX'>&nbsp;</span>**/
            /**
             <div>
             Gets the X-margin between floating elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.floatMarginXPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatMarginX = function () {
                if (arguments.length == 0) {
                    return this.__floatMarginX;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginXPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the X-margin between floating elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatMarginX`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatMarginXPercent = function () {
                if (arguments.length == 0) {
                    return this.__floatMarginXPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginY'>&nbsp;</span>**/
            /**
             <div>
             Gets the Y-margin between floating elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.floatMarginYPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatMarginY = function () {
                if (arguments.length == 0) {
                    return this.__floatMarginY;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginYPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the Y-margin between floating elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatMarginY`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatMarginYPercent = function () {
                if (arguments.length == 0) {
                    return this.__floatMarginYPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getFloatRemoteLayout = function (layoutWidth, layoutHeight, remoteCount) {
                if (arguments.length == 3) {
                    var layout = new fm.icelink.Layout();
                    layout.setLocalFrame(this.calculateFillFrame(layoutWidth, layoutHeight));
                    layout.setRemoteFrames(this.calculateFloatFrames(layoutWidth, layoutHeight, remoteCount));
                    return layout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width of floating elements in pixels.
             Overrides `fm.icelink.layoutPreset.floatWidthPercent`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatWidth = function () {
                if (arguments.length == 0) {
                    return this.__floatWidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getFloatWidthPercent'>&nbsp;</span>**/
            /**
             <div>
             Gets the width of floating elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatWidth`.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getFloatWidthPercent = function () {
                if (arguments.length == 0) {
                    return this.__floatWidthPercent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getInlineLayout = function (layoutWidth, layoutHeight, remoteCount) {
                if (arguments.length == 3) {
                    var frames_1 = this.calculateInlineFrames(layoutWidth, layoutHeight, (remoteCount + 1), 0, 0);
                    var index = 0;
                    if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.TopLeft))) {
                        index = 0;
                    }
                    else {
                        if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Top))) {
                            var topRowIndexes = this.getTopRowIndexes(frames_1);
                            index = topRowIndexes[fm.icelink.LayoutPreset.divideByTwo(topRowIndexes.length)];
                        }
                        else {
                            var centerRowIndexes = void 0;
                            if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.TopRight))) {
                                if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Horizontal))) {
                                    centerRowIndexes = this.getTopRowIndexes(frames_1);
                                    index = centerRowIndexes[(centerRowIndexes.length - 1)];
                                }
                                else {
                                    index = this.getRightColumnIndexes(frames_1)[0];
                                }
                            }
                            else {
                                var leftColumnIndexes = void 0;
                                if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Left))) {
                                    leftColumnIndexes = this.getLeftColumnIndexes(frames_1);
                                    index = leftColumnIndexes[fm.icelink.LayoutPreset.divideByTwo(leftColumnIndexes.length)];
                                }
                                else {
                                    if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Center))) {
                                        if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Horizontal))) {
                                            centerRowIndexes = this.getCenterRowIndexes(frames_1);
                                            index = centerRowIndexes[fm.icelink.LayoutPreset.divideByTwo(centerRowIndexes.length)];
                                        }
                                        else {
                                            leftColumnIndexes = this.getCenterColumnIndexes(frames_1);
                                            index = leftColumnIndexes[fm.icelink.LayoutPreset.divideByTwo(leftColumnIndexes.length)];
                                        }
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Right))) {
                                            leftColumnIndexes = this.getRightColumnIndexes(frames_1);
                                            index = leftColumnIndexes[fm.icelink.LayoutPreset.divideByTwo(leftColumnIndexes.length)];
                                        }
                                        else {
                                            if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.BottomLeft))) {
                                                if ((fm.icelink.Global.equals(this.getDirection(), fm.icelink.LayoutDirection.Horizontal))) {
                                                    index = this.getBottomRowIndexes(frames_1)[0];
                                                }
                                                else {
                                                    leftColumnIndexes = this.getLeftColumnIndexes(frames_1);
                                                    index = leftColumnIndexes[(leftColumnIndexes.length - 1)];
                                                }
                                            }
                                            else {
                                                if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.Bottom))) {
                                                    centerRowIndexes = this.getBottomRowIndexes(frames_1);
                                                    index = centerRowIndexes[fm.icelink.LayoutPreset.divideByTwo(centerRowIndexes.length)];
                                                }
                                                else {
                                                    if ((fm.icelink.Global.equals(this.getAlignment(), fm.icelink.LayoutAlignment.BottomRight))) {
                                                        index = (frames_1.length - 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var layout = new fm.icelink.Layout();
                    layout.setLocalFrame(frames_1[index]);
                    layout.setRemoteFrames(fm.icelink.LayoutPreset.spliceLayoutFrame(frames_1, index));
                    return layout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getInlineMargin'>&nbsp;</span>**/
            /**
             <div>
             Gets the size of the margin in pixels to use
             between inline elements.
             </div>
    
    
            @return {number}
            */
            LayoutPreset.prototype.getInlineMargin = function () {
                if (arguments.length == 0) {
                    return this._inlineMargin;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getLeftColumnIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var xMin = fm.icelink.LayoutPreset.getXMin(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMin))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMin))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-getMode'>&nbsp;</span>**/
            /**
             <div>
             Gets the mode used by the layout engine.
             Defaults to `fm.icelink.layoutMode.FloatLocal`.
             </div>
    
    
            @return {fm.icelink.LayoutMode}
            */
            LayoutPreset.prototype.getMode = function () {
                if (arguments.length == 0) {
                    return this._mode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getRightColumnIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var xMax = fm.icelink.LayoutPreset.getXMax(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMax))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getX(), xMax))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutPreset.prototype.getTopRowIndexes = function (frames) {
                if (arguments.length == 1) {
                    var num3 = void 0;
                    var yMin = fm.icelink.LayoutPreset.getYMin(frames);
                    var num2 = 0;
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMin))) {
                            num2++;
                        }
                    }
                    var num4 = 0;
                    var numArray = new Array(num2);
                    for (num3 = 0; (num3 < frames.length); num3++) {
                        if ((fm.icelink.Global.equals(frames[num3].getY(), yMin))) {
                            numArray[num4++] = num3;
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setAlignment'>&nbsp;</span>**/
            /**
             <div>
             Sets the alignment of the layout.
             Defaults to `fm.icelink.layoutAlignment.BottomRight`.
             </div>
    
    
            @param {fm.icelink.LayoutAlignment} value
            @return {void}
            */
            LayoutPreset.prototype.setAlignment = function (value) {
                if (arguments.length == 1) {
                    this._alignment = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the height of block elements in pixels.
             Overrides `fm.icelink.layoutPreset.blockHeightPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockHeight = function (value) {
                if (arguments.length == 1) {
                    this.__blockHeight = value;
                    this.__blockHeightPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockHeightPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the height of block elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockHeight`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockHeightPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__blockHeightPercent = value;
                    this.__blockHeight = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginX'>&nbsp;</span>**/
            /**
             <div>
             Sets the X-margin between block elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.blockMarginXPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockMarginX = function (value) {
                if (arguments.length == 1) {
                    this.__blockMarginX = value;
                    this.__blockMarginXPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginXPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the X-margin between block elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockMarginX`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockMarginXPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__blockMarginXPercent = value;
                    this.__blockMarginX = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginY'>&nbsp;</span>**/
            /**
             <div>
             Sets the Y-margin between block elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.blockMarginYPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockMarginY = function (value) {
                if (arguments.length == 1) {
                    this.__blockMarginY = value;
                    this.__blockMarginYPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginYPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the Y-margin between block elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockMarginY`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockMarginYPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__blockMarginYPercent = value;
                    this.__blockMarginY = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the width of block elements in pixels.
             Overrides `fm.icelink.layoutPreset.blockWidthPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockWidth = function (value) {
                if (arguments.length == 1) {
                    this.__blockWidth = value;
                    this.__blockWidthPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setBlockWidthPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the width of block elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.blockWidth`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setBlockWidthPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__blockWidthPercent = value;
                    this.__blockWidth = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets the direction of the layout flow.
             Defaults to `fm.icelink.layoutDirection.Horizontal`.
             </div>
    
    
            @param {fm.icelink.LayoutDirection} value
            @return {void}
            */
            LayoutPreset.prototype.setDirection = function (value) {
                if (arguments.length == 1) {
                    this._direction = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the height of floating elements in pixels.
             Overrides `fm.icelink.layoutPreset.floatHeightPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatHeight = function (value) {
                if (arguments.length == 1) {
                    this.__floatHeight = value;
                    this.__floatHeightPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatHeightPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the height of floating elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatHeight`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatHeightPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__floatHeightPercent = value;
                    this.__floatHeight = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginX'>&nbsp;</span>**/
            /**
             <div>
             Sets the X-margin between floating elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.floatMarginXPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatMarginX = function (value) {
                if (arguments.length == 1) {
                    this.__floatMarginX = value;
                    this.__floatMarginXPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginXPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the X-margin between floating elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatMarginX`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatMarginXPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__floatMarginXPercent = value;
                    this.__floatMarginX = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginY'>&nbsp;</span>**/
            /**
             <div>
             Sets the Y-margin between floating elements and the layout
             edge in pixels.
             Overrides `fm.icelink.layoutPreset.floatMarginYPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatMarginY = function (value) {
                if (arguments.length == 1) {
                    this.__floatMarginY = value;
                    this.__floatMarginYPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginYPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the Y-margin between floating elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatMarginY`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatMarginYPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__floatMarginYPercent = value;
                    this.__floatMarginY = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the width of floating elements in pixels.
             Overrides `fm.icelink.layoutPreset.floatWidthPercent`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatWidth = function (value) {
                if (arguments.length == 1) {
                    this.__floatWidth = value;
                    this.__floatWidthPercent = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setFloatWidthPercent'>&nbsp;</span>**/
            /**
             <div>
             Sets the width of floating elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides `fm.icelink.layoutPreset.floatWidth`.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setFloatWidthPercent = function (value) {
                if (arguments.length == 1) {
                    if ((value < 0)) {
                        value = 0;
                    }
                    if ((value > 1)) {
                        value = 1;
                    }
                    this.__floatWidthPercent = value;
                    this.__floatWidth = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setInlineMargin'>&nbsp;</span>**/
            /**
             <div>
             Sets the size of the margin in pixels to use
             between inline elements.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutPreset.prototype.setInlineMargin = function (value) {
                if (arguments.length == 1) {
                    this._inlineMargin = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutPreset-setMode'>&nbsp;</span>**/
            /**
             <div>
             Sets the mode used by the layout engine.
             Defaults to `fm.icelink.layoutMode.FloatLocal`.
             </div>
    
    
            @param {fm.icelink.LayoutMode} value
            @return {void}
            */
            LayoutPreset.prototype.setMode = function (value) {
                if (arguments.length == 1) {
                    this._mode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutPreset;
        }(fm.icelink.Dynamic));
        icelink.LayoutPreset = LayoutPreset;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LayoutPreset.ts" />

/// <reference path="LayoutPreset.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A class that supplies simple video frame layout management.
         </div>
    
        */
        var LayoutManager = /** @class */ (function (_super) {
            __extends(LayoutManager, _super);
            function LayoutManager() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    // chained constructor: LayoutManager.call(this, null);
                    __arguments = new Array(1);
                    __arguments[0] = null;
                    {
                        var preset = __arguments[0];
                        _this = _super.call(this) || this;
                        _this.fmicelinkLayoutManagerInit();
                        _this._remoteViewsTable = {};
                        _this._remoteViewsLock = new Object();
                        _this._inBatch = false;
                        if ((fm.icelink.Global.equals(preset, null))) {
                            preset = fm.icelink.LayoutPreset.getFacetime();
                        }
                        preset.copyToPreset(_this);
                        _this.setLayoutOrigin(fm.icelink.LayoutOrigin.TopLeft);
                    }
                }
                else if (__arguments.length == 1) {
                    var preset = __arguments[0];
                    _this = _super.call(this) || this;
                    _this.fmicelinkLayoutManagerInit();
                    _this._remoteViewsTable = {};
                    _this._remoteViewsLock = new Object();
                    _this._inBatch = false;
                    if ((fm.icelink.Global.equals(preset, null))) {
                        preset = fm.icelink.LayoutPreset.getFacetime();
                    }
                    preset.copyToPreset(_this);
                    _this.setLayoutOrigin(fm.icelink.LayoutOrigin.TopLeft);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            LayoutManager.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutManager]' + ',' + _super.prototype.getTypeString.call(this);
            };
            LayoutManager.prototype.fmicelinkLayoutManagerInit = function () {
                var _this = this;
                this.__onLayout = [];
                this._inBatch = false;
                this._onLayout = function (p0) { for (var _i = 0, _a = _this.__onLayout; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
            };
            /**<span id='method-fm.icelink.LayoutManager-addOnLayout'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when a layout is calculated.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.Layout>} value
            @return {void}
            */
            LayoutManager.prototype.addOnLayout = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onLayout, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-addRemoteMedia'>&nbsp;</span>**/
            /**
             <div>
             Adds remote media to the layout.
             </div>
    
            @param {fm.icelink.IViewableMedia<T>} remoteMedia The remote media.
            @return {boolean} true if successful; otherwise, false.
     
            */
            LayoutManager.prototype.addRemoteMedia = function (remoteMedia) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(remoteMedia, null))) {
                        return false;
                    }
                    return this.addRemoteView(remoteMedia.getId(), remoteMedia.getView());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-addRemoteView'>&nbsp;</span>**/
            /**
             <div>
             Adds a remote view to the layout.
             </div>
    
            @param {string} id The remote view ID.
            @param {T} view The remote view.
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.addRemoteView = function (id, view) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(id, null))) {
                        fm.icelink.Log.warn("Could not add remote view. The ID cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(view, null))) {
                        fm.icelink.Log.warn("Could not add remote view. The view cannot be null.");
                        return false;
                    }
                    try {
                        this.dispatchToMainThread(this.addRemoteViewUI.bind(this), id, view);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not add remote view.", exception);
                    }
                    finally {
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-addRemoteViews'>&nbsp;</span>**/
            /**
             <div>
             Adds remote views to the layout.
             </div>
    
            @param {string[]} ids The remote view IDs.
            @param {T[]} views The remote views.
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.addRemoteViews = function (ids, views) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(ids, null))) {
                        fm.icelink.Log.warn("Could not add remote views. The IDs cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(views, null))) {
                        fm.icelink.Log.warn("Could not add remote views. The views cannot be null.");
                        return false;
                    }
                    if ((!fm.icelink.Global.equals(ids.length, views.length))) {
                        fm.icelink.Log.warn("Could not add remote views. The number of IDs and views must match.");
                        return false;
                    }
                    try {
                        this.dispatchToMainThread(this.addRemoteViewsUI.bind(this), ids, views);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not add remote views.", exception);
                    }
                    finally {
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.addRemoteViewsUI = function (idsObj, viewsObj) {
                if (arguments.length == 2) {
                    var strArray = idsObj;
                    var localArray = viewsObj;
                    this._inBatch = true;
                    for (var i = 0; (i < strArray.length); i++) {
                        this.addRemoteViewUI(strArray[i], localArray[i]);
                    }
                    this._inBatch = false;
                    this.layout();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.addRemoteViewUI = function (idObj, viewObj) {
                if (arguments.length == 2) {
                    var id = idObj;
                    var item = viewObj;
                    var list = new Array();
                    fm.icelink.ArrayExtensions.add(list, item);
                    var remoteViewsInternal = this.getRemoteViewsInternal(id);
                    if ((!fm.icelink.Global.equals(remoteViewsInternal, null))) {
                        fm.icelink.ArrayExtensions.addRange(list, remoteViewsInternal);
                    }
                    this.addView(item);
                    this._remoteViewsTable[id] = list;
                    if (!this._inBatch) {
                        this.layout();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.doSwapRemoteView = function (idToRemove, viewToRemove, idToAdd, viewToAdd) {
                var _this = this;
                if (arguments.length == 4) {
                    var action = null;
                    try {
                        if ((fm.icelink.Global.equals(action, null))) {
                            action = function (unused1, unused2) {
                                if ((!fm.icelink.Global.equals(viewToRemove, null))) {
                                    _this.removeRemoteViewUI(idToRemove, viewToRemove);
                                }
                                _this.addRemoteViewUI(idToAdd, viewToAdd);
                            };
                        }
                        this.dispatchToMainThread(action, null, null);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not swap remote view.", exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.doSwapRemoteViews = function (idsToRemove, viewsToRemove, idsToAdd, viewsToAdd) {
                var _this = this;
                if (arguments.length == 4) {
                    var action = null;
                    try {
                        if ((fm.icelink.Global.equals(action, null))) {
                            action = function (unused1, unused2) {
                                _this.removeRemoteViewsUI(idsToRemove, viewsToRemove);
                                _this.addRemoteViewsUI(idsToAdd, viewsToAdd);
                            };
                        }
                        this.dispatchToMainThread(action, null, null);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not swap remote views.", exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LayoutManager.prototype.getLayout = function () {
                if (arguments.length == 3) {
                    var layoutWidth = arguments[0];
                    var layoutHeight = arguments[1];
                    var remoteCount = arguments[2];
                    var p = _super.prototype.calculateLayout.call(this, layoutWidth, layoutHeight, remoteCount, this.getLayoutOrigin());
                    var onLayout = this._onLayout;
                    if ((!fm.icelink.Global.equals(onLayout, null))) {
                        try {
                            onLayout(p);
                        }
                        catch (exception) {
                            fm.icelink.Unhandled.logException(exception, "LayoutManager -> OnLayout");
                        }
                        finally {
                        }
                    }
                    return p;
                }
                else if (arguments.length == 4) {
                    var layoutWidth = arguments[0];
                    var layoutHeight = arguments[1];
                    var remoteCount = arguments[2];
                    var remoteViewIds = arguments[3];
                    var p = _super.prototype.calculateLayout.call(this, layoutWidth, layoutHeight, remoteCount, this.getLayoutOrigin());
                    var onLayout = this._onLayout;
                    if ((!fm.icelink.Global.equals(onLayout, null))) {
                        try {
                            onLayout(p);
                        }
                        catch (exception) {
                            fm.icelink.Unhandled.logException(exception, "LayoutManager -> OnLayout");
                        }
                        finally {
                        }
                    }
                    return p;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-getLayoutOrigin'>&nbsp;</span>**/
            /**
             <div>
             Gets the layout origin.
             Defaults to TopLeft.
             </div>
    
    
            @return {fm.icelink.LayoutOrigin}
            */
            LayoutManager.prototype.getLayoutOrigin = function () {
                if (arguments.length == 0) {
                    return this._layoutOrigin;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-getLocalView'>&nbsp;</span>**/
            /**
             <div>
             Gets the local view from the layout.
             </div>
    
            @return {T} The local view.
            */
            LayoutManager.prototype.getLocalView = function () {
                if (arguments.length == 0) {
                    return this._localView;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.getNewestRemoteView = function (id) {
                if (arguments.length == 1) {
                    var remoteViewsInternal = this.getRemoteViewsInternal(id);
                    if ((fm.icelink.Global.equals(remoteViewsInternal, null))) {
                        return null;
                    }
                    return remoteViewsInternal[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.getOldestRemoteView = function (id) {
                if (arguments.length == 1) {
                    var remoteViewsInternal = this.getRemoteViewsInternal(id);
                    if ((fm.icelink.Global.equals(remoteViewsInternal, null))) {
                        return null;
                    }
                    return remoteViewsInternal[(fm.icelink.ArrayExtensions.getCount(remoteViewsInternal) - 1)];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-getRemoteView'>&nbsp;</span>**/
            /**
             <div>
             Gets a remote view from the layout.
             </div>
    
            @param {string} id The remote view ID.
            @return {T} The remote view.
            */
            LayoutManager.prototype.getRemoteView = function (id) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(id, null))) {
                        return null;
                    }
                    return this.getNewestRemoteView(id);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-getRemoteViewIds'>&nbsp;</span>**/
            /**
             <div>
             Gets the IDs of the remote views in the layout.
             </div>
    
            @return {string[]} The remote view IDs.
            */
            LayoutManager.prototype.getRemoteViewIds = function () {
                if (arguments.length == 0) {
                    var list = new Array();
                    for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(this._remoteViewsTable); _i < _a.length; _i++) {
                        var str = _a[_i];
                        fm.icelink.ArrayExtensions.add(list, str);
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LayoutManager.prototype.getRemoteViews = function () {
                if (arguments.length == 1) {
                    var ids = arguments[0];
                    if ((fm.icelink.Global.equals(ids, null))) {
                        throw new fm.icelink.Exception("Could not get remote views. The IDs cannot be null.");
                    }
                    var list = new Array();
                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                        var str = ids_1[_i];
                        fm.icelink.ArrayExtensions.add(list, this.getRemoteView(str));
                    }
                    return list;
                }
                else if (arguments.length == 0) {
                    return this.getRemoteViews(this.getRemoteViewIds());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.getRemoteViewsInternal = function (id) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(id, null))) {
                        throw new fm.icelink.Exception("The ID cannot be null.");
                    }
                    var list = null;
                    var _var0 = new fm.icelink.Holder(list);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this._remoteViewsTable, id, _var0);
                    list = _var0.getValue();
                    if (!_var1) {
                        list = null;
                    }
                    return list;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-layoutOnMainThread'>&nbsp;</span>**/
            /**
             <div>
             Positions the local and remote views within the layout
             after dispatching to the main thread.
             </div>
    
    
            @return {void}
            */
            LayoutManager.prototype.layoutOnMainThread = function () {
                if (arguments.length == 0) {
                    this.dispatchToMainThread(this.layoutOnMainThreadUI.bind(this), null, null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.layoutOnMainThreadUI = function (unused1, unused2) {
                if (arguments.length == 2) {
                    this.layout();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-removeOnLayout'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when a layout is calculated.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.Layout>} value
            @return {void}
            */
            LayoutManager.prototype.removeOnLayout = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onLayout, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-removeRemoteMedia'>&nbsp;</span>**/
            /**
             <div>
             Removes remote media from the layout.
             </div>
    
            @param {fm.icelink.IViewableMedia<T>} remoteMedia The remote media.
            @return {boolean} true if successful; otherwise, false.
     
            */
            LayoutManager.prototype.removeRemoteMedia = function (remoteMedia) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(remoteMedia, null))) {
                        return false;
                    }
                    return this.removeRemoteView(remoteMedia.getId());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-removeRemoteView'>&nbsp;</span>**/
            /**
             <div>
             Removes a remote view from the layout.
             </div>
    
            @param {string} id The remote view ID.
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.removeRemoteView = function (id) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(id, null))) {
                        fm.icelink.Log.warn("Could not remove remote view. The ID cannot be null.");
                        return false;
                    }
                    var oldestRemoteView = this.getOldestRemoteView(id);
                    if ((!fm.icelink.Global.equals(oldestRemoteView, null))) {
                        try {
                            this.dispatchToMainThread(this.removeRemoteViewUI.bind(this), id, oldestRemoteView);
                        }
                        catch (exception) {
                            fm.icelink.Log.error("Could not remove remote view.", exception);
                        }
                        finally {
                        }
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LayoutManager.prototype.removeRemoteViews = function () {
                if (arguments.length == 1) {
                    var ids = arguments[0];
                    if ((fm.icelink.Global.equals(ids, null))) {
                        fm.icelink.Log.warn("Could not remove remote views. The IDs cannot be null.");
                        return false;
                    }
                    try {
                        this.dispatchToMainThread(this.removeRemoteViewsUI.bind(this), ids, this.getRemoteViews(ids));
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not remove remote views.", exception);
                    }
                    finally {
                    }
                    return true;
                }
                else if (arguments.length == 0) {
                    this.removeRemoteViews(this.getRemoteViewIds());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.removeRemoteViewsUI = function (idsObj, viewsObj) {
                if (arguments.length == 2) {
                    var strArray = idsObj;
                    var list = viewsObj;
                    this._inBatch = true;
                    for (var i = 0; (i < strArray.length); i++) {
                        this.removeRemoteViewUI(strArray[i], list[i]);
                    }
                    this._inBatch = false;
                    this.layout();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.removeRemoteViewUI = function (idObj, viewObj) {
                if (arguments.length == 2) {
                    var id = idObj;
                    var item = viewObj;
                    var list = new Array();
                    var remoteViewsInternal = this.getRemoteViewsInternal(id);
                    if ((!fm.icelink.Global.equals(remoteViewsInternal, null))) {
                        fm.icelink.ArrayExtensions.addRange(list, remoteViewsInternal);
                    }
                    fm.icelink.ArrayExtensions.remove(list, item);
                    this.removeView(item);
                    if ((fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(list), 0))) {
                        fm.icelink.HashExtensions.remove(this._remoteViewsTable, id);
                    }
                    else {
                        this._remoteViewsTable[id] = list;
                    }
                    if (!this._inBatch) {
                        this.layout();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-reset'>&nbsp;</span>**/
            /**
             <div>
             Removes all remote views from the layout,
             then removes the local view from the layout.
             </div>
    
    
            @return {void}
            */
            LayoutManager.prototype.reset = function () {
                if (arguments.length == 0) {
                    this.removeRemoteViews();
                    this.unsetLocalView();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-setLayoutOrigin'>&nbsp;</span>**/
            /**
             <div>
             Sets the layout origin.
             Defaults to TopLeft.
             </div>
    
    
            @param {fm.icelink.LayoutOrigin} value
            @return {void}
            */
            LayoutManager.prototype.setLayoutOrigin = function (value) {
                if (arguments.length == 1) {
                    this._layoutOrigin = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-setLocalMedia'>&nbsp;</span>**/
            /**
             <div>
             Adds the local media to the layout.
             </div>
    
            @param {fm.icelink.IViewableMedia<T>} localMedia The local media.
            @return {boolean} true if successful; otherwise, false.
            */
            LayoutManager.prototype.setLocalMedia = function (localMedia) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(localMedia, null))) {
                        return false;
                    }
                    return this.setLocalView(localMedia.getView());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-setLocalView'>&nbsp;</span>**/
            /**
             <div>
             Adds the local view to the layout.
             </div>
    
            @param {T} view The local view.
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.setLocalView = function (view) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(view, null))) {
                        fm.icelink.Log.warn("Could not set local view. The view cannot be null.");
                        return false;
                    }
                    if ((!fm.icelink.Global.equals(view, null))) {
                        try {
                            this.dispatchToMainThread(this.setLocalViewUI.bind(this), view, null);
                        }
                        catch (exception) {
                            fm.icelink.Log.error("Could not set local view.", exception);
                        }
                        finally {
                        }
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.setLocalViewUI = function (viewObj, unused) {
                if (arguments.length == 2) {
                    var view = viewObj;
                    var localView = this._localView;
                    if ((!fm.icelink.Global.equals(localView, null))) {
                        this.removeView(localView);
                    }
                    this._localView = view;
                    this.addView(view);
                    this.layout();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-swapRemoteMedia'>&nbsp;</span>**/
            /**
             <div>
             Swaps remote media in the layout.
             </div>
    
            @param {fm.icelink.IViewableMedia<T>} remoteMediaToRemove The remote media to remove.
            @param {fm.icelink.IViewableMedia<T>} remoteMediaToAdd The remote media to add.
            @return {boolean}
            */
            LayoutManager.prototype.swapRemoteMedia = function (remoteMediaToRemove, remoteMediaToAdd) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(remoteMediaToRemove, null))) {
                        return false;
                    }
                    if ((fm.icelink.Global.equals(remoteMediaToAdd, null))) {
                        return false;
                    }
                    return this.swapRemoteView(remoteMediaToRemove.getId(), remoteMediaToAdd.getId(), remoteMediaToAdd.getView());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-swapRemoteView'>&nbsp;</span>**/
            /**
             <div>
             Swaps a remote view in the layout.
             </div>
    
            @param {string} idToRemove The remote view ID to remove.
            @param {string} idToAdd The remote view ID to add.
            @param {T} viewToAdd The remote view to add.
            @return {boolean}
            */
            LayoutManager.prototype.swapRemoteView = function (idToRemove, idToAdd, viewToAdd) {
                if (arguments.length == 3) {
                    if ((fm.icelink.Global.equals(idToRemove, null))) {
                        fm.icelink.Log.warn("Could not swap remote view. The ID to remove cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(idToAdd, null))) {
                        fm.icelink.Log.warn("Could not swap remote view. The ID to add cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(viewToAdd, null))) {
                        fm.icelink.Log.warn("Could not swap remote view. The view to add cannot be null.");
                        return false;
                    }
                    this.doSwapRemoteView(idToRemove, this.getOldestRemoteView(idToRemove), idToAdd, viewToAdd);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-swapRemoteViews'>&nbsp;</span>**/
            /**
             <div>
             Swaps remote views in the layout.
             </div>
    
            @param {string[]} idsToRemove The remote view IDs to remove.
            @param {string[]} idsToAdd The remote view IDs to add.
            @param {T[]} viewsToAdd The remote views to add.
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.swapRemoteViews = function (idsToRemove, idsToAdd, viewsToAdd) {
                if (arguments.length == 3) {
                    if ((fm.icelink.Global.equals(idsToRemove, null))) {
                        fm.icelink.Log.warn("Could not swap remote views. The IDs to remove cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(idsToAdd, null))) {
                        fm.icelink.Log.warn("Could not swap remote views. The IDs to add cannot be null.");
                        return false;
                    }
                    if ((fm.icelink.Global.equals(viewsToAdd, null))) {
                        fm.icelink.Log.warn("Could not swap remote views. The views to add cannot be null.");
                        return false;
                    }
                    if ((!fm.icelink.Global.equals(idsToAdd.length, viewsToAdd.length))) {
                        fm.icelink.Log.warn("Could not swap remote views. The number of IDs and views to add must match.");
                        return false;
                    }
                    this.doSwapRemoteViews(idsToRemove, this.getRemoteViews(idsToRemove), idsToAdd, viewsToAdd);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutManager-unsetLocalView'>&nbsp;</span>**/
            /**
             <div>
             Removes the local view from the layout.
             </div>
    
            @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
            */
            LayoutManager.prototype.unsetLocalView = function () {
                if (arguments.length == 0) {
                    var localView = this.getLocalView();
                    if ((fm.icelink.Global.equals(localView, null))) {
                        fm.icelink.Log.warn("Could not unset local view. A view does not exist.");
                        return false;
                    }
                    try {
                        this.dispatchToMainThread(this.unsetLocalViewUI.bind(this), localView, null);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not unset local view.", exception);
                    }
                    finally {
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LayoutManager.prototype.unsetLocalViewUI = function (viewObj, unused) {
                if (arguments.length == 2) {
                    var view = viewObj;
                    this._localView = null;
                    this.removeView(view);
                    this.layout();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutManager;
        }(fm.icelink.LayoutPreset));
        icelink.LayoutManager = LayoutManager;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LayoutManager.ts" />

/// <reference path="LayoutManager.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DomLayoutManager = /** @class */ (function (_super) {
            __extends(DomLayoutManager, _super);
            function DomLayoutManager(container, preset) {
                var _this = this;
                if (typeof preset === 'undefined') {
                    preset = null;
                }
                _this = _super.call(this, preset) || this;
                _this._parentMissing = 0;
                _this._parentMissingMax = 16;
                _this._lastWidth = 0;
                _this._lastHeight = 0;
                _this._remoteVideosTable = {};
                _this._container = container;
                var children = _this._container.getElementsByTagName('div');
                var collection = [];
                for (var i = 0; i < children.length; i++) {
                    collection.push(children[i]);
                }
                for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
                    var child = collection_1[_i];
                    if (child.getAttribute('data-fm-webrtc-inner-container') == 'true') {
                        _this._container.removeChild(child);
                    }
                }
                _this._innerContainer = document.createElement('div');
                _this._innerContainer.style.position = 'relative';
                _this._innerContainer.style.width = '100%';
                _this._innerContainer.style.height = '100%';
                _this._innerContainer.setAttribute('data-fm-webrtc-inner-container', 'true');
                _this._container.appendChild(_this._innerContainer);
                _this._resizeInterval = window.setInterval(function () {
                    if (!_this._container.parentNode) {
                        _this._parentMissing = _this._parentMissing + 1;
                        if (_this._parentMissing > _this._parentMissingMax) {
                            window.clearInterval(_this._resizeInterval);
                        }
                    }
                    else {
                        _this._parentMissing = 0;
                        var width = _this._innerContainer.offsetWidth;
                        var height = _this._innerContainer.offsetHeight;
                        if (width != _this._lastWidth || height != _this._lastHeight) {
                            _this.layout();
                            _this._lastWidth = width;
                            _this._lastHeight = height;
                        }
                    }
                }, 250);
                return _this;
            }
            DomLayoutManager.prototype.getTypeString = function () {
                return '[fm.icelink.DomLayoutManager]' + ',' + _super.prototype.getTypeString.call(this);
            };
            DomLayoutManager.prototype.getContainer = function () {
                return this._innerContainer;
            };
            DomLayoutManager.prototype.addView = function (view) {
                this._innerContainer.appendChild(view);
            };
            DomLayoutManager.prototype.removeView = function (view) {
                this._innerContainer.removeChild(view);
            };
            DomLayoutManager.prototype.dispatchToMainThread = function (action, arg1, arg2) {
                action(arg1, arg2);
            };
            DomLayoutManager.prototype.layout = function () {
                var localView = this.getLocalView();
                var remoteViewIds = this.getRemoteViewIds();
                var remoteViews = this.getRemoteViews(remoteViewIds);
                // Get the new layout.
                var layout = this.getLayout(this._innerContainer.offsetWidth, this._innerContainer.offsetHeight, remoteViews.length, remoteViewIds);
                // Apply the local video frame.
                if (localView != null) {
                    var localFrame = layout.getLocalFrame();
                    localView.style.position = 'absolute';
                    localView.style.left = localFrame.getX() + 'px';
                    localView.style.top = localFrame.getY() + 'px';
                    localView.style.width = localFrame.getWidth() + 'px';
                    localView.style.height = localFrame.getHeight() + 'px';
                    if (this.getMode() == icelink.LayoutMode.FloatLocal) {
                        localView.style.zIndex = remoteViews.length.toString();
                    }
                    else if (this.getMode() == icelink.LayoutMode.FloatRemote) {
                        localView.style.zIndex = '0';
                    }
                }
                // Apply the remote video frames.
                var remoteFrames = layout.getRemoteFrames();
                for (var i = 0; i < remoteFrames.length; i++) {
                    var remoteFrame = remoteFrames[i];
                    var remoteView = remoteViews[i];
                    remoteView.style.position = 'absolute';
                    remoteView.style.left = remoteFrame.getX() + 'px';
                    remoteView.style.top = remoteFrame.getY() + 'px';
                    remoteView.style.width = remoteFrame.getWidth() + 'px';
                    remoteView.style.height = remoteFrame.getHeight() + 'px';
                    if (this.getMode() == icelink.LayoutMode.FloatLocal) {
                        remoteView.style.zIndex = i.toString();
                    }
                    else if (this.getMode() == icelink.LayoutMode.FloatRemote) {
                        remoteView.style.zIndex = (i + 1).toString();
                    }
                }
            };
            return DomLayoutManager;
        }(icelink.LayoutManager));
        icelink.DomLayoutManager = DomLayoutManager;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var DomVideoSink = /** @class */ (function (_super) {
            __extends(DomVideoSink, _super);
            function DomVideoSink(track) {
                var _this = _super.call(this) || this;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginDomVideoSink(_this, (track == null ? null : track._getInternal()));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcDomVideoSink(_this, (track == null ? null : track._getInternal()));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            DomVideoSink.prototype.getTypeString = function () {
                return '[fm.icelink.DomVideoSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            DomVideoSink.prototype._getInternal = function () {
                return this._internal;
            };
            DomVideoSink.prototype.getView = function () {
                return this._getInternal().getView();
            };
            DomVideoSink.prototype.getViewScale = function () {
                return this._getInternal().getViewScale();
            };
            DomVideoSink.prototype.setViewScale = function (viewScale) {
                this._getInternal().setViewScale(viewScale);
            };
            DomVideoSink.prototype.getViewMirror = function () {
                return this._getInternal().getViewMirror();
            };
            DomVideoSink.prototype.setViewMirror = function (viewMirror) {
                this._getInternal().setViewMirror(viewMirror);
            };
            return DomVideoSink;
        }(icelink.Dynamic));
        icelink.DomVideoSink = DomVideoSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var Factory = /** @class */ (function () {
            function Factory() {
            }
            Factory.prototype.getTypeString = function () {
                return '[fm.icelink.Factory]';
            };
            // ALL THESE METHODS ARE DEPRECATED AND SHOULD NOT BE USED
            Factory.createConnection = function (streams) {
                return new icelink.Connection(streams);
            };
            Factory.createAudioStream = function (localMedia) {
                return new icelink.AudioStream(localMedia);
            };
            Factory.createVideoStream = function (localMedia) {
                return new icelink.VideoStream(localMedia);
            };
            Factory.createDataChannel = function (label) {
                return new icelink.DataChannel(label);
            };
            Factory.createDataStream = function (channel) {
                return new icelink.DataStream(channel);
            };
            Factory.createDomVideoSink = function (track) {
                return new icelink.DomVideoSink(track);
            };
            Factory.createLocalMedia = function (audio, video, screen) {
                return new icelink.LocalMedia(audio, video, screen);
            };
            return Factory;
        }());
        icelink.Factory = Factory;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var Media = /** @class */ (function (_super) {
            __extends(Media, _super);
            function Media() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Media.prototype.getTypeString = function () {
                return '[fm.icelink.Media]' + ',' + _super.prototype.getTypeString.call(this);
            };
            Media.prototype.addOnAudioDestroyed = function (value) {
                return this._getInternal().addOnAudioDestroyed(value);
            };
            Media.prototype.addOnVideoDestroyed = function (value) {
                return this._getInternal().addOnVideoDestroyed(value);
            };
            Media.prototype.removeOnAudioDestroyed = function (value) {
                return this._getInternal().removeOnAudioDestroyed(value);
            };
            Media.prototype.removeOnVideoDestroyed = function (value) {
                return this._getInternal().removeOnVideoDestroyed(value);
            };
            Media.prototype.addOnAudioLevel = function (value) {
                this._getInternal().addOnAudioLevel(value);
            };
            Media.prototype.addOnVideoSize = function (value) {
                this._getInternal().addOnVideoSize(value);
            };
            Media.prototype.getAudioGain = function () {
                return this._getInternal().getAudioGain();
            };
            Media.prototype.getAudioMuted = function () {
                return this._getInternal().getAudioMuted();
            };
            Media.prototype.getAudioTrack = function () {
                return this.internalToExternal(this._getInternal().getAudioTrack());
            };
            Media.prototype.getAudioTracks = function () {
                return this.internalsToExternals(this._getInternal().getAudioTracks());
            };
            Media.prototype.getAudioVolume = function () {
                return this._getInternal().getAudioVolume();
            };
            Media.prototype.getId = function () {
                return this._getInternal().getId();
            };
            Media.prototype.getVideoMuted = function () {
                return this._getInternal().getVideoMuted();
            };
            Media.prototype.getVideoSize = function () {
                return this._getInternal().getVideoSize();
            };
            Media.prototype.getVideoTrack = function () {
                return this.internalToExternal(this._getInternal().getVideoTrack());
            };
            Media.prototype.getVideoTracks = function () {
                return this.internalsToExternals(this._getInternal().getVideoTracks());
            };
            Media.prototype.grabVideoFrame = function () {
                return this._getInternal().grabVideoFrame();
            };
            Media.prototype.removeOnAudioLevel = function (value) {
                this._getInternal().removeOnAudioLevel(value);
            };
            Media.prototype.removeOnVideoSize = function (value) {
                this._getInternal().removeOnVideoSize(value);
            };
            Media.prototype.setAudioGain = function (value) {
                this._getInternal().setAudioGain(value);
            };
            Media.prototype.setAudioMuted = function (value) {
                this._getInternal().setAudioMuted(value);
            };
            Media.prototype.setAudioVolume = function (value) {
                this._getInternal().setAudioVolume(value);
            };
            Media.prototype.setVideoMuted = function (value) {
                this._getInternal().setVideoMuted(value);
            };
            Media.prototype.destroy = function () {
                this._getInternal().destroy();
            };
            Media.prototype.getView = function () {
                return this._getInternal().getView();
            };
            Media.prototype.getViewSink = function () {
                var internalViewSink = this._getInternal().getViewSink();
                if (internalViewSink == null) {
                    return null;
                }
                return internalViewSink._getExternal();
            };
            Media.prototype.externalsToInternals = function (externals) {
                var _this = this;
                return icelink.ArrayExtensions.map(externals, function (external) {
                    return _this.externalToInternal(external);
                });
            };
            Media.prototype.externalToInternal = function (external) {
                return external._getInternal();
            };
            Media.prototype.internalsToExternals = function (internals) {
                var _this = this;
                return icelink.ArrayExtensions.map(internals, function (internal) {
                    return _this.internalToExternal(internal);
                });
            };
            Media.prototype.internalToExternal = function (internal) {
                if (internal == null) {
                    return null;
                }
                return internal._getExternal();
            };
            return Media;
        }(icelink.Dynamic));
        icelink.Media = Media;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Media.ts" />

/// <reference path="Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var LocalMedia = /** @class */ (function (_super) {
            __extends(LocalMedia, _super);
            function LocalMedia(audio, video, screen) {
                var _this = _super.call(this) || this;
                if (screen && !video) {
                    screen = false;
                }
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginLocalMedia(_this, audio, video, screen);
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcLocalMedia(_this, audio, video, screen);
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            LocalMedia.prototype.getTypeString = function () {
                return '[fm.icelink.LocalMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            LocalMedia.prototype._getInternal = function () {
                return this._internal;
            };
            LocalMedia.prototype.addOnAudioStarted = function (value) {
                return this._getInternal().addOnAudioStarted(value);
            };
            LocalMedia.prototype.addOnAudioStopped = function (value) {
                return this._getInternal().addOnAudioStopped(value);
            };
            LocalMedia.prototype.addOnVideoStarted = function (value) {
                return this._getInternal().addOnVideoStarted(value);
            };
            LocalMedia.prototype.addOnVideoStopped = function (value) {
                return this._getInternal().addOnVideoStopped(value);
            };
            LocalMedia.prototype.removeOnAudioStarted = function (value) {
                return this._getInternal().removeOnAudioStarted(value);
            };
            LocalMedia.prototype.removeOnAudioStopped = function (value) {
                return this._getInternal().removeOnAudioStopped(value);
            };
            LocalMedia.prototype.removeOnVideoStarted = function (value) {
                return this._getInternal().removeOnVideoStarted(value);
            };
            LocalMedia.prototype.removeOnVideoStopped = function (value) {
                return this._getInternal().removeOnVideoStopped(value);
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.getChromeExtensionId()
             */
            LocalMedia.getChromeExtensionId = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionId();
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.setChromeExtensionId()
             */
            LocalMedia.setChromeExtensionId = function (chromeExtensionId) {
                icelink.WebRtcLocalMedia.setChromeExtensionId(chromeExtensionId);
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.getChromeExtensionUrl()
             */
            LocalMedia.getChromeExtensionUrl = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionUrl();
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.getChromeExtensionInstalled()
             */
            LocalMedia.getChromeExtensionInstalled = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionInstalled();
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.getChromeExtensionRequiresUserGesture()
             */
            LocalMedia.getChromeExtensionRequiresUserGesture = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionRequiresUserGesture();
            };
            /**
             * Deprecated: Use fm.icelink.Plugin.setChromeExtensionRequiresUserGesture()
             */
            LocalMedia.setChromeExtensionRequiresUserGesture = function (chromeExtensionRequiresUserGesture) {
                icelink.WebRtcLocalMedia.setChromeExtensionRequiresUserGesture(chromeExtensionRequiresUserGesture);
            };
            LocalMedia.prototype.changeAudioSourceInput = function (audioSourceInput) {
                return this._getInternal().changeAudioSourceInput(audioSourceInput);
            };
            LocalMedia.prototype.changeVideoSourceInput = function (videoSourceInput) {
                return this._getInternal().changeVideoSourceInput(videoSourceInput);
            };
            LocalMedia.prototype.getAudioSourceInput = function () {
                return this._getInternal().getAudioSourceInput();
            };
            LocalMedia.prototype.getAudioSourceInputs = function () {
                return this._getInternal().getAudioSourceInputs();
            };
            LocalMedia.prototype.getVideoSourceInput = function () {
                return this._getInternal().getVideoSourceInput();
            };
            LocalMedia.prototype.getVideoSourceInputs = function () {
                return this._getInternal().getVideoSourceInputs();
            };
            LocalMedia.prototype.setAudioSourceInput = function (value) {
                this._getInternal().setAudioSourceInput(value);
            };
            LocalMedia.prototype.setVideoSourceInput = function (value) {
                this._getInternal().setVideoSourceInput(value);
            };
            LocalMedia.prototype.start = function () {
                var _this = this;
                var promise = new icelink.Promise();
                this._getInternal().start().then(function (lm) {
                    promise.resolve(_this);
                }, function (ex) {
                    promise.reject(ex);
                });
                return promise;
            };
            LocalMedia.prototype.stop = function () {
                var _this = this;
                var promise = new icelink.Promise();
                this._getInternal().stop().then(function (lm) {
                    promise.resolve(_this);
                }, function (ex) {
                    promise.reject(ex);
                });
                return promise;
            };
            LocalMedia.prototype.changeAudioInput = function (audioInput) {
                icelink.Log.warn('LocalMedia.changeAudioInput is deprecated. Use LocalMedia.changeAudioSourceInput instead.');
                return this.changeAudioSourceInput(audioInput);
            };
            LocalMedia.prototype.changeVideoInput = function (videoInput) {
                icelink.Log.warn('LocalMedia.changeVideoInput is deprecated. Use LocalMedia.changeVideoSourceInput instead.');
                return this.changeVideoSourceInput(videoInput);
            };
            LocalMedia.prototype.getAudioInput = function () {
                icelink.Log.warn('LocalMedia.getAudioInput is deprecated. Use LocalMedia.getAudioSourceInput instead.');
                return this.getAudioSourceInput();
            };
            LocalMedia.prototype.getAudioInputs = function () {
                icelink.Log.warn('LocalMedia.getAudioInputs is deprecated. Use LocalMedia.getAudioSourceInputs instead.');
                return this.getAudioSourceInputs();
            };
            LocalMedia.prototype.getVideoInput = function () {
                icelink.Log.warn('LocalMedia.getVideoInput is deprecated. Use LocalMedia.getVideoSourceInput instead.');
                return this.getVideoSourceInput();
            };
            LocalMedia.prototype.getVideoInputs = function () {
                icelink.Log.warn('LocalMedia.getVideoInputs is deprecated. Use LocalMedia.getVideoSourceInputs instead.');
                return this.getVideoSourceInputs();
            };
            LocalMedia.prototype.setAudioInput = function (audioInput) {
                icelink.Log.warn('LocalMedia.setAudioInput is deprecated. Use LocalMedia.setAudioSourceInput instead.');
                return this.setAudioSourceInput(audioInput);
            };
            LocalMedia.prototype.setVideoInput = function (videoInput) {
                icelink.Log.warn('LocalMedia.setVideoInput is deprecated. Use LocalMedia.setVideoSourceInput instead.');
                return this.setVideoSourceInput(videoInput);
            };
            LocalMedia.prototype.getState = function () {
                return this._getInternal().getState();
            };
            return LocalMedia;
        }(icelink.Media));
        icelink.LocalMedia = LocalMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LocalNetwork = /** @class */ (function () {
            function LocalNetwork() {
            }
            LocalNetwork.prototype.getTypeString = function () {
                return '[fm.icelink.LocalNetwork]';
            };
            LocalNetwork.getAddressType = function (ipAddress) {
                if (ipAddress.indexOf(':') > -1) {
                    return icelink.AddressType.IPv6;
                }
                return icelink.AddressType.IPv4;
            };
            return LocalNetwork;
        }());
        icelink.LocalNetwork = LocalNetwork;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginConstants = /** @class */ (function () {
            function PluginConstants() {
            }
            PluginConstants.getLoaderClassId = function () {
                return '39232F7C-DCF1-382A-8919-7ECD6F782D3F';
            };
            PluginConstants.getDomVideoSinkClassId = function () {
                return 'B9048A14-0F5B-33D9-B23A-5A8B56E54522';
            };
            return PluginConstants;
        }());
        icelink.PluginConstants = PluginConstants;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Util.ts" />
/// <reference path="PluginConstants.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var Plugin = /** @class */ (function () {
            function Plugin() {
            }
            Plugin.install = function (pluginConfig) {
                var promise = new icelink.Promise();
                this._pluginConfig = pluginConfig;
                if (icelink.Util.hasActiveX() && this._pluginConfig && this._pluginConfig.getActiveXPath()) {
                    var object = document.createElement('object');
                    object.id = 'activex.loader';
                    object.setAttribute('codebase', this._pluginConfig.getActiveXPath());
                    object.setAttribute('CLASSID', 'clsid:' + icelink.PluginConstants.getLoaderClassId());
                    object.style.width = '0px';
                    object.style.height = '0px';
                    object.style.position = 'absolute';
                    var body = document.getElementsByTagName('body')[0];
                    body.appendChild(object);
                    this.checkForActiveX(promise, object, new Date().getTime());
                }
                else {
                    promise.resolve(null);
                }
                return promise;
            };
            Plugin.getPluginConfig = function () {
                return this._pluginConfig;
            };
            Plugin.hasRtcPeerConnection = function () {
                return (typeof RTCPeerConnection !== 'undefined');
            };
            Plugin.hasRtcDataChannel = function () {
                return (typeof RTCDataChannel !== 'undefined' || typeof icelink.DataChannel !== 'undefined'); // DataChannel is non-standard
            };
            Plugin.hasGetUserMedia = function () {
                return (typeof navigator.fmGetUserMedia !== 'undefined');
            };
            Plugin.hasRtcIceGatherer = function () {
                return (typeof RTCIceGatherer !== 'undefined');
            };
            Plugin.hasRtcIceTransport = function () {
                return (typeof RTCIceTransport !== 'undefined');
            };
            Plugin.hasRtcDtlsTransport = function () {
                return (typeof RTCDtlsTransport !== 'undefined');
            };
            Plugin.hasRtcRtpSender = function () {
                return (typeof RTCRtpSender !== 'undefined');
            };
            Plugin.hasRtcRtpReceiver = function () {
                return (typeof RTCRtpReceiver !== 'undefined');
            };
            Plugin.hasWebRtc = function (localMedia, dataChannels) {
                return ((localMedia ? this.hasGetUserMedia() : true) && (dataChannels ? this.hasRtcDataChannel() : true) && this.hasRtcPeerConnection());
            };
            Plugin.hasOrtc = function (localMedia, dataChannels) {
                return ((localMedia ? this.hasGetUserMedia() : true) && (dataChannels ? this.hasRtcDataChannel() : true) && this.hasRtcIceGatherer() && this.hasRtcIceTransport() && this.hasRtcDtlsTransport() && this.hasRtcRtpSender() && this.hasRtcRtpReceiver());
            };
            Plugin.hasNative = function (localMedia, dataChannels) {
                return (this.hasWebRtc(localMedia, dataChannels) || this.hasOrtc(localMedia, dataChannels));
            };
            Plugin.hasActiveX = function () {
                return this._hasActiveX;
            };
            Plugin.isReady = function (localMedia, dataChannels) {
                return (this.hasActiveX() || this.hasNative(localMedia, dataChannels));
            };
            Plugin.useActiveX = function (localMedia, dataChannels) {
                if (this._pluginConfig && this._pluginConfig.getPreferActiveX()) {
                    return this.hasActiveX();
                }
                else {
                    return (this.hasActiveX() && !this.hasNative(localMedia, dataChannels));
                }
            };
            Plugin.useNative = function (localMedia, dataChannels) {
                return (!this.useActiveX(localMedia, dataChannels) && this.hasNative(localMedia, dataChannels));
            };
            Plugin.checkForActiveX = function (promise, object, startTime) {
                var _this = this;
                var loaded = false;
                try {
                    if (!icelink.Util.isNullOrUndefined(object.GetIsLoaded)) {
                        loaded = object.GetIsLoaded();
                    }
                }
                catch (ex) {
                    loaded = false;
                }
                if (loaded) {
                    this._hasActiveX = true;
                    promise.resolve(null);
                }
                else if ((new Date().getTime() - startTime) > this._pluginConfig.getActiveXTimeout()) {
                    promise.reject(new icelink.Exception('ActiveX install timed out.'));
                }
                else {
                    window.setTimeout(function () {
                        _this.checkForActiveX(promise, object, startTime);
                    }, 10);
                }
            };
            Plugin.getChromeExtensionId = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionId();
            };
            Plugin.setChromeExtensionId = function (chromeExtensionId) {
                icelink.WebRtcLocalMedia.setChromeExtensionId(chromeExtensionId);
            };
            Plugin.getChromeExtensionUrl = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionUrl();
            };
            Plugin.getChromeExtensionInstalled = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionInstalled();
            };
            Plugin.getChromeExtensionRequiresUserGesture = function () {
                return icelink.WebRtcLocalMedia.getChromeExtensionRequiresUserGesture();
            };
            Plugin.setChromeExtensionRequiresUserGesture = function (chromeExtensionRequiresUserGesture) {
                icelink.WebRtcLocalMedia.setChromeExtensionRequiresUserGesture(chromeExtensionRequiresUserGesture);
            };
            /** @internal */
            Plugin._hasActiveX = false;
            return Plugin;
        }());
        icelink.Plugin = Plugin;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginStream = /** @class */ (function (_super) {
            __extends(PluginStream, _super);
            function PluginStream() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PluginStream.prototype.getTypeString = function () {
                return '[fm.icelink.PluginStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            return PluginStream;
        }(icelink.Dynamic));
        icelink.PluginStream = PluginStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginStream.ts" />

/// <reference path="PluginStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginMediaStream = /** @class */ (function (_super) {
            __extends(PluginMediaStream, _super);
            function PluginMediaStream(localTrack, remoteTrack) {
                var _this = _super.call(this) || this;
                _this._localTrack = localTrack;
                _this._remoteTrack = remoteTrack;
                return _this;
            }
            PluginMediaStream.prototype.getTypeString = function () {
                return '[fm.icelink.PluginMediaStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            PluginMediaStream.prototype.getLocalTrack = function () {
                return this._localTrack;
            };
            PluginMediaStream.prototype.getRemoteTrack = function () {
                return this._remoteTrack;
            };
            return PluginMediaStream;
        }(icelink.PluginStream));
        icelink.PluginMediaStream = PluginMediaStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var dtmf;
        (function (dtmf) {
            /**
             <div>
             A DTMF (telephone-event) tone.
             </div>
        
            */
            var Tone = /** @class */ (function () {
                function Tone() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                        this.fmicelinkdtmfToneInit();
                    }
                    else if (__arguments.length == 1) {
                        var value = __arguments[0];
                        // chained constructor: Tone.call(this, value, 100);
                        __arguments = new Array(2);
                        __arguments[0] = value;
                        __arguments[1] = 100;
                        {
                            var value_1 = __arguments[0];
                            var duration = __arguments[1];
                            //super();
                            this.fmicelinkdtmfToneInit();
                            this.setValue(value_1);
                            this.setDuration(duration);
                            this.setRemainingDuration(duration);
                        }
                    }
                    else if (__arguments.length == 2) {
                        var value = __arguments[0];
                        var duration = __arguments[1];
                        //super();
                        this.fmicelinkdtmfToneInit();
                        this.setValue(value);
                        this.setDuration(duration);
                        this.setRemainingDuration(duration);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Tone.prototype.getTypeString = function () {
                    return '[fm.icelink.dtmf.Tone]';
                };
                Tone.prototype.fmicelinkdtmfToneInit = function () {
                    this._duration = 0;
                    this._remainingDuration = 0;
                    this._timestamp = 0;
                };
                /**
                @internal
        
                */
                Tone.eventCodeFromValue = function (eventString) {
                    if (arguments.length == 1) {
                        var _var0 = eventString;
                        if (_var0 == "0") {
                            do {
                                return 0;
                            } while (false);
                        }
                        else if (_var0 == "1") {
                            do {
                                return 1;
                            } while (false);
                        }
                        else if (_var0 == "2") {
                            do {
                                return 2;
                            } while (false);
                        }
                        else if (_var0 == "3") {
                            do {
                                return 3;
                            } while (false);
                        }
                        else if (_var0 == "4") {
                            do {
                                return 4;
                            } while (false);
                        }
                        else if (_var0 == "5") {
                            do {
                                return 5;
                            } while (false);
                        }
                        else if (_var0 == "6") {
                            do {
                                return 6;
                            } while (false);
                        }
                        else if (_var0 == "7") {
                            do {
                                return 7;
                            } while (false);
                        }
                        else if (_var0 == "8") {
                            do {
                                return 8;
                            } while (false);
                        }
                        else if (_var0 == "9") {
                            do {
                                return 9;
                            } while (false);
                        }
                        else if (_var0 == "*") {
                            do {
                                return 10;
                            } while (false);
                        }
                        else if (_var0 == "#") {
                            do {
                                return 11;
                            } while (false);
                        }
                        else if (_var0 == "A") {
                            do {
                                return 12;
                            } while (false);
                        }
                        else if (_var0 == "B") {
                            do {
                                return 13;
                            } while (false);
                        }
                        else if (_var0 == "C") {
                            do {
                                return 14;
                            } while (false);
                        }
                        else if (_var0 == "D") {
                            do {
                                return 15;
                            } while (false);
                        }
                        else if (_var0 == ",") {
                            do {
                                return 99;
                            } while (false);
                        }
                        return -1;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-fromJson'>&nbsp;</span>**/
                /**
                 <div>
                 Deserializes from JSON.
                 </div>
        
                @param {string} toneJson The JSON.
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.fromJson = function (toneJson) {
                    if (arguments.length == 1) {
                        return fm.icelink.JsonSerializer.deserializeObject(toneJson, function () {
                            return new fm.icelink.dtmf.Tone();
                        }, function (tone, key, valueJson) {
                            var str = key;
                            if ((!fm.icelink.Global.equals(str, null))) {
                                if (!(fm.icelink.Global.equals(str, "value"))) {
                                    if ((fm.icelink.Global.equals(str, "duration"))) {
                                        tone.setDuration(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                    }
                                }
                                else {
                                    tone.setValue(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                            }
                        });
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-fromJsonArray'>&nbsp;</span>**/
                /**
                 <div>
                 Deserializes an array from JSON.
                 </div>
        
                @param {string} tonesJson The JSON.
                @return {fm.icelink.dtmf.Tone[]}
                */
                Tone.fromJsonArray = function (tonesJson) {
                    if (arguments.length == 1) {
                        var list = fm.icelink.JsonSerializer.deserializeObjectArray(tonesJson, fm.icelink.dtmf.Tone.fromJson.bind(fm.icelink.dtmf.Tone));
                        if ((fm.icelink.Global.equals(list, null))) {
                            return null;
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                Tone.fromToneString = function () {
                    if (arguments.length == 3) {
                        var toneString = arguments[0];
                        var duration = arguments[1];
                        var interToneGap = arguments[2];
                        duration = fm.icelink.MathAssistant.max(40, fm.icelink.MathAssistant.min(2000, duration));
                        interToneGap = fm.icelink.MathAssistant.max(40, interToneGap);
                        var list = new Array();
                        for (var i = 0; (i < toneString.length); i++) {
                            if ((i > 0)) {
                                fm.icelink.ArrayExtensions.add(list, new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getEmptyValue(), interToneGap));
                            }
                            if ((fm.icelink.Global.equals(fm.icelink.StringExtensions.substring(toneString, i, 1), fm.icelink.dtmf.Tone.getPauseValue()))) {
                                fm.icelink.ArrayExtensions.add(list, new fm.icelink.dtmf.Tone(fm.icelink.StringExtensions.substring(toneString, i, 1), 2000));
                            }
                            else {
                                fm.icelink.ArrayExtensions.add(list, new fm.icelink.dtmf.Tone(fm.icelink.StringExtensions.substring(toneString, i, 1), duration));
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else if (arguments.length == 1) {
                        var toneString = arguments[0];
                        return fm.icelink.dtmf.Tone.fromToneString(toneString, 100, 100);
                    }
                    else if (arguments.length == 2) {
                        var toneString = arguments[0];
                        var duration = arguments[1];
                        return fm.icelink.dtmf.Tone.fromToneString(toneString, duration, 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getA'>&nbsp;</span>**/
                /**
                 <div>
                 Gets A tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getA = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getAValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getAValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the A value ("A").
                 </div>
        
        
                @return {string}
                */
                Tone.getAValue = function () {
                    if (arguments.length == 0) {
                        return "A";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getB'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the B tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getB = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getBValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getBValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the B value ("B").
                 </div>
        
        
                @return {string}
                */
                Tone.getBValue = function () {
                    if (arguments.length == 0) {
                        return "B";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getC'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the C tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getC = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getCValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getCValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the C value ("C").
                 </div>
        
        
                @return {string}
                */
                Tone.getCValue = function () {
                    if (arguments.length == 0) {
                        return "C";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getD'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the D tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getD = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getDValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getDValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the D value ("D").
                 </div>
        
        
                @return {string}
                */
                Tone.getDValue = function () {
                    if (arguments.length == 0) {
                        return "D";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getEight'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the eight tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getEight = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getEightValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getEightValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the eight value ("8").
                 </div>
        
        
                @return {string}
                */
                Tone.getEightValue = function () {
                    if (arguments.length == 0) {
                        return "8";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getEmpty'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the empty tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getEmpty = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getEmptyValue(), 0);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getEmptyValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the empty value ("").
                 </div>
        
        
                @return {string}
                */
                Tone.getEmptyValue = function () {
                    if (arguments.length == 0) {
                        return "";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getFive'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the five tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getFive = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getFiveValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getFiveValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the five value ("5").
                 </div>
        
        
                @return {string}
                */
                Tone.getFiveValue = function () {
                    if (arguments.length == 0) {
                        return "5";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getFour'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the four tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getFour = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getFourValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getFourValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the four value ("4").
                 </div>
        
        
                @return {string}
                */
                Tone.getFourValue = function () {
                    if (arguments.length == 0) {
                        return "4";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getHash'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the hash tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getHash = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getHashValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getHashValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the hash value ("#").
                 </div>
        
        
                @return {string}
                */
                Tone.getHashValue = function () {
                    if (arguments.length == 0) {
                        return "#";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getNine'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the nine tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getNine = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getNineValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getNineValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the nine value ("9").
                 </div>
        
        
                @return {string}
                */
                Tone.getNineValue = function () {
                    if (arguments.length == 0) {
                        return "9";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getOne'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the one tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getOne = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getOneValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getOneValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the one value ("1").
                 </div>
        
        
                @return {string}
                */
                Tone.getOneValue = function () {
                    if (arguments.length == 0) {
                        return "1";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getPause'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the pause tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getPause = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getPauseValue(), 2000);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getPauseDuration'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the pause duration in milliseconds (2000).
                 </div>
        
        
                @return {number}
                */
                Tone.getPauseDuration = function () {
                    if (arguments.length == 0) {
                        return 2000;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getPauseValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the pause value (",").
                 </div>
        
        
                @return {string}
                */
                Tone.getPauseValue = function () {
                    if (arguments.length == 0) {
                        return ",";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getSeven'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the seven tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getSeven = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getSevenValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getSevenValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the seven value ("7").
                 </div>
        
        
                @return {string}
                */
                Tone.getSevenValue = function () {
                    if (arguments.length == 0) {
                        return "7";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getSix'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the six tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getSix = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getSixValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getSixValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the six value ("6").
                 </div>
        
        
                @return {string}
                */
                Tone.getSixValue = function () {
                    if (arguments.length == 0) {
                        return "6";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getStar'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the star tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getStar = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getStarValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getStarValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the star value ("*").
                 </div>
        
        
                @return {string}
                */
                Tone.getStarValue = function () {
                    if (arguments.length == 0) {
                        return "*";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getThree'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the three tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getThree = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getThreeValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getThreeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the three value ("3").
                 </div>
        
        
                @return {string}
                */
                Tone.getThreeValue = function () {
                    if (arguments.length == 0) {
                        return "3";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getTwo'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the two tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getTwo = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getTwoValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getTwoValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the two value ("2").
                 </div>
        
        
                @return {string}
                */
                Tone.getTwoValue = function () {
                    if (arguments.length == 0) {
                        return "2";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getZero'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the zero tone.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.getZero = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(fm.icelink.dtmf.Tone.getZeroValue(), 100);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getZeroValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the zero value ("0").
                 </div>
        
        
                @return {string}
                */
                Tone.getZeroValue = function () {
                    if (arguments.length == 0) {
                        return "0";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-toJson'>&nbsp;</span>**/
                /**
                 <div>
                 Serializes to JSON.
                 </div>
        
                @param {fm.icelink.dtmf.Tone} tone
                @return {string}
                */
                Tone.toJson = function (tone) {
                    if (arguments.length == 1) {
                        return fm.icelink.JsonSerializer.serializeObject(tone, function (obj, jsonObj) {
                            jsonObj["value"] = fm.icelink.JsonSerializer.serializeString(obj.getValue());
                            jsonObj["duration"] = fm.icelink.JsonSerializer.serializeInteger(obj.getDuration());
                        });
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-toJsonArray'>&nbsp;</span>**/
                /**
                 <div>
                 Serializes an array to JSON.
                 </div>
        
                @param {fm.icelink.dtmf.Tone[]} tones The array.
                @return {string}
                */
                Tone.toJsonArray = function (tones) {
                    if (arguments.length == 1) {
                        return fm.icelink.JsonSerializer.serializeObjectArray(tones, fm.icelink.dtmf.Tone.toJson.bind(fm.icelink.dtmf.Tone));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-toToneString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts an array of DTMF tones into a tone string.
                 This discards duration and inter-tone gap data.
                 </div>
        
                @param {fm.icelink.dtmf.Tone[]} tones The tones.
                @return {string}
                */
                Tone.toToneString = function (tones) {
                    if (arguments.length == 1) {
                        var builder = new fm.icelink.StringBuilder();
                        for (var _i = 0, tones_1 = tones; _i < tones_1.length; _i++) {
                            var tone = tones_1[_i];
                            builder.append(tone.getValue());
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.valueFromEventCode = function (eventCode) {
                    if (arguments.length == 1) {
                        var _var0 = eventCode;
                        if (_var0 == 0) {
                            do {
                                return "0";
                            } while (false);
                        }
                        else if (_var0 == 1) {
                            do {
                                return "1";
                            } while (false);
                        }
                        else if (_var0 == 2) {
                            do {
                                return "2";
                            } while (false);
                        }
                        else if (_var0 == 3) {
                            do {
                                return "3";
                            } while (false);
                        }
                        else if (_var0 == 4) {
                            do {
                                return "4";
                            } while (false);
                        }
                        else if (_var0 == 5) {
                            do {
                                return "5";
                            } while (false);
                        }
                        else if (_var0 == 6) {
                            do {
                                return "6";
                            } while (false);
                        }
                        else if (_var0 == 7) {
                            do {
                                return "7";
                            } while (false);
                        }
                        else if (_var0 == 8) {
                            do {
                                return "8";
                            } while (false);
                        }
                        else if (_var0 == 9) {
                            do {
                                return "9";
                            } while (false);
                        }
                        else if (_var0 == 10) {
                            do {
                                return "*";
                            } while (false);
                        }
                        else if (_var0 == 11) {
                            do {
                                return "#";
                            } while (false);
                        }
                        else if (_var0 == 12) {
                            do {
                                return "A";
                            } while (false);
                        }
                        else if (_var0 == 13) {
                            do {
                                return "B";
                            } while (false);
                        }
                        else if (_var0 == 14) {
                            do {
                                return "C";
                            } while (false);
                        }
                        else if (_var0 == 15) {
                            do {
                                return "D";
                            } while (false);
                        }
                        else if (_var0 == 99) {
                            do {
                                return ",";
                            } while (false);
                        }
                        return "";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-clone'>&nbsp;</span>**/
                /**
                 <div>
                 Clones this instance.
                 </div>
        
        
                @return {fm.icelink.dtmf.Tone}
                */
                Tone.prototype.clone = function () {
                    if (arguments.length == 0) {
                        return new fm.icelink.dtmf.Tone(this.getValue(), this.getDuration());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getDuration'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the duration in milliseconds.
                 </div>
        
        
                @return {number}
                */
                Tone.prototype.getDuration = function () {
                    if (arguments.length == 0) {
                        return this._duration;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.getRemainingDuration = function () {
                    if (arguments.length == 0) {
                        return this._remainingDuration;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.getTimestamp = function () {
                    if (arguments.length == 0) {
                        return this._timestamp;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-getValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the value.
                 </div>
        
        
                @return {string}
                */
                Tone.prototype.getValue = function () {
                    if (arguments.length == 0) {
                        return this._value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.setDuration = function (value) {
                    if (arguments.length == 1) {
                        this._duration = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.setRemainingDuration = function (value) {
                    if (arguments.length == 1) {
                        this._remainingDuration = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.setTimestamp = function (value) {
                    if (arguments.length == 1) {
                        this._timestamp = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Tone.prototype.setValue = function (value) {
                    if (arguments.length == 1) {
                        this._value = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-toJson'>&nbsp;</span>**/
                /**
                 <div>
                 Serializes to JSON.
                 </div>
        
                @return {string}
                */
                Tone.prototype.toJson = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.dtmf.Tone.toJson(this);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.dtmf.Tone-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Serializes to a string.
                 </div>
        
                @return {string}
                */
                Tone.prototype.toString = function () {
                    if (arguments.length == 0) {
                        if ((fm.icelink.Global.equals(this.getValue(), fm.icelink.dtmf.Tone.getEmptyValue()))) {
                            return fm.icelink.StringExtensions.format("[empty] ({0}ms)", fm.icelink.IntExtensions.toString(this.getDuration()));
                        }
                        if ((fm.icelink.Global.equals(this.getValue(), fm.icelink.dtmf.Tone.getPauseValue()))) {
                            return fm.icelink.StringExtensions.format("[pause] ({0}ms)", fm.icelink.IntExtensions.toString(this.getDuration()));
                        }
                        return fm.icelink.StringExtensions.format("{0} ({1}ms)", this.getValue(), fm.icelink.IntExtensions.toString(this.getDuration()));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Tone;
            }());
            dtmf.Tone = Tone;
        })(dtmf = icelink.dtmf || (icelink.dtmf = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMediaStream.ts" />
/// <reference path="IPluginAudioStream.ts" />
/// <reference path="dtmf/Tone.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginAudioStream = /** @class */ (function (_super) {
            __extends(PluginAudioStream, _super);
            function PluginAudioStream(external, localTrack, remoteTrack) {
                var _this = _super.call(this, localTrack, remoteTrack) || this;
                /** @internal */
                _this._onDirectionChangeValues = [];
                /** @internal */
                _this._onStateChangeValues = [];
                /** @internal */
                _this._onReceiveDtmfToneValues = [];
                /** @internal */
                _this._onReceiveDtmfToneChangeValues = [];
                /** @internal */
                _this._onSendDtmfToneValues = [];
                /** @internal */
                _this._onSendDtmfToneChangeValues = [];
                _this._external = external;
                _this._axo = new ActiveXObject("fm.icelink.AudioStream");
                _this._axo.Initialize(_this.getLocalTrack() == null ? 0 : _this.getLocalTrack().getMedia().getHandle(), remoteTrack == null ? 0 : remoteTrack.getMedia().getHandle());
                _this._axo.SetOnDirectionChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onDirectionChangeValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value();
                        }
                    }, 1);
                });
                _this._axo.SetOnStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                            var onStateChangeValue = _a[_i];
                            onStateChangeValue();
                        }
                    }, 1);
                });
                _this._axo.SetOnReceiveDtmfTone(function (toneJson) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onReceiveDtmfToneValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value(icelink.dtmf.Tone.fromJson(toneJson));
                        }
                    }, 1);
                });
                _this._axo.SetOnReceiveDtmfToneChange(function (toneJson) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onReceiveDtmfToneChangeValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value(icelink.dtmf.Tone.fromJson(toneJson));
                        }
                    }, 1);
                });
                _this._axo.SetOnSendDtmfTone(function (toneJson) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onSendDtmfToneValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value(icelink.dtmf.Tone.fromJson(toneJson));
                        }
                    }, 1);
                });
                _this._axo.SetOnSendDtmfToneChange(function (toneJson) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onSendDtmfToneChangeValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value(icelink.dtmf.Tone.fromJson(toneJson));
                        }
                    }, 1);
                });
                return _this;
            }
            PluginAudioStream.prototype.getTypeString = function () {
                return '[fm.icelink.PluginAudioStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginAudioStream.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginAudioStream.prototype._getAxo = function () {
                return this._axo;
            };
            PluginAudioStream.prototype.getState = function () {
                return this._getAxo().GetState();
            };
            PluginAudioStream.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            PluginAudioStream.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            PluginAudioStream.prototype.getLocalReceive = function () {
                return this._getAxo().GetLocalReceive();
            };
            PluginAudioStream.prototype.getLocalSend = function () {
                return this._getAxo().GetLocalSend();
            };
            PluginAudioStream.prototype.getRemoteReceive = function () {
                return this._getAxo().GetRemoteReceive();
            };
            PluginAudioStream.prototype.getRemoteSend = function () {
                return this._getAxo().GetRemoteSend();
            };
            PluginAudioStream.prototype.setLocalReceive = function (value) {
                return this._getAxo().SetLocalReceive(value);
            };
            PluginAudioStream.prototype.setLocalSend = function (value) {
                return this._getAxo().SetLocalSend(value);
            };
            PluginAudioStream.prototype.getRemoteDirection = function () {
                return this._getAxo().GetRemoteDirection();
            };
            PluginAudioStream.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginAudioStream.prototype.changeDirection = function (newDirection) {
                return icelink.Error.fromJson(this._getAxo().ChangeDirection(newDirection));
            };
            PluginAudioStream.prototype.getDirection = function () {
                return this._getAxo().GetDirection();
            };
            PluginAudioStream.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginAudioStream.prototype.getLabel = function () {
                return this._getAxo().GetLabel();
            };
            PluginAudioStream.prototype.getLocalBandwidth = function () {
                return this._getAxo().GetLocalBandwidth();
            };
            PluginAudioStream.prototype.getLocalDirection = function () {
                return this._getAxo().GetLocalDirection();
            };
            PluginAudioStream.prototype.getMuted = function () {
                return this._getAxo().GetMuted();
            };
            PluginAudioStream.prototype.getRemoteBandwidth = function () {
                return this._getAxo().GetRemoteBandwidth();
            };
            PluginAudioStream.prototype.getTag = function () {
                return this._getAxo().GetTag();
            };
            PluginAudioStream.prototype.getType = function () {
                return icelink.StreamType.Audio;
            };
            PluginAudioStream.prototype.setLocalDirection = function (value) {
                this._getAxo().SetLocalDirection(value);
            };
            PluginAudioStream.prototype.setLocalBandwidth = function (value) {
                this._getAxo().SetLocalBandwidth(value);
            };
            PluginAudioStream.prototype.setMuted = function (value) {
                this._getAxo().SetMuted(value);
            };
            PluginAudioStream.prototype.setTag = function (value) {
                this._getAxo().SetTag(value);
            };
            PluginAudioStream.prototype.addOnDirectionChange = function (value) {
                icelink.ArrayExtensions.add(this._onDirectionChangeValues, value);
            };
            PluginAudioStream.prototype.removeOnDirectionChange = function (value) {
                icelink.ArrayExtensions.remove(this._onDirectionChangeValues, value);
            };
            PluginAudioStream.prototype.addOnReceiveDtmfTone = function (value) {
                icelink.ArrayExtensions.add(this._onReceiveDtmfToneValues, value);
            };
            PluginAudioStream.prototype.addOnReceiveDtmfToneChange = function (value) {
                icelink.ArrayExtensions.add(this._onReceiveDtmfToneChangeValues, value);
            };
            PluginAudioStream.prototype.addOnSendDtmfTone = function (value) {
                icelink.ArrayExtensions.add(this._onSendDtmfToneValues, value);
            };
            PluginAudioStream.prototype.addOnSendDtmfToneChange = function (value) {
                icelink.ArrayExtensions.add(this._onSendDtmfToneChangeValues, value);
            };
            PluginAudioStream.prototype.insertDtmfTone = function (dtmfTone) {
                return this._getAxo().InsertDtmfTone(dtmfTone.toJson());
            };
            PluginAudioStream.prototype.insertDtmfTones = function (dtmfTones) {
                return this._getAxo().InsertDtmfTones(icelink.dtmf.Tone.toJsonArray(dtmfTones));
            };
            PluginAudioStream.prototype.removeOnReceiveDtmfTone = function (value) {
                icelink.ArrayExtensions.remove(this._onReceiveDtmfToneValues, value);
            };
            PluginAudioStream.prototype.removeOnReceiveDtmfToneChange = function (value) {
                icelink.ArrayExtensions.remove(this._onReceiveDtmfToneChangeValues, value);
            };
            PluginAudioStream.prototype.removeOnSendDtmfTone = function (value) {
                icelink.ArrayExtensions.remove(this._onSendDtmfToneValues, value);
            };
            PluginAudioStream.prototype.removeOnSendDtmfToneChange = function (value) {
                icelink.ArrayExtensions.remove(this._onSendDtmfToneChangeValues, value);
            };
            return PluginAudioStream;
        }(icelink.PluginMediaStream));
        icelink.PluginAudioStream = PluginAudioStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginMediaTrack = /** @class */ (function (_super) {
            __extends(PluginMediaTrack, _super);
            function PluginMediaTrack(media) {
                var _this = _super.call(this) || this;
                _this._media = media;
                return _this;
            }
            PluginMediaTrack.prototype.getTypeString = function () {
                return '[fm.icelink.PluginMediaTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            PluginMediaTrack.prototype.getMedia = function () {
                return this._media;
            };
            PluginMediaTrack.prototype.destroy = function () {
                //TODO: ?
                return true;
            };
            return PluginMediaTrack;
        }(icelink.Dynamic));
        icelink.PluginMediaTrack = PluginMediaTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMediaTrack.ts" />

/// <reference path="PluginMediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginAudioTrack = /** @class */ (function (_super) {
            __extends(PluginAudioTrack, _super);
            function PluginAudioTrack(external, media) {
                var _this = _super.call(this, media) || this;
                _this._external = external;
                return _this;
            }
            PluginAudioTrack.prototype.getTypeString = function () {
                return '[fm.icelink.PluginAudioTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginAudioTrack.prototype._getExternal = function () {
                return this._external;
            };
            PluginAudioTrack.prototype.isLocal = function () {
                return (icelink.Util.isObjectType(this.getMedia(), '[fm.icelink.PluginLocalMedia]'));
            };
            PluginAudioTrack.prototype.addOnStarted = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.addOnStarted on a remote track.');
                }
                this.getMedia().addOnAudioStarted(value);
            };
            PluginAudioTrack.prototype.addOnStopped = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.addOnStopped on a remote track.');
                }
                this.getMedia().addOnAudioStopped(value);
            };
            PluginAudioTrack.prototype.addOnDestroyed = function (value) {
                this.getMedia().addOnAudioDestroyed(value);
            };
            PluginAudioTrack.prototype.removeOnStarted = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.removeOnStarted on a remote track.');
                }
                this.getMedia().removeOnAudioStarted(value);
            };
            PluginAudioTrack.prototype.removeOnStopped = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.removeOnStopped on a remote track.');
                }
                this.getMedia().removeOnAudioStopped(value);
            };
            PluginAudioTrack.prototype.removeOnDestroyed = function (value) {
                this.getMedia().removeOnAudioDestroyed(value);
            };
            PluginAudioTrack.prototype.changeSinkOutput = function (sinkOutput) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.changeSinkOutput on a local track.');
                }
                return this.getMedia().changeAudioSinkOutput(sinkOutput);
            };
            PluginAudioTrack.prototype.getSinkOutput = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSinkOutput on a local track.');
                }
                return this.getMedia().getAudioSinkOutput();
            };
            PluginAudioTrack.prototype.getSinkOutputs = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSinkOutputs on a local track.');
                }
                return this.getMedia().getAudioSinkOutputs();
            };
            PluginAudioTrack.prototype.setSinkOutput = function (value) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.setSinkOutput on a local track.');
                }
                this.getMedia().setAudioSinkOutput(value);
            };
            PluginAudioTrack.prototype.changeSourceInput = function (sourceInput) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.changeSourceInput on a remote track.');
                }
                return this.getMedia().changeAudioSourceInput(sourceInput);
            };
            PluginAudioTrack.prototype.getSourceInput = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSourceInput on a remote track.');
                }
                return this.getMedia().getAudioSourceInput();
            };
            PluginAudioTrack.prototype.getSourceInputs = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSourceInputs on a remote track.');
                }
                return this.getMedia().getAudioSourceInputs();
            };
            PluginAudioTrack.prototype.setSourceInput = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.setSourceInput on a remote track.');
                }
                this.getMedia().setAudioSourceInput(value);
            };
            PluginAudioTrack.prototype.addOnLevel = function (value) {
                this.getMedia().addOnAudioLevel(value);
            };
            PluginAudioTrack.prototype.getGain = function () {
                return this.getMedia().getAudioGain();
            };
            PluginAudioTrack.prototype.getMuted = function () {
                return this.getMedia().getAudioMuted();
            };
            PluginAudioTrack.prototype.getVolume = function () {
                return this.getMedia().getAudioVolume();
            };
            PluginAudioTrack.prototype.removeOnLevel = function (value) {
                this.getMedia().removeOnAudioLevel(value);
            };
            PluginAudioTrack.prototype.setGain = function (value) {
                this.getMedia().setAudioGain(value);
            };
            PluginAudioTrack.prototype.setMuted = function (value) {
                this.getMedia().setAudioMuted(value);
            };
            PluginAudioTrack.prototype.setVolume = function (value) {
                this.getMedia().setAudioVolume(value);
            };
            return PluginAudioTrack;
        }(icelink.PluginMediaTrack));
        icelink.PluginAudioTrack = PluginAudioTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginConfig = /** @class */ (function () {
            function PluginConfig() {
                this._activeXTimeout = 30000; // 30 secs
                this._preferActiveX = false;
            }
            PluginConfig.prototype.getActiveXPath = function () {
                return this._activeXPath;
            };
            PluginConfig.prototype.setActiveXPath = function (activeXPath) {
                this._activeXPath = activeXPath;
            };
            PluginConfig.prototype.getActiveXTimeout = function () {
                return this._activeXTimeout;
            };
            PluginConfig.prototype.setActiveXTimeout = function (activeXTimeout) {
                this._activeXTimeout = activeXTimeout;
            };
            PluginConfig.prototype.getPreferActiveX = function () {
                return this._preferActiveX;
            };
            PluginConfig.prototype.setPreferActiveX = function (preferActiveX) {
                this._preferActiveX = preferActiveX;
            };
            return PluginConfig;
        }());
        icelink.PluginConfig = PluginConfig;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />
/// <reference path="IPluginConnection.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginConnection = /** @class */ (function (_super) {
            __extends(PluginConnection, _super);
            function PluginConnection(external, streams) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onLocalCandidateValues = [];
                /** @internal */
                _this._onLocalDescriptionValues = [];
                /** @internal */
                _this._onRemoteCandidateValues = [];
                /** @internal */
                _this._onRemoteDescriptionValues = [];
                /** @internal */
                _this._onSignallingStateChangeValues = [];
                /** @internal */
                _this._onIceConnectionStateChangeValues = [];
                /** @internal */
                _this._onStateChangeValues = [];
                /** @internal */
                _this._onGatheringStateChangeValues = [];
                /** @internal */
                _this._onExternalIdChangeValues = [];
                _this._external = external;
                _this._streams = streams;
                _this._axo = new ActiveXObject("fm.icelink.Connection");
                _this._axo.Initialize(icelink.ArrayExtensions.map(_this._streams, function (stream) {
                    return stream.getHandle();
                }));
                // event proxy
                _this._axo.SetOnLocalCandidate(function (candidate) {
                    setTimeout(function () {
                        var localCandidate = icelink.Candidate.fromJson(candidate);
                        icelink.Log.debug(icelink.StringExtensions.format("Local candidate for stream {0}:\r\n{1}", icelink.IntExtensions.toString(localCandidate.getSdpMediaIndex()), localCandidate.getSdpCandidateAttribute().toString()));
                        for (var _i = 0, _a = _this._onLocalCandidateValues; _i < _a.length; _i++) {
                            var onLocalCandidateValue = _a[_i];
                            onLocalCandidateValue(_this, localCandidate);
                        }
                    }, 1);
                });
                _this._axo.SetOnIceConnectionStateChange(function (iceConnectionState) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onIceConnectionStateChangeValues; _i < _a.length; _i++) {
                            var onIceConnectionStateChangeValue = _a[_i];
                            onIceConnectionStateChangeValue(_this);
                        }
                    }, 1);
                });
                _this._axo.SetOnGatheringStateChange(function (iceGatheringState) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onGatheringStateChangeValues; _i < _a.length; _i++) {
                            var onGatheringStateChangeValue = _a[_i];
                            onGatheringStateChangeValue(_this);
                        }
                    }, 1);
                });
                _this._axo.SetOnLocalDescription(function (sessionDescription) {
                    setTimeout(function () {
                        var localDescription = icelink.SessionDescription.fromJson(sessionDescription);
                        icelink.Log.debug(icelink.StringExtensions.format("Local session description ({0}):\r\n{1}", icelink.StringExtensions.toLower(new icelink.SessionDescriptionTypeWrapper(localDescription.getType()).toString()), localDescription.getSdpMessage().toString()));
                        for (var _i = 0, _a = _this._onLocalDescriptionValues; _i < _a.length; _i++) {
                            var onLocalDescriptionValue = _a[_i];
                            onLocalDescriptionValue(_this, localDescription);
                        }
                    }, 1);
                });
                _this._axo.SetOnRemoteCandidate(function (candidate) {
                    setTimeout(function () {
                        var remoteCandidate = icelink.Candidate.fromJson(candidate);
                        icelink.Log.debug(icelink.StringExtensions.format("Remote candidate for stream {0}:\r\n{1}", icelink.IntExtensions.toString(remoteCandidate.getSdpMediaIndex()), remoteCandidate.getSdpCandidateAttribute().toString()));
                        for (var _i = 0, _a = _this._onRemoteCandidateValues; _i < _a.length; _i++) {
                            var onRemoteCandidateValue = _a[_i];
                            onRemoteCandidateValue(_this, remoteCandidate);
                        }
                    }, 1);
                });
                _this._axo.SetOnRemoteDescription(function (sessionDescription) {
                    setTimeout(function () {
                        var remoteDescription = icelink.SessionDescription.fromJson(sessionDescription);
                        icelink.Log.debug(icelink.StringExtensions.format("Remote session description ({0}):\r\n{1}", icelink.StringExtensions.toLower(new icelink.SessionDescriptionTypeWrapper(remoteDescription.getType()).toString()), remoteDescription.getSdpMessage().toString()));
                        for (var _i = 0, _a = _this._onRemoteDescriptionValues; _i < _a.length; _i++) {
                            var onRemoteDescriptionValue = _a[_i];
                            onRemoteDescriptionValue(_this, remoteDescription);
                        }
                    }, 1);
                });
                _this._axo.SetOnSignallingStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onSignallingStateChangeValues; _i < _a.length; _i++) {
                            var onSignallingStateChangeValue = _a[_i];
                            onSignallingStateChangeValue(_this);
                        }
                    }, 1);
                });
                _this._axo.SetOnStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                            var onStateChangeValue = _a[_i];
                            onStateChangeValue(_this);
                        }
                    }, 1);
                });
                _this._axo.SetOnExternalIdChange(function (id1, id2) {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onExternalIdChangeValues; _i < _a.length; _i++) {
                            var onExternalIdChangeValue = _a[_i];
                            onExternalIdChangeValue(id1, id2);
                        }
                    }, 1);
                });
                return _this;
            }
            PluginConnection.prototype.getTypeString = function () {
                return '[fm.icelink.PluginConnection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginConnection.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginConnection.prototype._getAxo = function () {
                return this._axo;
            };
            PluginConnection.prototype.addIceServer = function (iceServer) {
                this._getAxo().AddIceServer(icelink.IceServer.toJson(iceServer));
            };
            PluginConnection.prototype.addIceServers = function (iceServers) {
                this._getAxo().AddIceServers(icelink.IceServer.toJsonArray(iceServers));
            };
            PluginConnection.prototype.addOnLocalCandidate = function (value) {
                icelink.ArrayExtensions.add(this._onLocalCandidateValues, value);
            };
            PluginConnection.prototype.addOnExternalIdChange = function (value) {
                icelink.ArrayExtensions.add(this._onExternalIdChangeValues, value);
            };
            PluginConnection.prototype.addOnIceConnectionStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onIceConnectionStateChangeValues, value);
            };
            PluginConnection.prototype.addOnGatheringStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onGatheringStateChangeValues, value);
            };
            PluginConnection.prototype.addOnLocalDescription = function (value) {
                icelink.ArrayExtensions.add(this._onLocalDescriptionValues, value);
            };
            PluginConnection.prototype.addOnRemoteCandidate = function (value) {
                icelink.ArrayExtensions.add(this._onRemoteCandidateValues, value);
            };
            PluginConnection.prototype.addOnRemoteDescription = function (value) {
                icelink.ArrayExtensions.add(this._onRemoteDescriptionValues, value);
            };
            PluginConnection.prototype.addOnSignallingStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onSignallingStateChangeValues, value);
            };
            PluginConnection.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            PluginConnection.prototype.addRemoteCandidate = function (remoteCandidate) {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (remoteCandidateJson) {
                    promise.resolve(icelink.Candidate.fromJson(remoteCandidateJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().AddRemoteCandidate(icelink.Candidate.toJson(remoteCandidate), innerPromise);
                return promise;
            };
            PluginConnection.prototype.close = function () {
                this._getAxo().Close();
            };
            PluginConnection.prototype.createAnswer = function () {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (answerJson) {
                    promise.resolve(icelink.SessionDescription.fromJson(answerJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().CreateAnswer(innerPromise);
                return promise;
            };
            PluginConnection.prototype.createOffer = function () {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (offerJson) {
                    promise.resolve(icelink.SessionDescription.fromJson(offerJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().CreateOffer(innerPromise);
                return promise;
            };
            PluginConnection.prototype.getHasAudio = function () {
                return (this.getAudioStream() != null);
            };
            PluginConnection.prototype.getHasVideo = function () {
                return (this.getVideoStream() != null);
            };
            PluginConnection.prototype.getHasData = function () {
                return (this.getDataStream() != null);
            };
            PluginConnection.prototype.getAudioStream = function () {
                return icelink.Utility.firstOrDefault(this.getAudioStreams());
            };
            PluginConnection.prototype.getAudioStreams = function () {
                var streams = [];
                for (var _i = 0, _a = this._streams; _i < _a.length; _i++) {
                    var stream = _a[_i];
                    if (stream.getType() == icelink.StreamType.Audio) {
                        streams.push(stream);
                    }
                }
                return streams;
            };
            PluginConnection.prototype.getVideoStream = function () {
                return icelink.Utility.firstOrDefault(this.getVideoStreams());
            };
            PluginConnection.prototype.getVideoStreams = function () {
                var streams = [];
                for (var _i = 0, _a = this._streams; _i < _a.length; _i++) {
                    var stream = _a[_i];
                    if (stream.getType() == icelink.StreamType.Video) {
                        streams.push(stream);
                    }
                }
                return streams;
            };
            PluginConnection.prototype.getDataStream = function () {
                return icelink.Utility.firstOrDefault(this.getDataStreams());
            };
            PluginConnection.prototype.getDataStreams = function () {
                var streams = [];
                for (var _i = 0, _a = this._streams; _i < _a.length; _i++) {
                    var stream = _a[_i];
                    if (stream.getType() == icelink.StreamType.Application) {
                        streams.push(stream);
                    }
                }
                return streams;
            };
            PluginConnection.prototype.getDeadStreamTimeout = function () {
                return this._getAxo().GetDeadStreamTimeout();
            };
            PluginConnection.prototype.getExternalId = function () {
                return this._getAxo().GetExternalId();
            };
            PluginConnection.prototype.getError = function () {
                return icelink.Error.fromJson(this._getAxo().GetError());
            };
            PluginConnection.prototype.getIceGatherPolicy = function () {
                return this._getAxo().GetIceGatherPolicy();
            };
            PluginConnection.prototype.getIceServer = function () {
                return icelink.IceServer.fromJson(this._getAxo().GetIceServer());
            };
            PluginConnection.prototype.getIceServers = function () {
                return icelink.IceServer.fromJsonArray(this._getAxo().GetIceServers());
            };
            PluginConnection.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginConnection.prototype.getLocalDescription = function () {
                return icelink.SessionDescription.fromJson(this._getAxo().GetLocalDescription());
            };
            PluginConnection.prototype.getRemoteDescription = function () {
                return icelink.SessionDescription.fromJson(this._getAxo().GetRemoteDescription());
            };
            PluginConnection.prototype.getSignallingState = function () {
                return this._getAxo().GetSignallingState();
            };
            PluginConnection.prototype.getState = function () {
                return this._getAxo().GetState();
            };
            PluginConnection.prototype.getStats = function () {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (statsJson) {
                    promise.resolve(icelink.ConnectionStats.fromJson(statsJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().GetStats(innerPromise);
                return promise;
            };
            PluginConnection.prototype.getStreams = function () {
                return this._streams;
            };
            PluginConnection.prototype.getTieBreaker = function () {
                return this._getAxo().GetTieBreaker();
            };
            PluginConnection.prototype.getTimeout = function () {
                return this._getAxo().GetTimeout();
            };
            PluginConnection.prototype.getTrickleIcePolicy = function () {
                return this._getAxo().GetTrickleIcePolicy();
            };
            PluginConnection.prototype.getIceConnectionState = function () {
                return this._getAxo().GetIceConnectionState();
            };
            PluginConnection.prototype.getGatheringState = function () {
                return this._getAxo().GetGatheringState();
            };
            PluginConnection.prototype.removeIceServer = function (iceServer) {
                this._getAxo().RemoveIceServer(icelink.IceServer.toJson(iceServer));
            };
            PluginConnection.prototype.removeIceServers = function (iceServers) {
                this._getAxo().RemoveIceServers(icelink.IceServer.toJsonArray(iceServers));
            };
            PluginConnection.prototype.removeOnLocalCandidate = function (value) {
                icelink.ArrayExtensions.remove(this._onLocalCandidateValues, value);
            };
            PluginConnection.prototype.removeOnIceConnectionStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onIceConnectionStateChangeValues, value);
            };
            PluginConnection.prototype.removeOnExternalIdChange = function (value) {
                icelink.ArrayExtensions.remove(this._onExternalIdChangeValues, value);
            };
            PluginConnection.prototype.removeOnGatheringStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onGatheringStateChangeValues, value);
            };
            PluginConnection.prototype.removeOnLocalDescription = function (value) {
                icelink.ArrayExtensions.remove(this._onLocalDescriptionValues, value);
            };
            PluginConnection.prototype.removeOnRemoteCandidate = function (value) {
                icelink.ArrayExtensions.remove(this._onRemoteCandidateValues, value);
            };
            PluginConnection.prototype.removeOnRemoteDescription = function (value) {
                icelink.ArrayExtensions.remove(this._onRemoteDescriptionValues, value);
            };
            PluginConnection.prototype.removeOnSignallingStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onSignallingStateChangeValues, value);
            };
            PluginConnection.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            PluginConnection.prototype.setDeadStreamTimeout = function (value) {
                this._getAxo().SetDeadStreamTimeout(value);
            };
            PluginConnection.prototype.setExternalId = function (value) {
                this._getAxo().SetExternalId(value);
            };
            PluginConnection.prototype.setIceGatherPolicy = function (value) {
                this._getAxo().SetIceGatherPolicy(value);
            };
            PluginConnection.prototype.setIceServer = function (value) {
                this._getAxo().SetIceServer(icelink.IceServer.toJson(value));
            };
            PluginConnection.prototype.setIceServers = function (value) {
                this._getAxo().SetIceServers(icelink.IceServer.toJsonArray(value));
            };
            PluginConnection.prototype.setTieBreaker = function (value) {
                this._getAxo().SetTieBreaker(value);
            };
            PluginConnection.prototype.setLocalDescription = function (localDescription) {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (localDescriptionJson) {
                    promise.resolve(icelink.SessionDescription.fromJson(localDescriptionJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().SetLocalDescription(icelink.SessionDescription.toJson(localDescription), innerPromise);
                return promise;
            };
            PluginConnection.prototype.setRemoteDescription = function (remoteDescription) {
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (remoteDescriptionJson) {
                    promise.resolve(icelink.SessionDescription.fromJson(remoteDescriptionJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                this._getAxo().SetRemoteDescription(icelink.SessionDescription.toJson(remoteDescription), innerPromise);
                return promise;
            };
            PluginConnection.prototype.setTimeout = function (value) {
                this._getAxo().SetTimeout(value);
            };
            PluginConnection.prototype.setTrickleIcePolicy = function (value) {
                this._getAxo().SetTrickleIcePolicy(value);
            };
            return PluginConnection;
        }(icelink.Dynamic));
        icelink.PluginConnection = PluginConnection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />
/// <reference path="IPluginDataChannel.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginDataChannel = /** @class */ (function (_super) {
            __extends(PluginDataChannel, _super);
            function PluginDataChannel(external, label, ordered, subprotocol) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onStateChangeValues = [];
                /** @internal */
                _this._onReceive = null;
                _this._external = external;
                _this._axo = new ActiveXObject("fm.icelink.DataChannel");
                _this._axo.Initialize(label, ordered, subprotocol);
                // event proxy
                _this._axo.SetOnStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                            var onStateChangeValue = _a[_i];
                            onStateChangeValue(_this);
                        }
                    }, 1);
                });
                _this._axo.SetOnReceive(function (data, isByte) {
                    setTimeout(function () {
                        var e = new icelink.DataChannelReceiveArgs();
                        if (isByte) {
                            e.setDataBytes(icelink.DataBuffer.wrap(icelink.Base64.decode(data)));
                        }
                        else {
                            e.setDataString(data);
                        }
                        if (_this._onReceive) {
                            _this._onReceive(e);
                        }
                    }, 1);
                });
                return _this;
            }
            PluginDataChannel.prototype.getTypeString = function () {
                return '[fm.icelink.PluginDataChannel]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginDataChannel.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginDataChannel.prototype._getAxo = function () {
                return this._axo;
            };
            PluginDataChannel.prototype.getHandle = function () {
                return this._axo.GetHandle();
            };
            PluginDataChannel.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            PluginDataChannel.prototype.getLabel = function () {
                return this._getAxo().GetLabel();
            };
            PluginDataChannel.prototype.getOnReceive = function () {
                return this._onReceive;
            };
            PluginDataChannel.prototype.getOrdered = function () {
                return this._getAxo().GetOrdered();
            };
            PluginDataChannel.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginDataChannel.prototype.getState = function () {
                return this._getAxo().GetState();
            };
            PluginDataChannel.prototype.getSubprotocol = function () {
                return this._getAxo().GetSubprotocol();
            };
            PluginDataChannel.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            PluginDataChannel.prototype.sendDataBytes = function (dataBytes) {
                var promise = new fm.icelink.Promise();
                var strDataBytes = icelink.Base64.encodeBuffer(dataBytes);
                this._getAxo().PromisedSendDataBytes(strDataBytes, promise);
                return promise;
            };
            PluginDataChannel.prototype.sendDataString = function (dataString) {
                var promise = new fm.icelink.Promise();
                this._getAxo().PromisedSendDataString(dataString, promise);
                return promise;
            };
            PluginDataChannel.prototype.setOnReceive = function (value) {
                this._onReceive = value;
            };
            return PluginDataChannel;
        }(icelink.Dynamic));
        icelink.PluginDataChannel = PluginDataChannel;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginStream.ts" />
/// <reference path="IPluginDataStream.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginDataStream = /** @class */ (function (_super) {
            __extends(PluginDataStream, _super);
            function PluginDataStream(external, channels) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onDirectionChangeValues = [];
                /** @internal */
                _this._onStateChangeValues = [];
                _this._external = external;
                _this._channels = channels;
                _this._axo = new ActiveXObject("fm.icelink.DataStream");
                _this._axo.Initialize(icelink.ArrayExtensions.map(channels, function (channel) {
                    return channel.getHandle();
                }));
                _this._axo.SetOnDirectionChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onDirectionChangeValues; _i < _a.length; _i++) {
                            var onDirectionChangeValue = _a[_i];
                            onDirectionChangeValue();
                        }
                    }, 1);
                });
                _this._axo.SetOnStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                            var onStateChangeValue = _a[_i];
                            onStateChangeValue();
                        }
                    }, 1);
                });
                return _this;
            }
            PluginDataStream.prototype.getTypeString = function () {
                return '[fm.icelink.PluginDataStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginDataStream.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginDataStream.prototype._getAxo = function () {
                return this._axo;
            };
            PluginDataStream.prototype.getState = function () {
                return this._getAxo().GetState();
            };
            PluginDataStream.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            PluginDataStream.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            PluginDataStream.prototype.getLocalReceive = function () {
                return this._getAxo().GetLocalReceive();
            };
            PluginDataStream.prototype.getLocalSend = function () {
                return this._getAxo().GetLocalSend();
            };
            PluginDataStream.prototype.getRemoteReceive = function () {
                return this._getAxo().GetRemoteReceive();
            };
            PluginDataStream.prototype.getRemoteSend = function () {
                return this._getAxo().GetRemoteSend();
            };
            PluginDataStream.prototype.setLocalReceive = function (value) {
                return this._getAxo().SetLocalReceive(value);
            };
            PluginDataStream.prototype.setLocalSend = function (value) {
                return this._getAxo().SetLocalSend(value);
            };
            PluginDataStream.prototype.getRemoteDirection = function () {
                return this._getAxo().GetRemoteDirection();
            };
            PluginDataStream.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginDataStream.prototype.changeDirection = function (newDirection) {
                return icelink.Error.fromJson(this._getAxo().ChangeDirection(newDirection));
            };
            PluginDataStream.prototype.getDirection = function () {
                return this._getAxo().GetDirection();
            };
            PluginDataStream.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginDataStream.prototype.getLabel = function () {
                return this._getAxo().GetLabel();
            };
            PluginDataStream.prototype.getLocalDirection = function () {
                return this._getAxo().GetLocalDirection();
            };
            PluginDataStream.prototype.getTag = function () {
                return this._getAxo().GetTag();
            };
            PluginDataStream.prototype.getType = function () {
                return icelink.StreamType.Application;
            };
            PluginDataStream.prototype.setLocalDirection = function (value) {
                this._getAxo().SetLocalDirection(value);
            };
            PluginDataStream.prototype.setTag = function (value) {
                this._getAxo().SetTag(value);
            };
            PluginDataStream.prototype.addOnDirectionChange = function (callback) {
                icelink.ArrayExtensions.add(this._onDirectionChangeValues, callback);
            };
            PluginDataStream.prototype.removeOnDirectionChange = function (callback) {
                icelink.ArrayExtensions.remove(this._onDirectionChangeValues, callback);
            };
            PluginDataStream.prototype.getChannels = function () {
                return this._channels;
            };
            return PluginDataStream;
        }(icelink.PluginStream));
        icelink.PluginDataStream = PluginDataStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginDomAudioSink = /** @class */ (function (_super) {
            __extends(PluginDomAudioSink, _super);
            /*public getVolume(): number {
                return this._audio.volume;
            }
            public setVolume(volume: number): void {
                this._audio.volume = volume;
            }
            public getMuted(): boolean {
                return this._audio.muted;
            }
            public setMuted(muted: boolean): void {
                this._audio.muted = muted;
            }*/
            function PluginDomAudioSink(external, track) {
                var _this = _super.call(this) || this;
                _this._external = external;
                _this.setTrack(track);
                return _this;
            }
            PluginDomAudioSink.prototype.getTypeString = function () {
                return '[fm.icelink.PluginDomAudioSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginDomAudioSink.prototype._getExternal = function () {
                return this._external;
            };
            PluginDomAudioSink.prototype.getTrack = function () {
                return this._track;
            };
            PluginDomAudioSink.prototype.getLocal = function () {
                return this._local;
            };
            PluginDomAudioSink.prototype.setTrack = function (track) {
                if (!track) {
                    return false;
                }
                this._track = track;
                this._local = icelink.Util.isObjectType(track.getMedia(), '[fm.icelink.PluginLocalMedia]');
                return true;
            };
            return PluginDomAudioSink;
        }(icelink.Dynamic));
        icelink.PluginDomAudioSink = PluginDomAudioSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />
/// <reference path="PluginConstants.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginDomVideoSink = /** @class */ (function (_super) {
            __extends(PluginDomVideoSink, _super);
            function PluginDomVideoSink(external, track) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._axoLoaded = false;
                _this._external = external;
                _this.setTrack(track);
                return _this;
            }
            PluginDomVideoSink.prototype.getTypeString = function () {
                return '[fm.icelink.PluginDomVideoSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginDomVideoSink.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginDomVideoSink.prototype._getAxo = function () {
                return this._axo;
            };
            PluginDomVideoSink.prototype.getTrack = function () {
                return this._track;
            };
            PluginDomVideoSink.prototype.getLocal = function () {
                return this._local;
            };
            PluginDomVideoSink.prototype.getView = function () {
                return this._container;
            };
            PluginDomVideoSink.prototype.getViewScale = function () {
                if (this._axoLoaded) {
                    return this._axo.GetViewScale();
                }
                return icelink.LayoutScale.Contain;
            };
            PluginDomVideoSink.prototype.setViewScale = function (viewScale) {
                if (this._axoLoaded) {
                    this._axo.SetViewScale(viewScale);
                }
            };
            PluginDomVideoSink.prototype.getVideoWidth = function () {
                if (this._axoLoaded) {
                    return this._axo.GetWidth();
                }
                return 0;
            };
            PluginDomVideoSink.prototype.getVideoHeight = function () {
                if (this._axoLoaded) {
                    return this._axo.GetHeight();
                }
                return 0;
            };
            PluginDomVideoSink.prototype.getViewMirror = function () {
                if (this._axoLoaded) {
                    return this._axo.GetViewMirror();
                }
                return false;
            };
            PluginDomVideoSink.prototype.setViewMirror = function (viewMirror) {
                if (this._axoLoaded) {
                    this._axo.SetViewMirror(viewMirror);
                }
            };
            PluginDomVideoSink.prototype.setTrack = function (track) {
                if (!track) {
                    return false;
                }
                this._track = track;
                this._local = icelink.Util.isObjectType(track.getMedia(), '[fm.icelink.PluginLocalMedia]');
                this._container = document.createElement('div');
                if (this._local) {
                    this._container.className = 'fm-video fm-video-local';
                }
                else {
                    this._container.className = 'fm-video fm-video-remote';
                }
                this._underlay = document.createElement('iframe');
                this._underlay.src = 'about:blank';
                this._underlay.setAttribute('allowTransparency', 'true');
                this._underlay.setAttribute('frameBorder', '0');
                this._underlay.style.border = '0';
                this._underlay.style.backgroundColor = '#000';
                this._underlay.style.position = 'absolute';
                this._underlay.style.top = '0';
                this._underlay.style.left = '0';
                this._underlay.style.width = '100%';
                this._underlay.style.height = '100%';
                this._container.appendChild(this._underlay);
                this._axo = document.createElement('object');
                this._axo.id = icelink.Guid.newGuid().toString();
                this._axo.setAttribute('codebase', icelink.Plugin.getPluginConfig().getActiveXPath());
                this._axo.setAttribute('CLASSID', 'clsid:' + icelink.PluginConstants.getDomVideoSinkClassId());
                this._axo.style.position = 'absolute';
                this._axo.style.top = '0';
                this._axo.style.left = '0';
                this._axo.style.width = '100%';
                this._axo.style.height = '100%';
                this._container.appendChild(this._axo);
                return this.checkifLoaded(this._axo);
            };
            PluginDomVideoSink.prototype.checkifLoaded = function (object) {
                var _this = this;
                var loaded = false;
                try {
                    if (!icelink.Util.isNullOrUndefined(object.GetIsLoaded)) {
                        loaded = object.GetIsLoaded();
                    }
                }
                catch (ex) {
                    loaded = false;
                }
                if (loaded) {
                    this._axoLoaded = true;
                    this.setViewScale(icelink.LayoutScale.Contain);
                    return true;
                }
                else {
                    window.setTimeout(function () {
                        _this.checkifLoaded(object);
                    }, 10);
                }
            };
            return PluginDomVideoSink;
        }(icelink.Dynamic));
        icelink.PluginDomVideoSink = PluginDomVideoSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginMedia = /** @class */ (function (_super) {
            __extends(PluginMedia, _super);
            function PluginMedia(external) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onAudioLevelValues = [];
                /** @internal */
                _this._onVideoSizeValues = [];
                /** @internal */
                _this._audioTrack = null;
                /** @internal */
                _this._videoTrack = null;
                //protected _audioSink: PluginDomAudioSink = null;
                _this._videoSink = null;
                var externalAudioTrack = new icelink.AudioTrack(external, _this);
                var externalVideoTrack = new icelink.VideoTrack(external, _this);
                //let externalAudioSink = new DomAudioSink(externalAudioTrack);
                var externalVideoSink = new icelink.DomVideoSink(externalVideoTrack);
                _this._audioTrack = externalAudioTrack._getInternal();
                _this._videoTrack = externalVideoTrack._getInternal();
                //this._audioSink = <PluginDomAudioSink>externalAudioSink._getInternal();
                _this._videoSink = externalVideoSink._getInternal();
                return _this;
            }
            PluginMedia.prototype.getTypeString = function () {
                return '[fm.icelink.PluginMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            PluginMedia.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginMedia.prototype.destroy = function () {
                this._getAxo().Destroy();
            };
            PluginMedia.prototype.addOnAudioLevel = function (value) {
                var _this = this;
                icelink.ArrayExtensions.add(this._onAudioLevelValues, value);
                if (this._onAudioLevelValues.length == 1) {
                    this._getAxo().SetOnAudioLevel(function (level) {
                        for (var _i = 0, _a = _this._onAudioLevelValues; _i < _a.length; _i++) {
                            var onAudioLevelValue = _a[_i];
                            onAudioLevelValue(level);
                        }
                    });
                }
            };
            PluginMedia.prototype.addOnVideoSize = function (value) {
                var _this = this;
                icelink.ArrayExtensions.add(this._onVideoSizeValues, value);
                if (this._onVideoSizeValues.length == 1) {
                    this._getAxo().SetOnVideoSize(function (sizeJson) {
                        var size = icelink.Size.fromJson(sizeJson);
                        for (var _i = 0, _a = _this._onVideoSizeValues; _i < _a.length; _i++) {
                            var onVideoSizeValue = _a[_i];
                            onVideoSizeValue(size);
                        }
                    });
                }
            };
            PluginMedia.prototype.getAudioGain = function () {
                return this._getAxo().GetAudioGain();
            };
            PluginMedia.prototype.getAudioMuted = function () {
                return this._getAxo().GetAudioMuted();
            };
            PluginMedia.prototype.getAudioTrack = function () {
                return this._audioTrack;
            };
            PluginMedia.prototype.getAudioTracks = function () {
                return [this.getAudioTrack()];
            };
            PluginMedia.prototype.getAudioVolume = function () {
                return this._getAxo().GetAudioVolume();
            };
            PluginMedia.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginMedia.prototype.getVideoMuted = function () {
                return this._getAxo().GetVideoMuted();
            };
            PluginMedia.prototype.getVideoSize = function () {
                return icelink.Size.fromJson(this._getAxo().GetVideoSize());
            };
            PluginMedia.prototype.getVideoTrack = function () {
                return this._videoTrack;
            };
            PluginMedia.prototype.getVideoTracks = function () {
                return [this.getVideoTrack()];
            };
            PluginMedia.prototype.grabVideoFrame = function () {
                var _this = this;
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                innerPromise.then(function (videoBufferJson) {
                    promise.resolve(icelink.VideoBuffer.fromJson(videoBufferJson));
                }, function (error) {
                    promise.reject(new icelink.Exception(error));
                });
                window.setTimeout(function () {
                    _this._getAxo().GrabVideoFrame(innerPromise);
                }, 1);
                return promise;
            };
            PluginMedia.prototype.removeOnAudioLevel = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioLevelValues, value);
                if (this._onAudioLevelValues.length == 0) {
                    this._getAxo().SetOnAudioLevel(null);
                }
            };
            PluginMedia.prototype.removeOnVideoSize = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoSizeValues, value);
                if (this._onVideoSizeValues.length == 0) {
                    this._getAxo().SetOnVideoSize(null);
                }
            };
            PluginMedia.prototype.setAudioGain = function (value) {
                this._getAxo().SetAudioGain(value);
            };
            PluginMedia.prototype.setAudioMuted = function (value) {
                this._getAxo().SetAudioMuted(value);
            };
            PluginMedia.prototype.setAudioVolume = function (value) {
                this._getAxo().SetAudioVolume(value);
            };
            PluginMedia.prototype.setVideoMuted = function (value) {
                this._getAxo().SetVideoMuted(value);
            };
            PluginMedia.prototype.getView = function () {
                return this._videoSink.getView();
            };
            PluginMedia.prototype.getViewSink = function () {
                return this._videoSink;
            };
            return PluginMedia;
        }(icelink.Dynamic));
        icelink.PluginMedia = PluginMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMedia.ts" />
/// <reference path="IPluginLocalMedia.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginLocalMedia = /** @class */ (function (_super) {
            __extends(PluginLocalMedia, _super);
            function PluginLocalMedia(external, audio, video, screen) {
                var _this = _super.call(this, external) || this;
                /** @internal */
                _this._onAudioStartedValues = [];
                /** @internal */
                _this._onVideoStartedValues = [];
                /** @internal */
                _this._onAudioStoppedValues = [];
                /** @internal */
                _this._onVideoStoppedValues = [];
                /** @internal */
                _this._onAudioDestroyedValues = [];
                /** @internal */
                _this._onVideoDestroyedValues = [];
                _this._external = external;
                _this._audio = audio;
                _this._video = video;
                _this._screen = icelink.Util.isNullOrUndefined(screen) ? false : screen;
                _this._axo = new ActiveXObject("fm.icelink.LocalMedia");
                _this._axo.Initialize((audio === false), (video === false), _this._screen);
                _this._axo.SetOnAudioStarted(function () {
                    for (var _i = 0, _a = _this._onAudioStartedValues; _i < _a.length; _i++) {
                        var onAudioStartedValue = _a[_i];
                        onAudioStartedValue();
                    }
                });
                _this._axo.SetOnVideoStarted(function () {
                    for (var _i = 0, _a = _this._onVideoStartedValues; _i < _a.length; _i++) {
                        var onVideoStartedValue = _a[_i];
                        onVideoStartedValue();
                    }
                });
                _this._axo.SetOnAudioStopped(function () {
                    for (var _i = 0, _a = _this._onAudioStoppedValues; _i < _a.length; _i++) {
                        var onAudioStoppedValue = _a[_i];
                        onAudioStoppedValue();
                    }
                });
                _this._axo.SetOnVideoStopped(function () {
                    for (var _i = 0, _a = _this._onVideoStoppedValues; _i < _a.length; _i++) {
                        var onVideoStoppedValue = _a[_i];
                        onVideoStoppedValue();
                    }
                });
                _this._axo.SetOnAudioDestroyed(function () {
                    for (var _i = 0, _a = _this._onAudioDestroyedValues; _i < _a.length; _i++) {
                        var onAudioDestroyedValue = _a[_i];
                        onAudioDestroyedValue();
                    }
                });
                _this._axo.SetOnVideoDestroyed(function () {
                    for (var _i = 0, _a = _this._onVideoDestroyedValues; _i < _a.length; _i++) {
                        var onVideoDestroyedValue = _a[_i];
                        onVideoDestroyedValue();
                    }
                });
                _this.checkifLoaded(_this._axo);
                return _this;
            }
            PluginLocalMedia.prototype.getTypeString = function () {
                return '[fm.icelink.PluginLocalMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginLocalMedia.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginLocalMedia.prototype._getAxo = function () {
                return this._axo;
            };
            PluginLocalMedia.prototype.getAudio = function () {
                return this._audio;
            };
            PluginLocalMedia.prototype.setAudio = function (audio) {
                this._audio = audio;
            };
            PluginLocalMedia.prototype.getVideo = function () {
                return this._video;
            };
            PluginLocalMedia.prototype.setVideo = function (video) {
                this._video = video;
            };
            PluginLocalMedia.prototype.getScreen = function () {
                return this._screen;
            };
            PluginLocalMedia.prototype.setScreen = function (screen) {
                this._screen = screen;
            };
            PluginLocalMedia.prototype.getState = function () {
                return this._axo.GetState();
            };
            PluginLocalMedia.prototype.start = function () {
                var _this = this;
                if (!this.unloadHandler) {
                    this.unloadHandler = function (evt) {
                        _this._axo.Stop(new icelink.Promise());
                    };
                }
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._axo.Start(promise);
                    icelink.Util.observe(window, 'unload', _this.unloadHandler);
                }, 1);
                return promise;
            };
            PluginLocalMedia.prototype.stop = function () {
                var _this = this;
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    icelink.Util.unobserve(window, 'unload', _this.unloadHandler);
                    _this._axo.Stop(promise);
                }, 1);
                return promise;
            };
            PluginLocalMedia.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginLocalMedia.prototype.addOnAudioStarted = function (value) {
                icelink.ArrayExtensions.add(this._onAudioStartedValues, value);
            };
            PluginLocalMedia.prototype.addOnVideoStarted = function (value) {
                icelink.ArrayExtensions.add(this._onVideoStartedValues, value);
            };
            PluginLocalMedia.prototype.addOnAudioStopped = function (value) {
                icelink.ArrayExtensions.add(this._onAudioStoppedValues, value);
            };
            PluginLocalMedia.prototype.addOnVideoStopped = function (value) {
                icelink.ArrayExtensions.add(this._onVideoStoppedValues, value);
            };
            PluginLocalMedia.prototype.addOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onAudioDestroyedValues, value);
            };
            PluginLocalMedia.prototype.addOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onVideoDestroyedValues, value);
            };
            PluginLocalMedia.prototype.removeOnAudioStarted = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioStartedValues, value);
            };
            PluginLocalMedia.prototype.removeOnVideoStarted = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoStartedValues, value);
            };
            PluginLocalMedia.prototype.removeOnAudioStopped = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioStoppedValues, value);
            };
            PluginLocalMedia.prototype.removeOnVideoStopped = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoStoppedValues, value);
            };
            PluginLocalMedia.prototype.removeOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioDestroyedValues, value);
            };
            PluginLocalMedia.prototype.removeOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoDestroyedValues, value);
            };
            PluginLocalMedia.prototype.changeAudioSourceInput = function (audioSourceInput) {
                var _this = this;
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().ChangeAudioSourceInput(promise, icelink.SourceInput.toJson(audioSourceInput));
                }, 1);
                return promise;
            };
            PluginLocalMedia.prototype.changeVideoSourceInput = function (videoSourceInput) {
                var _this = this;
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().ChangeVideoSourceInput(promise, icelink.SourceInput.toJson(videoSourceInput));
                }, 1);
                return promise;
            };
            PluginLocalMedia.prototype.getAudioSourceInput = function () {
                return icelink.SourceInput.fromJson(this._getAxo().GetAudioSourceInput());
            };
            PluginLocalMedia.prototype.getAudioSourceInputs = function () {
                var _this = this;
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().GetAudioSourceInputs(innerPromise);
                }, 1);
                innerPromise.then(function (sourceInputsJson) {
                    promise.resolve(icelink.SourceInput.fromJsonArray(sourceInputsJson));
                });
                return promise;
            };
            PluginLocalMedia.prototype.getVideoSourceInput = function () {
                return icelink.SourceInput.fromJson(this._getAxo().GetVideoSourceInput());
            };
            PluginLocalMedia.prototype.getVideoSourceInputs = function () {
                var _this = this;
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().GetVideoSourceInputs(innerPromise);
                }, 1);
                innerPromise.then(function (sourceInputsJson) {
                    promise.resolve(icelink.SourceInput.fromJsonArray(sourceInputsJson));
                });
                return promise;
            };
            PluginLocalMedia.prototype.setAudioSourceInput = function (value) {
                this._getAxo().SetAudioSourceInput(icelink.SourceInput.toJson(value));
            };
            PluginLocalMedia.prototype.setVideoSourceInput = function (value) {
                this._getAxo().SetVideoSourceInput(icelink.SourceInput.toJson(value));
            };
            PluginLocalMedia.prototype.destroy = function () {
                return this._getAxo().Destroy();
            };
            PluginLocalMedia.prototype.getAudioGain = function () {
                return this._getAxo().GetAudioGain();
            };
            PluginLocalMedia.prototype.getAudioMuted = function () {
                return this._getAxo().GetAudioMuted();
            };
            PluginLocalMedia.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginLocalMedia.prototype.getVideoMuted = function () {
                return this._getAxo().GetVideoMuted();
            };
            PluginLocalMedia.prototype.setAudioGain = function (value) {
                this._getAxo().SetAudioGain(value);
            };
            PluginLocalMedia.prototype.setAudioMuted = function (value) {
                this._getAxo().SetAudioMuted(value);
            };
            PluginLocalMedia.prototype.setVideoMuted = function (value) {
                this._getAxo().SetVideoMuted(value);
            };
            PluginLocalMedia.prototype.checkifLoaded = function (object) {
                var _this = this;
                var loaded = false;
                try {
                    if (!icelink.Util.isNullOrUndefined(this._videoSink._getAxo().GetIsLoaded)) {
                        loaded = this._videoSink._getAxo().GetIsLoaded();
                    }
                }
                catch (ex) {
                    loaded = false;
                }
                if (loaded) {
                    object.AttachView(this._videoSink._getAxo().GetHandle());
                }
                else {
                    window.setTimeout(function () {
                        _this.checkifLoaded(object);
                    }, 10);
                }
            };
            return PluginLocalMedia;
        }(icelink.PluginMedia));
        icelink.PluginLocalMedia = PluginLocalMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMedia.ts" />
/// <reference path="IPluginRemoteMedia.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginRemoteMedia = /** @class */ (function (_super) {
            __extends(PluginRemoteMedia, _super);
            function PluginRemoteMedia(external) {
                var _this = _super.call(this, external) || this;
                /** @internal */
                _this._onAudioDestroyedValues = [];
                /** @internal */
                _this._onVideoDestroyedValues = [];
                _this._external = external;
                _this._axo = new ActiveXObject("fm.icelink.RemoteMedia");
                _this._axo.Initialize(false, false);
                _this._axo.SetOnAudioDestroyed(function () {
                    for (var _i = 0, _a = _this._onAudioDestroyedValues; _i < _a.length; _i++) {
                        var onAudioDestroyedValue = _a[_i];
                        onAudioDestroyedValue();
                    }
                });
                _this._axo.SetOnVideoDestroyed(function () {
                    for (var _i = 0, _a = _this._onVideoDestroyedValues; _i < _a.length; _i++) {
                        var onVideoDestroyedValue = _a[_i];
                        onVideoDestroyedValue();
                    }
                });
                _this.checkifLoaded(_this._axo);
                return _this;
            }
            PluginRemoteMedia.prototype.getTypeString = function () {
                return '[fm.icelink.PluginRemoteMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginRemoteMedia.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginRemoteMedia.prototype._getAxo = function () {
                return this._axo;
            };
            PluginRemoteMedia.prototype.checkifLoaded = function (object) {
                var _this = this;
                var loaded = false;
                try {
                    if (!icelink.Util.isNullOrUndefined(this._videoSink._getAxo().GetIsLoaded)) {
                        loaded = this._videoSink._getAxo().GetIsLoaded();
                    }
                }
                catch (ex) {
                    loaded = false;
                }
                if (loaded) {
                    object.AttachView(this._videoSink._getAxo().GetHandle());
                }
                else {
                    window.setTimeout(function () {
                        _this.checkifLoaded(object);
                    }, 10);
                }
            };
            PluginRemoteMedia.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginRemoteMedia.prototype.addOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onAudioDestroyedValues, value);
            };
            PluginRemoteMedia.prototype.addOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onVideoDestroyedValues, value);
            };
            PluginRemoteMedia.prototype.removeOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioDestroyedValues, value);
            };
            PluginRemoteMedia.prototype.removeOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoDestroyedValues, value);
            };
            PluginRemoteMedia.prototype.changeAudioSinkOutput = function (audioSinkOutput) {
                var _this = this;
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().ChangeAudioSinkOutput(promise, icelink.SinkOutput.toJson(audioSinkOutput));
                }, 1);
                return promise;
            };
            PluginRemoteMedia.prototype.changeVideoSinkOutput = function (videoSinkOutput) {
                var _this = this;
                var promise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().ChangeVideoSinkOutput(promise, icelink.SinkOutput.toJson(videoSinkOutput));
                }, 1);
                return promise;
            };
            PluginRemoteMedia.prototype.getAudioSinkOutput = function () {
                return icelink.SinkOutput.fromJson(this._getAxo().GetAudioSinkOutput());
            };
            PluginRemoteMedia.prototype.getAudioSinkOutputs = function () {
                var _this = this;
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().GetAudioSinkOutputs(innerPromise);
                }, 1);
                innerPromise.then(function (sinkOutputsJson) {
                    promise.resolve(icelink.SinkOutput.fromJsonArray(sinkOutputsJson));
                });
                return promise;
            };
            PluginRemoteMedia.prototype.getVideoSinkOutput = function () {
                return icelink.SinkOutput.fromJson(this._getAxo().GetVideoSinkOutput());
            };
            PluginRemoteMedia.prototype.getVideoSinkOutputs = function () {
                var _this = this;
                var promise = new icelink.Promise();
                var innerPromise = new icelink.Promise();
                window.setTimeout(function () {
                    _this._getAxo().GetVideoSinkOutputs(innerPromise);
                }, 1);
                innerPromise.then(function (sinkOutputsJson) {
                    promise.resolve(icelink.SinkOutput.fromJsonArray(sinkOutputsJson));
                });
                return promise;
            };
            PluginRemoteMedia.prototype.setAudioSinkOutput = function (value) {
                this._getAxo().SetAudioSinkOutput(icelink.SinkOutput.toJson(value));
            };
            PluginRemoteMedia.prototype.setVideoSinkOutput = function (value) {
                this._getAxo().SetVideoSinkOutput(icelink.SinkOutput.toJson(value));
            };
            PluginRemoteMedia.prototype.destroy = function () {
                return this._getAxo().Destroy();
            };
            PluginRemoteMedia.prototype.getAudioGain = function () {
                return this._getAxo().GetAudioGain();
            };
            PluginRemoteMedia.prototype.getAudioMuted = function () {
                return this._getAxo().GetAudioMuted();
            };
            PluginRemoteMedia.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginRemoteMedia.prototype.getVideoMuted = function () {
                return this._getAxo().GetVideoMuted();
            };
            PluginRemoteMedia.prototype.setAudioGain = function (value) {
                this._getAxo().SetAudioGain(value);
            };
            PluginRemoteMedia.prototype.setAudioMuted = function (value) {
                this._getAxo().SetAudioMuted(value);
            };
            PluginRemoteMedia.prototype.setVideoMuted = function (value) {
                this._getAxo().SetVideoMuted(value);
            };
            return PluginRemoteMedia;
        }(icelink.PluginMedia));
        icelink.PluginRemoteMedia = PluginRemoteMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMediaStream.ts" />
/// <reference path="IPluginVideoStream.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginVideoStream = /** @class */ (function (_super) {
            __extends(PluginVideoStream, _super);
            function PluginVideoStream(external, localTrack, remoteTrack) {
                var _this = _super.call(this, localTrack, remoteTrack) || this;
                /** @internal */
                _this._onDirectionChangeValues = [];
                /** @internal */
                _this._onStateChangeValues = [];
                _this._external = external;
                _this._axo = new ActiveXObject("fm.icelink.VideoStream");
                _this._axo.Initialize(_this.getLocalTrack() == null ? 0 : _this.getLocalTrack().getMedia().getHandle(), remoteTrack == null ? 0 : remoteTrack.getMedia().getHandle());
                _this._axo.SetOnDirectionChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onDirectionChangeValues; _i < _a.length; _i++) {
                            var onDirectionChangeValue = _a[_i];
                            onDirectionChangeValue();
                        }
                    }, 1);
                });
                _this._axo.SetOnStateChange(function () {
                    setTimeout(function () {
                        for (var _i = 0, _a = _this._onStateChangeValues; _i < _a.length; _i++) {
                            var onStateChangeValue = _a[_i];
                            onStateChangeValue();
                        }
                    }, 1);
                });
                return _this;
            }
            PluginVideoStream.prototype.getTypeString = function () {
                return '[fm.icelink.PluginVideoStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginVideoStream.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            PluginVideoStream.prototype._getAxo = function () {
                return this._axo;
            };
            PluginVideoStream.prototype.getState = function () {
                return this._getAxo().GetState();
            };
            PluginVideoStream.prototype.addOnStateChange = function (value) {
                icelink.ArrayExtensions.add(this._onStateChangeValues, value);
            };
            PluginVideoStream.prototype.removeOnStateChange = function (value) {
                icelink.ArrayExtensions.remove(this._onStateChangeValues, value);
            };
            PluginVideoStream.prototype.getLocalReceive = function () {
                return this._getAxo().GetLocalReceive();
            };
            PluginVideoStream.prototype.getLocalSend = function () {
                return this._getAxo().GetLocalSend();
            };
            PluginVideoStream.prototype.getRemoteReceive = function () {
                return this._getAxo().GetRemoteReceive();
            };
            PluginVideoStream.prototype.getRemoteSend = function () {
                return this._getAxo().GetRemoteSend();
            };
            PluginVideoStream.prototype.setLocalReceive = function (value) {
                return this._getAxo().SetLocalReceive(value);
            };
            PluginVideoStream.prototype.setLocalSend = function (value) {
                return this._getAxo().SetLocalSend(value);
            };
            PluginVideoStream.prototype.getRemoteDirection = function () {
                return this._getAxo().GetRemoteDirection();
            };
            PluginVideoStream.prototype.getHandle = function () {
                return this._getAxo().GetHandle();
            };
            PluginVideoStream.prototype.changeDirection = function (newDirection) {
                return icelink.Error.fromJson(this._getAxo().ChangeDirection(newDirection));
            };
            PluginVideoStream.prototype.getDirection = function () {
                return this._getAxo().GetDirection();
            };
            PluginVideoStream.prototype.getId = function () {
                return this._getAxo().GetId();
            };
            PluginVideoStream.prototype.getLabel = function () {
                return this._getAxo().GetLabel();
            };
            PluginVideoStream.prototype.getLocalBandwidth = function () {
                return this._getAxo().GetLocalBandwidth();
            };
            PluginVideoStream.prototype.getLocalDirection = function () {
                return this._getAxo().GetLocalDirection();
            };
            PluginVideoStream.prototype.getMuted = function () {
                return this._getAxo().GetMuted();
            };
            PluginVideoStream.prototype.getRemoteBandwidth = function () {
                return this._getAxo().GetRemoteBandwidth();
            };
            PluginVideoStream.prototype.getTag = function () {
                return this._getAxo().GetTag();
            };
            PluginVideoStream.prototype.getType = function () {
                return icelink.StreamType.Video;
            };
            PluginVideoStream.prototype.setLocalDirection = function (value) {
                this._getAxo().SetLocalDirection(value);
            };
            PluginVideoStream.prototype.setLocalBandwidth = function (value) {
                this._getAxo().SetLocalBandwidth(value);
            };
            PluginVideoStream.prototype.setMuted = function (value) {
                this._getAxo().SetMuted(value);
            };
            PluginVideoStream.prototype.setTag = function (value) {
                this._getAxo().SetTag(value);
            };
            PluginVideoStream.prototype.addOnDirectionChange = function (callback) {
                icelink.ArrayExtensions.add(this._onDirectionChangeValues, callback);
            };
            PluginVideoStream.prototype.removeOnDirectionChange = function (callback) {
                icelink.ArrayExtensions.remove(this._onDirectionChangeValues, callback);
            };
            return PluginVideoStream;
        }(icelink.PluginMediaStream));
        icelink.PluginVideoStream = PluginVideoStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="PluginMediaTrack.ts" />

/// <reference path="PluginMediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var PluginVideoTrack = /** @class */ (function (_super) {
            __extends(PluginVideoTrack, _super);
            function PluginVideoTrack(external, media) {
                var _this = _super.call(this, media) || this;
                _this._external = external;
                return _this;
            }
            PluginVideoTrack.prototype.getTypeString = function () {
                return '[fm.icelink.PluginVideoTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            PluginVideoTrack.prototype._getExternal = function () {
                return this._external;
            };
            PluginVideoTrack.prototype.isLocal = function () {
                return (icelink.Util.isObjectType(this.getMedia(), '[fm.icelink.PluginLocalMedia]'));
            };
            PluginVideoTrack.prototype.addOnStarted = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.addOnStarted on a remote track.');
                }
                this.getMedia().addOnVideoStarted(value);
            };
            PluginVideoTrack.prototype.addOnStopped = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.addOnStopped on a remote track.');
                }
                this.getMedia().addOnVideoStopped(value);
            };
            PluginVideoTrack.prototype.addOnDestroyed = function (value) {
                this.getMedia().addOnVideoDestroyed(value);
            };
            PluginVideoTrack.prototype.removeOnStarted = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.removeOnStarted on a remote track.');
                }
                this.getMedia().removeOnVideoStarted(value);
            };
            PluginVideoTrack.prototype.removeOnStopped = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.removeOnStopped on a remote track.');
                }
                this.getMedia().removeOnVideoStopped(value);
            };
            PluginVideoTrack.prototype.removeOnDestroyed = function (value) {
                this.getMedia().removeOnVideoDestroyed(value);
            };
            PluginVideoTrack.prototype.changeSinkOutput = function (sinkOutput) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.changeSinkOutput on a local track.');
                }
                return this.getMedia().changeVideoSinkOutput(sinkOutput);
            };
            PluginVideoTrack.prototype.getSinkOutput = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSinkOutput on a local track.');
                }
                return this.getMedia().getVideoSinkOutput();
            };
            PluginVideoTrack.prototype.getSinkOutputs = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSinkOutputs on a local track.');
                }
                return this.getMedia().getVideoSinkOutputs();
            };
            PluginVideoTrack.prototype.setSinkOutput = function (value) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.setSinkOutput on a local track.');
                }
                this.getMedia().setVideoSinkOutput(value);
            };
            PluginVideoTrack.prototype.changeSourceInput = function (sourceInput) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.changeSourceInput on a remote track.');
                }
                return this.getMedia().changeVideoSourceInput(sourceInput);
            };
            PluginVideoTrack.prototype.getSourceInput = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSourceInput on a remote track.');
                }
                return this.getMedia().getVideoSourceInput();
            };
            PluginVideoTrack.prototype.getSourceInputs = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSourceInputs on a remote track.');
                }
                return this.getMedia().getVideoSourceInputs();
            };
            PluginVideoTrack.prototype.setSourceInput = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.setSourceInput on a remote track.');
                }
                this.getMedia().setVideoSourceInput(value);
            };
            PluginVideoTrack.prototype.addOnSize = function (value) {
                this.getMedia().addOnVideoSize(value);
            };
            PluginVideoTrack.prototype.getMuted = function () {
                return this.getMedia().getVideoMuted();
            };
            PluginVideoTrack.prototype.getSize = function () {
                return this.getMedia().getVideoSize();
            };
            PluginVideoTrack.prototype.grabFrame = function () {
                return this.getMedia().grabVideoFrame();
            };
            PluginVideoTrack.prototype.setMuted = function (value) {
                this.getMedia().setVideoMuted(value);
            };
            PluginVideoTrack.prototype.removeOnSize = function (value) {
                this.getMedia().removeOnVideoSize(value);
            };
            return PluginVideoTrack;
        }(icelink.PluginMediaTrack));
        icelink.PluginVideoTrack = PluginVideoTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Media.ts" />

/// <reference path="Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var RemoteMedia = /** @class */ (function (_super) {
            __extends(RemoteMedia, _super);
            function RemoteMedia() {
                var _this = _super.call(this) || this;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginRemoteMedia(_this);
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcRemoteMedia(_this);
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            RemoteMedia.prototype.getTypeString = function () {
                return '[fm.icelink.RemoteMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            RemoteMedia.prototype._getInternal = function () {
                return this._internal;
            };
            RemoteMedia.prototype.changeAudioSinkOutput = function (audioSinkOutput) {
                return this._getInternal().changeAudioSinkOutput(audioSinkOutput);
            };
            RemoteMedia.prototype.changeVideoSinkOutput = function (videoSinkOutput) {
                return this._getInternal().changeVideoSinkOutput(videoSinkOutput);
            };
            RemoteMedia.prototype.getAudioSinkOutput = function () {
                return this._getInternal().getAudioSinkOutput();
            };
            RemoteMedia.prototype.getAudioSinkOutputs = function () {
                return this._getInternal().getAudioSinkOutputs();
            };
            RemoteMedia.prototype.getVideoSinkOutput = function () {
                return this._getInternal().getVideoSinkOutput();
            };
            RemoteMedia.prototype.getVideoSinkOutputs = function () {
                return this._getInternal().getVideoSinkOutputs();
            };
            RemoteMedia.prototype.setAudioSinkOutput = function (value) {
                this._getInternal().setAudioSinkOutput(value);
            };
            RemoteMedia.prototype.setVideoSinkOutput = function (value) {
                this._getInternal().setVideoSinkOutput(value);
            };
            return RemoteMedia;
        }(icelink.Media));
        icelink.RemoteMedia = RemoteMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaStream.ts" />

/// <reference path="MediaStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var VideoStream = /** @class */ (function (_super) {
            __extends(VideoStream, _super);
            function VideoStream() {
                var _this = this;
                if (arguments.length == 0) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                var localTrack = null;
                var localMedia = null;
                var remoteTrack = null;
                var remoteMedia = null;
                if (arguments.length >= 1 && icelink.Util.isNullOrUndefined(arguments[0])) {
                    //throw new Exception('Local track/media cannot be null.');
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.VideoTrack]')) {
                    localTrack = arguments[0];
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.LocalMedia]')) {
                    localMedia = arguments[0];
                    localTrack = localMedia.getVideoTrack();
                }
                else if (arguments.length >= 1 && icelink.Util.isObjectType(arguments[0], '[fm.icelink.RemoteMedia]')) {
                    remoteMedia = arguments[0];
                    remoteTrack = remoteMedia.getVideoTrack();
                }
                else if (arguments.length >= 1) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                if (arguments.length >= 2 && icelink.Util.isNullOrUndefined(arguments[1])) {
                    //throw new Exception('Remote track/media cannot be null.');
                }
                else if (arguments.length >= 2 && icelink.Util.isObjectType(arguments[1], '[fm.icelink.VideoTrack]')) {
                    remoteTrack = arguments[1];
                }
                else if (arguments.length >= 2 && icelink.Util.isObjectType(arguments[1], '[fm.icelink.RemoteMedia]')) {
                    remoteMedia = arguments[1];
                    remoteTrack = remoteMedia.getVideoTrack();
                }
                else if (arguments.length >= 2) {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                _this = _super.call(this, localTrack, remoteTrack) || this;
                _this.localMedia = localMedia;
                _this.remoteMedia = remoteMedia;
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginVideoStream(_this, (localTrack == null ? null : localTrack._getInternal()), (remoteTrack == null ? null : remoteTrack._getInternal()));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcVideoStream(_this, (localTrack == null ? null : localTrack._getInternal()), (remoteTrack == null ? null : remoteTrack._getInternal()));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            VideoStream.prototype.getTypeString = function () {
                return '[fm.icelink.VideoStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            VideoStream.prototype._getInternal = function () {
                return this._internal;
            };
            VideoStream.prototype.getLocalMedia = function () {
                return this.localMedia;
            };
            VideoStream.prototype.getRemoteMedia = function () {
                return this.remoteMedia;
            };
            return VideoStream;
        }(icelink.MediaStream));
        icelink.VideoStream = VideoStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaTrack.ts" />

/// <reference path="MediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var VideoTrack = /** @class */ (function (_super) {
            __extends(VideoTrack, _super);
            function VideoTrack(media, internalMedia) {
                var _this = _super.call(this, media) || this;
                if (icelink.Util.isNullOrUndefined(media)) {
                    throw new icelink.Exception('Media cannot be null.');
                }
                if (icelink.Plugin.useActiveX()) {
                    _this._internal = new icelink.PluginVideoTrack(_this, (media._getInternal() || internalMedia));
                }
                else if (icelink.Plugin.useNative()) {
                    _this._internal = new icelink.WebRtcVideoTrack(_this, (media._getInternal() || internalMedia));
                }
                else {
                    throw new icelink.Exception('Browser does not support WebRTC/ORTC and no plugin found.');
                }
                return _this;
            }
            VideoTrack.prototype.getTypeString = function () {
                return '[fm.icelink.VideoTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            VideoTrack.prototype._getInternal = function () {
                return this._internal;
            };
            VideoTrack.prototype.addOnSize = function (value) {
                return this._internal.addOnSize(value);
            };
            VideoTrack.prototype.getSize = function () {
                return this._internal.getSize();
            };
            VideoTrack.prototype.grabFrame = function () {
                return this._internal.grabFrame();
            };
            VideoTrack.prototype.removeOnSize = function (value) {
                return this._internal.removeOnSize(value);
            };
            return VideoTrack;
        }(icelink.MediaTrack));
        icelink.VideoTrack = VideoTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Stream base properties/methods.
         </div>
    
        */
        var WebRtcStreamBase = /** @class */ (function (_super) {
            __extends(WebRtcStreamBase, _super);
            /**<span id='method-fm.icelink.WebRtcStreamBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.streamBase` class.
             </div>
    
            @param {fm.icelink.StreamType} type The type.
            @return {}
            */
            function WebRtcStreamBase(type) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var type_3 = __arguments[0];
                    _this = _super.call(this) || this;
                    _this.fmicelinkWebRtcStreamBaseInit();
                    _this.__remoteSupportsTrickleIce = false;
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                    _this.__stateLock = new Object();
                    _this.setType(type_3);
                    _this.setConnectedTimestamp(-1);
                    _this.__stateMachine = new fm.icelink.StreamStateMachine();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcStreamBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcStreamBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcStreamBase.prototype.fmicelinkWebRtcStreamBaseInit = function () {
                var _this = this;
                this.__onDirectionChange = [];
                this.__onStateChange = [];
                this.__remoteSupportsTrickleIce = false;
                this._connectedTimestamp = 0;
                this._onDirectionChange = function () { for (var _i = 0, _a = _this.__onDirectionChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action();
                } };
                this._onStateChange = function () { for (var _i = 0, _a = _this.__onStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action();
                } };
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-addOnDirectionChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the stream direction change has occurred.
             </div>
    
    
            @param {fm.icelink.IAction0} value
            @return {void}
            */
            WebRtcStreamBase.prototype.addOnDirectionChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onDirectionChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-addOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the stream state changes.
             </div>
    
    
            @param {fm.icelink.IAction0} value
            @return {void}
            */
            WebRtcStreamBase.prototype.addOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getConnectedTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Gets the ManagedStopwatch.GetTimestamp() value representing the ticks that
             passed when this stream's connection state changed to connected.
             </div>
    
    
            @return {number}
            */
            WebRtcStreamBase.prototype.getConnectedTimestamp = function () {
                if (arguments.length == 0) {
                    return this._connectedTimestamp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getConnectionId'>&nbsp;</span>**/
            /**
             <div>
             Gets the connection identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcStreamBase.prototype.getConnectionId = function () {
                if (arguments.length == 0) {
                    return this._connectionId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcStreamBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the stream is currently closed or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getIsTerminated = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Closed)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Failed)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminating'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the stream is currently closing or failing.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getIsTerminating = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Closing)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Failing)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the stream is currently closing, failing, closed, or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getIsTerminatingOrTerminated = function () {
                if (arguments.length == 0) {
                    return (this.getIsTerminating() || this.getIsTerminated());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getLocalReceive'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether receiving media is supported by the local peer on this stream.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getLocalReceive = function () {
                if (arguments.length == 0) {
                    var localDirection = this.getLocalDirection();
                    return ((fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.SendReceive)) || (fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.ReceiveOnly)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getLocalSend'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether sending media is supported by the local peer on this stream.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getLocalSend = function () {
                if (arguments.length == 0) {
                    var localDirection = this.getLocalDirection();
                    return ((fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.SendReceive)) || (fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.SendOnly)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getRemoteReceive'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getRemoteReceive = function () {
                if (arguments.length == 0) {
                    var remoteDirection = this.getRemoteDirection();
                    return ((fm.icelink.Global.equals(remoteDirection, fm.icelink.StreamDirection.SendReceive)) || (fm.icelink.Global.equals(remoteDirection, fm.icelink.StreamDirection.ReceiveOnly)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getRemoteSend'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
             </div>
    
    
            @return {boolean}
            */
            WebRtcStreamBase.prototype.getRemoteSend = function () {
                if (arguments.length == 0) {
                    var remoteDirection = this.getRemoteDirection();
                    return ((fm.icelink.Global.equals(remoteDirection, fm.icelink.StreamDirection.SendReceive)) || (fm.icelink.Global.equals(remoteDirection, fm.icelink.StreamDirection.SendOnly)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.getRemoteSupportsTrickleIce = function () {
                if (arguments.length == 0) {
                    return this.__remoteSupportsTrickleIce;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state of the stream.
             </div>
    
    
            @return {fm.icelink.StreamState}
            */
            WebRtcStreamBase.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this.__stateMachine.getState();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.getStateLock = function () {
                if (arguments.length == 0) {
                    return this.__stateLock;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getTag'>&nbsp;</span>**/
            /**
             <div>
             Gets an optional tag to identify this instance.
             </div>
    
    
            @return {string}
            */
            WebRtcStreamBase.prototype.getTag = function () {
                if (arguments.length == 0) {
                    return this._tag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.StreamType}
            */
            WebRtcStreamBase.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.logInvalidStateTransition = function (state) {
                if (arguments.length == 1) {
                    if (fm.icelink.Log.getIsDebugEnabled()) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Stream {0} state for connection {1} is currently {2}. Cannot transition to {3} state.", [this.getId(), this.getConnectionId(), fm.icelink.StringExtensions.toLower(new fm.icelink.StreamStateWrapper(this.getState()).toString()), fm.icelink.StringExtensions.toLower(new fm.icelink.StreamStateWrapper(state).toString())]));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.processSdpMediaDescription = function (sdpMessage, sdpMediaDescription, isLocalDescription, isOffer, isRenegotiation) {
                if (arguments.length == 5) {
                    if (!isLocalDescription) {
                        var flag = this.trickleIceSupported(sdpMessage.getSessionLevelIceOptionAttributes());
                        if (!flag) {
                            flag = this.trickleIceSupported(sdpMediaDescription.getIceOptionAttributes());
                        }
                        this.setRemoteSupportsTrickleIce(flag);
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-processStateChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state change.
             </div>
    
    
            @return {void}
            */
            WebRtcStreamBase.prototype.processStateChange = function () {
                if (arguments.length == 0) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-processStateLockChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state lock change.
             </div>
    
    
            @return {void}
            */
            WebRtcStreamBase.prototype.processStateLockChange = function () {
                if (arguments.length == 0) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.raiseDirectionChange = function () {
                if (arguments.length == 0) {
                    var onDirectionChange = this._onDirectionChange;
                    if ((!fm.icelink.Global.equals(onDirectionChange, null))) {
                        onDirectionChange();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.raiseStateChange = function () {
                if (arguments.length == 0) {
                    var onStateChange = this._onStateChange;
                    if ((!fm.icelink.Global.equals(onStateChange, null))) {
                        onStateChange();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-removeOnDirectionChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the stream direction change has occurred.
             </div>
    
    
            @param {fm.icelink.IAction0} value
            @return {void}
            */
            WebRtcStreamBase.prototype.removeOnDirectionChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onDirectionChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-removeOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the stream state changes.
             </div>
    
    
            @param {fm.icelink.IAction0} value
            @return {void}
            */
            WebRtcStreamBase.prototype.removeOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setConnectedTimestamp = function (value) {
                if (arguments.length == 1) {
                    this._connectedTimestamp = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setConnectionId = function (value) {
                if (arguments.length == 1) {
                    this._connectionId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-setLocalReceive'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether receiving media is supported by the local peer on this stream.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            WebRtcStreamBase.prototype.setLocalReceive = function (value) {
                if (arguments.length == 1) {
                    var localDirection = this.getLocalDirection();
                    var _var0 = localDirection;
                    if (_var0 == fm.icelink.StreamDirection.SendReceive) {
                        do {
                            if (!value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.SendOnly);
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.Inactive || _var0 == fm.icelink.StreamDirection.Unset) {
                        do {
                            if (value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.ReceiveOnly);
                            }
                            else {
                                this.setLocalDirection(fm.icelink.StreamDirection.SendOnly);
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.SendOnly) {
                        do {
                            if (value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.SendReceive);
                            }
                            break;
                        } while (false);
                    }
                    else {
                        do {
                            if (((fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.ReceiveOnly)) && !value)) {
                                this.setLocalDirection(fm.icelink.StreamDirection.Inactive);
                            }
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-setLocalSend'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether sending media is supported by the local peer on this stream.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            WebRtcStreamBase.prototype.setLocalSend = function (value) {
                if (arguments.length == 1) {
                    var localDirection = this.getLocalDirection();
                    var _var0 = localDirection;
                    if (_var0 == fm.icelink.StreamDirection.SendReceive) {
                        do {
                            if (!value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.ReceiveOnly);
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.Inactive || _var0 == fm.icelink.StreamDirection.Unset) {
                        do {
                            if (value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.SendOnly);
                            }
                            else {
                                this.setLocalDirection(fm.icelink.StreamDirection.ReceiveOnly);
                            }
                            break;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.ReceiveOnly) {
                        do {
                            if (value) {
                                this.setLocalDirection(fm.icelink.StreamDirection.SendReceive);
                            }
                            break;
                        } while (false);
                    }
                    else {
                        do {
                            if (((fm.icelink.Global.equals(localDirection, fm.icelink.StreamDirection.SendOnly)) && !value)) {
                                this.setLocalDirection(fm.icelink.StreamDirection.Inactive);
                            }
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setRemoteSupportsTrickleIce = function (value) {
                if (arguments.length == 1) {
                    this.__remoteSupportsTrickleIce = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setState = function (state) {
                if (arguments.length == 1) {
                    if (!this.__stateMachine.transition(state)) {
                        if (((!fm.icelink.Global.equals(state, this.getState())) && ((!fm.icelink.Global.equals(state, fm.icelink.StreamState.Closing)) || ((!fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Closed)) && (!fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Failed)))))) {
                            this.logInvalidStateTransition(state);
                        }
                        return false;
                    }
                    if ((fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Connected))) {
                        this.setConnectedTimestamp(fm.icelink.ManagedStopwatch.getTimestamp());
                    }
                    if (fm.icelink.Log.getIsInfoEnabled()) {
                        if ((fm.icelink.Global.equals(this.getState(), fm.icelink.StreamState.Connected))) {
                            fm.icelink.Log.info(fm.icelink.StringExtensions.format("{0} stream {1} for connection {2} took {3}ms to connect (connectivity checks and secure key exchange).", [new fm.icelink.StreamTypeWrapper(this.getType()).toString(), this.getId(), this.getConnectionId(), fm.icelink.IntExtensions.toString(this.__stateMachine.getLastStateMillis())]));
                        }
                        fm.icelink.Log.info(fm.icelink.StringExtensions.format("Setting {0} stream {1} state for connection {2} to {3}.", [fm.icelink.StringExtensions.toLower(new fm.icelink.StreamTypeWrapper(this.getType()).toString()), this.getId(), this.getConnectionId(), fm.icelink.StringExtensions.toLower(new fm.icelink.StreamStateWrapper(this.getState()).toString())]));
                    }
                    this.raiseStateChange();
                    this.processStateChange();
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setStateLock = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__stateLock, value))) {
                        this.__stateLock = value;
                        this.processStateLockChange();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-setTag'>&nbsp;</span>**/
            /**
             <div>
             Sets an optional tag to identify this instance.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebRtcStreamBase.prototype.setTag = function (value) {
                if (arguments.length == 1) {
                    this._tag = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcStreamBase-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
    
            @return {string}
            */
            WebRtcStreamBase.prototype.toString = function () {
                if (arguments.length == 0) {
                    return this.getLabel();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcStreamBase.prototype.trickleIceSupported = function (iceOptions) {
                if (arguments.length == 1) {
                    var attribute = null;
                    var flag = false;
                    if ((!fm.icelink.Global.equals(iceOptions, null))) {
                        for (var i = 0; (!flag && (i < iceOptions.length)); i++) {
                            attribute = iceOptions[i];
                            flag = (flag || attribute.getTrickleOptionSet());
                        }
                    }
                    return flag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcStreamBase;
        }(fm.icelink.Dynamic));
        icelink.WebRtcStreamBase = WebRtcStreamBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcStreamBase.ts" />

/// <reference path="WebRtcStreamBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcStream = /** @class */ (function (_super) {
            __extends(WebRtcStream, _super);
            function WebRtcStream() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            WebRtcStream.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcStream.prototype.getConnection = function () {
                return this._connection;
            };
            WebRtcStream.prototype.setConnection = function (remoteTrack) {
                this._connection = remoteTrack;
            };
            WebRtcStream.prototype.processSdpMediaDescription = function (sdpMessage, sdpMediaDescription, isLocalDescription, isOffer, isRenegotiation) {
                return null;
            };
            return WebRtcStream;
        }(icelink.WebRtcStreamBase));
        icelink.WebRtcStream = WebRtcStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcStream.ts" />

/// <reference path="WebRtcStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media stream base properties/methods.
         </div>
    
        */
        var WebRtcMediaStreamBase = /** @class */ (function (_super) {
            __extends(WebRtcMediaStreamBase, _super);
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.mediaStreamBase` class.
             </div>
    
            @param {fm.icelink.StreamType} type The type.
            @return {}
            */
            function WebRtcMediaStreamBase(type) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var type_4 = __arguments[0];
                    _this = _super.call(this, type_4) || this;
                    _this.fmicelinkWebRtcMediaStreamBaseInit();
                    _this._renegotiationLock = new Object();
                    _this.__pendingLocalDirection = fm.icelink.StreamDirection.Inactive;
                    _this.setLocalDirection(fm.icelink.StreamDirection.Unset);
                    _this.setRemoteDirection(fm.icelink.StreamDirection.Unset);
                    _this.setLocalBandwidth(-1);
                    _this.setRemoteBandwidth(-1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcMediaStreamBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMediaStreamBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcMediaStreamBase.prototype.fmicelinkWebRtcMediaStreamBaseInit = function () {
                this._localBandwidth = 0;
                this._remoteBandwidth = 0;
                this._renegotiationPending = false;
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-changeDirection'>&nbsp;</span>**/
            /**
             <div>
             Records the pending direction of this stream. The LocalDirection of this stream will be updated when the connection renegotiation commences.
             </div>
    
    
            @param {fm.icelink.StreamDirection} newDirection
            @return {fm.icelink.Error}
            */
            WebRtcMediaStreamBase.prototype.changeDirection = function (newDirection) {
                if (arguments.length == 1) {
                    var message = "An attempt has been made to modify exisiting media stream direction; however, existing stream capabilities do not support a new setting.";
                    if ((fm.icelink.Global.equals(this.getDirectionCapabilities(), fm.icelink.StreamDirection.Inactive))) {
                        if ((!fm.icelink.Global.equals(newDirection, fm.icelink.StreamDirection.Inactive))) {
                            return new fm.icelink.Error(fm.icelink.ErrorCode.InvalidStreamDirectionChange, new fm.icelink.Exception(message));
                        }
                    }
                    else {
                        if ((fm.icelink.Global.equals(this.getDirectionCapabilities(), fm.icelink.StreamDirection.SendOnly))) {
                            if (((!fm.icelink.Global.equals(newDirection, fm.icelink.StreamDirection.Inactive)) && (!fm.icelink.Global.equals(newDirection, fm.icelink.StreamDirection.SendOnly)))) {
                                return new fm.icelink.Error(fm.icelink.ErrorCode.InvalidStreamDirectionChange, new fm.icelink.Exception(message));
                            }
                        }
                        else {
                            if (((fm.icelink.Global.equals(this.getDirectionCapabilities(), fm.icelink.StreamDirection.ReceiveOnly)) && ((!fm.icelink.Global.equals(newDirection, fm.icelink.StreamDirection.Inactive)) && (!fm.icelink.Global.equals(newDirection, fm.icelink.StreamDirection.ReceiveOnly))))) {
                                return new fm.icelink.Error(fm.icelink.ErrorCode.InvalidStreamDirectionChange, new fm.icelink.Exception(message));
                            }
                        }
                    }
                    this.setPendingLocalDirection(newDirection);
                    this.setRenegotiationPending(true);
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcMediaStreamBase.prototype.getDirection = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.getLocalDirection(), fm.icelink.StreamDirection.SendReceive))) {
                        if ((fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.ReceiveOnly))) {
                            return fm.icelink.StreamDirection.SendOnly;
                        }
                        if ((fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.SendOnly))) {
                            return fm.icelink.StreamDirection.ReceiveOnly;
                        }
                        return this.getRemoteDirection();
                    }
                    if ((fm.icelink.Global.equals(this.getLocalDirection(), fm.icelink.StreamDirection.SendOnly))) {
                        if (((fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.Inactive)) || (fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.SendOnly)))) {
                            return fm.icelink.StreamDirection.Inactive;
                        }
                        return this.getLocalDirection();
                    }
                    if ((fm.icelink.Global.equals(this.getLocalDirection(), fm.icelink.StreamDirection.ReceiveOnly))) {
                        if (((fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.Inactive)) || (fm.icelink.Global.equals(this.getRemoteDirection(), fm.icelink.StreamDirection.ReceiveOnly)))) {
                            return fm.icelink.StreamDirection.Inactive;
                        }
                        return this.getLocalDirection();
                    }
                    return fm.icelink.StreamDirection.Inactive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLabel'>&nbsp;</span>**/
            /**
             <div>
             Gets a label that identifies this class.
             </div>
    
    
            @return {string}
            */
            WebRtcMediaStreamBase.prototype.getLabel = function () {
                if (arguments.length == 0) {
                    var _var0 = _super.prototype.getType.call(this);
                    if (_var0 == fm.icelink.StreamType.Audio) {
                        do {
                            return "Audio Stream";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Video) {
                        do {
                            return "Video Stream";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Application) {
                        do {
                            return "Application Stream";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Message) {
                        do {
                            return "Message Stream";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Text) {
                        do {
                            return "Text Stream";
                        } while (false);
                    }
                    return "Unknown Stream";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLocalBandwidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the local bandwidth in Kbps (Kilobits per second).
             </div>
    
    
            @return {number}
            */
            WebRtcMediaStreamBase.prototype.getLocalBandwidth = function () {
                if (arguments.length == 0) {
                    return this._localBandwidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets current direction indicated by the local description.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcMediaStreamBase.prototype.getLocalDirection = function () {
                if (arguments.length == 0) {
                    return this.__localDirection;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getMaxInputBitrate'>&nbsp;</span>**/
            /**
             <div>
             Gets the maximum bitrate that is supported by this stream in Kbps (Kilobits per second).
             Returns -1 if it is not set.
             </div>
    
    
            @return {number}
            */
            WebRtcMediaStreamBase.prototype.getMaxInputBitrate = function () {
                if (arguments.length == 0) {
                    return this.getRemoteBandwidth();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getPendingLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the pending local direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            @internal
    
            */
            WebRtcMediaStreamBase.prototype.getPendingLocalDirection = function () {
                if (arguments.length == 0) {
                    return this.__pendingLocalDirection;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRemoteBandwidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the remote bandwidth in Kbps (Kilobits per second).
             </div>
    
    
            @return {number}
            */
            WebRtcMediaStreamBase.prototype.getRemoteBandwidth = function () {
                if (arguments.length == 0) {
                    return this._remoteBandwidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRemoteDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets current direction indicated by the remote description.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcMediaStreamBase.prototype.getRemoteDirection = function () {
                if (arguments.length == 0) {
                    return this.__remoteDirection;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRenegotiationPending'>&nbsp;</span>**/
            /**
             <div>
             Gets whether there exist changes that are pending SDP renegotiation.
             </div>
    
    
            @return {boolean}
            */
            WebRtcMediaStreamBase.prototype.getRenegotiationPending = function () {
                if (arguments.length == 0) {
                    return this._renegotiationPending;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setLocalBandwidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the local bandwidth in Kbps (Kilobits per second).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcMediaStreamBase.prototype.setLocalBandwidth = function (value) {
                if (arguments.length == 1) {
                    this._localBandwidth = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets current direction indicated by the local description.
             </div>
    
    
            @param {fm.icelink.StreamDirection} value
            @return {void}
            */
            WebRtcMediaStreamBase.prototype.setLocalDirection = function (value) {
                if (arguments.length == 1) {
                    var direction = this.getDirection();
                    this.__localDirection = value;
                    if ((!fm.icelink.Global.equals(direction, this.getDirection()))) {
                        _super.prototype.raiseDirectionChange.call(this);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setPendingLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets the pending local direction.
             </div>
    
    
            @param {fm.icelink.StreamDirection} value
            @return {void}
            @internal
    
            */
            WebRtcMediaStreamBase.prototype.setPendingLocalDirection = function (value) {
                if (arguments.length == 1) {
                    this.__pendingLocalDirection = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRemoteBandwidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the remote bandwidth in Kbps (Kilobits per second).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcMediaStreamBase.prototype.setRemoteBandwidth = function (value) {
                if (arguments.length == 1) {
                    this._remoteBandwidth = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRemoteDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets current direction indicated by the remote description.
             </div>
    
    
            @param {fm.icelink.StreamDirection} value
            @return {void}
            */
            WebRtcMediaStreamBase.prototype.setRemoteDirection = function (value) {
                if (arguments.length == 1) {
                    var direction = this.getDirection();
                    this.__remoteDirection = value;
                    if ((!fm.icelink.Global.equals(direction, this.getDirection()))) {
                        _super.prototype.raiseDirectionChange.call(this);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRenegotiationPending'>&nbsp;</span>**/
            /**
             <div>
             Sets whether there exist changes that are pending SDP renegotiation.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            WebRtcMediaStreamBase.prototype.setRenegotiationPending = function (value) {
                if (arguments.length == 1) {
                    this._renegotiationPending = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcMediaStreamBase;
        }(fm.icelink.WebRtcStream));
        icelink.WebRtcMediaStreamBase = WebRtcMediaStreamBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaStreamBase.ts" />

/// <reference path="WebRtcMediaStreamBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcMediaStream = /** @class */ (function (_super) {
            __extends(WebRtcMediaStream, _super);
            function WebRtcMediaStream(external, localTrack, remoteTrack, type) {
                var _this = _super.call(this, type) || this;
                if (localTrack == null) {
                    _this.setLocalDirection(icelink.StreamDirection.ReceiveOnly);
                }
                else {
                    _this.setLocalDirection(icelink.StreamDirection.SendReceive);
                }
                //TODO: can we initialize the remote track early?
                _this.setRemoteDirection(icelink.StreamDirection.SendReceive); // until we know better
                _this.setLocalTrack(localTrack);
                _this.setRemoteTrack(remoteTrack);
                if (localTrack) {
                    localTrack.addOutput(_this);
                }
                if (remoteTrack) {
                    remoteTrack.addInput(_this);
                }
                _this.addOnStateChange(function () {
                    if (_this.getState() == icelink.StreamState.Closed || _this.getState() == icelink.StreamState.Failed) {
                        if (localTrack) {
                            localTrack.removeOutput(_this);
                        }
                        if (remoteTrack) {
                            remoteTrack.removeInput(_this);
                        }
                    }
                });
                return _this;
            }
            WebRtcMediaStream.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMediaStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcMediaStream.prototype.getLocalTrack = function () {
                return this._localTrack;
            };
            WebRtcMediaStream.prototype.setLocalTrack = function (localTrack) {
                this._localTrack = localTrack;
            };
            WebRtcMediaStream.prototype.getRemoteTrack = function () {
                return this._remoteTrack;
            };
            WebRtcMediaStream.prototype.setRemoteTrack = function (remoteTrack) {
                this._remoteTrack = remoteTrack;
            };
            WebRtcMediaStream.prototype.setMuted = function (muted) {
                if (this._localTrack) {
                    this._localTrack.setMuted(muted);
                }
            };
            WebRtcMediaStream.prototype.getMuted = function () {
                if (this._localTrack) {
                    return this._localTrack.getMuted();
                }
                return false;
            };
            /** @internal */
            WebRtcMediaStream.prototype.replaceLocalTrack = function (localTrack) {
                var connection = this.getConnection();
                if (!connection) {
                    return icelink.Promise.rejectNow(new icelink.Exception('Not connected.'));
                }
                return connection.replaceLocalTrack(localTrack, this);
            };
            /** @internal */
            WebRtcMediaStream.prototype.replaceRemoteTrack = function (remoteTrack) {
                var connection = this.getConnection();
                if (!connection) {
                    return icelink.Promise.rejectNow(new icelink.Exception('Not connected.'));
                }
                return connection.replaceRemoteTrack(remoteTrack, this);
            };
            WebRtcMediaStream.prototype.processCachedChanges = function () {
                var direction = this.getPendingLocalDirection();
                this.setLocalDirection(direction);
            };
            WebRtcMediaStream.prototype.resetRemoteDirection = function () {
                this.setRemoteDirection(icelink.StreamDirection.SendReceive);
            };
            WebRtcMediaStream.prototype.processSdpMediaDescription = function (sdpMessage, sdpMediaDescription, isLocalDescription, isOffer, isRenegotiation) {
                var error = _super.prototype.processSdpMediaDescription.call(this, sdpMessage, sdpMediaDescription, isLocalDescription, isOffer, isRenegotiation);
                if (error != null) {
                    return error;
                }
                if (!isLocalDescription) {
                    for (var _i = 0, _a = sdpMediaDescription.getMediaAttributes(); _i < _a.length; _i++) {
                        var sdpMediaAttribute = _a[_i];
                        if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.SendReceiveAttribute]')) {
                            this.setRemoteDirection(icelink.StreamDirection.SendReceive);
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.SendOnlyAttribute]')) {
                            this.setRemoteDirection(icelink.StreamDirection.SendOnly);
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ReceiveOnlyAttribute]')) {
                            this.setRemoteDirection(icelink.StreamDirection.ReceiveOnly);
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.InactiveAttribute]')) {
                            this.setRemoteDirection(icelink.StreamDirection.Inactive);
                        }
                    }
                }
                return null;
            };
            WebRtcMediaStream.prototype.getDirectionCapabilities = function () {
                return icelink.StreamDirection.SendReceive;
            };
            return WebRtcMediaStream;
        }(icelink.WebRtcMediaStreamBase));
        icelink.WebRtcMediaStream = WebRtcMediaStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaStream.ts" />

/// <reference path="WebRtcMediaStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcAudioStream = /** @class */ (function (_super) {
            __extends(WebRtcAudioStream, _super);
            function WebRtcAudioStream(external, localTrack, remoteTrack) {
                var _this = _super.call(this, external, localTrack, remoteTrack, icelink.StreamType.Audio) || this;
                /** @internal */
                _this._dtmfSender = null;
                /** @internal */
                _this._onSendDtmfToneValues = [];
                /** @internal */
                _this._onSendDtmfToneChangeValues = [];
                _this._external = external;
                return _this;
            }
            WebRtcAudioStream.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcAudioStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcAudioStream.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcAudioStream.prototype.addOnReceiveDtmfTone = function (value) {
                throw new icelink.Exception('DTMF receive-tone events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.addOnReceiveDtmfToneChange = function (value) {
                throw new icelink.Exception('DTMF receive-tone-change events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.addOnSendDtmfTone = function (value) {
                throw new icelink.Exception('DTMF send-tone events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.addOnSendDtmfToneChange = function (value) {
                icelink.ArrayExtensions.add(this._onSendDtmfToneChangeValues, value);
            };
            WebRtcAudioStream.prototype.insertDtmfTone = function (dtmfTone) {
                return this.insertDtmfTones([dtmfTone]);
            };
            WebRtcAudioStream.prototype.insertDtmfTones = function (dtmfTones) {
                var _this = this;
                if (this._dtmfSender == null) {
                    var connection = this.getConnection();
                    if (!connection) {
                        return false;
                    }
                    this._dtmfSender = connection.getDtmfSender();
                    if (this._dtmfSender == null) {
                        return false;
                    }
                    this._dtmfSender.ontonechange = function (ev) {
                        var tones = icelink.dtmf.Tone.fromToneString(ev.tone);
                        for (var _i = 0, _a = _this._onSendDtmfToneChangeValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            for (var _b = 0, tones_2 = tones; _b < tones_2.length; _b++) {
                                var tone = tones_2[_b];
                                value(tone);
                            }
                        }
                    };
                }
                this._dtmfSender.insertDTMF(icelink.dtmf.Tone.toToneString(dtmfTones));
            };
            WebRtcAudioStream.prototype.removeOnReceiveDtmfTone = function (value) {
                throw new icelink.Exception('DTMF receive-tone events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.removeOnReceiveDtmfToneChange = function (value) {
                throw new icelink.Exception('DTMF receive-tone-change events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.removeOnSendDtmfTone = function (value) {
                throw new icelink.Exception('DTMF send-tone events are not supported by WebRTC.');
            };
            WebRtcAudioStream.prototype.removeOnSendDtmfToneChange = function (value) {
                icelink.ArrayExtensions.remove(this._onSendDtmfToneChangeValues, value);
            };
            return WebRtcAudioStream;
        }(icelink.WebRtcMediaStream));
        icelink.WebRtcAudioStream = WebRtcAudioStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media track base properties/methods.
         </div>
    
        */
        var WebRtcMediaTrackBase = /** @class */ (function (_super) {
            __extends(WebRtcMediaTrackBase, _super);
            function WebRtcMediaTrackBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcMediaTrackBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMediaTrackBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            return WebRtcMediaTrackBase;
        }(fm.icelink.Dynamic));
        icelink.WebRtcMediaTrackBase = WebRtcMediaTrackBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaTrackBase.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcMediaTrack = /** @class */ (function (_super) {
            __extends(WebRtcMediaTrack, _super);
            function WebRtcMediaTrack(external, media) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._onStartedValues = [];
                /** @internal */
                _this._onStoppedValues = [];
                /** @internal */
                _this._onDestroyedValues = [];
                /** @internal */
                _this._outputs = [];
                /** @internal */
                _this._inputs = [];
                /** @internal */
                _this._mediaStreamTrackDisabled = false;
                _this._media = media;
                return _this;
            }
            WebRtcMediaTrack.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMediaTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcMediaTrack.prototype.getOutputs = function () {
                return this._outputs;
            };
            /** @internal */
            WebRtcMediaTrack.prototype.addOutput = function (output) {
                icelink.ArrayExtensions.add(this._outputs, output);
            };
            /** @internal */
            WebRtcMediaTrack.prototype.removeOutput = function (output) {
                return icelink.ArrayExtensions.remove(this._outputs, output);
            };
            /** @internal */
            WebRtcMediaTrack.prototype.getInputs = function () {
                return this._inputs;
            };
            /** @internal */
            WebRtcMediaTrack.prototype.addInput = function (input) {
                icelink.ArrayExtensions.add(this._inputs, input);
            };
            /** @internal */
            WebRtcMediaTrack.prototype.removeInput = function (input) {
                return icelink.ArrayExtensions.remove(this._inputs, input);
            };
            /** @internal */
            WebRtcMediaTrack.prototype._getMediaStreamTrack = function () {
                return this._mediaStreamTrack;
            };
            /** @internal */
            WebRtcMediaTrack.prototype._setMediaStreamTrack = function (mediaStreamTrack) {
                var _this = this;
                if (mediaStreamTrack) {
                    if (mediaStreamTrack != this._mediaStreamTrack) {
                        mediaStreamTrack.onended = function (e) {
                            for (var _i = 0, _a = _this._onStoppedValues; _i < _a.length; _i++) {
                                var value = _a[_i];
                                value();
                            }
                        };
                        for (var _i = 0, _a = this._onStartedValues; _i < _a.length; _i++) {
                            var value = _a[_i];
                            value();
                        }
                    }
                }
                else {
                    this._mediaStreamTrackDisabled = true;
                    if (this._mediaStreamTrack) {
                        this._mediaStreamTrack.onended = null;
                    }
                }
                this._mediaStreamTrack = mediaStreamTrack;
                for (var _b = 0, _c = this.getOutputs(); _b < _c.length; _b++) {
                    var output = _c[_b];
                    output.replaceLocalTrack(this);
                }
                for (var _d = 0, _e = this.getInputs(); _d < _e.length; _d++) {
                    var input = _e[_d];
                    input.replaceRemoteTrack(this);
                }
            };
            /** @internal */
            WebRtcMediaTrack.prototype._getMediaStreamTrackDisabled = function () {
                return this._mediaStreamTrackDisabled;
            };
            WebRtcMediaTrack.prototype.addOnStarted = function (value) {
                icelink.ArrayExtensions.add(this._onStartedValues, value);
            };
            WebRtcMediaTrack.prototype.addOnStopped = function (value) {
                icelink.ArrayExtensions.add(this._onStoppedValues, value);
            };
            WebRtcMediaTrack.prototype.addOnDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onDestroyedValues, value);
            };
            WebRtcMediaTrack.prototype.removeOnStarted = function (value) {
                icelink.ArrayExtensions.remove(this._onStartedValues, value);
            };
            WebRtcMediaTrack.prototype.removeOnStopped = function (value) {
                icelink.ArrayExtensions.remove(this._onStoppedValues, value);
            };
            WebRtcMediaTrack.prototype.removeOnDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onDestroyedValues, value);
            };
            WebRtcMediaTrack.prototype.getMedia = function () {
                return this._media;
            };
            WebRtcMediaTrack.prototype.getMuted = function () {
                var mediaStreamTrack = this._getMediaStreamTrack();
                if (mediaStreamTrack) {
                    return !mediaStreamTrack.enabled;
                }
                return false;
            };
            WebRtcMediaTrack.prototype.setMuted = function (muted) {
                var mediaStreamTrack = this._getMediaStreamTrack();
                if (mediaStreamTrack) {
                    mediaStreamTrack.enabled = !muted;
                }
            };
            WebRtcMediaTrack.prototype.getOnEnded = function () {
                var mediaStreamTrack = this._getMediaStreamTrack();
                if (mediaStreamTrack) {
                    return mediaStreamTrack.onended;
                }
                return null;
            };
            WebRtcMediaTrack.prototype.setOnEnded = function (onEnded) {
                var mediaStreamTrack = this._getMediaStreamTrack();
                if (mediaStreamTrack) {
                    mediaStreamTrack.onended = onEnded;
                }
            };
            WebRtcMediaTrack.prototype.stop = function () {
                var mediaStreamTrack = this._getMediaStreamTrack();
                if (mediaStreamTrack) {
                    mediaStreamTrack.stop();
                }
            };
            WebRtcMediaTrack.prototype.destroy = function () {
                if (this._mediaStreamTrack) {
                    for (var _i = 0, _a = this._onDestroyedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                    return true;
                }
                return false;
            };
            return WebRtcMediaTrack;
        }(icelink.WebRtcMediaTrackBase));
        icelink.WebRtcMediaTrack = WebRtcMediaTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaTrack.ts" />

/// <reference path="WebRtcMediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcAudioTrack = /** @class */ (function (_super) {
            __extends(WebRtcAudioTrack, _super);
            function WebRtcAudioTrack(external, media) {
                var _this = _super.call(this, external, media) || this;
                _this._external = external;
                return _this;
            }
            WebRtcAudioTrack.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcAudioTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcAudioTrack.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcAudioTrack.prototype.isLocal = function () {
                return (icelink.Util.isObjectType(this.getMedia(), '[fm.icelink.WebRtcLocalMedia]'));
            };
            WebRtcAudioTrack.prototype.changeSinkOutput = function (sinkOutput) {
                if (this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call AudioTrack.changeSinkOutput on a local track.'));
                    return promise;
                }
                return this.getMedia().changeAudioSinkOutput(sinkOutput);
            };
            WebRtcAudioTrack.prototype.getSinkOutput = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSinkOutput on a local track.');
                }
                return this.getMedia().getAudioSinkOutput();
            };
            WebRtcAudioTrack.prototype.getSinkOutputs = function () {
                if (this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call AudioTrack.getSinkOutputs on a local track.'));
                    return promise;
                }
                return this.getMedia().getAudioSinkOutputs();
            };
            WebRtcAudioTrack.prototype.setSinkOutput = function (value) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.setSinkOutput on a local track.');
                }
                this.getMedia().setAudioSinkOutput(value);
            };
            WebRtcAudioTrack.prototype.changeSourceInput = function (sourceInput) {
                if (!this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call AudioTrack.changeSourceInput on a remote track.'));
                    return promise;
                }
                return this.getMedia().changeAudioSourceInput(sourceInput);
            };
            WebRtcAudioTrack.prototype.getSourceInput = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.getSourceInput on a remote track.');
                }
                return this.getMedia().getAudioSourceInput();
            };
            WebRtcAudioTrack.prototype.getSourceInputs = function () {
                if (!this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call AudioTrack.getSourceInputs on a remote track.'));
                    return promise;
                }
                return this.getMedia().getAudioSourceInputs();
            };
            WebRtcAudioTrack.prototype.setSourceInput = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call AudioTrack.setSourceInput on a remote track.');
                }
                this.getMedia().setAudioSourceInput(value);
            };
            WebRtcAudioTrack.prototype.addOnLevel = function (value) {
                return this.getMedia().addOnAudioLevel(value);
            };
            WebRtcAudioTrack.prototype.getGain = function () {
                return this.getMedia().getAudioGain();
            };
            WebRtcAudioTrack.prototype.getVolume = function () {
                return this.getMedia().getAudioVolume();
            };
            WebRtcAudioTrack.prototype.removeOnLevel = function (value) {
                return this.getMedia().removeOnAudioLevel(value);
            };
            WebRtcAudioTrack.prototype.setGain = function (value) {
                this.getMedia().setAudioGain(value);
            };
            WebRtcAudioTrack.prototype.setVolume = function (value) {
                this.getMedia().setAudioVolume(value);
            };
            return WebRtcAudioTrack;
        }(icelink.WebRtcMediaTrack));
        icelink.WebRtcAudioTrack = WebRtcAudioTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Connection base properties/methods.
         </div>
    
        */
        var WebRtcConnectionBase = /** @class */ (function (_super) {
            __extends(WebRtcConnectionBase, _super);
            /**<span id='method-fm.icelink.WebRtcConnectionBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.connectionBase` class.
             </div>
    
    
            @param {Object} sharedLock
            @return {}
            */
            function WebRtcConnectionBase(sharedLock) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var sharedLock_1 = __arguments[0];
                    _this = _super.call(this) || this;
                    _this.fmicelinkWebRtcConnectionBaseInit();
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                    _this.__iceServers = new fm.icelink.IceServerCollection();
                    _this.__useTrickleIce = true;
                    _this.__trickleIcePolicy = fm.icelink.TrickleIcePolicy.FullTrickle;
                    _this._earlyRemoteCandidatePromises = new Array();
                    _this.__signallingState = fm.icelink.SignallingState.New;
                    _this._connectionLock = sharedLock_1;
                    _this.setTieBreaker(fm.icelink.Utility.generateTieBreaker());
                    _this.setTimeout(30000);
                    _this.setDeadStreamTimeout(15000);
                    _this.setIceGatherPolicy(fm.icelink.IceGatherPolicy.All);
                    _this.setTrickleIcePolicy(fm.icelink.TrickleIcePolicy.FullTrickle);
                    _this.__stateMachine = new fm.icelink.ConnectionStateMachine();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcConnectionBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcConnectionBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcConnectionBase.prototype.fmicelinkWebRtcConnectionBaseInit = function () {
                var _this = this;
                this.__onExternalIdChange = [];
                this.__onGatheringStateChange = [];
                this.__onIceConnectionStateChange = [];
                this.__onLocalCandidate = [];
                this.__onLocalDescription = [];
                this.__onRemoteCandidate = [];
                this.__onRemoteDescription = [];
                this.__onSignallingStateChange = [];
                this.__onStateChange = [];
                this.__useTrickleIce = false;
                this._deadStreamTimeout = 0;
                this._onExternalIdChange = function (p0, p1) { for (var _i = 0, _a = _this.__onExternalIdChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0, p1);
                } };
                this._onGatheringStateChange = function (p0) { for (var _i = 0, _a = _this.__onGatheringStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
                this._onIceConnectionStateChange = function (p0) { for (var _i = 0, _a = _this.__onIceConnectionStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
                this._onLocalCandidate = function (p0, p1) { for (var _i = 0, _a = _this.__onLocalCandidate; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0, p1);
                } };
                this._onLocalDescription = function (p0, p1) { for (var _i = 0, _a = _this.__onLocalDescription; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0, p1);
                } };
                this._onRemoteCandidate = function (p0, p1) { for (var _i = 0, _a = _this.__onRemoteCandidate; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0, p1);
                } };
                this._onRemoteDescription = function (p0, p1) { for (var _i = 0, _a = _this.__onRemoteDescription; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0, p1);
                } };
                this._onSignallingStateChange = function (p0) { for (var _i = 0, _a = _this.__onSignallingStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
                this._onStateChange = function (p0) { for (var _i = 0, _a = _this.__onStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
                this._timeout = 0;
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addIceServer'>&nbsp;</span>**/
            /**
             <div>
             Adds an ICE server.
             </div>
    
            @param {fm.icelink.IceServer} iceServer The ICE server.
            @return {void}
            */
            WebRtcConnectionBase.prototype.addIceServer = function (iceServer) {
                if (arguments.length == 1) {
                    this.__iceServers.add(iceServer);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addIceServers'>&nbsp;</span>**/
            /**
             <div>
             Adds some ICE servers.
             </div>
    
            @param {fm.icelink.IceServer[]} iceServers The ICE servers.
            @return {void}
            */
            WebRtcConnectionBase.prototype.addIceServers = function (iceServers) {
                if (arguments.length == 1) {
                    this.__iceServers.addMany(iceServers);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnExternalIdChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
             </div>
    
    
            @param {fm.icelink.IAction2<string,string>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnExternalIdChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onExternalIdChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnGatheringStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the gathering state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnGatheringStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onGatheringStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnIceConnectionStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the ice connection state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnIceConnectionStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onIceConnectionStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnLocalCandidate'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when a local candidate is added.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnLocalCandidate = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onLocalCandidate, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnLocalDescription'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when a local description is set.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnLocalDescription = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onLocalDescription, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnRemoteCandidate'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when a remote description is added.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnRemoteCandidate = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onRemoteCandidate, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnRemoteDescription'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when a remote description is set.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnRemoteDescription = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onRemoteDescription, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnSignallingStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the signalling state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnSignallingStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onSignallingStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the connection state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.addOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-addRemoteCandidate'>&nbsp;</span>**/
            /**
             <div>
             Adds the remote candidate.
             </div>
    
            @param {fm.icelink.Candidate} remoteCandidate The remote candidate.
            @return {fm.icelink.Future<fm.icelink.Candidate>}
            */
            WebRtcConnectionBase.prototype.addRemoteCandidate = function (remoteCandidate) {
                if (arguments.length == 1) {
                    var item = new fm.icelink.RemoteCandidatePromise(remoteCandidate);
                    if (((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.New)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Initializing)))) {
                        fm.icelink.ArrayExtensions.add(this._earlyRemoteCandidatePromises, item);
                        if (((!fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.New)) && (!fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Initializing)))) {
                            fm.icelink.ArrayExtensions.clear(this._earlyRemoteCandidatePromises);
                            this.addRemoteCandidatePromise(item);
                        }
                        return item;
                    }
                    if (!this.getIsTerminatingOrTerminated()) {
                        this.addRemoteCandidatePromise(item);
                    }
                    return item;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.addRemoteCandidatePromise = function (remoteCandidatePromise) {
                if (arguments.length == 1) {
                    try {
                        this.raiseRemoteCandidate(remoteCandidatePromise.getRemoteCandidate());
                        this.doAddRemoteCandidate(remoteCandidatePromise, remoteCandidatePromise.getRemoteCandidate());
                    }
                    catch (exception) {
                        remoteCandidatePromise.reject(exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-createAnswer'>&nbsp;</span>**/
            /**
             <div>
             Creates an answer.
             </div>
    
    
            @return {fm.icelink.Future<fm.icelink.SessionDescription>}
            */
            WebRtcConnectionBase.prototype.createAnswer = function () {
                if (arguments.length == 0) {
                    var promise = new fm.icelink.Promise();
                    try {
                        this.doCreateAnswer(promise);
                    }
                    catch (exception) {
                        promise.reject(exception);
                    }
                    finally {
                    }
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-createOffer'>&nbsp;</span>**/
            /**
             <div>
             Creates an offer.
             </div>
    
    
            @return {fm.icelink.Future<fm.icelink.SessionDescription>}
            */
            WebRtcConnectionBase.prototype.createOffer = function () {
                if (arguments.length == 0) {
                    var promise = new fm.icelink.Promise();
                    try {
                        this.doCreateOffer(promise);
                    }
                    catch (exception) {
                        promise.reject(exception);
                    }
                    finally {
                    }
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-doProcessDescription'>&nbsp;</span>**/
            /**
             <div>
             Processes a session description.
             </div>
    
            @param {fm.icelink.SessionDescription} description The session description.
            @param {boolean} isLocalDescription Whether this is a local session description.
            @return {fm.icelink.Error}
            */
            WebRtcConnectionBase.prototype.doProcessDescription = function (description, isLocalDescription) {
                if (arguments.length == 2) {
                    var sdpMessage = description.getSdpMessage();
                    if ((fm.icelink.Global.equals(sdpMessage, null))) {
                        return new fm.icelink.Error(fm.icelink.ErrorCode.LocalDescriptionError, new fm.icelink.Exception(fm.icelink.StringExtensions.format("{0} session description is empty.", (isLocalDescription ? "Local" : "Remote"))));
                    }
                    var streams = this.getStreams();
                    if (((fm.icelink.Global.equals(streams, null)) || (fm.icelink.Global.equals(streams.length, 0)))) {
                        return new fm.icelink.Error(fm.icelink.ErrorCode.ConnectionInvalidArchitecture, new fm.icelink.Exception("At least one local stream is required for the connection to conduct signalling exchange."));
                    }
                    var mediaDescriptions = sdpMessage.getMediaDescriptions();
                    if (((fm.icelink.Global.equals(mediaDescriptions, null)) || (fm.icelink.Global.equals(mediaDescriptions.length, 0)))) {
                        return new fm.icelink.Error(fm.icelink.ErrorCode.ConnectionInvalidArchitecture, new fm.icelink.Exception("At least one media description is required for the connection to conduct signalling exchange."));
                    }
                    var length_5 = streams.length;
                    var num2 = mediaDescriptions.length;
                    if ((!fm.icelink.Global.equals(length_5, num2))) {
                        return new fm.icelink.Error(fm.icelink.ErrorCode.ConnectionInvalidArchitecture, new fm.icelink.Exception(fm.icelink.StringExtensions.format("There is a mismatch between the number of local streams ({0}) and the number of media descriptions ({1}).", fm.icelink.IntExtensions.toString(length_5), fm.icelink.IntExtensions.toString(num2))));
                    }
                    var flag = true;
                    var remoteSupportsTrickleIce = false;
                    for (var i = 0; (i < streams.length); i++) {
                        var stream = streams[i];
                        var sdpMediaDescription = mediaDescriptions[i];
                        var type = fm.icelink.sdp.MediaType.toStreamType(sdpMediaDescription.getMedia().getMediaType());
                        if ((!fm.icelink.Global.equals(stream.getType(), type))) {
                            return new fm.icelink.Error(fm.icelink.ErrorCode.ConnectionInvalidArchitecture, new fm.icelink.Exception(fm.icelink.StringExtensions.format("There is a media type mismatch between the local stream at index {0} ({1}) and the media description at index {0} ({2}).", fm.icelink.IntExtensions.toString(i), new fm.icelink.StreamTypeWrapper(stream.getType()).toString(), new fm.icelink.StreamTypeWrapper(type).toString())));
                        }
                        this.processSdpMediaDescription(stream, sdpMediaDescription, i, isLocalDescription, description.getRenegotiation());
                        var error = stream.processSdpMediaDescription(sdpMessage, sdpMediaDescription, isLocalDescription, description.getIsOffer(), description.getRenegotiation());
                        if ((!fm.icelink.Global.equals(error, null))) {
                            return error;
                        }
                        remoteSupportsTrickleIce = stream.getRemoteSupportsTrickleIce();
                        flag = (flag && remoteSupportsTrickleIce);
                    }
                    if ((!isLocalDescription && (fm.icelink.Global.equals(this.getTrickleIcePolicy(), fm.icelink.TrickleIcePolicy.HalfTrickle)))) {
                        if (flag) {
                            fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Peer supports Trickle-Ice. Trickle Ice will be enabled in all subsequent communications with the peer for the lifetime of connection {0}.", this.getId()));
                            this.setUseTrickleIce(true);
                        }
                        else {
                            this.setUseTrickleIce(false);
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getAudioStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first audio stream.
             </div>
    
    
            @return {TAudioStream}
            */
            WebRtcConnectionBase.prototype.getAudioStream = function () {
                if (arguments.length == 0) {
                    var audioStreams = this.getAudioStreams();
                    if (((fm.icelink.Global.equals(audioStreams, null)) || (fm.icelink.Global.equals(audioStreams.length, 0)))) {
                        return null;
                    }
                    return audioStreams[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getDataStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first data stream.
             </div>
    
    
            @return {TDataStream}
            */
            WebRtcConnectionBase.prototype.getDataStream = function () {
                if (arguments.length == 0) {
                    var dataStreams = this.getDataStreams();
                    if (((fm.icelink.Global.equals(dataStreams, null)) || (fm.icelink.Global.equals(dataStreams.length, 0)))) {
                        return null;
                    }
                    return dataStreams[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getDeadStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the amount of time (in milliseconds)
             to wait for connectivity checks to re-establish
             after they start to fail on a live connection.
             Defaults to 15,000.
             </div>
    
    
            @return {number}
            */
            WebRtcConnectionBase.prototype.getDeadStreamTimeout = function () {
                if (arguments.length == 0) {
                    return this._deadStreamTimeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getError'>&nbsp;</span>**/
            /**
             <div>
             Gets the error.
             </div>
    
    
            @return {fm.icelink.Error}
            */
            WebRtcConnectionBase.prototype.getError = function () {
                if (arguments.length == 0) {
                    return this._error;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getExternalId'>&nbsp;</span>**/
            /**
             <div>
             Gets the external identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcConnectionBase.prototype.getExternalId = function () {
                if (arguments.length == 0) {
                    return this.__externalId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasAudio'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this connection has an audio stream.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getHasAudio = function () {
                if (arguments.length == 0) {
                    return (!fm.icelink.Global.equals(this.getAudioStream(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasData'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this connection has a data stream.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getHasData = function () {
                if (arguments.length == 0) {
                    return (!fm.icelink.Global.equals(this.getDataStream(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasVideo'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this connection has a video stream.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getHasVideo = function () {
                if (arguments.length == 0) {
                    return (!fm.icelink.Global.equals(this.getVideoStream(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceGatherPolicy'>&nbsp;</span>**/
            /**
             <div>
             Gets the ICE gather policy.
             </div>
    
    
            @return {fm.icelink.IceGatherPolicy}
            */
            WebRtcConnectionBase.prototype.getIceGatherPolicy = function () {
                if (arguments.length == 0) {
                    return this._iceGatherPolicy;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceServer'>&nbsp;</span>**/
            /**
             <div>
             Gets the ICE server.
             </div>
    
    
            @return {fm.icelink.IceServer}
            */
            WebRtcConnectionBase.prototype.getIceServer = function () {
                if (arguments.length == 0) {
                    return this.__iceServers.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceServers'>&nbsp;</span>**/
            /**
             <div>
             Gets the ICE servers.
             </div>
    
    
            @return {fm.icelink.IceServer[]}
            */
            WebRtcConnectionBase.prototype.getIceServers = function () {
                if (arguments.length == 0) {
                    return this.__iceServers.getValues();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcConnectionBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the connection is currently closed or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getIsTerminated = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Closed)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Failed)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminating'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the connection is currently closing or failing.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getIsTerminating = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Closing)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Failing)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the connection is currently closing, failing, closed, or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcConnectionBase.prototype.getIsTerminatingOrTerminated = function () {
                if (arguments.length == 0) {
                    return (this.getIsTerminating() || this.getIsTerminated());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getSignallingState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state of the signalling.
             </div>
    
    
            @return {fm.icelink.SignallingState}
            */
            WebRtcConnectionBase.prototype.getSignallingState = function () {
                if (arguments.length == 0) {
                    return this.__signallingState;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state of the connection.
             </div>
    
    
            @return {fm.icelink.ConnectionState}
            */
            WebRtcConnectionBase.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this.__stateMachine.getState();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first stream.
             </div>
    
    
            @return {TStream}
            */
            WebRtcConnectionBase.prototype.getStream = function () {
                if (arguments.length == 0) {
                    var streams = this.getStreams();
                    if (((fm.icelink.Global.equals(streams, null)) || (fm.icelink.Global.equals(streams.length, 0)))) {
                        return null;
                    }
                    return streams[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getTieBreaker'>&nbsp;</span>**/
            /**
             <div>
             Gets the tie breaker.
             </div>
    
    
            @return {string}
            */
            WebRtcConnectionBase.prototype.getTieBreaker = function () {
                if (arguments.length == 0) {
                    return this._tieBreaker;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the amount of time (in milliseconds)
             to wait for a connection to establish before
             giving up and closing it. Defaults to 30,000.
             </div>
    
    
            @return {number}
            */
            WebRtcConnectionBase.prototype.getTimeout = function () {
                if (arguments.length == 0) {
                    return this._timeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getTrickleIcePolicy'>&nbsp;</span>**/
            /**
             <div>
             Gets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
             </div>
    
    
            @return {fm.icelink.TrickleIcePolicy}
            */
            WebRtcConnectionBase.prototype.getTrickleIcePolicy = function () {
                if (arguments.length == 0) {
                    return this.__trickleIcePolicy;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.getUseTrickleIce = function () {
                if (arguments.length == 0) {
                    return this.__useTrickleIce;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-getVideoStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first video stream.
             </div>
    
    
            @return {TVideoStream}
            */
            WebRtcConnectionBase.prototype.getVideoStream = function () {
                if (arguments.length == 0) {
                    var videoStreams = this.getVideoStreams();
                    if (((fm.icelink.Global.equals(videoStreams, null)) || (fm.icelink.Global.equals(videoStreams.length, 0)))) {
                        return null;
                    }
                    return videoStreams[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.logInvalidStateTransition = function (state) {
                if (arguments.length == 1) {
                    if (fm.icelink.Log.getIsDebugEnabled()) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Connection {0} state is currently {1}. Cannot transition to {2}.", this.getId(), fm.icelink.StringExtensions.toLower(new fm.icelink.ConnectionStateWrapper(this.getState()).toString()), fm.icelink.StringExtensions.toLower(new fm.icelink.ConnectionStateWrapper(state).toString())));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-processDescription'>&nbsp;</span>**/
            /**
             <div>
             Processes a session description.
             </div>
    
            @param {fm.icelink.SessionDescription} description The session description.
            @param {boolean} isLocalDescription Whether this is a local session description.
            @return {fm.icelink.Error}
            */
            WebRtcConnectionBase.prototype.processDescription = function (description, isLocalDescription) {
                if (arguments.length == 2) {
                    return this.doProcessDescription(description, isLocalDescription);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-processStateChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state change.
             </div>
    
    
            @return {void}
            */
            WebRtcConnectionBase.prototype.processStateChange = function () {
                if (arguments.length == 0) {
                    var streams = this.getStreams();
                    if ((!fm.icelink.Global.equals(streams, null))) {
                        for (var _i = 0, streams_2 = streams; _i < streams_2.length; _i++) {
                            var local = streams_2[_i];
                            if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Initializing))) {
                                local.setState(fm.icelink.StreamState.Initializing);
                            }
                            else {
                                if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Connecting))) {
                                    local.setState(fm.icelink.StreamState.Connecting);
                                }
                                else {
                                    if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Connected))) {
                                        local.setState(fm.icelink.StreamState.Connected);
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Closing))) {
                                            local.setState(fm.icelink.StreamState.Closing);
                                        }
                                        else {
                                            if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Closed))) {
                                                local.setState(fm.icelink.StreamState.Closed);
                                            }
                                            else {
                                                if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Failing))) {
                                                    local.setState(fm.icelink.StreamState.Failing);
                                                }
                                                else {
                                                    if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Failed))) {
                                                        local.setState(fm.icelink.StreamState.Failed);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.raiseCachedCandidates = function () {
                if (arguments.length == 0) {
                    for (var _i = 0, _a = this._earlyRemoteCandidatePromises; _i < _a.length; _i++) {
                        var promise = _a[_i];
                        this.addRemoteCandidatePromise(promise);
                    }
                    fm.icelink.ArrayExtensions.clear(this._earlyRemoteCandidatePromises);
                    this.doSendCachedLocalCandidates();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseGatheringStateChange'>&nbsp;</span>**/
            /**
             <div>
             Raises gathering state change.
             </div>
    
    
            @param {TConnection} connection
            @return {void}
            */
            WebRtcConnectionBase.prototype.raiseGatheringStateChange = function (connection) {
                if (arguments.length == 1) {
                    var onGatheringStateChange = this._onGatheringStateChange;
                    if ((!fm.icelink.Global.equals(onGatheringStateChange, null))) {
                        onGatheringStateChange(connection);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseIceConnectionStateChange'>&nbsp;</span>**/
            /**
             <div>
             Raises ICE connection state change.
             </div>
    
    
            @param {TConnection} connection
            @return {void}
            */
            WebRtcConnectionBase.prototype.raiseIceConnectionStateChange = function (connection) {
                if (arguments.length == 1) {
                    var onIceConnectionStateChange = this._onIceConnectionStateChange;
                    if ((!fm.icelink.Global.equals(onIceConnectionStateChange, null))) {
                        onIceConnectionStateChange(connection);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseLocalCandidate'>&nbsp;</span>**/
            /**
             <div>
             Raises a local candidate but only if it has not been already raised.
             </div>
    
            @param {fm.icelink.Candidate} localCandidate The local candidate.
            @return {void}
            */
            WebRtcConnectionBase.prototype.raiseLocalCandidate = function (localCandidate) {
                if (arguments.length == 1) {
                    var onLocalCandidate = this._onLocalCandidate;
                    if (!((fm.icelink.Global.equals(onLocalCandidate, null)) || localCandidate.getDispatched())) {
                        onLocalCandidate(this.getInstance(), localCandidate);
                    }
                    if ((fm.icelink.Global.equals(localCandidate.getTurnTransportProtocol(), fm.icelink.ProtocolType.Tcp))) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local candidate for stream {0} (over TCP) for connection {2}:\n{1}", fm.icelink.IntExtensions.toString(localCandidate.getSdpMediaIndex()), localCandidate.getSdpCandidateAttribute().toString(), this.getId()));
                    }
                    else {
                        if ((fm.icelink.Global.equals(localCandidate.getTurnTransportProtocol(), fm.icelink.ProtocolType.Tls))) {
                            fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local candidate for stream {0} (over TLS) for connection {2}:\n{1}", fm.icelink.IntExtensions.toString(localCandidate.getSdpMediaIndex()), localCandidate.getSdpCandidateAttribute().toString(), this.getId()));
                        }
                        else {
                            fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local candidate for stream {0} for connection {2}:\n{1}", fm.icelink.IntExtensions.toString(localCandidate.getSdpMediaIndex()), localCandidate.getSdpCandidateAttribute().toString(), this.getId()));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.raiseLocalDescription = function (localDescription) {
                if (arguments.length == 1) {
                    var onLocalDescription = this._onLocalDescription;
                    if ((!fm.icelink.Global.equals(onLocalDescription, null))) {
                        onLocalDescription(this.getInstance(), localDescription);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.raiseRemoteCandidate = function (remoteCandidate) {
                if (arguments.length == 1) {
                    var onRemoteCandidate = this._onRemoteCandidate;
                    if ((!fm.icelink.Global.equals(onRemoteCandidate, null))) {
                        onRemoteCandidate(this.getInstance(), remoteCandidate);
                    }
                    fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Remote candidate for stream {0} for connection {2}:\n{1}", fm.icelink.IntExtensions.toString(remoteCandidate.getSdpMediaIndex()), remoteCandidate.getSdpCandidateAttribute().toString(), this.getId()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.raiseRemoteDescription = function (remoteDescription) {
                if (arguments.length == 1) {
                    var onRemoteDescription = this._onRemoteDescription;
                    if ((!fm.icelink.Global.equals(onRemoteDescription, null))) {
                        onRemoteDescription(this.getInstance(), remoteDescription);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.raiseStateChange = function () {
                if (arguments.length == 0) {
                    var onStateChange = this._onStateChange;
                    if ((!fm.icelink.Global.equals(onStateChange, null))) {
                        onStateChange(this.getInstance());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeIceServer'>&nbsp;</span>**/
            /**
             <div>
             Removes an ICE server.
             </div>
    
            @param {fm.icelink.IceServer} iceServer The ICE server.
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeIceServer = function (iceServer) {
                if (arguments.length == 1) {
                    this.__iceServers.remove(iceServer);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeIceServers'>&nbsp;</span>**/
            /**
             <div>
             Removes some ICE servers.
             </div>
    
            @param {fm.icelink.IceServer[]} iceServers The ICE servers.
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeIceServers = function (iceServers) {
                if (arguments.length == 1) {
                    this.__iceServers.removeMany(iceServers);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnExternalIdChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
             </div>
    
    
            @param {fm.icelink.IAction2<string,string>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnExternalIdChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onExternalIdChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnGatheringStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the gathering state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnGatheringStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onGatheringStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnIceConnectionStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the ice connection state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnIceConnectionStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onIceConnectionStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnLocalCandidate'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when a local candidate is added.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnLocalCandidate = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onLocalCandidate, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnLocalDescription'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when a local description is set.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnLocalDescription = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onLocalDescription, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnRemoteCandidate'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when a remote description is added.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnRemoteCandidate = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onRemoteCandidate, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnRemoteDescription'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when a remote description is set.
             </div>
    
    
            @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnRemoteDescription = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onRemoteDescription, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnSignallingStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the signalling state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnSignallingStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onSignallingStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the connection state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TConnection>} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.removeOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setDeadStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the amount of time (in milliseconds)
             to wait for connectivity checks to re-establish
             after they start to fail on a live connection.
             Defaults to 15,000.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setDeadStreamTimeout = function (value) {
                if (arguments.length == 1) {
                    this._deadStreamTimeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.setError = function (value) {
                if (arguments.length == 1) {
                    this._error = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setExternalId'>&nbsp;</span>**/
            /**
             <div>
             Sets the external identifier.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setExternalId = function (value) {
                if (arguments.length == 1) {
                    var str = this.__externalId;
                    if ((!fm.icelink.Global.equals(str, value))) {
                        this.__externalId = value;
                        var onExternalIdChange = this._onExternalIdChange;
                        if ((!fm.icelink.Global.equals(onExternalIdChange, null))) {
                            onExternalIdChange(this.getId(), str);
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceGatherPolicy'>&nbsp;</span>**/
            /**
             <div>
             Sets the ICE gather policy.
             </div>
    
    
            @param {fm.icelink.IceGatherPolicy} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setIceGatherPolicy = function (value) {
                if (arguments.length == 1) {
                    this._iceGatherPolicy = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceServer'>&nbsp;</span>**/
            /**
             <div>
             Sets the ICE server.
             </div>
    
    
            @param {fm.icelink.IceServer} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setIceServer = function (value) {
                if (arguments.length == 1) {
                    this.__iceServers.setValue(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceServers'>&nbsp;</span>**/
            /**
             <div>
             Sets the ICE servers.
             </div>
    
    
            @param {fm.icelink.IceServer[]} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setIceServers = function (value) {
                if (arguments.length == 1) {
                    this.__iceServers.replace(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setLocalDescription'>&nbsp;</span>**/
            /**
             <div>
             Sets the local description.
             </div>
    
            @param {fm.icelink.SessionDescription} localDescription The local description.
            @return {fm.icelink.Future<fm.icelink.SessionDescription>}
            */
            WebRtcConnectionBase.prototype.setLocalDescription = function (localDescription) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    try {
                        var username = localDescription.getSdpMessage().getOrigin().getUsername();
                        username = ((fm.icelink.Global.equals(fm.icelink.StringExtensions.trim(username), "-")) ? fm.icelink.StringExtensions.concat("IceLink-", fm.icelink.Build.getVersion()) : fm.icelink.StringExtensions.concat(username, "_IceLink-", fm.icelink.Build.getVersion()));
                        localDescription.getSdpMessage().getOrigin().setUsername(username);
                        this.raiseLocalDescription(localDescription);
                        if (this.getIsTerminatingOrTerminated()) {
                            throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Cannot set local description: connection is {0}.", new fm.icelink.ConnectionStateWrapper(this.getState()).toString()));
                        }
                        this.doSetLocalDescription(promise, localDescription);
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local session description ({0}) for connection {2}:\n{1}", fm.icelink.StringExtensions.toLower(new fm.icelink.SessionDescriptionTypeWrapper(localDescription.getType()).toString()), fm.icelink.StringExtensions.replace(localDescription.getSdpMessage().toString(), "\r\n", "\n"), this.getId()));
                        return promise;
                    }
                    catch (exception) {
                        promise.reject(exception);
                    }
                    finally {
                    }
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setRemoteDescription'>&nbsp;</span>**/
            /**
             <div>
             Sets the remote description.
             </div>
    
            @param {fm.icelink.SessionDescription} remoteDescription The remote description.
            @return {fm.icelink.Future<fm.icelink.SessionDescription>}
            */
            WebRtcConnectionBase.prototype.setRemoteDescription = function (remoteDescription) {
                if (arguments.length == 1) {
                    var promise = new fm.icelink.Promise();
                    try {
                        this.raiseRemoteDescription(remoteDescription);
                        if (this.verifySessionIdAndVersion(promise, remoteDescription)) {
                            if (this.getIsTerminatingOrTerminated()) {
                                throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Cannot set remote description: connection is {0}.", new fm.icelink.ConnectionStateWrapper(this.getState()).toString()));
                            }
                            this.doSetRemoteDescription(promise, remoteDescription);
                            fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Remote session description ({0}) for connection {2}:\n{1}", fm.icelink.StringExtensions.toLower(new fm.icelink.SessionDescriptionTypeWrapper(remoteDescription.getType()).toString()), fm.icelink.StringExtensions.replace(remoteDescription.getSdpMessage().toString(), "\r\n", "\n"), this.getId()));
                        }
                        return promise;
                    }
                    catch (exception) {
                        promise.reject(exception);
                    }
                    finally {
                    }
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setSignallingState'>&nbsp;</span>**/
            /**
             <div>
             Sets the state of the signalling.
             </div>
    
    
            @param {fm.icelink.SignallingState} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setSignallingState = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__signallingState, value))) {
                        this.__signallingState = value;
                        var onSignallingStateChange = this._onSignallingStateChange;
                        if ((!fm.icelink.Global.equals(onSignallingStateChange, null))) {
                            onSignallingStateChange(this.getInstance());
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebRtcConnectionBase.prototype.setState = function () {
                if (arguments.length == 1) {
                    var state = arguments[0];
                    return this.setState(state, null);
                }
                else if (arguments.length == 2) {
                    var state = arguments[0];
                    var error = arguments[1];
                    var flag = false;
                    if (((fm.icelink.Global.equals(state, fm.icelink.ConnectionState.Failing)) && (fm.icelink.Global.equals(error, null)))) {
                        throw new fm.icelink.Exception("Transitioning to the failing state requires an error.");
                    }
                    if (((!fm.icelink.Global.equals(state, fm.icelink.ConnectionState.Failing)) && (!fm.icelink.Global.equals(error, null)))) {
                        throw new fm.icelink.Exception("An error can only be specified when transitioning to the failing state.");
                    }
                    if (!this.__stateMachine.transition(state)) {
                        if (((!fm.icelink.Global.equals(state, this.getState())) && ((!fm.icelink.Global.equals(state, fm.icelink.ConnectionState.Closing)) || ((!fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Closed)) && (!fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Failed)))))) {
                            this.logInvalidStateTransition(state);
                        }
                        return false;
                    }
                    if ((!fm.icelink.Global.equals(error, null))) {
                        this.setError(error);
                    }
                    var id = this.getId();
                    var externalId = this.getExternalId();
                    if ((!fm.icelink.Global.equals(externalId, null))) {
                        id = fm.icelink.StringExtensions.format("{0} (external ID {1})", id, externalId);
                    }
                    flag = (fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Connecting));
                    if (fm.icelink.Log.getIsInfoEnabled()) {
                        if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Connecting))) {
                            fm.icelink.Log.info(fm.icelink.StringExtensions.format("Connection {0} took {1}ms to initialize (offer/answer signalling).", this.getId(), fm.icelink.IntExtensions.toString(this.__stateMachine.getLastStateMillis())));
                        }
                        else {
                            if ((fm.icelink.Global.equals(this.getState(), fm.icelink.ConnectionState.Connected))) {
                                fm.icelink.Log.info(fm.icelink.StringExtensions.format("Connection {0} took {1}ms to connect (connectivity checks and secure key exchange).", this.getId(), fm.icelink.IntExtensions.toString(this.__stateMachine.getLastStateMillis())));
                            }
                        }
                        var description = null;
                        if ((!fm.icelink.Global.equals(error, null))) {
                            description = error.getDescription();
                        }
                        if ((fm.icelink.Global.equals(description, null))) {
                            fm.icelink.Log.info(fm.icelink.StringExtensions.format("Setting connection {0} state to {1}.", id, fm.icelink.StringExtensions.toLower(new fm.icelink.ConnectionStateWrapper(this.getState()).toString())));
                        }
                        else {
                            fm.icelink.Log.info(fm.icelink.StringExtensions.format("Setting connection {0} state to {1}. Error: {2}", id, fm.icelink.StringExtensions.toLower(new fm.icelink.ConnectionStateWrapper(this.getState()).toString()), description));
                        }
                    }
                    this.raiseStateChange();
                    this.processStateChange();
                    if (flag) {
                        this.raiseCachedCandidates();
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setTieBreaker'>&nbsp;</span>**/
            /**
             <div>
             Sets the tie breaker.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setTieBreaker = function (value) {
                if (arguments.length == 1) {
                    this._tieBreaker = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the amount of time (in milliseconds)
             to wait for a connection to establish before
             giving up and closing it. Defaults to 30,000.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setTimeout = function (value) {
                if (arguments.length == 1) {
                    this._timeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcConnectionBase-setTrickleIcePolicy'>&nbsp;</span>**/
            /**
             <div>
             Sets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
             </div>
    
    
            @param {fm.icelink.TrickleIcePolicy} value
            @return {void}
            */
            WebRtcConnectionBase.prototype.setTrickleIcePolicy = function (value) {
                if (arguments.length == 1) {
                    this.__trickleIcePolicy = value;
                    if ((fm.icelink.Global.equals(value, fm.icelink.TrickleIcePolicy.FullTrickle))) {
                        this.setUseTrickleIce(true);
                    }
                    else {
                        if ((fm.icelink.Global.equals(value, fm.icelink.TrickleIcePolicy.NotSupported))) {
                            this.setUseTrickleIce(false);
                        }
                        else {
                            if ((fm.icelink.Global.equals(value, fm.icelink.TrickleIcePolicy.HalfTrickle))) {
                                this.setUseTrickleIce(false);
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.setUseTrickleIce = function (value) {
                if (arguments.length == 1) {
                    this.__useTrickleIce = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcConnectionBase.prototype.verifySessionIdAndVersion = function (promise, remoteDescription) {
                if (arguments.length == 2) {
                    if ((!fm.icelink.Global.equals(this.getRemoteDescription(), null))) {
                        var sessionId = this.getRemoteDescription().getSessionId();
                        var num2 = remoteDescription.getSessionId();
                        var sessionVersion = this.getRemoteDescription().getSessionVersion();
                        var num4 = remoteDescription.getSessionVersion();
                        if ((!fm.icelink.Global.equals(sessionId, num2))) {
                            promise.reject(new fm.icelink.Exception(fm.icelink.StringExtensions.format("Received new remote description with session id {0} and session version {1}, but current remote description has id {2} and version {3}. Cannot set remote description.", [fm.icelink.IntExtensions.toString(num2), fm.icelink.IntExtensions.toString(num4), fm.icelink.IntExtensions.toString(sessionId), fm.icelink.IntExtensions.toString(sessionVersion)])));
                            return false;
                        }
                        if ((sessionVersion >= num4)) {
                            promise.reject(new fm.icelink.Exception(fm.icelink.StringExtensions.format("Received new remote description with session id {0} and session version {1}, but current remote description has id {2} and version {3}. Cannot set remote description.", [fm.icelink.IntExtensions.toString(num2), fm.icelink.IntExtensions.toString(num4), fm.icelink.IntExtensions.toString(sessionId), fm.icelink.IntExtensions.toString(sessionVersion)])));
                            return false;
                        }
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcConnectionBase;
        }(fm.icelink.Dynamic));
        icelink.WebRtcConnectionBase = WebRtcConnectionBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcConnectionBase.ts" />
function makeMediaStream() {
    return new MediaStream();
}

(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcConnection = /** @class */ (function (_super) {
            __extends(WebRtcConnection, _super);
            function WebRtcConnection(external, streams, remoteMedia) {
                var _this = _super.call(this, new Object()) || this;
                _this._remoteMediaTrackCount = 0;
                _this._dataStreamsReady = false;
                _this._mediaStreamsReady = false;
                /** @internal */
                _this._iceCandidateProcessingTimeout = 1000;
                _this.dtmfSender = null;
                _this._external = external;
                _this._remoteMedia = remoteMedia;
                if (!icelink.Plugin.hasWebRtc() && !icelink.Plugin.hasOrtc()) {
                    throw new icelink.Exception('Native browser support for WebRTC/ORTC could not be found.');
                }
                _this._streams = [];
                _this._mediaStreams = [];
                _this._audioStreams = [];
                _this._videoStreams = [];
                _this._dataStreams = [];
                _this._isRenegotiation = false;
                _this._initialized = false;
                _this._localDescription = null;
                _this._remoteDescription = null;
                _this.addStreamsInternal(streams);
                for (var _i = 0, streams_3 = streams; _i < streams_3.length; _i++) {
                    var stream = streams_3[_i];
                    stream.setConnectionId(_this.getId());
                    stream.setStateLock(_this._connectionLock);
                }
                return _this;
            }
            WebRtcConnection.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcConnection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcConnection.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcConnection.prototype.getRemoteMedia = function () {
                return this._remoteMedia;
            };
            WebRtcConnection.prototype.getNativePeerConnection = function () {
                return this._nativePeerConnection;
            };
            WebRtcConnection.prototype.getNativeIceGatherers = function () {
                return this._nativeIceGatherers;
            };
            WebRtcConnection.prototype.getNativeIceTransports = function () {
                return this._nativeIceTransports;
            };
            WebRtcConnection.prototype.getNativeDtlsTransports = function () {
                return this._nativeDtlsTransports;
            };
            WebRtcConnection.prototype.getNativeRtpSenders = function () {
                return this._nativeRtpSenders;
            };
            WebRtcConnection.prototype.getNativeRtpReceivers = function () {
                return this._nativeRtpReceivers;
            };
            WebRtcConnection.prototype.getInstance = function () {
                return this;
            };
            WebRtcConnection.prototype.addStreamInternal = function (stream) {
                stream.setConnection(this);
                if (stream.getType() == icelink.StreamType.Application) {
                    icelink.ArrayExtensions.add(this._dataStreams, stream);
                }
                else {
                    if (stream.getType() == icelink.StreamType.Audio) {
                        icelink.ArrayExtensions.add(this._audioStreams, stream);
                    }
                    else if (stream.getType() == icelink.StreamType.Video) {
                        icelink.ArrayExtensions.add(this._videoStreams, stream);
                    }
                    else {
                        throw new icelink.Exception('Unsupported stream type.');
                    }
                    icelink.ArrayExtensions.add(this._mediaStreams, stream);
                }
                icelink.ArrayExtensions.add(this._streams, stream);
            };
            WebRtcConnection.prototype.addStreamsInternal = function (streams) {
                for (var _i = 0, streams_4 = streams; _i < streams_4.length; _i++) {
                    var stream = streams_4[_i];
                    this.addStreamInternal(stream);
                }
            };
            WebRtcConnection.prototype.processStateChange = function () {
                var _this = this;
                _super.prototype.processStateChange.call(this);
                if (this.getState() == icelink.ConnectionState.Initializing) {
                    window.setTimeout(function () {
                        if (_this.getState() == icelink.ConnectionState.Initializing || _this.getState() == icelink.ConnectionState.Connecting) {
                            if (_this.setState(icelink.ConnectionState.Failing, new icelink.Error(icelink.ErrorCode.ConnectionNotEstablished, new icelink.Exception('Could not establish connectivity with remote peer. Shutting down connection.')))) {
                                _this.doClose();
                                _this.setState(icelink.ConnectionState.Failed);
                            }
                        }
                    }, this.getTimeout());
                }
            };
            WebRtcConnection.prototype.getStreams = function () {
                return this._streams;
            };
            WebRtcConnection.prototype.getMediaStreams = function () {
                return this._mediaStreams;
            };
            WebRtcConnection.prototype.getAudioStreams = function () {
                return this._audioStreams;
            };
            WebRtcConnection.prototype.getVideoStreams = function () {
                return this._videoStreams;
            };
            WebRtcConnection.prototype.getDataStreams = function () {
                return this._dataStreams;
            };
            WebRtcConnection.prototype.getStats = function () {
                var _this = this;
                var promise = new icelink.Promise();
                try {
                    var timestamp_1 = icelink.DateTime.getUtcNow();
                    var stats_1 = new icelink.ConnectionStats();
                    stats_1.setId(this.getId());
                    stats_1.setTimestamp(timestamp_1);
                    if (icelink.Plugin.hasOrtc()) {
                        throw new icelink.Exception('getStats() is not implemented for ORTC.');
                    }
                    else {
                        if (icelink.Util.isFunction(this._nativePeerConnection.getStats)) {
                            var successCallback = function (result) {
                                // normalize for legacy
                                if (icelink.Util.isFunction(result.result)) {
                                    result = result.result();
                                }
                                var report = {};
                                if (icelink.Util.isFunction(result.forEach)) {
                                    result.forEach(function (stat) {
                                        // normalize for legacy
                                        if (icelink.Util.isFunction(stat.names)) {
                                            var record_1 = stat;
                                            stat = {
                                                id: record_1.id,
                                                type: record_1.type
                                            };
                                            record_1.names().forEach(function (name) {
                                                stat[name] = record_1.stat(name);
                                            });
                                        }
                                        report[stat.id] = stat;
                                    });
                                }
                                var audioMediaSenderId = null;
                                var audioMediaReceiverId = null;
                                var audioTransportId = null;
                                var videoMediaSenderId = null;
                                var videoMediaReceiverId = null;
                                var videoTransportId = null;
                                for (var key in report) {
                                    var stat = report[key];
                                    switch (stat.type) {
                                        case 'inboundrtp':
                                        case 'inbound-rtp':
                                            if (stat.mediaType == 'audio') {
                                                audioMediaReceiverId = stat.id;
                                                audioTransportId = stat.transportId;
                                            }
                                            else {
                                                videoMediaReceiverId = stat.id;
                                                videoTransportId = stat.transportId;
                                            }
                                            break;
                                        case 'outboundrtp':
                                        case 'outbound-rtp':
                                            if (stat.mediaType == 'audio') {
                                                audioMediaSenderId = stat.id;
                                                audioTransportId = stat.transportId;
                                            }
                                            else {
                                                videoMediaSenderId = stat.id;
                                                videoTransportId = stat.transportId;
                                            }
                                            break;
                                    }
                                }
                                stats_1.setMediaStreams([]);
                                for (var _i = 0, _a = _this.getStreams(); _i < _a.length; _i++) {
                                    var stream = _a[_i];
                                    if (stream.getType() == icelink.StreamType.Audio || stream.getType() == icelink.StreamType.Video) {
                                        var mediaStream = stream;
                                        var mediaStreamStats = new icelink.MediaStreamStats();
                                        mediaStreamStats.setId(stream.getId());
                                        mediaStreamStats.setTimestamp(timestamp_1);
                                        mediaStreamStats.setType(stream.getType());
                                        mediaStreamStats.setDirection(stream.getDirection());
                                        var mediaSenderId = void 0, mediaReceiverId = void 0, transportId = void 0;
                                        if (stream.getType() == icelink.StreamType.Audio) {
                                            mediaSenderId = audioMediaSenderId;
                                            mediaReceiverId = audioMediaReceiverId;
                                            transportId = audioTransportId;
                                        }
                                        else {
                                            mediaSenderId = videoMediaSenderId;
                                            mediaReceiverId = videoMediaReceiverId;
                                            transportId = videoTransportId;
                                        }
                                        if (mediaStream.getDirection() == icelink.StreamDirection.SendReceive || mediaStream.getDirection() == icelink.StreamDirection.SendOnly) {
                                            mediaStreamStats.setSender(_this.getMediaSenderStats(mediaSenderId, report));
                                        }
                                        if (mediaStream.getDirection() == icelink.StreamDirection.SendReceive || mediaStream.getDirection() == icelink.StreamDirection.ReceiveOnly) {
                                            mediaStreamStats.setReceiver(_this.getMediaReceiverStats(mediaReceiverId, report));
                                        }
                                        mediaStreamStats.setTransport(_this.getTransportStats(transportId, report, mediaStreamStats.getSender(), mediaStreamStats.getReceiver()));
                                        stats_1.getMediaStreams().push(mediaStreamStats);
                                    }
                                    else {
                                        var dataStream = stream;
                                        var dataStreamStats = new icelink.DataStreamStats();
                                        dataStreamStats.setId(stream.getId());
                                        dataStreamStats.setTimestamp(timestamp_1);
                                        dataStreamStats.setType(stream.getType());
                                        dataStreamStats.setDataChannels([]);
                                        for (var _b = 0, _c = dataStream.getChannels(); _b < _c.length; _b++) {
                                            var dataChannel = _c[_b];
                                            var dataChannelStats = new icelink.DataChannelStats();
                                            dataChannelStats.setId(dataChannel.getId());
                                            //dataChannelStats.setBytesSent(0);
                                            //dataChannelStats.setBytesReceived(0);
                                            //dataChannelStats.setMessagesSent(0);
                                            //dataChannelStats.setMessagesReceived(0);
                                            dataChannelStats.setLabel(dataChannel.getLabel());
                                            dataChannelStats.setOrdered(dataChannel.getOrdered());
                                            dataChannelStats.setProtocol(dataChannel.getSubprotocol());
                                            dataChannelStats.setState(dataChannel.getState());
                                            dataStreamStats.getDataChannels().push(dataChannelStats);
                                        }
                                        stats_1.setDataStream(dataStreamStats);
                                    }
                                }
                                promise.resolve(stats_1);
                            };
                            var failureCallback = function (ex) {
                                promise.reject(ex);
                            };
                            try {
                                this._nativePeerConnection.getStats().then(successCallback, failureCallback);
                            }
                            catch (ex) {
                                try {
                                    // deprecated API - Firefox
                                    this._nativePeerConnection.getStats(null, successCallback, failureCallback);
                                }
                                catch (ex) {
                                    // deprecated API - Chrome
                                    this._nativePeerConnection.getStats(successCallback, null, failureCallback);
                                }
                            }
                        }
                        else {
                            throw new icelink.Exception('getStats() is not implemented in this browser.');
                        }
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            WebRtcConnection.prototype.getMediaSenderStats = function (mediaSenderId, report) {
                if (!mediaSenderId) {
                    return null;
                }
                var mediaSender = report[mediaSenderId];
                if (!mediaSender) {
                    return null;
                }
                var mediaSenderStats = new icelink.MediaSenderStats();
                mediaSenderStats.setId(mediaSenderId);
                mediaSenderStats.setTimestamp(icelink.DateTime.getUtcNow());
                mediaSenderStats.setBytesSent(mediaSender.bytesSent || 0);
                mediaSenderStats.setCodec(this.getCodecStats(mediaSender.codecId, report, true));
                mediaSenderStats.setFirCount(mediaSender.firCount || 0);
                mediaSenderStats.setNackCount(mediaSender.nackCount || 0);
                mediaSenderStats.setPacketsSent(mediaSender.packetsSent || 0);
                mediaSenderStats.setPliCount(mediaSender.pliCount || 0);
                mediaSenderStats.setRoundTripTime(Math.round((mediaSender.roundTripTime || 0) * 1000));
                mediaSenderStats.setSynchronizationSource(mediaSender.ssrc || 0);
                mediaSenderStats.setTrack(this.getMediaTrackStats(mediaSender.trackId || mediaSender.mediaTrackId, report));
                return mediaSenderStats;
            };
            WebRtcConnection.prototype.getMediaReceiverStats = function (mediaReceiverId, report) {
                if (!mediaReceiverId) {
                    return null;
                }
                var mediaReceiver = report[mediaReceiverId];
                if (!mediaReceiver) {
                    return null;
                }
                var mediaReceiverStats = new icelink.MediaReceiverStats();
                mediaReceiverStats.setId(mediaReceiverId);
                mediaReceiverStats.setTimestamp(icelink.DateTime.getUtcNow());
                mediaReceiverStats.setBytesReceived(mediaReceiver.bytesReceived || 0);
                mediaReceiverStats.setCodec(this.getCodecStats(mediaReceiver.codecId, report, false));
                mediaReceiverStats.setFirCount(mediaReceiver.firCount || 0);
                mediaReceiverStats.setJitter(Math.round((mediaReceiver.jitter || 0) * 1000));
                mediaReceiverStats.setNackCount(mediaReceiver.nackCount || 0);
                mediaReceiverStats.setPacketsDiscarded(mediaReceiver.packetsDiscarded || 0);
                mediaReceiverStats.setPacketsLost(mediaReceiver.packetsLost || 0);
                mediaReceiverStats.setPacketsReceived(mediaReceiver.packetsReceived || 0);
                mediaReceiverStats.setPliCount(mediaReceiver.pliCount || 0);
                mediaReceiverStats.setSynchronizationSource(mediaReceiver.ssrc || 0);
                mediaReceiverStats.setTrack(this.getMediaTrackStats(mediaReceiver.trackId || mediaReceiver.mediaTrackId, report));
                return mediaReceiverStats;
            };
            WebRtcConnection.prototype.getTransportStats = function (transportId, report, mediaSenderStats, mediaReceiverStats) {
                var transportStats = new icelink.TransportStats();
                transportStats.setId(transportId || null);
                transportStats.setTimestamp(icelink.DateTime.getUtcNow());
                var localCandidateIds = [];
                var remoteCandidateIds = [];
                var candidatePairIds = [];
                var selectedCandidatePairId = null;
                for (var key in report) {
                    var stat = report[key];
                    switch (stat.type) {
                        case 'localcandidate':
                        case 'local-candidate':
                            localCandidateIds.push(stat.id);
                            break;
                        case 'remotecandidate':
                        case 'remote-candidate':
                            remoteCandidateIds.push(stat.id);
                            break;
                        case 'candidatepair':
                        case 'candidate-pair':
                            if (stat.selected) {
                                selectedCandidatePairId = stat.id;
                            }
                            candidatePairIds.push(stat.id);
                            break;
                    }
                }
                transportStats.setCandidatePairs([]);
                for (var _i = 0, candidatePairIds_1 = candidatePairIds; _i < candidatePairIds_1.length; _i++) {
                    var candidatePairId = candidatePairIds_1[_i];
                    transportStats.getCandidatePairs().push(this.getCandidatePairStats(candidatePairId, report));
                }
                transportStats.setLocalCandidates([]);
                for (var _a = 0, localCandidateIds_1 = localCandidateIds; _a < localCandidateIds_1.length; _a++) {
                    var localCandidateId = localCandidateIds_1[_a];
                    transportStats.getLocalCandidates().push(this.getCandidateStats(localCandidateId, report));
                }
                transportStats.setRemoteCandidates([]);
                for (var _b = 0, remoteCandidateIds_1 = remoteCandidateIds; _b < remoteCandidateIds_1.length; _b++) {
                    var remoteCandidateId = remoteCandidateIds_1[_b];
                    transportStats.getRemoteCandidates().push(this.getCandidateStats(remoteCandidateId, report));
                }
                var transport = report[transportId];
                if (transport) {
                    transportStats.setActiveCandidatePair(this.getCandidatePairStats(transport.selectedCandidatePairId || selectedCandidatePairId, report));
                    transportStats.setBytesReceived(transport.bytesReceived || 0);
                    transportStats.setBytesSent(transport.bytesSent || 0);
                    transportStats.setLocalCertificate(this.getCertificateStats(transport.localCertificateId, report));
                    transportStats.setRemoteCertificate(this.getCertificateStats(transport.remoteCertificateId, report));
                    if (transport.rtcpTransportStatsId) {
                        transportStats.setRtcpTransport(this.getTransportStats(transport.rtcpTransportStatsId, report, mediaSenderStats, mediaReceiverStats));
                    }
                    else {
                        transportStats.setRtcpTransport(null);
                    }
                }
                else {
                    transportStats.setActiveCandidatePair(this.getCandidatePairStats(selectedCandidatePairId, report));
                    transportStats.setBytesReceived(0);
                    if (mediaReceiverStats) {
                        transportStats.setBytesReceived(mediaReceiverStats.getBytesReceived());
                    }
                    transportStats.setBytesSent(0);
                    if (mediaSenderStats) {
                        transportStats.setBytesSent(mediaSenderStats.getBytesSent());
                    }
                    transportStats.setLocalCertificate(null);
                    transportStats.setRemoteCertificate(null);
                    transportStats.setRtcpTransport(null);
                }
                return transportStats;
            };
            WebRtcConnection.prototype.getCertificateStats = function (certificateId, report) {
                if (!certificateId) {
                    return null;
                }
                var certificate = report[certificateId];
                if (!certificate) {
                    return null;
                }
                var certificateStats = new icelink.CertificateStats();
                certificateStats.setId(certificateId);
                certificateStats.setTimestamp(icelink.DateTime.getUtcNow());
                certificateStats.setCertificateBase64(certificate.base64Certificate || null);
                certificateStats.setFingerprint(certificate.fingerprint || null);
                certificateStats.setFingerprintAlgorithm(certificate.fingerprintAlgorithm || null);
                return certificateStats;
            };
            WebRtcConnection.prototype.getCandidateStats = function (candidateId, report) {
                if (!candidateId) {
                    return null;
                }
                var candidate = report[candidateId];
                if (!candidate) {
                    return null;
                }
                var candidateStats = new icelink.CandidateStats();
                candidateStats.setId(candidateId);
                candidateStats.setTimestamp(icelink.DateTime.getUtcNow());
                candidateStats.setIPAddress(candidate.ip || candidate.ipAddress || null);
                candidateStats.setPort(candidate.port || candidate.portNumber || -1);
                candidateStats.setPriority(candidate.priority || -1);
                candidateStats.setProtocol(icelink.ProtocolType.Unknown);
                switch (candidate.protocol || candidate.transport) {
                    case 'UDP':
                    case 'udp':
                        candidateStats.setProtocol(icelink.ProtocolType.Udp);
                        break;
                    case 'TCP':
                    case 'tcp':
                        candidateStats.setProtocol(icelink.ProtocolType.Tcp);
                        break;
                }
                candidateStats.setRelatedIPAddress(candidate.relatedIP || candidate.relatedIPAddress || null);
                candidateStats.setRelatedPort(candidate.relatedPort || candidate.relatedPortNumber || -1);
                candidateStats.setType(icelink.CandidateType.Unknown);
                switch (candidate.candidateType) {
                    case 'host':
                        candidateStats.setType(icelink.CandidateType.Host);
                        break;
                    case 'srflx':
                        candidateStats.setType(icelink.CandidateType.ServerReflexive);
                        break;
                    case 'relay':
                        candidateStats.setType(icelink.CandidateType.Relayed);
                        break;
                    case 'prflx':
                        candidateStats.setType(icelink.CandidateType.PeerReflexive);
                        break;
                }
                return candidateStats;
            };
            WebRtcConnection.prototype.getCandidatePairStats = function (candidatePairId, report) {
                if (!candidatePairId) {
                    return null;
                }
                var candidatePair = report[candidatePairId];
                if (!candidatePair) {
                    return null;
                }
                var candidatePairStats = new icelink.CandidatePairStats();
                candidatePairStats.setId(candidatePairId);
                candidatePairStats.setTimestamp(icelink.DateTime.getUtcNow());
                candidatePairStats.setBytesReceived(candidatePair.bytesReceived || 0);
                candidatePairStats.setBytesSent(candidatePair.bytesSent || 0);
                candidatePairStats.setCurrentRoundTripTime(Math.round((candidatePair.currentRoundTripTime || 0) * 1000));
                candidatePairStats.setLocalCandidateId(candidatePair.localCandidateId || null);
                candidatePairStats.setNominated(candidatePair.nominated || false);
                candidatePairStats.setPriority(candidatePair.priority || -1);
                candidatePairStats.setRemoteCandidateId(candidatePair.remoteCandidateId || null);
                candidatePairStats.setState(icelink.CandidatePairState.New);
                switch (candidatePair.state) {
                    case 'frozen':
                        candidatePairStats.setState(icelink.CandidatePairState.New);
                        break;
                    case 'waiting':
                        candidatePairStats.setState(icelink.CandidatePairState.Waiting);
                        break;
                    case 'inprogress':
                        candidatePairStats.setState(icelink.CandidatePairState.InProgress);
                        break;
                    case 'failed':
                        candidatePairStats.setState(icelink.CandidatePairState.Failed);
                        break;
                    case 'succeeded':
                        candidatePairStats.setState(icelink.CandidatePairState.Succeeded);
                        break;
                    case 'cancelled':
                        candidatePairStats.setState(icelink.CandidatePairState.Closed);
                        break;
                }
                candidatePairStats.setTotalRoundTripTime(Math.round((candidatePair.totalRoundTripTime || 0) * 1000));
                candidatePairStats.setTransportId(candidatePair.transportId || null);
                return candidatePairStats;
            };
            WebRtcConnection.prototype.getCodecStats = function (codecId, report, sender) {
                if (!codecId) {
                    return null;
                }
                var codec = report[codecId];
                if (!codec) {
                    return null;
                }
                var name = codec.codec || codec.mimeType || codec.name;
                if (name && (name.indexOf('audio/') == 0 || name.indexOf('video/') == 0)) {
                    name = name.substr(6);
                }
                var codecStats = new icelink.CodecStats();
                codecStats.setId(codecId);
                if (sender) {
                    codecStats.setCodecType(icelink.CodecType.Encode);
                }
                else {
                    codecStats.setCodecType(icelink.CodecType.Decode);
                }
                codecStats.setTimestamp(icelink.DateTime.getUtcNow());
                codecStats.setChannelCount(codec.channels || codec.channelCount || 0);
                codecStats.setClockRate(codec.clockRate || 0);
                codecStats.setName(name || null);
                codecStats.setParameters(codec.parameters || null);
                codecStats.setPayloadType(codec.payloadType || -1);
                if (codecStats.getName() == 'opus' && codecStats.getChannelCount() == 0) {
                    codecStats.setChannelCount(2);
                }
                return codecStats;
            };
            WebRtcConnection.prototype.getMediaTrackStats = function (mediaTrackId, report) {
                if (!mediaTrackId) {
                    return null;
                }
                var mediaTrack = report[mediaTrackId];
                if (!mediaTrack) {
                    return null;
                }
                var mediaTrackStats = new icelink.MediaTrackStats();
                mediaTrackStats.setId(mediaTrackId);
                mediaTrackStats.setTimestamp(icelink.DateTime.getUtcNow());
                mediaTrackStats.setDetached(mediaTrack.detached || false);
                mediaTrackStats.setFrameHeight(mediaTrack.frameHeight || 0);
                mediaTrackStats.setFrameRate(mediaTrack.framesPerSecond || mediaTrack.frameRate || 0);
                mediaTrackStats.setFrameWidth(mediaTrack.frameWidth || 0);
                mediaTrackStats.setFramesCorrupted(mediaTrack.framesCorrupted || 0);
                mediaTrackStats.setFramesDecoded(mediaTrack.framesDecoded || 0);
                mediaTrackStats.setFramesDropped(mediaTrack.framesDropped || 0);
                mediaTrackStats.setFramesEncoded(mediaTrack.framesEncoded || 0);
                mediaTrackStats.setFramesReceived(mediaTrack.framesReceived || 0);
                mediaTrackStats.setFramesSent(mediaTrack.framesSent || 0);
                mediaTrackStats.setStopped(mediaTrack.ended || mediaTrack.stopped || false);
                mediaTrackStats.setSynchronizationSources(mediaTrack.ssrcIds || []);
                return mediaTrackStats;
            };
            WebRtcConnection.prototype.initialize = function () {
                var _this = this;
                this.setState(icelink.ConnectionState.Initializing);
                var allowTcp = (this._ortcSupportsTcp || (icelink.Plugin.hasWebRtc() && !icelink.Plugin.hasOrtc()));
                var servers = [];
                for (var _i = 0, _a = this.getIceServers(); _i < _a.length; _i++) {
                    var server = _a[_i];
                    if (icelink.StringExtensions.endsWith(server.getUrl(), '?transport=udp')) {
                        servers.push(server);
                    }
                    else if (icelink.StringExtensions.endsWith(server.getUrl(), '?transport=tcp')) {
                        if (allowTcp) {
                            servers.push(server);
                        }
                    }
                    else {
                        if (server.getIsStun()) {
                            servers.push(new icelink.IceServer(server.getUrl() + '?transport=udp'));
                        }
                        else {
                            servers.push(new icelink.IceServer(server.getUrl() + '?transport=udp', server.getUsername(), server.getPassword()));
                            if (allowTcp) {
                                servers.push(new icelink.IceServer(server.getUrl() + '?transport=tcp', server.getUsername(), server.getPassword()));
                            }
                        }
                    }
                }
                var rtcServers = [];
                for (var _b = 0, servers_1 = servers; _b < servers_1.length; _b++) {
                    var server = servers_1[_b];
                    icelink.Log.debug('Using ' + server.getUrl() + '.');
                    var rtcServer = {};
                    rtcServer.urls = [server.getUrl()];
                    if (server.getIsTurn()) {
                        rtcServer.username = server.getUsername();
                        rtcServer.credential = server.getPassword();
                    }
                    rtcServers.push(rtcServer);
                }
                var mediaStreamCount = this._mediaStreams.length;
                var dataChannelCount = 0;
                for (var _c = 0, _d = this._dataStreams; _c < _d.length; _c++) {
                    var dataStream = _d[_c];
                    dataChannelCount += dataStream.getChannels().length;
                }
                if (icelink.Plugin.hasOrtc()) {
                    // TODO: data channels
                    if (dataChannelCount > 0) {
                        throw new icelink.Exception('ORTC does not currently support data channels.');
                    }
                    this._remoteNativeMediaStream = makeMediaStream();
                    this._nativeIceGatherers = [];
                    this._nativeIceTransports = [];
                    this._nativeDtlsTransports = [];
                    this._nativeRtpSenders = [];
                    this._nativeRtpReceivers = [];
                    this._rtpKinds = [];
                    this._localDescription = null;
                    this._remoteDescription = null;
                    this._gatheringState = icelink.IceGatheringState.New;
                    this._iceConnectionState = icelink.IceConnectionState.New;
                    this._transportsRemaining = 0;
                    // TODO: allow BUNDLE
                    if (mediaStreamCount > 0) {
                        var mediaStreams = this.getMediaStreams();
                        var elements = [];
                        var index = 0;
                        for (var _e = 0, mediaStreams_1 = mediaStreams; _e < mediaStreams_1.length; _e++) {
                            var mediaStream = mediaStreams_1[_e];
                            var streamType = mediaStream.getType();
                            var localTrack = mediaStream.getLocalTrack();
                            var mediaStreamTrack = (localTrack == null) ? null : localTrack._getMediaStreamTrack();
                            var streamKind = (streamType == icelink.StreamType.Audio) ? 'audio' : 'video';
                            if (streamType == icelink.StreamType.Audio || streamType == icelink.StreamType.Video) {
                                elements.push({
                                    track: mediaStreamTrack,
                                    kind: streamKind,
                                    index: index++
                                });
                            }
                        }
                        for (var _f = 0, elements_1 = elements; _f < elements_1.length; _f++) {
                            var element = elements_1[_f];
                            this._remoteNativeMediaStream.addTrack(this.initializeTrack(element, rtcServers));
                        }
                    }
                }
                else {
                    this._discoveredCandidates = [];
                    this._gatheringState = icelink.IceGatheringState.New;
                    this._iceConnectionState = icelink.IceConnectionState.New;
                    try {
                        this._nativePeerConnection = new RTCPeerConnection({
                            iceServers: rtcServers,
                            bundlePolicy: 'max-compat'
                        });
                    }
                    catch (error) {
                        try {
                            // try with a string instead of an array
                            for (var _g = 0, rtcServers_1 = rtcServers; _g < rtcServers_1.length; _g++) {
                                var rtcServer_1 = rtcServers_1[_g];
                                if (rtcServer_1.urls) {
                                    rtcServer_1.urls = rtcServer_1.urls[0];
                                }
                            }
                            this._nativePeerConnection = new RTCPeerConnection({
                                iceServers: rtcServers,
                                bundlePolicy: 'max-compat'
                            });
                        }
                        catch (error) {
                            // try with the deprecated API
                            for (var _h = 0, rtcServers_2 = rtcServers; _h < rtcServers_2.length; _h++) {
                                var rtcServer_2 = rtcServers_2[_h];
                                if (rtcServer_2.urls) {
                                    rtcServer_2.url = rtcServer_2.urls;
                                }
                            }
                            delete rtcServer.urls;
                            this._nativePeerConnection = new RTCPeerConnection({
                                iceServers: rtcServers,
                                bundlePolicy: 'max-compat'
                            });
                        }
                    }
                    this._nativePeerConnection.onicegatheringstatechange = function (event) {
                        switch (_this._nativePeerConnection.iceGatheringState) {
                            case "new":
                                _this.setGatheringState(icelink.IceGatheringState.New);
                                break;
                            case "complete":
                                _this.setGatheringState(icelink.IceGatheringState.Complete);
                                break;
                            case "gathering":
                                _this.setGatheringState(icelink.IceGatheringState.Gathering);
                                break;
                        }
                    };
                    this._nativePeerConnection.oniceconnectionstatechange = function (event) {
                        switch (_this._nativePeerConnection.iceConnectionState) {
                            case "new":
                                _this.setIceConnectionState(icelink.IceConnectionState.New);
                                break;
                            case "checking":
                                _this.setIceConnectionState(icelink.IceConnectionState.Checking);
                                break;
                            case "connected":
                                _this.setIceConnectionState(icelink.IceConnectionState.Connected);
                                break;
                            case "completed":
                                _this.setIceConnectionState(icelink.IceConnectionState.Completed);
                                break;
                            case "failed":
                                _this.setIceConnectionState(icelink.IceConnectionState.Failed);
                                break;
                            case "disconnected":
                                _this.setIceConnectionState(icelink.IceConnectionState.Disconnected);
                                break;
                            case "closed":
                                _this.setIceConnectionState(icelink.IceConnectionState.Closed);
                                break;
                        }
                    };
                    this._nativePeerConnection.onicecandidate = function (event) {
                        if (event.candidate) {
                            var sdpCandidateString = event.candidate.candidate;
                            if (!icelink.StringExtensions.startsWith(sdpCandidateString, 'a=')) {
                                sdpCandidateString = 'a=' + sdpCandidateString;
                            }
                            var localCandidate = new icelink.Candidate();
                            localCandidate.setSdpMediaIndex(event.candidate.sdpMLineIndex);
                            localCandidate.setSdpCandidateAttribute(icelink.sdp.Attribute.parse(sdpCandidateString));
                            var trickleIceSupported = _this.getUseTrickleIce();
                            if (!trickleIceSupported) {
                                if (_this.validateCandidate(localCandidate)) {
                                    _this._discoveredCandidates.push(localCandidate);
                                }
                            }
                            else {
                                if (_this.validateCandidate(localCandidate)) {
                                    _this.raiseLocalCandidate(localCandidate);
                                }
                            }
                        }
                    };
                    var dataChannelsConnected_1 = 0;
                    this._dataStreamsReady = (dataChannelsConnected_1 == dataChannelCount);
                    var processDataChannelStateChange_1 = function (dataChannel) {
                        var dataChannelState = dataChannel.getState();
                        if (dataChannelState == icelink.DataChannelState.Connected) {
                            dataChannelsConnected_1++;
                        }
                        else if (dataChannelState == icelink.DataChannelState.Closed) {
                            dataChannelsConnected_1--;
                            if (dataChannelsConnected_1 == 0 && mediaStreamCount == 0) {
                                if (_this.setState(icelink.ConnectionState.Closing)) {
                                    _this.doClose();
                                    _this.setState(icelink.ConnectionState.Closed);
                                }
                            }
                        }
                        else if (dataChannelState == icelink.DataChannelState.Failed) {
                            dataChannelsConnected_1--;
                            if (dataChannelsConnected_1 == 0 && mediaStreamCount == 0) {
                                if (_this.setState(icelink.ConnectionState.Failing, new icelink.Error(icelink.ErrorCode.ReliableDataChannelSendError, new icelink.Exception('Data channel failed.')))) {
                                    _this.doClose();
                                    _this.setState(icelink.ConnectionState.Failed);
                                }
                            }
                        }
                        _this._dataStreamsReady = (dataChannelsConnected_1 == dataChannelCount);
                        if (_this._dataStreamsReady && _this._mediaStreamsReady && _this.getState() == icelink.ConnectionState.Connecting) {
                            _this.setState(icelink.ConnectionState.Connected);
                        }
                    };
                    var _loop_1 = function (dataStream) {
                        if (this_1._offerer) {
                            for (var _i = 0, _a = dataStream.getChannels(); _i < _a.length; _i++) {
                                var dataChannel = _a[_i];
                                var rtcDataChannel = this_1._nativePeerConnection.createDataChannel(dataChannel.getLabel(), {
                                    ordered: dataChannel.getOrdered(),
                                    //maxPacketLifeTime?: number,
                                    //maxRetransmits?: number,
                                    //protocol: dataChannel.getSubprotocol(),
                                    negotiated: false
                                });
                                dataChannel.setNativeDataChannel(rtcDataChannel);
                                dataChannel.addOnStateChange(processDataChannelStateChange_1);
                            }
                        }
                        else {
                            this_1._nativePeerConnection.ondatachannel = function (event) {
                                var rtcDataChannel = event.channel;
                                for (var _i = 0, _a = dataStream.getChannels(); _i < _a.length; _i++) {
                                    var dataChannel = _a[_i];
                                    if (dataChannel.getLabel() == rtcDataChannel.label) {
                                        dataChannel.setNativeDataChannel(rtcDataChannel);
                                        dataChannel.addOnStateChange(processDataChannelStateChange_1);
                                    }
                                }
                            };
                        }
                    };
                    var this_1 = this;
                    for (var _j = 0, _k = this._dataStreams; _j < _k.length; _j++) {
                        var dataStream = _k[_j];
                        _loop_1(dataStream);
                    }
                    this._mediaStreamsReady = (mediaStreamCount == 0);
                    if (mediaStreamCount > 0) {
                        var pendingNativeMediaStreams_1 = [];
                        var processNativeMediaStream_1 = function (nativeMediaStreams) {
                            pendingNativeMediaStreams_1 = pendingNativeMediaStreams_1.concat(nativeMediaStreams);
                            var remainingTracks = _this._remoteMediaTrackCount;
                            var nativeAudioStream = null;
                            var nativeVideoStream = null;
                            for (var _i = 0, pendingNativeMediaStreams_2 = pendingNativeMediaStreams_1; _i < pendingNativeMediaStreams_2.length; _i++) {
                                var pendingNativeMediaStream = pendingNativeMediaStreams_2[_i];
                                var nativeAudioTracks = pendingNativeMediaStream.getAudioTracks();
                                if (nativeAudioTracks.length) {
                                    nativeAudioStream = pendingNativeMediaStream;
                                    remainingTracks -= nativeAudioTracks.length;
                                }
                                var nativeVideoTracks = pendingNativeMediaStream.getVideoTracks();
                                if (nativeVideoTracks.length > 0) {
                                    nativeVideoStream = pendingNativeMediaStream;
                                    remainingTracks -= nativeVideoTracks.length;
                                }
                                if (remainingTracks == 0) {
                                    // ready to go
                                    _this._remoteMedia._setMediaStreams(nativeAudioStream, nativeVideoStream);
                                    var remoteAudioTracks = _this._remoteMedia.getAudioTracks();
                                    for (var i = 0; i < remoteAudioTracks.length; i++) {
                                        if (i < _this._audioStreams.length) {
                                            var audioStream = _this._audioStreams[i];
                                            if (!audioStream.getRemoteTrack()) {
                                                audioStream.setRemoteTrack(remoteAudioTracks[i]);
                                            }
                                        }
                                    }
                                    var remoteVideoTracks = _this._remoteMedia.getVideoTracks();
                                    for (var i = 0; i < remoteVideoTracks.length; i++) {
                                        if (i < _this._videoStreams.length) {
                                            var videoStream = _this._videoStreams[i];
                                            if (!videoStream.getRemoteTrack()) {
                                                videoStream.setRemoteTrack(remoteVideoTracks[i]);
                                            }
                                        }
                                    }
                                    _this._mediaStreamsReady = true;
                                    if (_this._dataStreamsReady && _this._mediaStreamsReady && _this.getState() == icelink.ConnectionState.Connecting) {
                                        _this.setState(icelink.ConnectionState.Connected);
                                    }
                                }
                            }
                        };
                        if ('ontrack' in this._nativePeerConnection) {
                            this._nativePeerConnection.ontrack = function (event) {
                                processNativeMediaStream_1(event.streams);
                            };
                        }
                        else {
                            // deprecated API
                            this._nativePeerConnection.onaddstream = function (event) {
                                processNativeMediaStream_1([event.stream]);
                            };
                        }
                    }
                    var useAddTrack = icelink.Util.isFunction(this._nativePeerConnection.addTrack);
                    var addedStreams = [];
                    for (var _l = 0, _m = this._mediaStreams; _l < _m.length; _l++) {
                        var mediaStream = _m[_l];
                        var localMediaTrack = mediaStream.getLocalTrack();
                        if (localMediaTrack) {
                            var localMedia = localMediaTrack.getMedia();
                            var nativeMediaStreamTrack = localMediaTrack._getMediaStreamTrack();
                            if (nativeMediaStreamTrack) {
                                var kind = nativeMediaStreamTrack.kind;
                                var nativeMediaStream = (kind == 'audio' ? localMedia._getAudioMediaStream() : localMedia._getVideoMediaStream());
                                if (nativeMediaStream) {
                                    if (useAddTrack) {
                                        this._nativePeerConnection.addTrack(nativeMediaStreamTrack, nativeMediaStream);
                                    }
                                    else {
                                        // legacy
                                        if (!icelink.ArrayExtensions.contains(addedStreams, nativeMediaStream)) {
                                            this._nativePeerConnection.addStream(nativeMediaStream);
                                            addedStreams.push(nativeMediaStream);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var deadStreamTimer_1 = 0;
                    this._nativePeerConnection.oniceconnectionstatechange = function (event) {
                        if (_this._nativePeerConnection.iceConnectionState == 'connected' || _this._nativePeerConnection.iceConnectionState == 'completed') {
                            if (deadStreamTimer_1) {
                                icelink.Log.debug('Connectivity checks have restored.');
                                window.clearTimeout(deadStreamTimer_1);
                                deadStreamTimer_1 = null;
                            }
                            if (_this._dataStreamsReady && _this._mediaStreamsReady && _this.getState() == icelink.ConnectionState.Connecting) {
                                _this.setState(icelink.ConnectionState.Connected);
                            }
                        }
                        if (_this._nativePeerConnection.iceConnectionState == 'disconnected' && _this.getState() == icelink.ConnectionState.Connected) {
                            icelink.Log.debug('Some connectivity checks have failed. Monitoring for dead stream.');
                            if (!deadStreamTimer_1) {
                                deadStreamTimer_1 = window.setTimeout(function () {
                                    deadStreamTimer_1 = null;
                                    if (_this.setState(icelink.ConnectionState.Failing, new icelink.Error(icelink.ErrorCode.ConnectionDeadStream, new icelink.Exception('Dead stream detected.')))) {
                                        _this.doClose();
                                        _this.setState(icelink.ConnectionState.Failed);
                                    }
                                }, _this.getDeadStreamTimeout());
                            }
                        }
                    };
                }
                this._initialized = true;
            };
            // private localStreamsWithCandidatesDone: number = 0;
            WebRtcConnection.prototype.initializeTrack = function (element, rtcServers) {
                var _this = this;
                var iceGatherer = this.createIceGatherer(rtcServers);
                this._nativeIceGatherers.push(iceGatherer);
                iceGatherer.onlocalcandidate = function (event) {
                    var rtcCandidate = event.candidate;
                    /*if (this.getTrickleIceSupport() == TrickleIceSupportPolicy.NotSupported) {
                        if (Object.keys(rtcCandidate).length > 0) {
                            this._localParams.medias[track.mediaIndex].candidates.push(rtcCandidate);
                        } else {
                            this._localStreamsWithCandidatesDone++;
                            if (this._localStreamsWithCandidatesDone == this._iceGatherers.length) {
                                this.createInternalSuccess(this.paramsToSdp(this._localParams));
                            }
                        }
                    } else {*/
                    if (Object.keys(rtcCandidate).length > 0) {
                        var localCandidate = new icelink.Candidate();
                        localCandidate.setSdpMediaIndex(element.index);
                        localCandidate.setSdpCandidateAttribute(_this.rtcCandidateToSdpCandidateAttribute(rtcCandidate));
                        if (_this.validateCandidate(localCandidate)) {
                            _this.raiseLocalCandidate(localCandidate);
                        }
                        //}
                    }
                };
                var iceTransport = new RTCIceTransport();
                this._nativeIceTransports.push(iceTransport);
                var dtlsTransport = new RTCDtlsTransport(iceTransport);
                this._nativeDtlsTransports.push(dtlsTransport);
                if (element.track && element.track.readyState != 'ended') {
                    var rtpSender = new RTCRtpSender(element.track, dtlsTransport);
                    this._nativeRtpSenders.push(rtpSender);
                }
                else {
                    this._nativeRtpSenders.push(null);
                }
                var rtpReceiver = new RTCRtpReceiver(dtlsTransport, element.kind);
                this._nativeRtpReceivers.push(rtpReceiver);
                this._rtpKinds.push(element.kind);
                return rtpReceiver.track;
            };
            WebRtcConnection.prototype.validateCandidate = function (candidate) {
                if (this.getIceGatherPolicy() == icelink.IceGatherPolicy.NoHost) {
                    return (candidate.getSdpCandidateAttribute().getCandidateType() !== icelink.sdp.ice.CandidateType.getHost());
                }
                else if (this.getIceGatherPolicy() == icelink.IceGatherPolicy.Relay) {
                    return (candidate.getSdpCandidateAttribute().getCandidateType() === icelink.sdp.ice.CandidateType.getRelayed());
                }
                return true;
            };
            WebRtcConnection.prototype.createIceGatherer = function (rtcServers) {
                rtcServers = rtcServers.slice(0); // clone array
                var iceGatherer;
                var gatherPolicy = 'all';
                if (this.getIceGatherPolicy() == icelink.IceGatherPolicy.NoHost) {
                    gatherPolicy = 'nohost';
                }
                else if (this.getIceGatherPolicy() == icelink.IceGatherPolicy.Relay) {
                    gatherPolicy = 'relayonly';
                }
                try {
                    for (var _i = 0, rtcServers_3 = rtcServers; _i < rtcServers_3.length; _i++) {
                        var rtcServer = rtcServers_3[_i];
                        if (icelink.Util.isArray(rtcServer.urls)) {
                            rtcServer.urls = rtcServer.urls[0];
                        }
                    }
                    iceGatherer = new RTCIceGatherer({
                        gatherPolicy: 'all',
                        iceServers: rtcServers
                    });
                }
                catch (error) {
                    try {
                        // ORTC doesn't like STUN && TURNS right now
                        var i = rtcServers.length;
                        while (i--) {
                            if (icelink.StringExtensions.startsWith(rtcServers[i].urls, 'stun:')) {
                                icelink.Log.info(icelink.StringExtensions.format("ORTC currently does not support STUN protocol. Removing {0} from the list of ICE servers.", rtcServers[i].urls));
                                rtcServers.splice(i, 1);
                            }
                            else if (icelink.StringExtensions.startsWith(rtcServers[i].urls, 'turns:')) {
                                icelink.Log.info(icelink.StringExtensions.format("ORTC currently does not support TURNS protocol. Removing {0} from the list of ICE servers.", rtcServers[i].urls));
                                rtcServers.splice(i, 1);
                            }
                        }
                        iceGatherer = new RTCIceGatherer({
                            gatherPolicy: 'all',
                            iceServers: rtcServers
                        });
                    }
                    catch (error) {
                        try {
                            for (var _a = 0, rtcServers_4 = rtcServers; _a < rtcServers_4.length; _a++) {
                                var rtcServer = rtcServers_4[_a];
                                if (rtcServer.username == '') {
                                    rtcServer.username = 'unspecified';
                                }
                                if (rtcServer.credential == '') {
                                    rtcServer.credential = 'unspecified';
                                }
                            }
                            iceGatherer = new RTCIceGatherer({
                                gatherPolicy: 'all',
                                iceServers: rtcServers
                            });
                        }
                        catch (error) {
                            //Likely this is due to the fact that Edge does not support multiple TURN servers with the same transport type.
                            //Workaround till this is fixed is to strip all the TURN servers but the first.
                            //cf. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10163458/
                            try {
                                if (rtcServers.length > 1) {
                                    var server = rtcServers[0];
                                    rtcServers = new Array(1);
                                    rtcServers[0] = server;
                                    iceGatherer = new RTCIceGatherer({
                                        gatherPolicy: 'all',
                                        iceServers: rtcServers
                                    });
                                }
                                else {
                                    icelink.Log.error('Could not create ORTC IceGatherer.', error);
                                    throw error;
                                }
                            }
                            catch (error) {
                                icelink.Log.error('Could not create ORTC IceGatherer.', error);
                                throw error;
                            }
                        }
                    }
                }
                return iceGatherer;
            };
            WebRtcConnection.prototype.sessionDescriptionTypeToString = function (typeEnum) {
                return (typeEnum == icelink.SessionDescriptionType.Offer ? 'offer' : 'answer');
            };
            WebRtcConnection.prototype.sessionDescriptionTypeToEnum = function (typeString) {
                return (typeString == 'offer' ? icelink.SessionDescriptionType.Offer : icelink.SessionDescriptionType.Answer);
            };
            WebRtcConnection.prototype.webrtcCandidateToCandidate = function (webrtcCandidate) {
                var candidate = new icelink.Candidate();
                candidate.setSdpCandidateAttribute(icelink.sdp.Attribute.parse(webrtcCandidate.candidate));
                candidate.setSdpMediaIndex(webrtcCandidate.sdpMLineIndex);
                return candidate;
            };
            WebRtcConnection.prototype.webrtcCandidateFromCandidate = function (candidate) {
                return new RTCIceCandidate({
                    candidate: candidate.getSdpCandidateAttribute().toString(),
                    sdpMLineIndex: candidate.getSdpMediaIndex()
                });
            };
            WebRtcConnection.prototype.webrtcSessionDescriptionToSessionDescription = function (webrtcSessionDescription) {
                var sessionDescription = new icelink.SessionDescription();
                sessionDescription.setSdpMessage(icelink.sdp.Message.parse(webrtcSessionDescription.sessionDescription.sdp));
                sessionDescription.setType(this.sessionDescriptionTypeToEnum(webrtcSessionDescription.sessionDescription.type));
                sessionDescription.setTieBreaker(webrtcSessionDescription.tieBreaker);
                return sessionDescription;
            };
            WebRtcConnection.prototype.webrtcSessionDescriptionFromSessionDescription = function (sessionDescription) {
                return {
                    sessionDescription: new RTCSessionDescription({
                        sdp: sessionDescription.getSdpMessage().toString(),
                        type: this.sessionDescriptionTypeToString(sessionDescription.getType())
                    }),
                    tieBreaker: sessionDescription.getTieBreaker()
                };
            };
            WebRtcConnection.prototype.rtcCandidateToSdpCandidateAttribute = function (rtcCandidate) {
                var sdpCandidateAttribute = new icelink.sdp.ice.CandidateAttribute();
                sdpCandidateAttribute.setFoundation(rtcCandidate.foundation);
                sdpCandidateAttribute.setComponentId(1); // TODO: allow disabling of RTP/RTCP multiplexing
                sdpCandidateAttribute.setProtocol(rtcCandidate.protocol);
                sdpCandidateAttribute.setPriority(rtcCandidate.priority);
                sdpCandidateAttribute.setConnectionAddress(rtcCandidate.ip);
                sdpCandidateAttribute.setPort(rtcCandidate.port);
                sdpCandidateAttribute.setCandidateType(rtcCandidate.type);
                if (rtcCandidate.relatedAddress) {
                    sdpCandidateAttribute.setRelatedAddress(rtcCandidate.relatedAddress);
                    sdpCandidateAttribute.setRelatedPort(rtcCandidate.relatedPort);
                }
                return sdpCandidateAttribute;
            };
            WebRtcConnection.prototype.rtcCandidateFromSdpCandidateAttribute = function (sdpCandidateAttribute) {
                return {
                    foundation: sdpCandidateAttribute.getFoundation(),
                    protocol: sdpCandidateAttribute.getProtocol(),
                    priority: sdpCandidateAttribute.getPriority(),
                    ip: sdpCandidateAttribute.getConnectionAddress(),
                    port: sdpCandidateAttribute.getPort(),
                    type: sdpCandidateAttribute.getCandidateType(),
                    relatedAddress: sdpCandidateAttribute.getRelatedAddress(),
                    relatedPort: sdpCandidateAttribute.getRelatedPort(),
                    tcpType: (sdpCandidateAttribute.getProtocol() == icelink.sdp.ice.TransportProtocol.getTcp() ? 'active' : undefined)
                };
            };
            WebRtcConnection.prototype.ortcCandidateToCandidate = function (ortcCandidate) {
                var candidate = new icelink.Candidate();
                candidate.setSdpCandidateAttribute(this.rtcCandidateToSdpCandidateAttribute(ortcCandidate.candidate));
                candidate.setSdpMediaIndex(ortcCandidate.mediaIndex);
                return candidate;
            };
            WebRtcConnection.prototype.ortcCandidateFromCandidate = function (candidate) {
                return {
                    candidate: this.rtcCandidateFromSdpCandidateAttribute(candidate.getSdpCandidateAttribute()),
                    mediaIndex: candidate.getSdpMediaIndex()
                };
            };
            WebRtcConnection.prototype.ortcSessionDescriptionToSessionDescription = function (ortcSessionDescription) {
                var sdpMessage = new icelink.sdp.Message(new icelink.sdp.Origin('127.0.0.1'), 'Frozen Mountain ORTC');
                //TODO: test this
                //message.addSessionAttribute(new sdp.ice.OptionsAttribute(['trickle']));
                for (var _i = 0, _a = ortcSessionDescription.mediaDescriptions; _i < _a.length; _i++) {
                    var ortcMediaDescription = _a[_i];
                    var transportPort = 9;
                    var connectionAddress = "0.0.0.0";
                    var codecPayloadTypes = [];
                    for (var _b = 0, _c = ortcMediaDescription.codecCaps; _b < _c.length; _b++) {
                        var ortcCodecCap = _c[_b];
                        codecPayloadTypes.push(ortcCodecCap.preferredPayloadType);
                    }
                    var sdpMediaDescription = new icelink.sdp.MediaDescription(new icelink.sdp.Media(ortcMediaDescription.kind, transportPort, 'RTP/SAVPF', codecPayloadTypes.join(' ')));
                    sdpMediaDescription.setConnectionData(new icelink.sdp.ConnectionData(connectionAddress));
                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtcp.Attribute(transportPort, connectionAddress));
                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.ice.UfragAttribute(ortcMediaDescription.iceParams.usernameFragment));
                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.ice.PasswordAttribute(ortcMediaDescription.iceParams.password));
                    for (var _d = 0, _e = ortcMediaDescription.dtlsParams.fingerprints; _d < _e.length; _d++) {
                        var fingerprint = _e[_d];
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.ice.FingerprintAttribute(fingerprint.algorithm, fingerprint.value));
                    }
                    if (ortcMediaDescription.dtlsParams.role == 'auto') {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.SetupAttribute(icelink.sdp.Setup.getActPass()));
                    }
                    else if (ortcMediaDescription.dtlsParams.role == 'client') {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.SetupAttribute(icelink.sdp.Setup.getActive()));
                    }
                    else if (ortcMediaDescription.dtlsParams.role == 'server') {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.SetupAttribute(icelink.sdp.Setup.getPassive()));
                    }
                    if (ortcMediaDescription.direction == icelink.StreamDirection.SendReceive) {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.SendReceiveAttribute());
                    }
                    else if (ortcMediaDescription.direction == icelink.StreamDirection.SendOnly) {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.SendOnlyAttribute());
                    }
                    else if (ortcMediaDescription.direction == icelink.StreamDirection.ReceiveOnly) {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.ReceiveOnlyAttribute());
                    }
                    else {
                        sdpMediaDescription.addMediaAttribute(new icelink.sdp.InactiveAttribute());
                    }
                    //TODO: add support for bundling and non-muxed
                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtcp.MuxAttribute());
                    for (var _f = 0, _g = ortcMediaDescription.codecCaps; _f < _g.length; _f++) {
                        var ortcCodecCap = _g[_f];
                        if (ortcCodecCap.numChannels > 1) {
                            sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtp.MapAttribute(ortcCodecCap.preferredPayloadType, ortcCodecCap.name, ortcCodecCap.clockRate, ortcCodecCap.numChannels.toString()));
                        }
                        else {
                            sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtp.MapAttribute(ortcCodecCap.preferredPayloadType, ortcCodecCap.name, ortcCodecCap.clockRate));
                        }
                        if (ortcCodecCap.parameters && icelink.HashExtensions.getCount(ortcCodecCap.parameters) > 0) {
                            var sdpFormatParametersAttribute = new icelink.sdp.FormatParametersAttribute(ortcCodecCap.preferredPayloadType);
                            for (var key in ortcCodecCap.parameters) {
                                sdpFormatParametersAttribute.setFormatSpecificParameter(key, ortcCodecCap.parameters[key]);
                            }
                            sdpMediaDescription.addMediaAttribute(sdpFormatParametersAttribute);
                        }
                        if (ortcCodecCap.rtcpFeedback) {
                            for (var _h = 0, _j = ortcCodecCap.rtcpFeedback; _h < _j.length; _h++) {
                                var rtcpFeedback = _j[_h];
                                if (icelink.StringExtensions.isNullOrEmpty(rtcpFeedback.parameter)) {
                                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtcp.FeedbackAttribute(ortcCodecCap.preferredPayloadType, rtcpFeedback.type));
                                }
                                else {
                                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtcp.FeedbackAttribute(ortcCodecCap.preferredPayloadType, rtcpFeedback.type, rtcpFeedback.parameter));
                                }
                            }
                        }
                    }
                    for (var _k = 0, _l = ortcMediaDescription.candidates; _k < _l.length; _k++) {
                        var ortcCandidate = _l[_k];
                        sdpMediaDescription.addMediaAttribute(this.rtcCandidateToSdpCandidateAttribute(ortcCandidate));
                    }
                    sdpMediaDescription.addMediaAttribute(new icelink.sdp.rtp.SsrcAttribute(ortcMediaDescription.ssrc, icelink.sdp.rtp.SsrcAttributeName.getCName(), ortcMediaDescription.cname));
                    sdpMessage.addMediaDescription(sdpMediaDescription);
                }
                var sessionDescription = new icelink.SessionDescription();
                sessionDescription.setSdpMessage(sdpMessage);
                sessionDescription.setTieBreaker(ortcSessionDescription.tieBreaker);
                sessionDescription.setType(ortcSessionDescription.type);
                return sessionDescription;
            };
            WebRtcConnection.prototype.ortcSessionDescriptionFromSessionDescription = function (sessionDescription) {
                var sdpMessage = sessionDescription.getSdpMessage();
                var sdpOrigin = sdpMessage.getOrigin();
                var ortcSessionDescription = {
                    sessionId: sdpOrigin.getSessionId(),
                    sessionVersion: sdpOrigin.getSessionVersion(),
                    mediaDescriptions: [],
                    tieBreaker: sessionDescription.getTieBreaker(),
                    type: sessionDescription.getType()
                };
                var sessionUfragAttribute = null;
                var sessionPasswordAttribute = null;
                var sessionFingerprintAttributes = [];
                for (var _i = 0, _a = sdpMessage.getSessionAttributes(); _i < _a.length; _i++) {
                    var sdpSessionAttribute = _a[_i];
                    if (icelink.Util.isObjectType(sdpSessionAttribute, '[fm.icelink.sdp.ice.UfragAttribute]')) {
                        sessionUfragAttribute = (sdpSessionAttribute);
                    }
                    else if (icelink.Util.isObjectType(sdpSessionAttribute, '[fm.icelink.sdp.ice.PasswordAttribute]')) {
                        sessionPasswordAttribute = (sdpSessionAttribute);
                    }
                    else if (icelink.Util.isObjectType(sdpSessionAttribute, '[fm.icelink.sdp.ice.FingerprintAttribute]')) {
                        sessionFingerprintAttributes.push((sdpSessionAttribute));
                    }
                }
                for (var _b = 0, _c = sdpMessage.getMediaDescriptions(); _b < _c.length; _b++) {
                    var sdpMediaDescription = _c[_b];
                    var ortcMediaDescription = {
                        kind: sdpMediaDescription.getMedia().getMediaType(),
                        direction: icelink.StreamDirection.SendReceive,
                        iceParams: {},
                        dtlsParams: {
                            fingerprints: []
                        },
                        codecCaps: [],
                        candidates: [],
                        ssrc: null,
                        cname: null
                    };
                    if (sessionUfragAttribute != null) {
                        ortcMediaDescription.iceParams.usernameFragment = sessionUfragAttribute.getUfrag();
                    }
                    if (sessionPasswordAttribute != null) {
                        ortcMediaDescription.iceParams.password = sessionPasswordAttribute.getPassword();
                    }
                    for (var _d = 0, sessionFingerprintAttributes_1 = sessionFingerprintAttributes; _d < sessionFingerprintAttributes_1.length; _d++) {
                        var sessionFingerprintAttribute = sessionFingerprintAttributes_1[_d];
                        ortcMediaDescription.dtlsParams.fingerprints.push({
                            algorithm: sessionFingerprintAttribute.getHashFunction(),
                            value: sessionFingerprintAttribute.getFingerprint()
                        });
                    }
                    var mediaFormatParametersHash = {};
                    var mediaFeedbackAttributeHash = {};
                    for (var _e = 0, _f = sdpMediaDescription.getMediaAttributes(); _e < _f.length; _e++) {
                        var sdpMediaAttribute = _f[_e];
                        if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.FormatParametersAttribute]')) {
                            var mediaFormatParametersAttribute = (sdpMediaAttribute);
                            var key = mediaFormatParametersAttribute.getFormat().toString();
                            var mediaFormatParametersList = mediaFormatParametersHash[key];
                            if (!mediaFormatParametersList) {
                                mediaFormatParametersHash[key] = mediaFormatParametersList = [];
                            }
                            mediaFormatParametersList.push(mediaFormatParametersAttribute);
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.rtcp.FeedbackAttribute]')) {
                            var mediaFeedbackAttribute = (sdpMediaAttribute);
                            var key = mediaFeedbackAttribute.getPayloadType().toString();
                            var mediaFeedbackAttributeList = mediaFeedbackAttributeHash[key];
                            if (!mediaFeedbackAttributeList) {
                                mediaFeedbackAttributeHash[key] = mediaFeedbackAttributeList = [];
                            }
                            mediaFeedbackAttributeList.push(mediaFeedbackAttribute);
                        }
                    }
                    for (var _g = 0, _h = sdpMediaDescription.getMediaAttributes(); _g < _h.length; _g++) {
                        var sdpMediaAttribute = _h[_g];
                        if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ice.UfragAttribute]')) {
                            var mediaUfragAttribute = (sdpMediaAttribute);
                            ortcMediaDescription.iceParams.usernameFragment = mediaUfragAttribute.getUfrag();
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ice.PasswordAttribute]')) {
                            var mediaPasswordAttribute = (sdpMediaAttribute);
                            ortcMediaDescription.iceParams.password = mediaPasswordAttribute.getPassword();
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ice.FingerprintAttribute]')) {
                            var mediaFingerprintAttribute = (sdpMediaAttribute);
                            ortcMediaDescription.dtlsParams.fingerprints.push({
                                algorithm: mediaFingerprintAttribute.getHashFunction(),
                                value: mediaFingerprintAttribute.getFingerprint()
                            });
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.SetupAttribute]')) {
                            var mediaSetupAttribute = (sdpMediaAttribute);
                            if (mediaSetupAttribute.getSetup() == icelink.sdp.Setup.getActPass()) {
                                ortcMediaDescription.dtlsParams.role = 'auto';
                            }
                            else if (mediaSetupAttribute.getSetup() == icelink.sdp.Setup.getActive()) {
                                ortcMediaDescription.dtlsParams.role = 'client';
                            }
                            else if (mediaSetupAttribute.getSetup() == icelink.sdp.Setup.getPassive()) {
                                ortcMediaDescription.dtlsParams.role = 'server';
                            }
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.rtp.MapAttribute]')) {
                            var mediaRtpMapAttribute = (sdpMediaAttribute);
                            var formatParameters = mediaRtpMapAttribute.getFormatParameters();
                            var codecCap = {
                                preferredPayloadType: mediaRtpMapAttribute.getPayloadType(),
                                name: mediaRtpMapAttribute.getFormatName(),
                                clockRate: mediaRtpMapAttribute.getClockRate(),
                                numChannels: icelink.StringExtensions.isNullOrEmpty(formatParameters) ? 1 : icelink.ParseAssistant.parseIntegerValue(formatParameters),
                                parameters: {},
                                rtcpFeedback: []
                            };
                            var payloadTypeKey = mediaRtpMapAttribute.getPayloadType().toString();
                            this.applyMediaFormatParametersAttributes(codecCap, mediaFormatParametersHash[payloadTypeKey]);
                            this.applyMediaFeedbackAttributes(codecCap, mediaFeedbackAttributeHash[payloadTypeKey]);
                            this.applyMediaFeedbackAttributes(codecCap, mediaFeedbackAttributeHash['-1']); // wildcard
                            /*
                            if (mediaRtpMapAttribute.getFormatName().toLowerCase() == 'opus')
                            {
                                //codecCap.rtcpFeedback.push({
                                //    type: 'x-message',
                                //    parameter: 'app send:dsh recv:dsh' // Dominant Speaker History Notification https://msdn.microsoft.com/en-us/library/mt599587(v=vs.85).aspx
                                //});
                            }
                            else if (mediaRtpMapAttribute.getFormatName().toLowerCase() == 'h264')
                            {
                                codecCap.parameters['packetization-mode'] = '1';
                                codecCap.parameters['profile-level-id'] = '42C02A';
                                codecCap.rtcpFeedback.push({
                                    type: 'nack',
                                    parameter: 'pli'
                                });
                                codecCap.rtcpFeedback.push({
                                    type: 'nack',
                                    parameter: ''
                                });
                                //codecCap.rtcpFeedback.push({
                                //    type: 'goog-remb',
                                //    parameter: ''
                                //});
                            }*/
                            ortcMediaDescription.codecCaps.push(codecCap);
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ice.CandidateAttribute]')) {
                            var mediaCandidateAttribute = (sdpMediaAttribute);
                            if (mediaCandidateAttribute.getProtocol() != icelink.sdp.ice.TransportProtocol.getTcp() || this._ortcSupportsTcp) {
                                ortcMediaDescription.candidates.push(this.rtcCandidateFromSdpCandidateAttribute(mediaCandidateAttribute));
                            }
                        }
                        else if (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.rtp.SsrcAttribute]')) {
                            var mediaSsrcAttribute = (sdpMediaAttribute);
                            if (ortcMediaDescription.ssrc == null) {
                                ortcMediaDescription.ssrc = mediaSsrcAttribute.getSynchronizationSource();
                            }
                            if (mediaSsrcAttribute.getName() == icelink.sdp.rtp.SsrcAttributeName.getCName() && ortcMediaDescription.ssrc == mediaSsrcAttribute.getSynchronizationSource()) {
                                ortcMediaDescription.cname = mediaSsrcAttribute.getValue();
                            }
                        }
                    }
                    ortcSessionDescription.mediaDescriptions.push(ortcMediaDescription);
                }
                return ortcSessionDescription;
            };
            WebRtcConnection.prototype.applyMediaFormatParametersAttributes = function (codecCap, mediaFormatParametersList) {
                if (mediaFormatParametersList) {
                    for (var _i = 0, mediaFormatParametersList_1 = mediaFormatParametersList; _i < mediaFormatParametersList_1.length; _i++) {
                        var mediaFormatParameters = mediaFormatParametersList_1[_i];
                        var params = mediaFormatParameters.deserializeFormatSpecificParameters();
                        for (var key in params) {
                            codecCap.parameters[key] = params[key];
                        }
                    }
                }
            };
            WebRtcConnection.prototype.applyMediaFeedbackAttributes = function (codecCap, mediaFeedbackAttributeList) {
                if (mediaFeedbackAttributeList) {
                    for (var _i = 0, mediaFeedbackAttributeList_1 = mediaFeedbackAttributeList; _i < mediaFeedbackAttributeList_1.length; _i++) {
                        var mediaFeedbackAttribute = mediaFeedbackAttributeList_1[_i];
                        codecCap.rtcpFeedback.push({
                            type: mediaFeedbackAttribute.getType(),
                            parameter: mediaFeedbackAttribute.getSubType() || ''
                        });
                    }
                }
            };
            /**<span id='method-fm.icelink.Connection-getIceCandidateProcessingTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the amount of time (in milliseconds) to wait
             before halting gathering efforts for early candidates.
             Only applies when TrickleIceSupport is set to NotSupported.
             Defaults to 1000.
             </div>
    
    
            @return {number}
            */
            WebRtcConnection.prototype.getIceCandidateProcessingTimeout = function () {
                return this._iceCandidateProcessingTimeout;
            };
            /**<span id='method-fm.icelink.ConnectionBase-setIceCandidateProcessingTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the amount of time (in milliseconds) to wait
             before halting gathering efforts for early candidates.
             Only applies when TrickleIceSupport is set to NotSupported.
             Defaults to 1000.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcConnection.prototype.setIceCandidateProcessingTimeout = function (value) {
                if (value > 0) {
                    this._iceCandidateProcessingTimeout = value;
                }
                else {
                    throw new icelink.Exception("");
                }
            };
            WebRtcConnection.prototype.doCreateOffer = function (promise) {
                this._offerer = true;
                this.doCreate(promise);
                return true;
            };
            WebRtcConnection.prototype.doCreateAnswer = function (promise) {
                this._offerer = false;
                this.doCreate(promise);
            };
            WebRtcConnection.prototype.setNativeDescriptionSuccess = function (sessionDescription, promise) {
                var _this = this;
                if (!this.getUseTrickleIce() && !this._isRenegotiation) {
                    window.setTimeout(function () {
                        var sdpMessage = sessionDescription.getSdpMessage();
                        var medias = sdpMessage.getMediaDescriptions();
                        if (medias != null) {
                            for (var _i = 0, _a = _this._discoveredCandidates; _i < _a.length; _i++) {
                                var candidate = _a[_i];
                                var index = candidate.getSdpMediaIndex();
                                var media = medias[index];
                                var candidateAttribute = candidate.getSdpCandidateAttribute();
                                media.addMediaAttribute(candidateAttribute);
                                //Update connection and media lines with candidate's port and ip if possible.
                                var connectionData = media.getConnectionData();
                                var existingIp = connectionData.getConnectionAddress();
                                var candidatePort = candidateAttribute.getPort();
                                var candidateIp = candidateAttribute.getConnectionAddress();
                                var candidateComponent = candidateAttribute.getComponentId();
                                if (candidateComponent == 2) {
                                    var rtcpAttribute = media.getRtcpAttribute();
                                    if (rtcpAttribute == null) {
                                        rtcpAttribute = new icelink.sdp.rtcp.Attribute(candidatePort, candidateIp);
                                        media.setRtcpAttribute(rtcpAttribute);
                                    }
                                    else {
                                        rtcpAttribute.update(candidatePort, candidateIp);
                                    }
                                }
                                var existingIpBlank = (existingIp == "0.0.0.0" || existingIp == "::" || existingIp == "0:0:0:0:0:0:0:0");
                                var candidateIpBlank = (candidateIp == "0.0.0.0" || candidateIp == "::" || existingIp == "0:0:0:0:0:0:0:0");
                                //If this is a udp based candidate, prefer that over tcp:
                                var isUdpCandidate = (candidateAttribute.getProtocol().toLowerCase() == icelink.sdp.ice.TransportProtocol.getUdp().toLowerCase());
                                if (candidateComponent == 1 && isUdpCandidate && existingIpBlank && !candidateIpBlank && candidatePort > 0) {
                                    connectionData.update(candidateIp);
                                    var sdpMedia = media.getMedia();
                                    sdpMedia.setTransportPort(candidatePort);
                                }
                            }
                        }
                        promise.resolve(sessionDescription);
                    }, this.getIceCandidateProcessingTimeout());
                }
                else {
                    promise.resolve(sessionDescription);
                }
            };
            ;
            WebRtcConnection.prototype.doCreate = function (promise) {
                var _this = this;
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (!_this._initialized) {
                            _this.initialize();
                        }
                        if (icelink.Plugin.hasOrtc()) {
                            _this._ortcLocalDescription = {
                                sessionId: Math.floor(Math.random() * 9223372036854775807),
                                sessionVersion: Math.floor(Math.random() * 2147483647),
                                mediaDescriptions: [],
                                tieBreaker: _this.getTieBreaker(),
                                type: _this._offerer ? icelink.SessionDescriptionType.Offer : icelink.SessionDescriptionType.Answer
                            };
                            var cname = icelink.Guid.newGuid().toString().replace('-', '').substr(0, 8);
                            for (var i = 0; i < _this._nativeIceGatherers.length; i++) {
                                var localMediaDescription = {
                                    kind: _this._rtpKinds[i],
                                    direction: _this._mediaStreams[i].getDirection(),
                                    iceParams: _this._nativeIceGatherers[i].getLocalParameters(),
                                    dtlsParams: _this._nativeDtlsTransports[i].getLocalParameters(),
                                    codecCaps: [],
                                    candidates: [],
                                    ssrc: Math.floor(Math.random() * 4294967296),
                                    cname: cname
                                };
                                // get send/receive codecs and use union of the two going forward
                                var send = RTCRtpSender.getCapabilities(_this._rtpKinds[i]);
                                var receive = RTCRtpReceiver.getCapabilities(_this._rtpKinds[i]);
                                var receiveCodecs = {};
                                for (var _i = 0, _a = receive.codecs; _i < _a.length; _i++) {
                                    var codec = _a[_i];
                                    var encodingName = [codec.name, codec.clockRate, codec.numChannels, codec.preferredPayloadType].join('/').toLowerCase();
                                    receiveCodecs[encodingName] = codec;
                                }
                                for (var _b = 0, _c = send.codecs; _b < _c.length; _b++) {
                                    var codec = _c[_b];
                                    var encodingName = [codec.name, codec.clockRate, codec.numChannels, codec.preferredPayloadType].join('/').toLowerCase();
                                    if (receiveCodecs[encodingName]) {
                                        localMediaDescription.codecCaps.push(codec);
                                    }
                                }
                                localMediaDescription.codecCaps.sort(function (a, b) {
                                    if (a.clockRate == b.clockRate) {
                                        return b.numChannels - a.numChannels;
                                    }
                                    return b.clockRate - a.clockRate;
                                });
                                // if we have remote parameters, update based on negotiated parameters
                                if (_this._ortcRemoteDescription) {
                                    var remoteMediaDescription = _this._ortcRemoteDescription.mediaDescriptions[i];
                                    // update DTLS role
                                    if (remoteMediaDescription.dtlsParams.role == 'auto' || remoteMediaDescription.dtlsParams.role == 'server') {
                                        localMediaDescription.dtlsParams.role = 'client';
                                    }
                                    else {
                                        localMediaDescription.dtlsParams.role = 'server';
                                    }
                                    // update codecs
                                    var localCodecs = [];
                                    for (var _d = 0, _e = remoteMediaDescription.codecCaps; _d < _e.length; _d++) {
                                        var remoteCodec = _e[_d];
                                        // TODO: support RTX
                                        if (remoteCodec.name == 'rtx') {
                                            continue;
                                        }
                                        var skip = false;
                                        for (var _f = 0, _g = localMediaDescription.codecCaps; _f < _g.length; _f++) {
                                            var localCodec = _g[_f];
                                            if (localCodec.name.toLowerCase() == remoteCodec.name.toLowerCase() &&
                                                localCodec.clockRate == remoteCodec.clockRate &&
                                                localCodec.numChannels == remoteCodec.numChannels) {
                                                //This is a temporary fix to ensure that we do not have multiple matches for codecs with almost identical features except for parameters.
                                                for (var _h = 0, localCodecs_1 = localCodecs; _h < localCodecs_1.length; _h++) {
                                                    var negotiatedCodec = localCodecs_1[_h];
                                                    if (remoteCodec.name.toLowerCase() == negotiatedCodec.name.toLowerCase() &&
                                                        remoteCodec.clockRate == negotiatedCodec.clockRate &&
                                                        remoteCodec.numChannels == negotiatedCodec.numChannels) {
                                                        skip = true;
                                                        break; //TODO:negotiate parameters.
                                                    }
                                                }
                                                if (!skip) {
                                                    // use remote casing and payload type when answering
                                                    localCodec.name = remoteCodec.name;
                                                    localCodec.preferredPayloadType = remoteCodec.preferredPayloadType;
                                                    localCodecs.push(localCodec);
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    localMediaDescription.codecCaps = localCodecs;
                                }
                                _this._ortcLocalDescription.mediaDescriptions.push(localMediaDescription);
                            }
                            promise.resolve(_this.ortcSessionDescriptionToSessionDescription(_this._ortcLocalDescription));
                        }
                        else {
                            for (var _j = 0, _k = _this.getStreams(); _j < _k.length; _j++) {
                                var stream = _k[_j];
                                var streamType = stream.getType();
                                if (_this._offerer && (_this.getState() == icelink.ConnectionState.Connected)) {
                                    if (streamType == icelink.StreamType.Audio) {
                                        stream.processCachedChanges();
                                        stream.resetRemoteDirection();
                                    }
                                    else if (streamType == icelink.StreamType.Video) {
                                        stream.processCachedChanges();
                                        stream.resetRemoteDirection();
                                    }
                                }
                            }
                            var createSuccess = function (rtcSessionDescription) {
                                var sessionDescription = _this.webrtcSessionDescriptionToSessionDescription({
                                    sessionDescription: rtcSessionDescription,
                                    tieBreaker: _this.getTieBreaker()
                                });
                                // there is a possibility the direction in the SDP doesn't align with
                                // the direction provided in the stream, since Chrome infers the direction
                                // of the stream from the presence of a local track and the offerToReceive flags,
                                // which may or may not align with the direction set by the developer
                                var audioDirections = [];
                                var videoDirections = [];
                                for (var _i = 0, _a = _this.getStreams(); _i < _a.length; _i++) {
                                    var stream = _a[_i];
                                    var streamDirection = stream.getLocalDirection();
                                    if (streamDirection == icelink.StreamDirection.Unset) {
                                        streamDirection = stream.getDirectionCapabilities();
                                    }
                                    var streamType = stream.getType();
                                    if (streamType === icelink.StreamType.Audio) {
                                        audioDirections.push(streamDirection);
                                    }
                                    else if (streamType === icelink.StreamType.Video) {
                                        videoDirections.push(streamDirection);
                                    }
                                }
                                var audioDirectionIndex = 0;
                                var videoDirectionIndex = 0;
                                for (var _b = 0, _c = sessionDescription.getSdpMessage().getMediaDescriptions(); _b < _c.length; _b++) {
                                    var sdpMediaDescription = _c[_b];
                                    var streamDirection = icelink.StreamDirection.Unset;
                                    if (sdpMediaDescription.getMedia().getMediaType() == icelink.sdp.MediaType.getAudio()) {
                                        streamDirection = audioDirections[audioDirectionIndex++];
                                    }
                                    else if (sdpMediaDescription.getMedia().getMediaType() == icelink.sdp.MediaType.getVideo()) {
                                        streamDirection = videoDirections[videoDirectionIndex++];
                                    }
                                    else {
                                        continue;
                                    }
                                    var needsDirectionAttribute = false;
                                    for (var _d = 0, _e = sdpMediaDescription.getMediaAttributes(); _d < _e.length; _d++) {
                                        var sdpMediaAttribute = _e[_d];
                                        if ((icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.SendReceiveAttribute]') && streamDirection != icelink.StreamDirection.SendReceive) ||
                                            (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.SendOnlyAttribute]') && streamDirection != icelink.StreamDirection.SendOnly) ||
                                            (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.ReceiveOnlyAttribute]') && streamDirection != icelink.StreamDirection.ReceiveOnly) ||
                                            (icelink.Util.isObjectType(sdpMediaAttribute, '[fm.icelink.sdp.InactiveAttribute]') && streamDirection != icelink.StreamDirection.Inactive)) {
                                            sdpMediaDescription.removeMediaAttribute(sdpMediaAttribute);
                                            needsDirectionAttribute = true;
                                            break;
                                        }
                                    }
                                    if (needsDirectionAttribute) {
                                        switch (streamDirection) {
                                            case icelink.StreamDirection.SendReceive:
                                                sdpMediaDescription.addMediaAttribute(new icelink.sdp.SendReceiveAttribute());
                                                break;
                                            case icelink.StreamDirection.SendOnly:
                                                sdpMediaDescription.addMediaAttribute(new icelink.sdp.SendOnlyAttribute());
                                                break;
                                            case icelink.StreamDirection.ReceiveOnly:
                                                sdpMediaDescription.addMediaAttribute(new icelink.sdp.ReceiveOnlyAttribute());
                                                break;
                                            case icelink.StreamDirection.Inactive:
                                                sdpMediaDescription.addMediaAttribute(new icelink.sdp.InactiveAttribute());
                                                break;
                                        }
                                    }
                                }
                                if (_this.getSignallingState() == icelink.SignallingState.Stable) {
                                    _this._isRenegotiation = true;
                                }
                                promise.resolve(sessionDescription);
                            };
                            var createFailure = function (domError) {
                                promise.reject(new icelink.Exception('Could not create ' + (_this._offerer ? 'offer' : 'answer') + ' (' + domError + ').'));
                            };
                            var audioStreamCount = (_this.getAudioStreams().length);
                            var videoStreamCount = (_this.getVideoStreams().length);
                            try {
                                if (_this._offerer) {
                                    var transceivers = _this._nativePeerConnection.getTransceivers();
                                    var videoTransceiverCount = 0;
                                    var audioTransceiverCount = 0;
                                    for (var _l = 0, transceivers_1 = transceivers; _l < transceivers_1.length; _l++) {
                                        var transceiver = transceivers_1[_l];
                                        if (transceiver.sender.track && transceiver.sender.track.kind == 'video') {
                                            videoTransceiverCount++;
                                        }
                                        if (transceiver.sender.track && transceiver.sender.track.kind == 'audio') {
                                            audioTransceiverCount++;
                                        }
                                    }
                                    var addAudioTransceivers = audioStreamCount - audioTransceiverCount;
                                    var addVideoTransceivers = videoStreamCount - videoTransceiverCount;
                                    for (var j = 0; j < addAudioTransceivers; j++) {
                                        _this._nativePeerConnection.addTransceiver('audio');
                                    }
                                    for (var j = 0; j < addVideoTransceivers; j++) {
                                        _this._nativePeerConnection.addTransceiver('video');
                                    }
                                    _this._nativePeerConnection.createOffer().then(createSuccess, createFailure);
                                }
                                else {
                                    _this._nativePeerConnection.createAnswer().then(createSuccess, createFailure);
                                }
                            }
                            catch (error) {
                                try {
                                    if (_this._offerer) {
                                        _this._nativePeerConnection.createOffer({
                                            offerToReceiveAudio: audioStreamCount,
                                            offerToReceiveVideo: videoStreamCount // deprecated, but still in use
                                        }).then(createSuccess, createFailure);
                                    }
                                    else {
                                        _this._nativePeerConnection.createAnswer().then(createSuccess, createFailure);
                                    }
                                }
                                catch (error) {
                                    try {
                                        // try with deprecated API
                                        if (_this._offerer) {
                                            _this._nativePeerConnection.createOffer(createSuccess, createFailure, {
                                                offerToReceiveAudio: audioStreamCount,
                                                offerToReceiveVideo: videoStreamCount
                                            });
                                        }
                                        else {
                                            _this._nativePeerConnection.createAnswer(createSuccess, createFailure);
                                        }
                                    }
                                    catch (error) {
                                        // try with deprecated API
                                        if (_this._offerer) {
                                            _this._nativePeerConnection.createOffer(createSuccess, createFailure, {
                                                optional: [],
                                                mandatory: {
                                                    OfferToReceiveAudio: audioStreamCount,
                                                    OfferToReceiveVideo: videoStreamCount
                                                }
                                            });
                                        }
                                        else {
                                            _this._nativePeerConnection.createAnswer(createSuccess, createFailure);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                });
            };
            WebRtcConnection.prototype.getLocalDescription = function () {
                return this._localDescription;
            };
            WebRtcConnection.prototype.getGatheringState = function () {
                return this._gatheringState;
            };
            WebRtcConnection.prototype.getIceConnectionState = function () {
                return this._iceConnectionState;
            };
            WebRtcConnection.prototype.setGatheringState = function (state) {
                if (this._gatheringState != state) {
                    this._gatheringState = state;
                    this.raiseGatheringStateChange(this);
                }
            };
            WebRtcConnection.prototype.setIceConnectionState = function (state) {
                if (this._iceConnectionState != state) {
                    this._iceConnectionState = state;
                    this.raiseIceConnectionStateChange(this);
                }
            };
            WebRtcConnection.prototype.getRemoteDescription = function () {
                return this._remoteDescription;
            };
            //This method conducts local SDP mangling to ensure that the stream direction is set appropreately.
            WebRtcConnection.prototype.updateLocalDescription = function (localDescription) {
                var msg = localDescription.getSdpMessage();
                //var origin = msg.getOrigin();
                //var sessionVersion = origin.getSessionVersion();
                //origin.setSessionVersion(sessionVersion + 1);
                var mediaDescriptions = msg.getMediaDescriptions();
                var streamDirection = icelink.StreamDirection.Inactive;
                var updatedStreamDirection = false;
                if (mediaDescriptions != null) {
                    for (var _i = 0, mediaDescriptions_1 = mediaDescriptions; _i < mediaDescriptions_1.length; _i++) {
                        var mediaDescription = mediaDescriptions_1[_i];
                        updatedStreamDirection = false;
                        var media = mediaDescription.getMedia();
                        var mediaType = media.getMediaType();
                        var streamType = icelink.sdp.MediaType.toStreamType(mediaType);
                        if (streamType == icelink.StreamType.Audio) {
                            var audioStreams = this.getAudioStreams();
                            if (audioStreams != null && audioStreams.length > 0) {
                                var stream_1 = audioStreams[0];
                                streamDirection = stream_1.getDirection();
                                updatedStreamDirection = true;
                                for (var _a = 0, _b = mediaDescription.getBandwidths(); _a < _b.length; _a++) {
                                    var bandwidth = _b[_a];
                                    if (bandwidth.getBandwidthType().toLowerCase() == "tias" ||
                                        bandwidth.getBandwidthType().toLowerCase() == "as") {
                                        mediaDescription.removeBandwidth(bandwidth);
                                        break;
                                    }
                                }
                                if (stream_1.getLocalBandwidth() > 0) {
                                    mediaDescription.addBandwidth(new icelink.sdp.Bandwidth("TIAS", stream_1.getLocalBandwidth() * 1024));
                                    mediaDescription.addBandwidth(new icelink.sdp.Bandwidth("AS", stream_1.getLocalBandwidth()));
                                }
                            }
                        }
                        else if (streamType == icelink.StreamType.Video) {
                            var videoStreams = this.getVideoStreams();
                            if (videoStreams != null && videoStreams.length > 0) {
                                var stream = videoStreams[0];
                                streamDirection = stream.getDirection();
                                updatedStreamDirection = true;
                                for (var _c = 0, _d = mediaDescription.getBandwidths(); _c < _d.length; _c++) {
                                    var bandwidth = _d[_c];
                                    if (bandwidth.getBandwidthType().toLowerCase() == "tias" ||
                                        bandwidth.getBandwidthType().toLowerCase() == "as") {
                                        mediaDescription.removeBandwidth(bandwidth);
                                        break;
                                    }
                                }
                                if (stream.getLocalBandwidth() > 0) {
                                    mediaDescription.addBandwidth(new icelink.sdp.Bandwidth("TIAS", stream.getLocalBandwidth() * 1024));
                                    mediaDescription.addBandwidth(new icelink.sdp.Bandwidth("AS", stream.getLocalBandwidth()));
                                }
                            }
                        }
                        if (updatedStreamDirection) {
                            mediaDescription.setStreamDirection(streamDirection);
                        }
                    }
                }
                return localDescription;
            };
            WebRtcConnection.prototype.doSetLocalDescription = function (promise, localDescription) {
                var _this = this;
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (!_this._initialized) {
                            _this.initialize();
                        }
                        localDescription = _this.updateLocalDescription(localDescription);
                        var error = _this.processDescription(localDescription, true);
                        if (error == null) {
                            var signallingState = _this.getSignallingState();
                            if (signallingState == icelink.SignallingState.New) {
                                _this.setSignallingState(icelink.SignallingState.HaveLocalOffer);
                            }
                            else if (signallingState == icelink.SignallingState.HaveRemoteOffer) {
                                _this.setSignallingState(icelink.SignallingState.Stable);
                            }
                            else if (signallingState == icelink.SignallingState.Stable) {
                                _this.setSignallingState(icelink.SignallingState.HaveLocalOffer);
                            }
                            if (icelink.Plugin.hasOrtc()) {
                                _this._ortcLocalDescription = _this.ortcSessionDescriptionFromSessionDescription(localDescription);
                                _this._localDescription = localDescription;
                                if (_this.getRemoteDescription()) {
                                    if (_this.getState() != icelink.ConnectionState.Connected) {
                                        _this.setState(icelink.ConnectionState.Connecting);
                                        _this.startOrtc();
                                    }
                                }
                                promise.resolve(localDescription);
                            }
                            else {
                                var webrtcSessionDescription = _this.webrtcSessionDescriptionFromSessionDescription(localDescription);
                                var successCallback = function () {
                                    _this._localDescription = localDescription;
                                    if (_this.getRemoteDescription()) {
                                        if (_this.getState() != icelink.ConnectionState.Connected) {
                                            _this.setState(icelink.ConnectionState.Connecting);
                                        }
                                    }
                                    _this.setNativeDescriptionSuccess(localDescription, promise);
                                    //promise.resolve(localDescription);
                                };
                                var failureCallback = function (ex) {
                                    promise.reject(ex);
                                };
                                try {
                                    _this._nativePeerConnection.setLocalDescription(webrtcSessionDescription.sessionDescription).then(successCallback, failureCallback);
                                }
                                catch (error) {
                                    // deprecated API
                                    _this._nativePeerConnection.setLocalDescription(webrtcSessionDescription.sessionDescription, successCallback, failureCallback);
                                }
                            }
                        }
                        else {
                            promise.reject(error.getException());
                        }
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                });
            };
            WebRtcConnection.prototype.processRemoteDescriptionOnRenegotiation = function (promise, remoteDescription) {
                //Need to update dtls role to ensure no collision occurs:
                if (this._localDescription == null || this._remoteDescription == null) {
                    return;
                }
                //For now just query a local stream to get its role. This should be modified because streams may have varying roles accross connection:
                var localMessage = this._localDescription.getSdpMessage();
                var descriptions = localMessage.getMediaDescriptions();
                var description = descriptions[0];
                var localSetupAttribute = description.getSetupAttribute();
                var localRole = localSetupAttribute.getSetup();
                var remoteRole = icelink.sdp.Setup.getPassive();
                var currentRemoteMessage = this._remoteDescription.getSdpMessage();
                icelink.Log.info("Current remote description:");
                icelink.Log.info(currentRemoteMessage.toString());
                var currentRemoteDescriptions = currentRemoteMessage.getMediaDescriptions();
                if (localRole == icelink.sdp.Setup.getActive()) {
                    remoteRole = icelink.sdp.Setup.getPassive();
                }
                else if (localRole == icelink.sdp.Setup.getPassive()) {
                    remoteRole = icelink.sdp.Setup.getActive();
                }
                else {
                    description = currentRemoteDescriptions[0];
                    var remoteSetupAttribute = description.getSetupAttribute();
                    remoteRole = remoteSetupAttribute.getSetup();
                }
                var newRemoteMessage = remoteDescription.getSdpMessage();
                var newRemoteDescriptions = newRemoteMessage.getMediaDescriptions();
                for (var _i = 0, newRemoteDescriptions_1 = newRemoteDescriptions; _i < newRemoteDescriptions_1.length; _i++) {
                    var mediaDescription = newRemoteDescriptions_1[_i];
                    mediaDescription.setSetupAttribute(remoteSetupAttribute);
                }
                newRemoteMessage.updateSetupValue(remoteRole);
                /*for (let mediaDescription of currentRemoteDescriptions) {
                    mediaDescription.updateSetupValue(remoteRole);
                }
                var origin = currentRemoteMessage.getOrigin();
                var version = origin.getSessionVersion();
                origin.setSessionVersion(version + 1);*/
                newRemoteMessage.updateSetupValue(remoteRole);
                this._remoteDescription = remoteDescription;
                //This method hijacks setting remote description by extracting changes from remote description that we support,
                //modifying local description and ignoring any other changes. 
                //Once we figure out a way to process remote descriptions through a call to browser, this should go away.
                //Currently, we only support changes to direction. These changes should have already been set to respectful streams
                //via a call to let error = this.processDescription(remoteDescription, false); The modify _remoteDirection property.
                //As such, we only need to set local description.
                this.doCreateAnswer(promise);
            };
            WebRtcConnection.prototype.removeSdesAttributesIfNeeded = function (remoteDescription) {
                if (remoteDescription.getIsOffer()) {
                    var message = remoteDescription.getSdpMessage();
                    var sessionFingerprint = message.getSessionLevelFingerprintAttribute();
                    var sessionCryptos = message.getSessionLevelCryptoAttributes();
                    var mediaDescriptions = message.getMediaDescriptions();
                    var removeSessionCryptos = false;
                    for (var _i = 0, mediaDescriptions_2 = mediaDescriptions; _i < mediaDescriptions_2.length; _i++) {
                        var mediaDescription = mediaDescriptions_2[_i];
                        var cryptoAttributes = mediaDescription.getCryptoAttributes();
                        var fingerprintAttribute = mediaDescription.getFingerprintAttribute();
                        if (fingerprintAttribute != null || sessionFingerprint != null) {
                            if (cryptoAttributes != null) {
                                for (var _a = 0, cryptoAttributes_1 = cryptoAttributes; _a < cryptoAttributes_1.length; _a++) {
                                    var cryptoAttribute = cryptoAttributes_1[_a];
                                    mediaDescription.removeMediaAttribute(cryptoAttribute);
                                }
                            }
                            removeSessionCryptos = true;
                        }
                    }
                    if (removeSessionCryptos) {
                        if (sessionCryptos != null) {
                            message.removeSessionAttribute(icelink.sdp.AttributeType.CryptoAttribute);
                        }
                    }
                }
            };
            WebRtcConnection.prototype.doSetRemoteDescription = function (promise, remoteDescription) {
                var _this = this;
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (!_this._initialized) {
                            _this.initialize();
                        }
                        var error = _this.processDescription(remoteDescription, false);
                        if (error == null) {
                            if (icelink.Plugin.hasOrtc()) {
                                _this._ortcRemoteDescription = _this.ortcSessionDescriptionFromSessionDescription(remoteDescription);
                                for (var i = 0; i < _this._ortcRemoteDescription.mediaDescriptions.length; i++) {
                                    var remoteMediaDescription = _this._ortcRemoteDescription.mediaDescriptions[i];
                                    if (!remoteMediaDescription.ssrc) {
                                        remoteMediaDescription.ssrc = 0;
                                    }
                                    if (!remoteMediaDescription.cname) {
                                        remoteMediaDescription.cname = '';
                                    }
                                    if (remoteMediaDescription.candidates.length > 0) {
                                        for (var j = 0; j < remoteMediaDescription.candidates.length; j++) {
                                            if (_this._nativeIceTransports[i].state != "closed") {
                                                _this._nativeIceTransports[i].addRemoteCandidate(remoteMediaDescription.candidates[j]);
                                            }
                                        }
                                    }
                                }
                                // wait briefly before signalling "no more candidates"                        
                                _this.setRemoteCandidatesDoneTimer();
                                _this._remoteDescription = remoteDescription;
                                var signallingState = _this.getSignallingState();
                                if (signallingState == icelink.SignallingState.New) {
                                    _this.setSignallingState(icelink.SignallingState.HaveRemoteOffer);
                                }
                                else if (signallingState == icelink.SignallingState.HaveLocalOffer) {
                                    _this.setSignallingState(icelink.SignallingState.Stable);
                                }
                                else if (signallingState == icelink.SignallingState.Stable) {
                                    _this.setSignallingState(icelink.SignallingState.HaveRemoteOffer);
                                }
                                if (_this.getLocalDescription()) {
                                    if (_this.getState() != icelink.ConnectionState.Connected) {
                                        _this.setState(icelink.ConnectionState.Connecting);
                                        _this.startOrtc();
                                    }
                                }
                                promise.resolve(remoteDescription);
                            }
                            else {
                                _this._remoteMediaTrackCount = 0;
                                for (var _i = 0, _a = remoteDescription.getSdpMessage().getMediaDescriptions(); _i < _a.length; _i++) {
                                    var sdpMediaDescription = _a[_i];
                                    var direction = sdpMediaDescription.getStreamDirection();
                                    if (sdpMediaDescription.getSsrcAttributes().length > 0 && (direction == icelink.StreamDirection.SendReceive || direction == icelink.StreamDirection.SendOnly)) {
                                        _this._remoteMediaTrackCount++;
                                    }
                                }
                                if (_this._remoteMediaTrackCount == 0) {
                                    _this._mediaStreamsReady = true; // there won't be any ontrack/onstream events
                                }
                                //If this is a renegotiation, do not proceed with changing direction:
                                //ABB:
                                /*if (this._isRenegotiation)
                                {
                                    this.processRemoteDescriptionOnRenegotiation(promise, remoteDescription);
                                }
                                else
                                {*/
                                _this.removeSdesAttributesIfNeeded(remoteDescription);
                                var webrtcSessionDescription = _this.webrtcSessionDescriptionFromSessionDescription(remoteDescription);
                                var successCallback = function () {
                                    _this._remoteDescription = remoteDescription;
                                    var remoteMedia = _this.getRemoteMedia();
                                    remoteMedia._setMediaStreams(remoteMedia._getAudioMediaStream(), remoteMedia._getVideoMediaStream());
                                    var remoteVideoTrack = remoteMedia.getVideoTrack();
                                    for (var _i = 0, _a = _this.getVideoStreams(); _i < _a.length; _i++) {
                                        var videoStream = _a[_i];
                                        if (videoStream.getRemoteTrack() == null) {
                                            videoStream.setRemoteTrack(remoteVideoTrack);
                                        }
                                    }
                                    var remoteAudioTrack = remoteMedia.getAudioTrack();
                                    for (var _b = 0, _c = _this.getAudioStreams(); _b < _c.length; _b++) {
                                        var audioStream = _c[_b];
                                        if (audioStream.getRemoteTrack() == null) {
                                            audioStream.setRemoteTrack(remoteAudioTrack);
                                        }
                                    }
                                    var signallingState = _this.getSignallingState();
                                    if (signallingState == icelink.SignallingState.New) {
                                        _this.setSignallingState(icelink.SignallingState.HaveRemoteOffer);
                                    }
                                    else if (signallingState == icelink.SignallingState.HaveLocalOffer) {
                                        _this.setSignallingState(icelink.SignallingState.Stable);
                                    }
                                    else if (signallingState == icelink.SignallingState.Stable) {
                                        _this.setSignallingState(icelink.SignallingState.HaveRemoteOffer);
                                    }
                                    if (_this.getSignallingState() == icelink.SignallingState.Stable) {
                                        _this._isRenegotiation = true;
                                    }
                                    if (_this.getLocalDescription()) {
                                        if (_this.getState() != icelink.ConnectionState.Connected) {
                                            _this.setState(icelink.ConnectionState.Connecting);
                                        }
                                    }
                                    promise.resolve(remoteDescription);
                                };
                                var failureCallback = function (ex) {
                                    promise.reject(ex);
                                };
                                try {
                                    _this._nativePeerConnection.setRemoteDescription(webrtcSessionDescription.sessionDescription).then(successCallback, failureCallback);
                                }
                                catch (error) {
                                    // deprecated API
                                    _this._nativePeerConnection.setRemoteDescription(webrtcSessionDescription.sessionDescription, successCallback, failureCallback);
                                }
                                //} //ABB
                            }
                        }
                        else {
                            promise.reject(error.getException());
                        }
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                });
            };
            WebRtcConnection.prototype.doSendCachedLocalCandidates = function () { };
            WebRtcConnection.prototype.processSdpMediaDescription = function (stream, sdpMediaDescription, sdpMediaIndex, isLocalDescription, isRenegotiation) {
                return null;
            };
            WebRtcConnection.prototype.startOrtc = function () {
                this._transportsRemaining = this._nativeDtlsTransports.length;
                for (var i = 0; i < this._nativeIceGatherers.length; i++) {
                    this.startOrtcTrack(this._nativeIceGatherers[i], this._nativeIceTransports[i], this._nativeDtlsTransports[i], this._ortcLocalDescription.mediaDescriptions[i], this._ortcRemoteDescription.mediaDescriptions[i]);
                }
                for (var i = 0; i < this._nativeRtpReceivers.length; i++) {
                    this._nativeRtpReceivers[i].receive({
                        muxId: '',
                        codecs: this.selectCodecs(i),
                        headerExtensions: [],
                        encodings: this.selectEncodings(i, false),
                        rtcp: this.selectRtcp(i, false)
                    });
                }
                for (var i = 0; i < this._nativeRtpSenders.length; i++) {
                    if (this._nativeRtpSenders[i]) {
                        this._nativeRtpSenders[i].send({
                            muxId: '',
                            codecs: this.selectCodecs(i),
                            headerExtensions: [],
                            encodings: this.selectEncodings(i, true),
                            rtcp: this.selectRtcp(i, true)
                        });
                    }
                }
                this._remoteMedia._setMediaStream(this._remoteNativeMediaStream);
            };
            WebRtcConnection.prototype.startOrtcTrack = function (iceGatherer, iceTransport, dtlsTransport, localMediaDescription, remoteMediaDescription) {
                var _this = this;
                var iceRole = 'controlling';
                if (localMediaDescription.dtlsParams.role == 'client' ||
                    remoteMediaDescription.dtlsParams.role == 'server') {
                    iceRole = 'controlled';
                }
                iceGatherer.onerror = function (evt) {
                    if (_this.setState(icelink.ConnectionState.Failing, new icelink.Error(icelink.ErrorCode.IceStartError, new icelink.Exception('An ICE gatherer error occurred.')))) {
                        _this.doClose();
                        _this.setState(icelink.ConnectionState.Failed);
                    }
                };
                dtlsTransport.onerror = function (evt) {
                    if (_this.setState(icelink.ConnectionState.Failing, new icelink.Error(icelink.ErrorCode.DtlsInternalError, new icelink.Exception('A DTLS transport error occurred.')))) {
                        _this.doClose();
                        _this.setState(icelink.ConnectionState.Failed);
                    }
                };
                iceTransport.onicestatechange = function (evt) {
                    icelink.Log.debug('ORTC ICE transport state has changed to ' + iceTransport.state);
                    if (iceTransport.state == "new") {
                        _this.setIceConnectionState(icelink.IceConnectionState.New);
                        _this.setGatheringState(icelink.IceGatheringState.New);
                    }
                    else if (iceTransport.state == "checking") {
                        _this.setIceConnectionState(icelink.IceConnectionState.Checking);
                        _this.setGatheringState(icelink.IceGatheringState.Gathering);
                    }
                    else if (iceTransport.state == "connected") {
                        _this.setIceConnectionState(icelink.IceConnectionState.Connected);
                    }
                    else if (iceTransport.state == "completed") {
                        _this.setIceConnectionState(icelink.IceConnectionState.Completed);
                        _this.setGatheringState(icelink.IceGatheringState.Complete);
                    }
                    else if (iceTransport.state == "disconnected") {
                        _this.setIceConnectionState(icelink.IceConnectionState.Disconnected);
                    }
                    else if (iceTransport.state == "closed") {
                        _this.setIceConnectionState(icelink.IceConnectionState.Closed);
                    }
                };
                dtlsTransport.ondtlsstatechange = function (evt) {
                    icelink.Log.debug('ORTC DTLS transport state has changed to ' + dtlsTransport.state);
                    if (dtlsTransport.state == 'connected') {
                        _this._transportsRemaining--;
                        if (_this._transportsRemaining == 0) {
                            _this.setState(icelink.ConnectionState.Connected);
                        }
                    }
                };
                iceTransport.start(iceGatherer, remoteMediaDescription.iceParams, iceRole);
                dtlsTransport.start(remoteMediaDescription.dtlsParams);
            };
            WebRtcConnection.prototype.selectCodecs = function (mediaIndex) {
                var localMediaDescription = this._ortcLocalDescription.mediaDescriptions[mediaIndex];
                var remoteMediaDescription = this._ortcRemoteDescription.mediaDescriptions[mediaIndex];
                var selectedCodecs = [];
                for (var _i = 0, _a = localMediaDescription.codecCaps; _i < _a.length; _i++) {
                    var localCodec = _a[_i];
                    for (var _b = 0, _c = remoteMediaDescription.codecCaps; _b < _c.length; _b++) {
                        var remoteCodec = _c[_b];
                        if (localCodec.name.toLowerCase() == remoteCodec.name.toLowerCase() &&
                            localCodec.clockRate == remoteCodec.clockRate &&
                            localCodec.numChannels == remoteCodec.numChannels &&
                            localCodec.preferredPayloadType == remoteCodec.preferredPayloadType) {
                            selectedCodecs.push({
                                name: localCodec.name,
                                payloadType: localCodec.preferredPayloadType,
                                clockRate: localCodec.clockRate,
                                numChannels: localCodec.numChannels,
                                rtcpFeedback: localCodec.rtcpFeedback,
                                parameters: localCodec.parameters
                            });
                            break;
                        }
                    }
                }
                return selectedCodecs;
            };
            WebRtcConnection.prototype.selectEncodings = function (mediaIndex, send) {
                var localMediaDescription = this._ortcLocalDescription.mediaDescriptions[mediaIndex];
                var remoteMediaDescription = this._ortcRemoteDescription.mediaDescriptions[mediaIndex];
                return [{
                        active: true,
                        codecPayloadType: 0,
                        //dependencyEncodingId: undefined,
                        //encodingId: undefined,
                        fec: 0,
                        framerateBias: 0.5,
                        framerateScale: 1,
                        maxBitrate: 2000000,
                        minQuality: 0,
                        priority: 1,
                        resolutionScale: 1,
                        rtx: 0,
                        ssrc: send ? localMediaDescription.ssrc : remoteMediaDescription.ssrc
                    }];
            };
            WebRtcConnection.prototype.selectRtcp = function (mediaIndex, send) {
                var localMediaDescription = this._ortcLocalDescription.mediaDescriptions[mediaIndex];
                var remoteMediaDescription = this._ortcRemoteDescription.mediaDescriptions[mediaIndex];
                return {
                    cname: '',
                    mux: true,
                    reducedSize: false,
                    ssrc: 0
                };
            };
            WebRtcConnection.prototype.doAddRemoteCandidate = function (promise, remoteCandidate) {
                var _this = this;
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (icelink.Plugin.hasOrtc()) {
                            if (_this._remoteCandidatesDone) {
                                throw new icelink.Exception('Could not add remote candidate. End of candidates has been signalled.');
                            }
                            var ortcCandidate = _this.ortcCandidateFromCandidate(remoteCandidate);
                            if (ortcCandidate.candidate.protocol == icelink.sdp.ice.TransportProtocol.getTcp() && !_this._ortcSupportsTcp) {
                                throw new icelink.Exception('ORTC does not currently support the TCP protocol.');
                            }
                            if (_this._nativeIceTransports[ortcCandidate.mediaIndex].state != "closed") {
                                _this._nativeIceTransports[ortcCandidate.mediaIndex].addRemoteCandidate(ortcCandidate.candidate);
                            }
                            // wait briefly before signalling "no more candidates"                        
                            _this.setRemoteCandidatesDoneTimer();
                            promise.resolve(remoteCandidate);
                        }
                        else {
                            var successCallback = function () {
                                promise.resolve(remoteCandidate);
                            };
                            var failureCallback = function (ex) {
                                promise.reject(ex);
                            };
                            try {
                                _this._nativePeerConnection.addIceCandidate(_this.webrtcCandidateFromCandidate(remoteCandidate)).then(successCallback, failureCallback);
                            }
                            catch (error) {
                                // deprecated API
                                _this._nativePeerConnection.addIceCandidate(_this.webrtcCandidateFromCandidate(remoteCandidate), successCallback, failureCallback);
                            }
                        }
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                });
            };
            WebRtcConnection.prototype.setRemoteCandidatesDoneTimer = function () {
                var _this = this;
                // wait briefly before signalling "no more candidates"
                if (this._remoteCandidatesTimer) {
                    clearTimeout(this._remoteCandidatesTimer);
                }
                this._remoteCandidatesTimer = setTimeout(function () {
                    if (_this.getState() != icelink.ConnectionState.Connected) {
                        for (var i = 0; i < _this._nativeIceTransports.length; i++) {
                            //this._nativeIceTransports[i].addRemoteCandidate(<RTCIceCandidateComplete>{});
                            var iceTransport = _this._nativeIceTransports[i];
                            if (iceTransport.state === "new" && iceTransport.getRemoteCandidates().length > 0) {
                                iceTransport.addRemoteCandidate({});
                            }
                        }
                        _this._remoteCandidatesDone = true;
                    }
                }, 1500); //TODO: this.getEarlyCandidatesTimeout());
            };
            WebRtcConnection.prototype.assignRemoteDescriptionInternal = function (sessionDescription) {
                throw new icelink.Exception('assignRemoteDescriptionInternal');
            };
            WebRtcConnection.prototype.close = function () {
                if (this.setState(icelink.ConnectionState.Closing)) {
                    this.doClose();
                    this.setState(icelink.ConnectionState.Closed);
                }
            };
            WebRtcConnection.prototype.doClose = function () {
                if (icelink.Plugin.hasOrtc()) {
                    if (this._nativeRtpSenders) {
                        for (var _i = 0, _a = this._nativeRtpSenders; _i < _a.length; _i++) {
                            var rtpSender = _a[_i];
                            try {
                                rtpSender.stop();
                            }
                            catch (error) { }
                        }
                        this._nativeRtpSenders = [];
                    }
                    if (this._nativeRtpReceivers) {
                        for (var _b = 0, _c = this._nativeRtpReceivers; _b < _c.length; _b++) {
                            var rtpReceiver = _c[_b];
                            try {
                                rtpReceiver.stop();
                            }
                            catch (error) { }
                        }
                        this._nativeRtpReceivers = [];
                    }
                    if (this._nativeIceTransports) {
                        for (var _d = 0, _e = this._nativeIceTransports; _d < _e.length; _d++) {
                            var iceTransport = _e[_d];
                            try {
                                iceTransport.stop();
                            }
                            catch (error) { }
                        }
                        this._nativeIceTransports = [];
                    }
                    if (this._nativeDtlsTransports) {
                        for (var _f = 0, _g = this._nativeDtlsTransports; _f < _g.length; _f++) {
                            var dtlsTransport = _g[_f];
                            try {
                                dtlsTransport.stop();
                            }
                            catch (error) { }
                        }
                        this._nativeDtlsTransports = [];
                    }
                }
                else {
                    if (this._nativePeerConnection) {
                        try {
                            this._nativePeerConnection.close();
                        }
                        catch (error) { }
                    }
                }
            };
            WebRtcConnection.prototype.getDtmfSender = function () {
                if (!this.dtmfSender) {
                    if (icelink.Plugin.hasOrtc()) {
                        if (!this._nativeRtpSenders) {
                            return null;
                        }
                        var senders = this._nativeRtpSenders;
                        var audioSender = null;
                        for (var _i = 0, senders_1 = senders; _i < senders_1.length; _i++) {
                            var sender = senders_1[_i];
                            if (sender.track && sender.track.kind == 'audio') {
                                audioSender = sender;
                            }
                        }
                        if (!audioSender) {
                            icelink.Log.error('Cannot insert DTMF tones. Connection does not have a sending audio stream.');
                            return null;
                        }
                        this.dtmfSender = new RTCDtmfSender(audioSender);
                    }
                    else {
                        if (!this._nativePeerConnection) {
                            return null;
                        }
                        if (this._nativePeerConnection.createDTMFSender) {
                            var mediaStreams = this._mediaStreams;
                            var audioStream = null;
                            for (var _a = 0, mediaStreams_2 = mediaStreams; _a < mediaStreams_2.length; _a++) {
                                var mediaStream = mediaStreams_2[_a];
                                if (mediaStream.getType() == icelink.StreamType.Audio) {
                                    audioStream = mediaStream;
                                }
                            }
                            if (!audioStream) {
                                icelink.Log.error('Cannot insert DTMF tones. Connection does not have an audio stream.');
                                return null;
                            }
                            var localAudioTrack = audioStream.getLocalTrack();
                            if (!localAudioTrack) {
                                icelink.Log.error('Cannot insert DTMF tones. Connection does not have a local audio track.');
                                return null;
                            }
                            var nativeAudioTrack = localAudioTrack._getMediaStreamTrack();
                            if (!nativeAudioTrack) {
                                return null;
                            }
                            this.dtmfSender = this._nativePeerConnection.createDTMFSender(nativeAudioTrack);
                        }
                        else {
                            if (!this._nativePeerConnection.getSenders) {
                                icelink.Log.error('Cannot insert DTMF tones. Browser does not support getSenders.');
                                return null;
                            }
                            var senders = this._nativePeerConnection.getSenders();
                            var audioSender = null;
                            for (var _b = 0, senders_2 = senders; _b < senders_2.length; _b++) {
                                var sender = senders_2[_b];
                                if (sender.track && sender.track.kind == 'audio') {
                                    audioSender = sender;
                                }
                            }
                            if (!audioSender) {
                                icelink.Log.error('Cannot insert DTMF tones. Connection does not have an audio sender.');
                                return null;
                            }
                            if (!audioSender.dtmf) {
                                icelink.Log.error('Cannot insert DTMF tones. Browser does not support DTMF.');
                                return null;
                            }
                            this.dtmfSender = audioSender.dtmf;
                        }
                    }
                }
                return this.dtmfSender;
            };
            WebRtcConnection.prototype.replaceLocalTrack = function (localTrack, mediaStream) {
                var promise = new icelink.Promise();
                try {
                    var mediaStreamIndex = 0;
                    var mediaStreams = this.getMediaStreams();
                    for (var _i = 0, mediaStreams_3 = mediaStreams; _i < mediaStreams_3.length; _i++) {
                        var ms = mediaStreams_3[_i];
                        if (ms == mediaStream) {
                            break;
                        }
                        mediaStreamIndex++;
                    }
                    if (mediaStreamIndex == mediaStreams.length) {
                        throw new icelink.Exception('Media stream is not attached to this connection.');
                    }
                    var rtpSender = this.getRtpSender(mediaStreamIndex);
                    if (!rtpSender.replaceTrack) {
                        throw new icelink.Exception('Browser does not support replaceTrack.');
                    }
                    rtpSender.replaceTrack(localTrack._getMediaStreamTrack() /*, local media stream*/).then(function () {
                        promise.resolve(null);
                    }, function (ex) {
                        promise.reject(ex);
                    });
                    promise.resolve(null);
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            WebRtcConnection.prototype.replaceRemoteTrack = function (remoteTrack, mediaStream) {
                return icelink.Promise.rejectNow(new icelink.Exception('Replacing the remote track is not supported.'));
            };
            WebRtcConnection.prototype.getRtpSender = function (mediaStreamIndex) {
                var rtpSenders = [];
                if (icelink.Plugin.hasOrtc()) {
                    if (!this._nativeRtpSenders) {
                        throw new icelink.Exception('ORTC peer connection not initialized.');
                    }
                    rtpSenders = this._nativeRtpSenders;
                }
                else {
                    if (!this._nativePeerConnection) {
                        throw new icelink.Exception('WebRTC peer connection not initialized.');
                    }
                    if (!this._nativePeerConnection.getSenders) {
                        throw new icelink.Exception('WebRTC browser does not support getSenders.');
                    }
                    rtpSenders = this._nativePeerConnection.getSenders();
                }
                if (mediaStreamIndex >= rtpSenders.length) {
                    throw new icelink.Exception('Media stream index exceeds RTP senders count.');
                }
                return rtpSenders[mediaStreamIndex];
            };
            /** @internal */
            WebRtcConnection.webRtcConnectionInitialize = function () {
                if (!this.__webRtcConnectionInitialized) {
                    window.RTCPeerConnection = window.RTCPeerConnection ||
                        window.webkitRTCPeerConnection ||
                        window.mozRTCPeerConnection ||
                        window.msRTCPeerConnection;
                    window.RTCDataChannel = window.RTCDataChannel ||
                        window.webkitRTCDataChannel ||
                        window.mozRTCDataChannel ||
                        window.msRTCDataChannel;
                    window.RTCSessionDescription = window.RTCSessionDescription ||
                        window.webkitRTCSessionDescription ||
                        window.mozRTCSessionDescription ||
                        window.msRTCPeerConnection;
                    window.RTCIceCandidate = window.RTCIceCandidate ||
                        window.webkitRTCIceCandidate ||
                        window.mozRTCIceCandidate ||
                        window.msRTCIceCandidate;
                }
                fm.icelink.WebRtcConnection.__webRtcConnectionInitialized = true;
            };
            /** @internal */
            WebRtcConnection.__webRtcConnectionInitialized = false;
            return WebRtcConnection;
        }(icelink.WebRtcConnectionBase));
        icelink.WebRtcConnection = WebRtcConnection;
        fm.icelink.WebRtcConnection.webRtcConnectionInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Data channel base properties/methods.
         </div>
    
        */
        var WebRtcDataChannelBase = /** @class */ (function (_super) {
            __extends(WebRtcDataChannelBase, _super);
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.dataChannelBase` class.
             </div>
    
            @param {string} label The label.
            @param {boolean} ordered Whether messages will be delivered in the order they are sent.
            @param {string} subprotocol The subprotocol.
            @return {}
            */
            function WebRtcDataChannelBase(label, ordered, subprotocol) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var label_1 = __arguments[0];
                    var ordered_1 = __arguments[1];
                    var subprotocol_1 = __arguments[2];
                    _this = _super.call(this) || this;
                    _this.fmicelinkWebRtcDataChannelBaseInit();
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                    _this.__stateLock = new Object();
                    _this.setLabel(label_1);
                    _this.setOrdered(ordered_1);
                    _this.setSubprotocol(subprotocol_1);
                    _this.__stateMachine = new fm.icelink.DataChannelStateMachine();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcDataChannelBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDataChannelBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebRtcDataChannelBase.prototype.fmicelinkWebRtcDataChannelBaseInit = function () {
                var _this = this;
                this.__onStateChange = [];
                this._onStateChange = function (p0) { for (var _i = 0, _a = _this.__onStateChange; _i < _a.length; _i++) {
                    var action = _a[_i];
                    action(p0);
                } };
                this._ordered = false;
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-addOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Adds a handler that is raised when the data channel state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TDataChannel>} value
            @return {void}
            */
            WebRtcDataChannelBase.prototype.addOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getConnectionId'>&nbsp;</span>**/
            /**
             <div>
             Gets the connection identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcDataChannelBase.prototype.getConnectionId = function () {
                if (arguments.length == 0) {
                    return this._connectionId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcDataChannelBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the data channel is currently closed or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcDataChannelBase.prototype.getIsTerminated = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Closed)) || (fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Failed)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminating'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the data channel is currently closing.
             </div>
    
    
            @return {boolean}
            */
            WebRtcDataChannelBase.prototype.getIsTerminating = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Closing));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the data channel is currently closing, closed, or failed.
             </div>
    
    
            @return {boolean}
            */
            WebRtcDataChannelBase.prototype.getIsTerminatingOrTerminated = function () {
                if (arguments.length == 0) {
                    return (this.getIsTerminating() || this.getIsTerminated());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getLabel'>&nbsp;</span>**/
            /**
             <div>
             Gets the label.
             </div>
    
    
            @return {string}
            */
            WebRtcDataChannelBase.prototype.getLabel = function () {
                if (arguments.length == 0) {
                    return this._label;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getOnReceive'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to execute when a message is received.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>}
            */
            WebRtcDataChannelBase.prototype.getOnReceive = function () {
                if (arguments.length == 0) {
                    return this._onReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getOrdered'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether messages will be delivered in the order they are sent.
             </div>
    
    
            @return {boolean}
            */
            WebRtcDataChannelBase.prototype.getOrdered = function () {
                if (arguments.length == 0) {
                    return this._ordered;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state.
             </div>
    
    
            @return {fm.icelink.DataChannelState}
            */
            WebRtcDataChannelBase.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this.__stateMachine.getState();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.getStateLock = function () {
                if (arguments.length == 0) {
                    return this.__stateLock;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getStreamId'>&nbsp;</span>**/
            /**
             <div>
             Gets the stream identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcDataChannelBase.prototype.getStreamId = function () {
                if (arguments.length == 0) {
                    return this._streamId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-getSubprotocol'>&nbsp;</span>**/
            /**
             <div>
             Gets the subprotocol.
             </div>
    
    
            @return {string}
            */
            WebRtcDataChannelBase.prototype.getSubprotocol = function () {
                if (arguments.length == 0) {
                    return this._subprotocol;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.logInvalidStateTransition = function (state) {
                if (arguments.length == 1) {
                    if (fm.icelink.Log.getIsDebugEnabled()) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Data channel {0} ({1}) state for stream {2} for connection {3} is currently {4}. Cannot transition to {5} state.", [this.getId(), this.getLabel(), this.getStreamId(), this.getConnectionId(), fm.icelink.StringExtensions.toLower(new fm.icelink.DataChannelStateWrapper(this.getState()).toString()), fm.icelink.StringExtensions.toLower(new fm.icelink.DataChannelStateWrapper(state).toString())]));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-processStateChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state change.
             </div>
    
    
            @return {void}
            */
            WebRtcDataChannelBase.prototype.processStateChange = function () {
                if (arguments.length == 0) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-processStateLockChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state lock change.
             </div>
    
    
            @return {void}
            */
            WebRtcDataChannelBase.prototype.processStateLockChange = function () {
                if (arguments.length == 0) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-raiseDataBytes'>&nbsp;</span>**/
            /**
             <div>
             Raises the OnReceive callback with data bytes.
             </div>
    
            @param {fm.icelink.DataBuffer} dataBytes The data bytes.
            @return {void}
            */
            WebRtcDataChannelBase.prototype.raiseDataBytes = function (dataBytes) {
                if (arguments.length == 1) {
                    var onReceive = this.getOnReceive();
                    if ((!fm.icelink.Global.equals(onReceive, null))) {
                        var p = new fm.icelink.DataChannelReceiveArgs();
                        p.setDataBytes(dataBytes);
                        onReceive(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-raiseDataString'>&nbsp;</span>**/
            /**
             <div>
             Raises the OnReceive callback with a data string.
             </div>
    
            @param {string} dataString The data string.
            @return {void}
            */
            WebRtcDataChannelBase.prototype.raiseDataString = function (dataString) {
                if (arguments.length == 1) {
                    var onReceive = this.getOnReceive();
                    if ((!fm.icelink.Global.equals(onReceive, null))) {
                        var p = new fm.icelink.DataChannelReceiveArgs();
                        p.setDataString(dataString);
                        onReceive(p);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.raiseStateChange = function () {
                if (arguments.length == 0) {
                    var onStateChange = this._onStateChange;
                    if ((!fm.icelink.Global.equals(onStateChange, null))) {
                        onStateChange(this.getInstance());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-removeOnStateChange'>&nbsp;</span>**/
            /**
             <div>
             Removes a handler that is raised when the data channel state changes.
             </div>
    
    
            @param {fm.icelink.IAction1<TDataChannel>} value
            @return {void}
            */
            WebRtcDataChannelBase.prototype.removeOnStateChange = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.remove(this.__onStateChange, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setConnectionId = function (value) {
                if (arguments.length == 1) {
                    this._connectionId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setLabel = function (value) {
                if (arguments.length == 1) {
                    this._label = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataChannelBase-setOnReceive'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to execute when a message is received.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>} value
            @return {void}
            */
            WebRtcDataChannelBase.prototype.setOnReceive = function (value) {
                if (arguments.length == 1) {
                    this._onReceive = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setOrdered = function (value) {
                if (arguments.length == 1) {
                    this._ordered = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setState = function (state) {
                if (arguments.length == 1) {
                    if (!this.__stateMachine.transition(state)) {
                        if (((!fm.icelink.Global.equals(state, this.getState())) && ((!fm.icelink.Global.equals(state, fm.icelink.DataChannelState.Closing)) || ((!fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Closed)) && (!fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Failed)))))) {
                            this.logInvalidStateTransition(state);
                        }
                        return false;
                    }
                    if (fm.icelink.Log.getIsInfoEnabled()) {
                        if ((fm.icelink.Global.equals(this.getState(), fm.icelink.DataChannelState.Connected))) {
                            fm.icelink.Log.info(fm.icelink.StringExtensions.format("Data channel {0} ({1} for stream {2} for connection {3} took {4}ms to connect.", [this.getId(), this.getLabel(), this.getStreamId(), this.getConnectionId(), fm.icelink.IntExtensions.toString(this.__stateMachine.getLastStateMillis())]));
                        }
                        fm.icelink.Log.info(fm.icelink.StringExtensions.format("Setting data channel {0} ({1}) state for stream {2} for connection {3} to {4}.", [this.getId(), this.getLabel(), this.getStreamId(), this.getConnectionId(), fm.icelink.StringExtensions.toLower(new fm.icelink.DataChannelStateWrapper(this.getState()).toString())]));
                    }
                    this.raiseStateChange();
                    this.processStateChange();
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setStateLock = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__stateLock, value))) {
                        this.__stateLock = value;
                        this.processStateLockChange();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setStreamId = function (value) {
                if (arguments.length == 1) {
                    this._streamId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataChannelBase.prototype.setSubprotocol = function (value) {
                if (arguments.length == 1) {
                    this._subprotocol = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcDataChannelBase;
        }(fm.icelink.Dynamic));
        icelink.WebRtcDataChannelBase = WebRtcDataChannelBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcDataChannelBase.ts" />

(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcDataChannel = /** @class */ (function (_super) {
            __extends(WebRtcDataChannel, _super);
            function WebRtcDataChannel(external, label, ordered, subprotocol) {
                var _this = this;
                if (icelink.Util.isNullOrUndefined(ordered)) {
                    ordered = true;
                }
                if (icelink.Util.isNullOrUndefined(subprotocol)) {
                    subprotocol = '';
                }
                _this = _super.call(this, label, ordered, subprotocol) || this;
                _this._external = external;
                _this.sendQueue = [];
                return _this;
            }
            WebRtcDataChannel.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDataChannel]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcDataChannel.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcDataChannel.prototype.getNativeDataChannel = function () {
                return this._nativeDataChannel;
            };
            WebRtcDataChannel.prototype.setNativeDataChannel = function (nativeDataChannel) {
                var _this = this;
                if (nativeDataChannel != this._nativeDataChannel) {
                    if (this._nativeDataChannel) {
                        this._nativeDataChannel.onmessage = null;
                    }
                    this._nativeDataChannel = nativeDataChannel;
                    if (this._nativeDataChannel) {
                        this._nativeDataChannel.onmessage = function (event) {
                            if (icelink.Util.isString(event.data)) {
                                _this.raiseDataString(event.data);
                            }
                            else {
                                _this.raiseDataBytes(icelink.DataBuffer.wrap(new Uint8Array(event.data)));
                            }
                        };
                        this.setState(icelink.DataChannelState.Connecting);
                        this._nativeDataChannel.onopen = function (event) {
                            _this.setState(icelink.DataChannelState.Connected);
                            _this._nativeDataChannel.binaryType = 'arraybuffer';
                            _this.sendQueue.forEach(function (msg) { return _this._nativeDataChannel.send(msg); });
                        };
                        this._nativeDataChannel.onerror = function (event) {
                            _this.setState(icelink.DataChannelState.Failed);
                        };
                        this._nativeDataChannel.onclose = function (event) {
                            if (_this.setState(icelink.DataChannelState.Closing)) {
                                _this.setState(icelink.DataChannelState.Closed);
                            }
                        };
                    }
                }
            };
            WebRtcDataChannel.prototype.getInstance = function () {
                return this;
            };
            WebRtcDataChannel.prototype.sendDataString = function (dataString) {
                var promise = new icelink.Promise();
                this.promisedSendDataString(dataString, promise);
                return promise;
            };
            /** @internal */
            WebRtcDataChannel.prototype.promisedSendDataBytes = function (dataBytes, promise) {
                var nativeDataChannel = this.getNativeDataChannel();
                if (nativeDataChannel) {
                    var state = nativeDataChannel.readyState;
                    if (state === 'open') {
                        nativeDataChannel.send(dataBytes.toArray());
                        promise.resolve(dataBytes);
                    }
                    else if (state == 'connecting') {
                        this.sendQueue.push(dataBytes.toArray());
                        promise.resolve(dataBytes);
                    }
                    else {
                        var errorStr = 'Attempt to communicate on a data channel that is not open or connecting.';
                        icelink.Log.debug(errorStr);
                        promise.reject(new icelink.Exception(errorStr));
                    }
                }
                else {
                    var errorStr = 'Attempt to communicate on a data channel that has not been prepared.';
                    icelink.Log.debug(errorStr);
                    promise.reject(new icelink.Exception(errorStr));
                }
            };
            /** @internal */
            WebRtcDataChannel.prototype.promisedSendDataString = function (dataString, promise) {
                var nativeDataChannel = this.getNativeDataChannel();
                if (nativeDataChannel) {
                    var state = nativeDataChannel.readyState;
                    if (state === 'open') {
                        nativeDataChannel.send(dataString);
                        promise.resolve(dataString);
                    }
                    else if (state == 'connecting') {
                        this.sendQueue.push(dataString);
                        promise.resolve(dataString);
                    }
                    else {
                        var errorStr = 'Attempt to communicate on a data channel that is not open or connecting.';
                        icelink.Log.debug(errorStr);
                        promise.reject(new icelink.Exception(errorStr));
                    }
                }
                else {
                    var errorStr = 'Attempt to communicate on a data channel that has not been prepared.';
                    icelink.Log.debug(errorStr);
                    promise.reject(new icelink.Exception(errorStr));
                }
            };
            WebRtcDataChannel.prototype.sendDataBytes = function (dataBytes) {
                var promise = new icelink.Promise();
                this.promisedSendDataBytes(dataBytes, promise);
                return promise;
            };
            return WebRtcDataChannel;
        }(icelink.WebRtcDataChannelBase));
        icelink.WebRtcDataChannel = WebRtcDataChannel;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcStream.ts" />

/// <reference path="WebRtcStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Data stream base properties/methods.
         </div>
    
        */
        var WebRtcDataStreamBase = /** @class */ (function (_super) {
            __extends(WebRtcDataStreamBase, _super);
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.dataStreamBase` class.
             </div>
    
    
            @return {}
            */
            function WebRtcDataStreamBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this, fm.icelink.StreamType.Application) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcDataStreamBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDataStreamBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-changeDirection'>&nbsp;</span>**/
            /**
             <div>
             Changes this stream's direction
             </div>
    
    
            @param {fm.icelink.StreamDirection} newDirection
            @return {fm.icelink.Error}
            */
            WebRtcDataStreamBase.prototype.changeDirection = function (newDirection) {
                if (arguments.length == 1) {
                    return new fm.icelink.Error(fm.icelink.ErrorCode.DataStreamDirectionCannotBeChanged, new fm.icelink.Exception("Changes to Stream Direction of Data Streams are not permitted."));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-getDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the current direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcDataStreamBase.prototype.getDirection = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StreamDirection.SendReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcDataStreamBase.prototype.getDirectionCapabilities = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StreamDirection.SendReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-getLabel'>&nbsp;</span>**/
            /**
             <div>
             Gets a label that identifies this class.
             </div>
    
    
            @return {string}
            */
            WebRtcDataStreamBase.prototype.getLabel = function () {
                if (arguments.length == 0) {
                    return "Data Stream";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-getLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the current direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcDataStreamBase.prototype.getLocalDirection = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StreamDirection.SendReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-getRemoteDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the current direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            WebRtcDataStreamBase.prototype.getRemoteDirection = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StreamDirection.SendReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-processStateChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state change.
             </div>
    
    
            @return {void}
            */
            WebRtcDataStreamBase.prototype.processStateChange = function () {
                if (arguments.length == 0) {
                    _super.prototype.processStateChange.call(this);
                    var channels = this.getChannels();
                    if ((!fm.icelink.Global.equals(channels, null))) {
                        for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {
                            var local = channels_1[_i];
                            if ((fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.StreamState.Closing))) {
                                local.setState(fm.icelink.DataChannelState.Closing);
                            }
                            else {
                                if ((fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.StreamState.Closed))) {
                                    local.setState(fm.icelink.DataChannelState.Closed);
                                }
                                else {
                                    if ((fm.icelink.Global.equals(_super.prototype.getState.call(this), fm.icelink.StreamState.Failed))) {
                                        local.setState(fm.icelink.DataChannelState.Failed);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-processStateLockChange'>&nbsp;</span>**/
            /**
             <div>
             Processes a state lock change.
             </div>
    
    
            @return {void}
            */
            WebRtcDataStreamBase.prototype.processStateLockChange = function () {
                if (arguments.length == 0) {
                    _super.prototype.processStateLockChange.call(this);
                    var channels = this.getChannels();
                    if ((!fm.icelink.Global.equals(channels, null))) {
                        for (var _i = 0, channels_2 = channels; _i < channels_2.length; _i++) {
                            var local = channels_2[_i];
                            local.setStreamId(_super.prototype.getId.call(this));
                            local.setConnectionId(_super.prototype.getConnectionId.call(this));
                            local.setStateLock(_super.prototype.getStateLock.call(this));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-setLocalDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets the current direction.
             </div>
    
    
            @param {fm.icelink.StreamDirection} value
            @return {void}
            */
            WebRtcDataStreamBase.prototype.setLocalDirection = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(value, fm.icelink.StreamDirection.SendReceive))) {
                        throw new fm.icelink.Exception("Local direction other than SendReceive for DataStreams is not currently supported.");
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcDataStreamBase-setRemoteDirection'>&nbsp;</span>**/
            /**
             <div>
             Sets the current direction.
             </div>
    
    
            @param {fm.icelink.StreamDirection} value
            @return {void}
            */
            WebRtcDataStreamBase.prototype.setRemoteDirection = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(value, fm.icelink.StreamDirection.SendReceive))) {
                        throw new fm.icelink.Exception("Remote direction other than SendReceive for DataStreams is not currently supported.");
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcDataStreamBase;
        }(fm.icelink.WebRtcStream));
        icelink.WebRtcDataStreamBase = WebRtcDataStreamBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcDataStreamBase.ts" />

/// <reference path="WebRtcDataStreamBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcDataStream = /** @class */ (function (_super) {
            __extends(WebRtcDataStream, _super);
            function WebRtcDataStream(external, channels) {
                var _this = _super.call(this) || this;
                _this._external = external;
                _this._channels = channels;
                return _this;
            }
            WebRtcDataStream.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDataStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcDataStream.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcDataStream.prototype.getChannels = function () {
                return this._channels;
            };
            return WebRtcDataStream;
        }(icelink.WebRtcDataStreamBase));
        icelink.WebRtcDataStream = WebRtcDataStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcDomAudioSink = /** @class */ (function (_super) {
            __extends(WebRtcDomAudioSink, _super);
            function WebRtcDomAudioSink(external, track) {
                var _this = _super.call(this) || this;
                _this._external = external;
                _this._audio = document.createElement('audio');
                _this._audio.setAttribute('autoplay', 'autoplay');
                _this.setTrack(track);
                return _this;
            }
            WebRtcDomAudioSink.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDomAudioSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcDomAudioSink.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcDomAudioSink.prototype.getTrack = function () {
                return this._track;
            };
            WebRtcDomAudioSink.prototype.getLocal = function () {
                return this._local;
            };
            WebRtcDomAudioSink.prototype.getAudio = function () {
                return this._audio;
            };
            WebRtcDomAudioSink.prototype.getVolume = function () {
                return this._audio.volume;
            };
            WebRtcDomAudioSink.prototype.setVolume = function (volume) {
                this._audio.volume = volume;
            };
            WebRtcDomAudioSink.prototype.getMuted = function () {
                return this._audio.muted;
            };
            WebRtcDomAudioSink.prototype.setMuted = function (muted) {
                this._audio.muted = muted;
            };
            WebRtcDomAudioSink.prototype.setTrack = function (track) {
                var _this = this;
                if (!track) {
                    return false;
                }
                this._track = track;
                this._local = icelink.Util.isObjectType(track.getMedia(), '[fm.icelink.WebRtcLocalMedia]');
                this.setMuted(this.getLocal());
                icelink.ManagedThread.dispatch(function () {
                    var nativeMediaStream = track.getMedia()._getAudioMediaStream();
                    try {
                        if (typeof _this._audio.srcObject != 'undefined') {
                            _this._audio.srcObject = nativeMediaStream;
                        }
                        else if (typeof _this._audio.mozSrcObject != 'undefined') {
                            _this._audio.mozSrcObject = nativeMediaStream;
                        }
                        else if (typeof window.attachMediaStream != 'undefined') {
                            window.attachMediaStream(_this._audio, nativeMediaStream);
                        }
                        else {
                            URL = window.URL || window.webkitURL;
                            _this._audio.src = URL.createObjectURL(nativeMediaStream);
                        }
                    }
                    catch (error) {
                        icelink.Log.error('Could not attach ' + (_this.getLocal() ? 'local' : 'remote') + ' media stream to audio element.', error);
                    }
                    if (navigator.mozGetUserMedia) {
                        _this._audio.play();
                    }
                });
                return true;
            };
            return WebRtcDomAudioSink;
        }(icelink.Dynamic));
        icelink.WebRtcDomAudioSink = WebRtcDomAudioSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcDomVideoSink = /** @class */ (function (_super) {
            __extends(WebRtcDomVideoSink, _super);
            function WebRtcDomVideoSink(external, track) {
                var _this = _super.call(this) || this;
                _this._external = external;
                _this._container = document.createElement('div');
                _this._container.style.position = 'relative';
                _this._container.style.overflow = 'hidden';
                _this._container.className = 'fm-video';
                _this._video = document.createElement('video');
                _this._video.style.position = 'absolute';
                _this._video.setAttribute('autoplay', 'autoplay');
                _this._video.setAttribute('playsinline', 'playsinline');
                _this._video.setAttribute('webkit-playsinline', 'webkit-playsinline'); // legacy
                // pausing from DOM removal is auto-reversed
                icelink.Util.observe(_this._video, 'pause', function () {
                    if (!_this._video.parentNode) {
                        _this._video.play();
                    }
                });
                _this._container.appendChild(_this._video);
                _this.setTrack(track);
                return _this;
            }
            WebRtcDomVideoSink.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcDomVideoSink]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcDomVideoSink.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcDomVideoSink.prototype.getTrack = function () {
                return this._track;
            };
            WebRtcDomVideoSink.prototype.getLocal = function () {
                return this._local;
            };
            WebRtcDomVideoSink.prototype.getView = function () {
                return this._container;
            };
            WebRtcDomVideoSink.prototype.getViewScale = function () {
                return this._viewScale;
            };
            WebRtcDomVideoSink.prototype.setViewScale = function (viewScale) {
                this.applyScale(viewScale);
                this._viewScale = viewScale;
            };
            WebRtcDomVideoSink.prototype.getViewMirror = function () {
                return this._viewMirror;
            };
            WebRtcDomVideoSink.prototype.setViewMirror = function (viewMirror) {
                if (viewMirror) {
                    this._container.style.transform = 'scale(-1,1)';
                }
                else {
                    this._container.style.transform = '';
                }
                this._viewMirror = viewMirror;
            };
            WebRtcDomVideoSink.prototype.getVideo = function () {
                return this._video;
            };
            WebRtcDomVideoSink.prototype.getVideoWidth = function () {
                if (this._video) {
                    return this._video.videoWidth;
                }
                return 0;
            };
            WebRtcDomVideoSink.prototype.getVideoHeight = function () {
                if (this._video) {
                    return this._video.videoHeight;
                }
                return 0;
            };
            WebRtcDomVideoSink.prototype.getVolume = function () {
                return this._video.volume;
            };
            WebRtcDomVideoSink.prototype.setVolume = function (volume) {
                this._video.volume = volume;
            };
            WebRtcDomVideoSink.prototype.getMuted = function () {
                return this._video.muted;
            };
            WebRtcDomVideoSink.prototype.setMuted = function (muted) {
                this._video.muted = muted;
            };
            WebRtcDomVideoSink.prototype.setTrack = function (track) {
                var _this = this;
                if (!track) {
                    return false;
                }
                this._track = track;
                this._local = icelink.Util.isObjectType(this._track.getMedia(), '[fm.icelink.WebRtcLocalMedia]');
                if (this._local) {
                    this._container.className = 'fm-video fm-video-local';
                }
                else {
                    this._container.className = 'fm-video fm-video-remote';
                }
                if (this.getLocal()) {
                    var localMedia = this.getTrack().getMedia();
                    var videoConstraints = localMedia.getVideoConstraints();
                    if (localMedia.getScreen()) {
                        this.setViewMirror(false);
                    }
                    else if (videoConstraints) {
                        var facingMode = videoConstraints.facingMode;
                        if (facingMode && facingMode.exact) {
                            facingMode = facingMode.exact;
                        }
                        else if (facingMode && facingMode.ideal) {
                            facingMode = facingMode.ideal;
                        }
                        this.setViewMirror(facingMode == 'user');
                    }
                    else {
                        this.setViewMirror(true);
                    }
                }
                else {
                    this.setViewMirror(false);
                }
                this.setMuted(this.getLocal());
                icelink.ManagedThread.dispatch(function () {
                    var nativeMediaStream = _this.getTrack().getMedia()._getVideoMediaStream();
                    try {
                        _this._video.audioVolume = 0;
                    }
                    catch (error) {
                        icelink.Log.error('Could not set ' + (_this.getLocal() ? 'local' : 'remote') + ' video element audio volume.', error);
                    }
                    try {
                        if (typeof _this._video.srcObject !== 'undefined') {
                            _this._video.srcObject = nativeMediaStream;
                        }
                        else if (typeof _this._video.mozSrcObject !== 'undefined') {
                            _this._video.mozSrcObject = nativeMediaStream;
                        }
                        else if (typeof window.attachMediaStream !== 'undefined') {
                            var detached = _this._container.parentNode == null;
                            if (detached) {
                                document.body.appendChild(_this._container);
                            }
                            window.attachMediaStream(_this._video, nativeMediaStream);
                            _this._video = _this._container.firstChild;
                            if (detached) {
                                document.body.removeChild(_this._container);
                            }
                        }
                        else {
                            URL = window.URL || window.webkitURL;
                            _this._video.src = URL.createObjectURL(nativeMediaStream);
                        }
                    }
                    catch (error) {
                        icelink.Log.error('Could not attach ' + (_this.getLocal() ? 'local' : 'remote') + ' media stream to video element.', error);
                    }
                    _this._video.play();
                    _this.setViewScale(_this.getViewScale() || icelink.LayoutScale.Contain);
                });
                return true;
            };
            WebRtcDomVideoSink.prototype.applyScale = function (scale) {
                var _this = this;
                if (this._video.style.hasOwnProperty('objectFit')) {
                    this._video.style.width = '100%';
                    this._video.style.height = '100%';
                    switch (scale) {
                        case icelink.LayoutScale.Contain: {
                            this._video.style.objectFit = 'contain';
                            break;
                        }
                        case icelink.LayoutScale.Cover: {
                            this._video.style.objectFit = 'cover';
                            break;
                        }
                        case icelink.LayoutScale.Stretch: {
                            this._video.style.objectFit = 'fill';
                            break;
                        }
                    }
                }
                else {
                    switch (scale) {
                        case icelink.LayoutScale.Contain: {
                            this._video.style.width = '100%';
                            this._video.style.height = '100%';
                            break;
                        }
                        case icelink.LayoutScale.Cover: {
                            this._container.style.display = 'inline-block';
                            this._video.style.left = '-100%';
                            this._video.style.right = '-100%';
                            this._video.style.top = '-100%';
                            this._video.style.bottom = '-100%';
                            this._video.style.margin = 'auto';
                            this._video.style.maxWidth = 'none';
                            this._video.style.maxHeight = 'none';
                            var rescale_1 = function () {
                                var containerWidth = _this._container.clientWidth;
                                var containerHeight = _this._container.clientHeight;
                                var videoWidth = _this._video.clientWidth;
                                var videoHeight = _this._video.clientHeight;
                                if (!videoHeight || videoWidth / videoHeight > containerWidth / containerHeight) {
                                    // wider
                                    _this._video.style.width = 'auto';
                                    _this._video.style.height = '100%';
                                    _this._video.style.maxWidth = 'none';
                                }
                                else {
                                    // taller
                                    _this._video.style.width = '100%';
                                    _this._video.style.height = 'auto';
                                    _this._video.style.maxWidth = 'none';
                                }
                            };
                            icelink.Util.observe(this._video, 'loadeddata', function () {
                                rescale_1();
                            });
                            icelink.Util.observeAttr(this._container, function (attrName) {
                                if (attrName == 'width' || attrName == 'height' || attrName == 'style') {
                                    rescale_1();
                                }
                            });
                            rescale_1();
                            break;
                        }
                        case icelink.LayoutScale.Stretch: {
                            this._video.style.transformOrigin = '0px 0px';
                            var lastContainerWidth_1 = 0;
                            var lastContainerHeight_1 = 0;
                            var lastVideoWidth_1 = 0;
                            var lastVideoHeight_1 = 0;
                            var rescale_2 = function () {
                                var containerWidth = _this._container.clientWidth;
                                var containerHeight = _this._container.clientHeight;
                                var videoWidth = _this._video.clientWidth;
                                var videoHeight = _this._video.clientHeight;
                                if (containerWidth != lastContainerWidth_1 || containerHeight != lastContainerHeight_1 || videoWidth != lastVideoWidth_1 || videoHeight != lastVideoHeight_1) {
                                    if (videoWidth && videoHeight) {
                                        _this._video.style.transform = 'scale(' + (containerWidth / videoWidth) + ', ' + (containerHeight / videoHeight) + ')';
                                        lastContainerWidth_1 = containerWidth;
                                        lastContainerHeight_1 = containerHeight;
                                        lastVideoWidth_1 = videoWidth;
                                        lastVideoHeight_1 = videoHeight;
                                    }
                                }
                            };
                            icelink.Util.observe(this._video, 'loadeddata', function () {
                                rescale_2();
                            });
                            icelink.Util.observeAttr(this._container, function (attrName) {
                                if (attrName == 'width' || attrName == 'height' || attrName == 'style') {
                                    rescale_2();
                                }
                            });
                            rescale_2();
                            break;
                        }
                    }
                }
            };
            return WebRtcDomVideoSink;
        }(icelink.Dynamic));
        icelink.WebRtcDomVideoSink = WebRtcDomVideoSink;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of audio/video track base methods/properties.
         </div>
    
        */
        var WebRtcMediaBase = /** @class */ (function (_super) {
            __extends(WebRtcMediaBase, _super);
            function WebRtcMediaBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcMediaBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMediaBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioGain'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating the gain
             (input amplification) of the first audio track.
             </div>
    
    
            @return {number}
            */
            WebRtcMediaBase.prototype.getAudioGain = function () {
                if (arguments.length == 0) {
                    var audioTrack = this.getAudioTrack();
                    if ((!fm.icelink.Global.equals(audioTrack, null))) {
                        return audioTrack.getGain();
                    }
                    return 1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioMuted'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the
             first audio track is muted.
             </div>
    
    
            @return {boolean}
            */
            WebRtcMediaBase.prototype.getAudioMuted = function () {
                if (arguments.length == 0) {
                    var audioTrack = this.getAudioTrack();
                    return ((!fm.icelink.Global.equals(audioTrack, null)) && audioTrack.getMuted());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioTrack'>&nbsp;</span>**/
            /**
             <div>
             Gets the first audio track.
             </div>
    
    
            @return {TIAudioTrack}
            */
            WebRtcMediaBase.prototype.getAudioTrack = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getAudioTracks());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioVolume'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating the volume
             (output resistance) of the first audio track.
             </div>
    
    
            @return {number}
            */
            WebRtcMediaBase.prototype.getAudioVolume = function () {
                if (arguments.length == 0) {
                    var audioTrack = this.getAudioTrack();
                    if ((!fm.icelink.Global.equals(audioTrack, null))) {
                        return audioTrack.getVolume();
                    }
                    return 1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            WebRtcMediaBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoMuted'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether the
             first video track is muted.
             </div>
    
    
            @return {boolean}
            */
            WebRtcMediaBase.prototype.getVideoMuted = function () {
                if (arguments.length == 0) {
                    var videoTrack = this.getVideoTrack();
                    return ((!fm.icelink.Global.equals(videoTrack, null)) && videoTrack.getMuted());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoTrack'>&nbsp;</span>**/
            /**
             <div>
             Gets the first video track.
             </div>
    
    
            @return {TIVideoTrack}
            */
            WebRtcMediaBase.prototype.getVideoTrack = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getVideoTracks());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioGain'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating the gain
             (input amplification) of the first audio track.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcMediaBase.prototype.setAudioGain = function (value) {
                if (arguments.length == 1) {
                    var audioTrack = this.getAudioTrack();
                    if ((!fm.icelink.Global.equals(audioTrack, null))) {
                        audioTrack.setGain(value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioMuted'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether the
             first audio track is muted.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            WebRtcMediaBase.prototype.setAudioMuted = function (value) {
                if (arguments.length == 1) {
                    var audioTrack = this.getAudioTrack();
                    if ((!fm.icelink.Global.equals(audioTrack, null))) {
                        audioTrack.setMuted(value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioVolume'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating the volume
             (output resistance) of the first audio track.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebRtcMediaBase.prototype.setAudioVolume = function (value) {
                if (arguments.length == 1) {
                    var audioTrack = this.getAudioTrack();
                    if ((!fm.icelink.Global.equals(audioTrack, null))) {
                        audioTrack.setVolume(value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcMediaBase-setVideoMuted'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether the
             first video track is muted.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            WebRtcMediaBase.prototype.setVideoMuted = function (value) {
                if (arguments.length == 1) {
                    var videoTrack = this.getVideoTrack();
                    if ((!fm.icelink.Global.equals(videoTrack, null))) {
                        videoTrack.setMuted(value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcMediaBase;
        }(fm.icelink.Dynamic));
        icelink.WebRtcMediaBase = WebRtcMediaBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcMedia = /** @class */ (function (_super) {
            __extends(WebRtcMedia, _super);
            function WebRtcMedia(external) {
                var _this = _super.call(this) || this;
                /** @internal */
                _this._audioMediaStream = null;
                /** @internal */
                _this._videoMediaStream = null;
                /** @internal */
                _this._audioTrack = null;
                /** @internal */
                _this._videoTrack = null;
                /** @internal */
                _this._audioSink = null;
                /** @internal */
                _this._videoSink = null;
                /** @internal */
                _this._onAudioLevelValues = [];
                /** @internal */
                _this._onVideoSizeValues = [];
                /** @internal */
                _this._onAudioDestroyedValues = [];
                /** @internal */
                _this._onVideoDestroyedValues = [];
                var externalAudioTrack = new icelink.AudioTrack(external, _this);
                var externalVideoTrack = new icelink.VideoTrack(external, _this);
                var externalAudioSink = new icelink.DomAudioSink(null); // set later
                var externalVideoSink = new icelink.DomVideoSink(null); // set later
                _this._audioTrack = externalAudioTrack._getInternal();
                _this._videoTrack = externalVideoTrack._getInternal();
                _this._audioSink = externalAudioSink._getInternal();
                _this._videoSink = externalVideoSink._getInternal();
                _this._audioTrack.addOnDestroyed(function () {
                    for (var _i = 0, _a = _this._onAudioDestroyedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                _this._videoTrack.addOnDestroyed(function () {
                    for (var _i = 0, _a = _this._onVideoDestroyedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                return _this;
            }
            WebRtcMedia.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcMedia.prototype._getAudioMediaStream = function () {
                return this._audioMediaStream;
            };
            /** @internal */
            WebRtcMedia.prototype._getVideoMediaStream = function () {
                return this._videoMediaStream;
            };
            WebRtcMedia.prototype._setAudioMediaStream = function (audioMediaStream) {
                if (audioMediaStream == this._audioMediaStream) {
                    return false;
                }
                this._audioMediaStream = audioMediaStream;
                if (audioMediaStream) {
                    var hasAudio = (audioMediaStream.getAudioTracks().length > 0);
                    if (hasAudio) {
                        this._audioTrack._setMediaStreamTrack(audioMediaStream.getAudioTracks()[0]);
                        this._audioSink.setTrack(this._audioTrack);
                        this.initializeAudioContext(); // initialize audio context (if events are present)
                    }
                    else {
                        this._audioTrack._setMediaStreamTrack(null);
                        this.destroyAudioContext(); // destroy audio context (even if events are present)
                    }
                }
                else {
                    this._audioTrack._setMediaStreamTrack(null);
                    this.destroyAudioContext(); // destroy audio context (even if events are present)
                }
                return true;
            };
            WebRtcMedia.prototype._setVideoMediaStream = function (videoMediaStream) {
                if (videoMediaStream == this._videoMediaStream) {
                    return false;
                }
                this._videoMediaStream = videoMediaStream;
                if (videoMediaStream) {
                    var hasVideo = (videoMediaStream.getVideoTracks().length > 0);
                    if (hasVideo) {
                        this._videoTrack._setMediaStreamTrack(videoMediaStream.getVideoTracks()[0]);
                        this._videoSink.setTrack(this._videoTrack);
                    }
                    else {
                        this._videoTrack._setMediaStreamTrack(null);
                    }
                }
                else {
                    this._videoTrack._setMediaStreamTrack(null);
                }
                return true;
            };
            /** @internal */
            WebRtcMedia.prototype._setMediaStreams = function (audioMediaStream, videoMediaStream) {
                this._setAudioMediaStream(audioMediaStream);
                this._setVideoMediaStream(videoMediaStream);
            };
            /** @internal */
            WebRtcMedia.prototype._setMediaStream = function (mediaStream) {
                this._setMediaStreams(mediaStream, mediaStream);
            };
            WebRtcMedia.prototype.addOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onAudioDestroyedValues, value);
            };
            WebRtcMedia.prototype.addOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.add(this._onVideoDestroyedValues, value);
            };
            WebRtcMedia.prototype.removeOnAudioDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioDestroyedValues, value);
            };
            WebRtcMedia.prototype.removeOnVideoDestroyed = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoDestroyedValues, value);
            };
            WebRtcMedia.prototype.addOnAudioLevel = function (value) {
                icelink.ArrayExtensions.add(this._onAudioLevelValues, value);
                this.initializeAudioContext(); // initialize audio context (if there is one)
            };
            WebRtcMedia.prototype.addOnVideoSize = function (value) {
                var _this = this;
                icelink.ArrayExtensions.add(this._onVideoSizeValues, value);
                var video = this._videoSink.getVideo();
                if (video && !this._videoSizeEventsAttached) {
                    try {
                        icelink.Util.observe(video, 'loadedmetadata', function (evt) {
                            for (var _i = 0, _a = _this._onVideoSizeValues; _i < _a.length; _i++) {
                                var onVideoSizeValue = _a[_i];
                                onVideoSizeValue(new icelink.Size(video.videoWidth, video.videoHeight));
                            }
                        });
                        icelink.Util.observe(video, 'timeupdate', function (evt) {
                            for (var _i = 0, _a = _this._onVideoSizeValues; _i < _a.length; _i++) {
                                var onVideoSizeValue = _a[_i];
                                onVideoSizeValue(new icelink.Size(video.videoWidth, video.videoHeight));
                            }
                        });
                    }
                    catch (ex) {
                        icelink.Log.error('Could not initialize AudioContext.', ex);
                    }
                }
            };
            WebRtcMedia.prototype.destroy = function () {
                this._audioTrack.destroy();
                this._videoTrack.destroy();
            };
            WebRtcMedia.prototype.getAudioGain = function () {
                //TODO: don't rely on volume here
                return this.getAudioVolume();
            };
            WebRtcMedia.prototype.getAudioTracks = function () {
                if (this._audioTrack._getMediaStreamTrackDisabled()) {
                    return [];
                }
                return [this._audioTrack];
            };
            WebRtcMedia.prototype.getAudioVolume = function () {
                if (this._audioSink.getTrack()) {
                    return this._audioSink.getVolume();
                }
                return 1.0;
            };
            WebRtcMedia.prototype.getVideoSize = function () {
                return new icelink.Size(this._videoSink.getVideoWidth(), this._videoSink.getVideoHeight());
            };
            WebRtcMedia.prototype.getVideoTracks = function () {
                if (this._videoTrack._getMediaStreamTrackDisabled()) {
                    return [];
                }
                return [this._videoTrack];
            };
            WebRtcMedia.prototype.getView = function () {
                return this._videoSink.getView();
            };
            WebRtcMedia.prototype.getViewSink = function () {
                return this._videoSink;
            };
            WebRtcMedia.prototype.grabVideoFrame = function () {
                var promise = new icelink.Promise();
                var video = this._videoSink.getVideo();
                if (video && video.videoWidth && video.videoHeight) {
                    var width = video.videoWidth;
                    var height = video.videoHeight;
                    var canvas = document.createElement('canvas');
                    canvas.width = width;
                    canvas.height = height;
                    var context = canvas.getContext('2d');
                    context.drawImage(video, 0, 0, width, height);
                    var image = context.getImageData(0, 0, width, height);
                    var data = new Uint8Array(image.data.buffer);
                    promise.resolve(new icelink.VideoBuffer(width, height, icelink.DataBuffer.wrap(data), icelink.VideoFormat.getRgba()));
                }
                else {
                    promise.reject(new icelink.Exception('No video to grab.'));
                }
                return promise;
            };
            WebRtcMedia.prototype.removeOnAudioLevel = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioLevelValues, value);
                if (this._onAudioLevelValues.length == 0) { // destroy audio context, if there is one
                    this.destroyAudioContext();
                }
            };
            WebRtcMedia.prototype.removeOnVideoSize = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoSizeValues, value);
            };
            WebRtcMedia.prototype.setAudioGain = function (value) {
                //TODO: don't rely on volume here
                this.setAudioVolume(value);
            };
            WebRtcMedia.prototype.setAudioVolume = function (value) {
                if (this._audioSink.getTrack()) {
                    this._audioSink.setVolume(value);
                }
            };
            WebRtcMedia.prototype.initializeAudioContext = function () {
                var _this = this;
                if (this._audioMediaStream && !this._audioContext && this._onAudioLevelValues.length > 0) {
                    try {
                        var audioTracks = this._audioMediaStream.getAudioTracks();
                        if (audioTracks && audioTracks.length > 0) {
                            if (this._audioContext == null && typeof AudioContext !== 'undefined') {
                                this._audioContext = new AudioContext();
                            }
                            if (this._audioContext == null && typeof window.webkitAudioContext !== 'undefined') {
                                this._audioContext = new window.webkitAudioContext();
                            }
                            if (this._audioContext != null) {
                                this._audioMicrophone = this._audioContext.createMediaStreamSource(this._audioMediaStream);
                                this._audioAnalyser = this._audioContext.createAnalyser();
                                this._audioScriptNode = this._audioContext.createScriptProcessor(2048, 1, 1);
                                this._audioMicrophone.connect(this._audioAnalyser);
                                this._audioAnalyser.connect(this._audioScriptNode);
                                this._audioScriptNode.connect(this._audioContext.destination);
                                this._audioScriptNode.onaudioprocess = function (event) {
                                    var input = event.inputBuffer.getChannelData(0);
                                    var sum = 0.0;
                                    for (var i = 0; i < input.length; i++) {
                                        sum += input[i] * input[i];
                                    }
                                    var level = Math.sqrt(sum / input.length);
                                    for (var _i = 0, _a = _this._onAudioLevelValues; _i < _a.length; _i++) {
                                        var onAudioLevelValue = _a[_i];
                                        onAudioLevelValue(level);
                                    }
                                };
                            }
                            for (var _i = 0, audioTracks_1 = audioTracks; _i < audioTracks_1.length; _i++) {
                                var audioTrack = audioTracks_1[_i];
                                audioTrack.onended = function (event) {
                                    _this.destroyAudioContext(); // destroy audio context (even if events are present)
                                };
                            }
                        }
                    }
                    catch (ex) {
                        icelink.Log.error('Could not initialize AudioContext.', ex);
                    }
                }
            };
            WebRtcMedia.prototype.destroyAudioContext = function () {
                try {
                    if (this._audioContext) {
                        if (this._audioMicrophone) {
                            this._audioMicrophone.disconnect(this._audioAnalyser);
                            this._audioMicrophone = null;
                        }
                        if (this._audioAnalyser) {
                            this._audioAnalyser.disconnect(this._audioScriptNode);
                            this._audioAnalyser = null;
                        }
                        if (this._audioScriptNode) {
                            this._audioScriptNode.disconnect(this._audioContext.destination);
                            this._audioScriptNode = null;
                        }
                        this._audioContext.close();
                        this._audioContext = null;
                    }
                }
                catch (ex) {
                    icelink.Log.error('Could not destroy AudioContext.', ex);
                }
            };
            return WebRtcMedia;
        }(icelink.WebRtcMediaBase));
        icelink.WebRtcMedia = WebRtcMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMedia.ts" />

/// <reference path="WebRtcMedia.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of local audio/video track base methods.
         </div>
    
        */
        var WebRtcLocalMediaBase = /** @class */ (function (_super) {
            __extends(WebRtcLocalMediaBase, _super);
            /**<span id='method-fm.icelink.WebRtcLocalMediaBase-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.localMediaBase` class.
             </div>
    
            @param {Object} external The external.
            @return {}
            */
            function WebRtcLocalMediaBase(external) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var external_1 = __arguments[0];
                    _this = _super.call(this, external_1) || this;
                    _this.__stateLock = new Object();
                    _this.setState(fm.icelink.LocalMediaState.New);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebRtcLocalMediaBase.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcLocalMediaBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebRtcLocalMediaBase-abortStart'>&nbsp;</span>**/
            /**
             <div>
             Aborts the start.
             </div>
    
            @param {fm.icelink.Promise<TLocalMedia>} promise The promise.
            @param {fm.icelink.Exception} exception The exception.
            @return {void}
            */
            WebRtcLocalMediaBase.prototype.abortStart = function (promise, exception) {
                var _this = this;
                if (arguments.length == 2) {
                    fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media failed to start and is in a partial state. Stopping...", new Array(0)));
                    this.doStop().then(function (result) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media has successfully stopped.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Stopped);
                        promise.reject(exception);
                    }, function (ex) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media did not stop successfully.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Stopped);
                        promise.reject(exception);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcLocalMediaBase-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state.
             </div>
    
    
            @return {fm.icelink.LocalMediaState}
            */
            WebRtcLocalMediaBase.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this._state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcLocalMediaBase.prototype.setState = function (value) {
                if (arguments.length == 1) {
                    this._state = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcLocalMediaBase-start'>&nbsp;</span>**/
            /**
             <div>
             Starts the media track sources.
             </div>
    
    
            @return {fm.icelink.Future<TLocalMedia>}
            */
            WebRtcLocalMediaBase.prototype.start = function () {
                if (arguments.length == 0) {
                    return this.startInternal(new fm.icelink.Promise());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcLocalMediaBase.prototype.startInternal = function (promise) {
                var _this = this;
                if (arguments.length == 1) {
                    var _var0 = this.getState();
                    if (_var0 == fm.icelink.LocalMediaState.Starting) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be started while it is being started on a different thread."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Started) {
                        do {
                            promise.resolve(this);
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Stopping) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be started while it is being stopped."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Destroying) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be started while it is being destroyed."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Destroyed) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be started while it is destroyed."));
                            return promise;
                        } while (false);
                    }
                    this.setState(fm.icelink.LocalMediaState.Starting);
                    fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media is being started.", new Array(0)));
                    this.doStart().then(function (result) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media has successfully started.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Started);
                        promise.resolve(result);
                    }, function (exception) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media did not start successfully.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Stopped);
                        promise.reject(exception);
                    });
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebRtcLocalMediaBase-stop'>&nbsp;</span>**/
            /**
             <div>
             Stops the media track sources.
             </div>
    
    
            @return {fm.icelink.Future<TLocalMedia>}
            */
            WebRtcLocalMediaBase.prototype.stop = function () {
                if (arguments.length == 0) {
                    return this.stopInternal(new fm.icelink.Promise());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebRtcLocalMediaBase.prototype.stopInternal = function (promise) {
                var _this = this;
                if (arguments.length == 1) {
                    var _var0 = this.getState();
                    if (_var0 == fm.icelink.LocalMediaState.New) {
                        do {
                            promise.resolve(this);
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Starting) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be stopped while it is being started."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Stopping) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be stopped while it is being stopped on a different thread."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Stopped) {
                        do {
                            promise.resolve(this);
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Destroying) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be stopped while it is being destroyed."));
                            return promise;
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.LocalMediaState.Destroyed) {
                        do {
                            promise.reject(new fm.icelink.Exception("Local media cannot be stopped while it is destroyed."));
                            return promise;
                        } while (false);
                    }
                    this.setState(fm.icelink.LocalMediaState.Stopping);
                    fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media is being stopped.", new Array(0)));
                    this.doStop().then(function (result) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media has successfully stopped.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Stopped);
                        promise.resolve(result);
                    }, function (exception) {
                        fm.icelink.Log.debug(fm.icelink.StringExtensions.format("Local media did not stop successfully.", new Array(0)));
                        _this.setState(fm.icelink.LocalMediaState.Started);
                        promise.reject(exception);
                    });
                    return promise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebRtcLocalMediaBase;
        }(fm.icelink.WebRtcMedia));
        icelink.WebRtcLocalMediaBase = WebRtcLocalMediaBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcLocalMediaBase.ts" />

/// <reference path="WebRtcLocalMediaBase.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcGetUserMediaResult = /** @class */ (function () {
            function WebRtcGetUserMediaResult() {
            }
            return WebRtcGetUserMediaResult;
        }());
        var WebRtcLocalMedia = /** @class */ (function (_super) {
            __extends(WebRtcLocalMedia, _super);
            function WebRtcLocalMedia(external, audio, video, screen) {
                var _this = _super.call(this, external) || this;
                /** @internal */
                _this._onAudioStartedValues = [];
                /** @internal */
                _this._onAudioStoppedValues = [];
                /** @internal */
                _this._onVideoStartedValues = [];
                /** @internal */
                _this._onVideoStoppedValues = [];
                _this._external = external;
                _this._audio = audio;
                _this._video = video;
                _this._screen = icelink.Util.isNullOrUndefined(screen) ? false : screen;
                if (!audio) {
                    _this._audioTrack._setMediaStreamTrack(null);
                }
                if (!video) {
                    _this._videoTrack._setMediaStreamTrack(null);
                }
                _this._audioTrack.addOnStarted(function () {
                    for (var _i = 0, _a = _this._onAudioStartedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                _this._audioTrack.addOnStopped(function () {
                    for (var _i = 0, _a = _this._onAudioStoppedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                _this._videoTrack.addOnStarted(function () {
                    for (var _i = 0, _a = _this._onVideoStartedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                _this._videoTrack.addOnStopped(function () {
                    for (var _i = 0, _a = _this._onVideoStoppedValues; _i < _a.length; _i++) {
                        var value = _a[_i];
                        value();
                    }
                });
                return _this;
            }
            WebRtcLocalMedia.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcLocalMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcLocalMedia.prototype._getExternal = function () {
                return this._external;
            };
            /** @internal */
            WebRtcLocalMedia.getChromeExtensionId = function () {
                return this._chromeExtensionId;
            };
            /** @internal */
            WebRtcLocalMedia.setChromeExtensionId = function (chromeExtensionId) {
                this._chromeExtensionId = chromeExtensionId;
                this._chromeExtensionUrl = 'https://chrome.google.com/webstore/detail/' + chromeExtensionId;
                var head = document.getElementsByTagName('head')[0];
                var linkExists = false;
                for (var i = 0; i < head.childNodes.length; i++) {
                    var child = head.childNodes[i];
                    if (child.tagName == 'LINK' && child.href == this._chromeExtensionUrl) {
                        linkExists = true;
                    }
                    break;
                }
                if (!linkExists) {
                    var link = document.createElement('link');
                    link.rel = 'chrome-webstore-item';
                    link.href = this._chromeExtensionUrl;
                    head.appendChild(link);
                }
            };
            /** @internal */
            WebRtcLocalMedia.getChromeExtensionUrl = function () {
                return this._chromeExtensionUrl;
            };
            /** @internal */
            WebRtcLocalMedia.getChromeExtensionInstalled = function () {
                return this._chromeExtensionInstalled;
            };
            /** @internal */
            WebRtcLocalMedia.getChromeExtensionRequiresUserGesture = function () {
                return this._chromeExtensionRequiresUserGesture;
            };
            /** @internal */
            WebRtcLocalMedia.setChromeExtensionRequiresUserGesture = function (chromeExtensionRequiresUserGesture) {
                this._chromeExtensionRequiresUserGesture = chromeExtensionRequiresUserGesture;
            };
            WebRtcLocalMedia.prototype.addOnAudioStarted = function (value) {
                icelink.ArrayExtensions.add(this._onAudioStartedValues, value);
            };
            WebRtcLocalMedia.prototype.addOnAudioStopped = function (value) {
                icelink.ArrayExtensions.add(this._onAudioStoppedValues, value);
            };
            WebRtcLocalMedia.prototype.addOnVideoStarted = function (value) {
                icelink.ArrayExtensions.add(this._onVideoStartedValues, value);
            };
            WebRtcLocalMedia.prototype.addOnVideoStopped = function (value) {
                icelink.ArrayExtensions.add(this._onVideoStoppedValues, value);
            };
            WebRtcLocalMedia.prototype.removeOnAudioStarted = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioStartedValues, value);
            };
            WebRtcLocalMedia.prototype.removeOnAudioStopped = function (value) {
                icelink.ArrayExtensions.remove(this._onAudioStoppedValues, value);
            };
            WebRtcLocalMedia.prototype.removeOnVideoStarted = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoStartedValues, value);
            };
            WebRtcLocalMedia.prototype.removeOnVideoStopped = function (value) {
                icelink.ArrayExtensions.remove(this._onVideoStoppedValues, value);
            };
            WebRtcLocalMedia.prototype.getAudioSourceInputs = function () {
                return this.getSourceInputs('audio');
            };
            WebRtcLocalMedia.prototype.getVideoSourceInputs = function () {
                return this.getSourceInputs('video');
            };
            WebRtcLocalMedia.prototype.getSourceInputs = function (kind) {
                var promise = new icelink.Promise();
                if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
                    try {
                        navigator.mediaDevices.enumerateDevices().then(function (mediaDeviceInfos) {
                            var inputs = [];
                            var index = -1;
                            for (var _i = 0, mediaDeviceInfos_1 = mediaDeviceInfos; _i < mediaDeviceInfos_1.length; _i++) {
                                var mediaDeviceInfo = mediaDeviceInfos_1[_i];
                                if (mediaDeviceInfo.kind == kind || mediaDeviceInfo.kind == kind + 'input') {
                                    index++;
                                    var id = mediaDeviceInfo.deviceId;
                                    if (!id) {
                                        id = 'audio-' + index;
                                    }
                                    var name_3 = mediaDeviceInfo.label;
                                    if (!name_3) {
                                        name_3 = id;
                                    }
                                    inputs.push(new icelink.SourceInput(id, name_3));
                                }
                            }
                            promise.resolve(inputs);
                        })["catch"](function (ex) {
                            promise.reject(ex);
                        });
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                }
                else if (MediaStreamTrack && MediaStreamTrack.getSources) {
                    try {
                        MediaStreamTrack.getSources(function (sources) {
                            var inputs = [];
                            var index = -1;
                            for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
                                var source = sources_1[_i];
                                if (source.kind == kind || source.kind == kind + 'input') {
                                    index++;
                                    var id = source.deviceId;
                                    if (!id) {
                                        id = 'audio-' + index;
                                    }
                                    var name_4 = source.label;
                                    if (!name_4) {
                                        name_4 = id;
                                    }
                                    inputs.push(new icelink.SourceInput(id, name_4));
                                }
                            }
                            promise.resolve(inputs);
                        });
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                }
                else {
                    promise.reject(new icelink.Exception('Browser does not support media device enumeration.'));
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.getAudioSourceInput = function () {
                return this._audioInput;
            };
            WebRtcLocalMedia.prototype.setAudioSourceInput = function (audioInput) {
                if (this.getState() == icelink.LocalMediaState.Started) {
                    throw new icelink.Exception("Cannot set audio source input while the local media is started. Use 'changeAudioSourceInput' instead or stop the local media first.");
                }
                this._audioInput = audioInput;
            };
            WebRtcLocalMedia.prototype.getVideoSourceInput = function () {
                return this._videoInput;
            };
            WebRtcLocalMedia.prototype.setVideoSourceInput = function (videoInput) {
                if (this.getState() == icelink.LocalMediaState.Started) {
                    throw new icelink.Exception("Cannot set video source input while the local media is started. Use 'changeVideoSourceInput' instead or stop the local media first.");
                }
                this._videoInput = videoInput;
            };
            WebRtcLocalMedia.prototype.getAudio = function () {
                return this._audio;
            };
            WebRtcLocalMedia.prototype.setAudio = function (audio) {
                this._audio = audio;
            };
            WebRtcLocalMedia.prototype.getVideo = function () {
                return this._video;
            };
            WebRtcLocalMedia.prototype.setVideo = function (video) {
                this._video = video;
            };
            WebRtcLocalMedia.prototype.getScreen = function () {
                return this._screen;
            };
            WebRtcLocalMedia.prototype.setScreen = function (screen) {
                this._screen = screen;
            };
            WebRtcLocalMedia.prototype.getAudioConstraints = function () {
                return this._audioConstraints;
            };
            WebRtcLocalMedia.prototype.getVideoConstraints = function () {
                return this._videoConstraints;
            };
            WebRtcLocalMedia.prototype.changeAudioConstraints = function (audioConstraints) {
                var promise = new icelink.Promise();
                try {
                    var audioTrack = this.getAudioTrack();
                    if (audioTrack == null) {
                        throw new icelink.Exception('No audio track.');
                    }
                    var nativeAudioTrack = this.getAudioTrack()._getMediaStreamTrack();
                    if (nativeAudioTrack == null) {
                        throw new icelink.Exception('No active audio track.');
                    }
                    if (typeof nativeAudioTrack.applyConstraints !== 'undefined') {
                        nativeAudioTrack.applyConstraints(audioConstraints).then(function () {
                            promise.resolve(null);
                        }, function (ex) {
                            promise.reject(ex);
                        });
                    }
                    else {
                        throw new icelink.Exception('Browser does not support changing audio constraints.');
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.changeVideoConstraints = function (videoConstraints) {
                var promise = new icelink.Promise();
                try {
                    var videoTrack = this.getVideoTrack();
                    if (videoTrack == null) {
                        throw new icelink.Exception('No video track.');
                    }
                    var nativeVideoTrack = this.getVideoTrack()._getMediaStreamTrack();
                    if (nativeVideoTrack == null) {
                        throw new icelink.Exception('No active video track.');
                    }
                    if (typeof nativeVideoTrack.applyConstraints !== 'undefined') {
                        nativeVideoTrack.applyConstraints(videoConstraints).then(function () {
                            promise.resolve(null);
                        }, function (ex) {
                            promise.reject(ex);
                        });
                    }
                    else {
                        throw new icelink.Exception('Browser does not support changing video constraints.');
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.changeAudioSourceInput = function (audioInput) {
                var _this = this;
                var promise = new icelink.Promise();
                if (audioInput == this.getAudioSourceInput()) {
                    icelink.ManagedThread.dispatch(function () {
                        promise.resolve(null);
                    });
                }
                else if (this.getState() == icelink.LocalMediaState.Started) {
                    this.doStopAudio();
                    this._audioInput = audioInput;
                    this.doGetUserMedia(this.getAudio(), null).then(function (result) {
                        _this._audioConstraints = result.audioConstraints;
                        _this._setAudioMediaStream(result.audioMediaStream);
                        //TODO: replaceTrack on WebRtcConnection.RtpSender...
                        promise.resolve(null);
                    }, function (ex) {
                        promise.reject(ex);
                    });
                }
                else {
                    icelink.ManagedThread.dispatch(function () {
                        _this.setAudioSourceInput(audioInput);
                        promise.resolve(null);
                    });
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.changeVideoSourceInput = function (videoInput) {
                var _this = this;
                var promise = new icelink.Promise();
                if (videoInput == this.getVideoSourceInput()) {
                    icelink.ManagedThread.dispatch(function () {
                        promise.resolve(null);
                    });
                }
                else if (this.getState() == icelink.LocalMediaState.Started) {
                    this.doStopVideo();
                    this._videoInput = videoInput;
                    this.doGetUserMedia(null, this.getVideo()).then(function (result) {
                        _this._videoConstraints = result.videoConstraints;
                        _this._setVideoMediaStream(result.videoMediaStream);
                        //TODO: replaceTrack on WebRtcConnection.RtpSender...
                        promise.resolve(null);
                    }, function (ex) {
                        promise.reject(ex);
                    });
                }
                else {
                    icelink.ManagedThread.dispatch(function () {
                        _this.setVideoSourceInput(videoInput);
                        promise.resolve(null);
                    });
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.doStart = function () {
                var _this = this;
                var promise = new icelink.Promise();
                icelink.ManagedThread.dispatch(function () {
                    if (_this._screen && navigator.webkitGetUserMedia) {
                        if (!WebRtcLocalMedia.getChromeExtensionInstalled()) {
                            var chrome = window.chrome;
                            if (chrome && chrome.webstore && chrome.webstore.install) {
                                try {
                                    chrome.webstore.install(WebRtcLocalMedia.getChromeExtensionUrl(), function () {
                                        //TODO: we can do better... load inline and resolve promise
                                        location.reload();
                                    }, function (error) {
                                        WebRtcLocalMedia.setChromeExtensionRequiresUserGesture(false);
                                        promise.reject(new icelink.Exception('Chrome extension is not installed and inline installation failed. ' + error));
                                    });
                                }
                                catch (error) {
                                    WebRtcLocalMedia.setChromeExtensionRequiresUserGesture(true);
                                    promise.reject(new icelink.Exception('Chrome extension is not installed and inline installation could not be started. ' + error));
                                }
                            }
                            else {
                                WebRtcLocalMedia.setChromeExtensionRequiresUserGesture(false);
                                promise.reject(new icelink.Exception('Chrome extension is not installed.'));
                            }
                        }
                        else {
                            _this._chromeScreenEventListener = function (event) {
                                if (event.origin == window.location.origin) {
                                    var message = event.data;
                                    if (message.namespace && message.namespace == 'fm.icelink.chrome') {
                                        if (message.type == 'chooseDesktopMediaSuccess') {
                                            _this._chromeScreenStreamId = message.streamId;
                                            _this.doStartInternal(promise);
                                        }
                                        else if (message.type == 'chooseDesktopMediaFailure') {
                                            if (_this._chromeScreenEventListener) {
                                                window.removeEventListener('message', _this._chromeScreenEventListener);
                                                _this._chromeScreenEventListener = null;
                                            }
                                            if (message.audioUnavailable) {
                                                promise.reject(new icelink.Exception('Chrome 50+ is required to allow audio with screen-sharing. Please update your browser and try again.'));
                                            }
                                            else {
                                                promise.reject(new icelink.Exception('Request for screen sharing access was denied.'));
                                            }
                                        }
                                    }
                                }
                            };
                            window.addEventListener('message', _this._chromeScreenEventListener);
                            window.postMessage({
                                namespace: 'fm.icelink.chrome',
                                type: 'chooseDesktopMedia',
                                origin: window.location.origin,
                                audio: _this._audio ? true : false
                            }, '*');
                        }
                    }
                    else {
                        _this.doStartInternal(promise);
                    }
                });
                return promise;
            };
            WebRtcLocalMedia.prototype.doStartInternal = function (promise) {
                var _this = this;
                this.doGetUserMedia(this.getAudio(), this.getVideo()).then(function (result) {
                    _this._audioConstraints = result.audioConstraints;
                    _this._videoConstraints = result.videoConstraints;
                    _this._setMediaStreams(result.audioMediaStream, result.videoMediaStream);
                    promise.resolve(_this);
                }, function (ex) {
                    promise.reject(ex);
                });
            };
            /** @internal */
            WebRtcLocalMedia.prototype.doGetUserMedia = function (audio, video, deprecated) {
                var _this = this;
                if (arguments.length == 2) {
                    try {
                        // try with new API, unless the new API isn't available or we're screen-sharing in Chrome
                        deprecated = (!!(this.getScreen() && this._chromeScreenStreamId) || !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia);
                        return this.doGetUserMedia(audio, video, deprecated);
                    }
                    catch (error) {
                        // fall back to deprecated API
                        return this.doGetUserMedia(audio, video, !deprecated);
                    }
                }
                var promise = new icelink.Promise();
                try {
                    var result_1 = new WebRtcGetUserMediaResult();
                    var audioIsMediaStream_1 = audio && (typeof audio.getAudioTracks !== 'undefined');
                    var videoIsMediaStream_1 = video && (typeof video.getVideoTracks !== 'undefined');
                    var getUserMediaSuccess_1 = function (nativeMediaStream) {
                        if (audioIsMediaStream_1) {
                            result_1.audioMediaStream = audio;
                        }
                        else {
                            result_1.audioMediaStream = nativeMediaStream;
                        }
                        if (videoIsMediaStream_1) {
                            result_1.videoMediaStream = video;
                        }
                        else {
                            result_1.videoMediaStream = nativeMediaStream;
                        }
                        promise.resolve(result_1);
                    };
                    var getUserMediaFailure_1 = function (error) {
                        if (_this.getScreen()) {
                            if (document.location.protocol == 'https:') {
                                icelink.Log.error('Local screen access denied.', error);
                            }
                            else {
                                icelink.Log.error('Local screen access denied. (The page may need to be loaded using HTTPS.)', error);
                            }
                        }
                        else {
                            if (document.location.protocol == 'file:') {
                                icelink.Log.error('Local media access denied. (The media source may be unavailable/locked or you may need to access this page through a webserver instead of the file system.)', error);
                            }
                            else {
                                icelink.Log.error('Local media access denied. (The media source may be unavailable/locked.)', error);
                            }
                        }
                        promise.reject(error);
                    };
                    var audioConstraintsFuture = null;
                    if (audio && !audioIsMediaStream_1) {
                        audioConstraintsFuture = this.createAudioConstraints(audio, deprecated, true);
                    }
                    else {
                        var audioConstraintsPromise = new icelink.Promise();
                        audioConstraintsPromise.resolve(null);
                        audioConstraintsFuture = audioConstraintsPromise;
                    }
                    var videoConstraintsFuture_1 = null;
                    if (video && !videoIsMediaStream_1) {
                        videoConstraintsFuture_1 = this.createVideoConstraints(video, deprecated, true);
                    }
                    else {
                        var videoConstraintsPromise = new icelink.Promise();
                        videoConstraintsPromise.resolve(null);
                        videoConstraintsFuture_1 = videoConstraintsPromise;
                    }
                    audioConstraintsFuture.then(function (audioConstraints) {
                        result_1.audioConstraints = audioConstraints;
                        videoConstraintsFuture_1.then(function (videoConstraints) {
                            result_1.videoConstraints = videoConstraints;
                            if (result_1.audioConstraints || result_1.videoConstraints) {
                                var getUserMediaArgs = {};
                                if (result_1.audioConstraints) {
                                    getUserMediaArgs.audio = result_1.audioConstraints;
                                }
                                if (result_1.videoConstraints) {
                                    getUserMediaArgs.video = result_1.videoConstraints;
                                }
                                navigator.fmGetUserMedia(getUserMediaArgs, function (nativeMediaStream) {
                                    // now that we have permission, we have non-anonymized names,
                                    // so if an audio or video source input exists, we need to
                                    // update the name(s) with the unveiled information
                                    _this.updateAudioSourceInputName().then(function () {
                                        _this.updateVideoSourceInputName().then(function () {
                                            // we can also now properly update the facing mode,
                                            // which currently depends on a best guess using
                                            // the name on a mobile device
                                            if (result_1.videoConstraints) {
                                                _this.updateFacingMode(result_1.videoConstraints);
                                            }
                                            // ready to go
                                            getUserMediaSuccess_1(nativeMediaStream);
                                        }, function (ex) {
                                            // we tried
                                            getUserMediaSuccess_1(nativeMediaStream);
                                        });
                                    }, function (ex) {
                                        // we tried
                                        getUserMediaSuccess_1(nativeMediaStream);
                                    });
                                }, getUserMediaFailure_1);
                            }
                            else {
                                getUserMediaSuccess_1(null);
                            }
                        }, function (ex) {
                            promise.reject(ex);
                        });
                    }, function (ex) {
                        promise.reject(ex);
                    });
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            /** @internal */
            WebRtcLocalMedia.prototype.updateAudioSourceInputName = function () {
                var promise = new icelink.Promise();
                try {
                    var audioSourceInput_1 = this.getAudioSourceInput();
                    if (audioSourceInput_1 == null) {
                        promise.resolve(null);
                    }
                    else {
                        this.getAudioSourceInputs().then(function (audioSourceInputs) {
                            try {
                                for (var _i = 0, audioSourceInputs_1 = audioSourceInputs; _i < audioSourceInputs_1.length; _i++) {
                                    var asi = audioSourceInputs_1[_i];
                                    if (asi.getId() == audioSourceInput_1.getId()) {
                                        audioSourceInput_1.setName(asi.getName());
                                    }
                                }
                                promise.resolve(null);
                            }
                            catch (ex) {
                                promise.reject(ex);
                            }
                        }, function (ex) {
                            promise.reject(ex);
                        });
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            /** @internal */
            WebRtcLocalMedia.prototype.updateVideoSourceInputName = function () {
                var promise = new icelink.Promise();
                try {
                    var videoSourceInput_1 = this.getVideoSourceInput();
                    if (videoSourceInput_1 == null) {
                        promise.resolve(null);
                    }
                    else {
                        this.getVideoSourceInputs().then(function (videoSourceInputs) {
                            try {
                                for (var _i = 0, videoSourceInputs_1 = videoSourceInputs; _i < videoSourceInputs_1.length; _i++) {
                                    var asi = videoSourceInputs_1[_i];
                                    if (asi.getId() == videoSourceInput_1.getId()) {
                                        videoSourceInput_1.setName(asi.getName());
                                    }
                                }
                                promise.resolve(null);
                            }
                            catch (ex) {
                                promise.reject(ex);
                            }
                        }, function (ex) {
                            promise.reject(ex);
                        });
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            /** @internal */
            WebRtcLocalMedia.prototype.updateFacingMode = function (videoConstraints) {
                var videoSourceInput = this.getVideoSourceInput();
                // facingMode helps us set up mirroring correctly for the local preview
                if (!videoConstraints.facingMode) {
                    videoConstraints.facingMode = 'user';
                }
                if (videoConstraints.deviceId && videoSourceInput != null) {
                    var name_5 = videoSourceInput.getName();
                    // would be better if MediaDevices.enumerateDevices told us facing details...
                    if (icelink.StringExtensions.startsWith(name_5, 'back', icelink.StringComparison.InvariantCultureIgnoreCase) ||
                        icelink.StringExtensions.endsWith(name_5, 'back', icelink.StringComparison.InvariantCultureIgnoreCase) ||
                        icelink.StringExtensions.startsWith(name_5, 'rear', icelink.StringComparison.InvariantCultureIgnoreCase) ||
                        icelink.StringExtensions.endsWith(name_5, 'rear', icelink.StringComparison.InvariantCultureIgnoreCase) ||
                        icelink.StringExtensions.startsWith(name_5, 'environment', icelink.StringComparison.InvariantCultureIgnoreCase) ||
                        icelink.StringExtensions.endsWith(name_5, 'environment', icelink.StringComparison.InvariantCultureIgnoreCase)) {
                        videoConstraints.facingMode = 'environment';
                    }
                }
            };
            /** @internal */
            WebRtcLocalMedia.prototype.createAudioConstraints = function (audio, deprecated, getSourceInputs) {
                var _this = this;
                var promise = new icelink.Promise();
                try {
                    var audioSourceInput = this.getAudioSourceInput();
                    if (audioSourceInput == null && getSourceInputs) {
                        this.getAudioSourceInputs().then(function (audioSourceInputs) {
                            if (audioSourceInputs.length > 0) {
                                _this.setAudioSourceInput(audioSourceInputs[0]);
                            }
                            _this.createAudioConstraints(audio, deprecated, false).then(function (constraints) {
                                promise.resolve(constraints);
                            }, function (ex) {
                                promise.reject(ex);
                            });
                        });
                    }
                    else {
                        if (deprecated) {
                            var audioConstraints = {
                                optional: [],
                                mandatory: {}
                            };
                            if (this.getScreen()) {
                                if (this._chromeScreenStreamId) {
                                    audioConstraints.mandatory.chromeMediaSource = 'desktop';
                                    audioConstraints.mandatory.chromeMediaSourceId = this._chromeScreenStreamId;
                                }
                            }
                            if (audioSourceInput) {
                                audioConstraints.optional.push({ sourceId: audioSourceInput.getId() });
                            }
                            if (icelink.Util.isPlainObject(audio)) {
                                if (audio.mandatory) {
                                    for (var key in audio.mandatory) {
                                        audioConstraints.mandatory[key] = audio.mandatory[key];
                                    }
                                }
                                if (audio.optional) {
                                    for (var _i = 0, _a = audio.optional; _i < _a.length; _i++) {
                                        var value = _a[_i];
                                        audioConstraints.optional.push(value);
                                    }
                                }
                            }
                            promise.resolve(audioConstraints);
                        }
                        else {
                            var audioConstraints = {
                                echoCancellation: true
                            };
                            if (this.getScreen()) {
                                if (this._chromeScreenStreamId) {
                                    audioConstraints.chromeMediaSource = 'desktop';
                                    audioConstraints.chromeMediaSourceId = this._chromeScreenStreamId;
                                }
                            }
                            if (audioSourceInput) {
                                audioConstraints.deviceId = { exact: audioSourceInput.getId() };
                            }
                            if (icelink.Util.isPlainObject(audio)) {
                                for (var key in audio) {
                                    if (key !== 'mandatory' && key !== 'optional') {
                                        audioConstraints[key] = audio[key];
                                    }
                                }
                            }
                            promise.resolve(audioConstraints);
                        }
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            /** @internal */
            WebRtcLocalMedia.prototype.createVideoConstraints = function (video, deprecated, getSourceInputs) {
                var _this = this;
                var promise = new icelink.Promise();
                try {
                    var videoSourceInput = this.getVideoSourceInput();
                    if (videoSourceInput == null && getSourceInputs && !this.getScreen()) {
                        this.getVideoSourceInputs().then(function (videoSourceInputs) {
                            if (videoSourceInputs.length > 0) {
                                _this.setVideoSourceInput(videoSourceInputs[0]);
                            }
                            _this.createVideoConstraints(video, deprecated, false).then(function (constraints) {
                                promise.resolve(constraints);
                            }, function (ex) {
                                promise.reject(ex);
                            });
                        });
                    }
                    else {
                        if (deprecated) {
                            var videoConstraints = {
                                optional: [],
                                mandatory: {}
                            };
                            if (video.getTypeString) {
                                var videoConfig = video;
                                videoConstraints.mandatory.maxWidth = videoConfig.getWidth();
                                videoConstraints.mandatory.maxHeight = videoConfig.getHeight();
                                videoConstraints.mandatory.maxFrameRate = videoConfig.getFrameRate();
                            }
                            if (this.getScreen()) {
                                if (this._chromeScreenStreamId) {
                                    videoConstraints.mandatory.chromeMediaSource = 'desktop';
                                    videoConstraints.mandatory.chromeMediaSourceId = this._chromeScreenStreamId;
                                }
                                else {
                                    videoConstraints.mandatory.mediaSource = 'screen';
                                }
                            }
                            else if (videoSourceInput) {
                                videoConstraints.optional.push({ sourceId: videoSourceInput.getId() });
                            }
                            if (icelink.Util.isPlainObject(video)) {
                                if (video.mandatory) {
                                    for (var key in video.mandatory) {
                                        videoConstraints.mandatory[key] = video.mandatory[key];
                                    }
                                }
                                if (video.optional) {
                                    for (var _i = 0, _a = video.optional; _i < _a.length; _i++) {
                                        var value = _a[_i];
                                        videoConstraints.optional.push(value);
                                    }
                                }
                            }
                            promise.resolve(videoConstraints);
                        }
                        else {
                            var videoConstraints = {};
                            if (video.getTypeString) {
                                var videoConfig = video;
                                videoConstraints.width = videoConfig.getWidth();
                                videoConstraints.height = videoConfig.getHeight();
                                videoConstraints.frameRate = videoConfig.getFrameRate();
                                // removed because it interferes with 'facingMode'
                                //videoConstraints.aspectRatio = videoConfig.getWidth() / videoConfig.getHeight();
                            }
                            if (this.getScreen()) {
                                if (this._chromeScreenStreamId) {
                                    videoConstraints.chromeMediaSource = 'desktop';
                                    videoConstraints.chromeMediaSourceId = this._chromeScreenStreamId;
                                }
                                else {
                                    videoConstraints.mediaSource = 'screen';
                                }
                            }
                            else if (videoSourceInput) {
                                videoConstraints.deviceId = { exact: videoSourceInput.getId() };
                            }
                            if (icelink.Util.isPlainObject(video)) {
                                for (var key in video) {
                                    if (key !== 'mandatory' && key !== 'optional') {
                                        videoConstraints[key] = video[key];
                                    }
                                }
                            }
                            // best effort
                            this.updateFacingMode(videoConstraints);
                            promise.resolve(videoConstraints);
                        }
                    }
                }
                catch (ex) {
                    promise.reject(ex);
                }
                return promise;
            };
            WebRtcLocalMedia.prototype.doStop = function () {
                var _this = this;
                var promise = new icelink.Promise();
                icelink.ManagedThread.dispatch(function () {
                    try {
                        if (_this._chromeScreenEventListener) {
                            window.removeEventListener('message', _this._chromeScreenEventListener);
                            _this._chromeScreenEventListener = null;
                        }
                        if (_this._chromeScreenStreamId) {
                            window.postMessage({
                                namespace: 'fm.icelink.chrome',
                                type: 'cancelChooseDesktopMedia'
                            }, '*');
                        }
                        _this.doStopAudio();
                        _this.doStopVideo();
                        promise.resolve(_this);
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                });
                return promise;
            };
            /** @internal */
            WebRtcLocalMedia.prototype.doStopAudio = function () {
                try {
                    for (var _i = 0, _a = this.getAudioTracks(); _i < _a.length; _i++) {
                        var audioTrack = _a[_i];
                        audioTrack.stop();
                    }
                }
                catch (error) {
                    try {
                        // try deprecated API
                        var audioMediaStream = this._getAudioMediaStream();
                        if (audioMediaStream) {
                            audioMediaStream.stop();
                        }
                    }
                    catch (error) { }
                }
                this.destroyAudioContext();
            };
            /** @internal */
            WebRtcLocalMedia.prototype.doStopVideo = function () {
                try {
                    for (var _i = 0, _a = this.getVideoTracks(); _i < _a.length; _i++) {
                        var videoTrack = _a[_i];
                        videoTrack.stop();
                    }
                }
                catch (error) {
                    try {
                        // try deprecated API
                        var videoMediaStream = this._getVideoMediaStream();
                        if (videoMediaStream) {
                            videoMediaStream.stop();
                        }
                    }
                    catch (error) { }
                }
            };
            /** @internal */
            WebRtcLocalMedia.webRtcLocalMediaInitialize = function () {
                var _this = this;
                if (!this.__webRtcLocalMediaInitialized) {
                    if (window.navigator) {
                        navigator.fmGetUserMedia = navigator.getUserMedia ||
                            navigator.webkitGetUserMedia ||
                            navigator.mozGetUserMedia ||
                            navigator.msGetUserMedia;
                        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                            navigator.fmGetUserMedia = function (constraints, success, failure) {
                                navigator.mediaDevices.getUserMedia(constraints).then(success)["catch"](failure);
                            };
                        }
                    }
                    if (window.navigator && navigator.webkitGetUserMedia) {
                        window.addEventListener('message', function (event) {
                            if (event.origin == window.location.origin) {
                                var message = event.data;
                                if (message.namespace && message.namespace == 'fm.icelink.chrome' && message.type == 'active') {
                                    _this._chromeExtensionInstalled = true;
                                }
                            }
                        });
                        window.postMessage({
                            namespace: 'fm.icelink.chrome',
                            type: 'testActive'
                        }, '*');
                    }
                }
                fm.icelink.WebRtcLocalMedia.__webRtcLocalMediaInitialized = true;
            };
            /** @internal */
            WebRtcLocalMedia.__webRtcLocalMediaInitialized = false;
            return WebRtcLocalMedia;
        }(icelink.WebRtcLocalMediaBase));
        icelink.WebRtcLocalMedia = WebRtcLocalMedia;
        fm.icelink.WebRtcLocalMedia.webRtcLocalMediaInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMedia.ts" />

/// <reference path="WebRtcMedia.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcRemoteMedia = /** @class */ (function (_super) {
            __extends(WebRtcRemoteMedia, _super);
            function WebRtcRemoteMedia(external) {
                var _this = _super.call(this, external) || this;
                _this._external = external;
                return _this;
            }
            WebRtcRemoteMedia.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcRemoteMedia]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcRemoteMedia.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcRemoteMedia.prototype.getAudioSinkOutputs = function () {
                return this.getSinkOutputs('audio');
            };
            WebRtcRemoteMedia.prototype.getVideoSinkOutputs = function () {
                return this.getSinkOutputs('video');
            };
            WebRtcRemoteMedia.prototype.getSinkOutputs = function (kind) {
                var promise = new icelink.Promise();
                if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
                    try {
                        navigator.mediaDevices.enumerateDevices().then(function (mediaDeviceInfos) {
                            var outputs = [];
                            var index = -1;
                            for (var _i = 0, mediaDeviceInfos_2 = mediaDeviceInfos; _i < mediaDeviceInfos_2.length; _i++) {
                                var mediaDeviceInfo = mediaDeviceInfos_2[_i];
                                if (mediaDeviceInfo.kind == kind || mediaDeviceInfo.kind == kind + 'output') {
                                    index++;
                                    var id = mediaDeviceInfo.deviceId;
                                    if (!id) {
                                        id = 'audio-' + index;
                                    }
                                    var name_6 = mediaDeviceInfo.label;
                                    if (!name_6) {
                                        name_6 = id;
                                    }
                                    outputs.push(new icelink.SinkOutput(id, name_6));
                                }
                            }
                            promise.resolve(outputs);
                        })["catch"](function (ex) {
                            promise.reject(ex);
                        });
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                }
                else if (MediaStreamTrack && MediaStreamTrack.getSources) {
                    try {
                        MediaStreamTrack.getSources(function (sources) {
                            var outputs = [];
                            var index = -1;
                            for (var _i = 0, sources_2 = sources; _i < sources_2.length; _i++) {
                                var source = sources_2[_i];
                                if (source.kind == kind || source.kind == kind + 'output') {
                                    index++;
                                    var id = source.deviceId;
                                    if (!id) {
                                        id = 'audio-' + index;
                                    }
                                    var name_7 = source.label;
                                    if (!name_7) {
                                        name_7 = id;
                                    }
                                    outputs.push(new icelink.SinkOutput(id, name_7));
                                }
                            }
                            promise.resolve(outputs);
                        });
                    }
                    catch (error) {
                        promise.reject(error);
                    }
                }
                else {
                    promise.reject(new icelink.Exception('Browser does not support media device enumeration.'));
                }
                return promise;
            };
            WebRtcRemoteMedia.prototype.getAudioSinkOutput = function () {
                return this._audioSinkOutput;
            };
            WebRtcRemoteMedia.prototype.setAudioSinkOutput = function (audioSinkOutput) {
                if (this._audioSinkOutput != audioSinkOutput) {
                    if (this._audioSink.getTrack()) {
                        this.attachAudioSinkOutput(audioSinkOutput, this._audioSink.getAudio());
                    }
                    else if (this._videoSink.getTrack()) {
                        this.attachAudioSinkOutput(audioSinkOutput, this._videoSink.getVideo());
                    }
                    this._audioSinkOutput = audioSinkOutput;
                }
            };
            WebRtcRemoteMedia.prototype.attachAudioSinkOutput = function (audioSinkOutput, element) {
                if (typeof element.setSinkId !== 'undefined') {
                    element.setSinkId(audioSinkOutput.getId());
                }
                else {
                    throw new icelink.Exception('Browser does not support changing audio sink output.');
                }
            };
            WebRtcRemoteMedia.prototype.getVideoSinkOutput = function () {
                return this._videoSinkOutput;
            };
            WebRtcRemoteMedia.prototype.setVideoSinkOutput = function (videoSinkOutput) {
                if (this._videoSinkOutput != videoSinkOutput) {
                    this._videoSinkOutput = videoSinkOutput;
                    // nothing else to do here
                }
            };
            WebRtcRemoteMedia.prototype.changeAudioSinkOutput = function (audioInput) {
                var _this = this;
                var promise = new icelink.Promise();
                if (audioInput == this.getAudioSinkOutput()) {
                    icelink.ManagedThread.dispatch(function () {
                        promise.resolve(null);
                    });
                }
                else {
                    icelink.ManagedThread.dispatch(function () {
                        try {
                            _this.setAudioSinkOutput(audioInput);
                            promise.resolve(null);
                        }
                        catch (ex) {
                            promise.reject(ex);
                        }
                    });
                }
                return promise;
            };
            WebRtcRemoteMedia.prototype.changeVideoSinkOutput = function (videoInput) {
                var _this = this;
                var promise = new icelink.Promise();
                if (videoInput == this.getVideoSinkOutput()) {
                    icelink.ManagedThread.dispatch(function () {
                        promise.resolve(null);
                    });
                }
                else {
                    icelink.ManagedThread.dispatch(function () {
                        try {
                            _this.setVideoSinkOutput(videoInput);
                            promise.resolve(null);
                        }
                        catch (ex) {
                            promise.reject(ex);
                        }
                    });
                }
                return promise;
            };
            return WebRtcRemoteMedia;
        }(icelink.WebRtcMedia));
        icelink.WebRtcRemoteMedia = WebRtcRemoteMedia;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaStream.ts" />

/// <reference path="WebRtcMediaStream.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcVideoStream = /** @class */ (function (_super) {
            __extends(WebRtcVideoStream, _super);
            function WebRtcVideoStream(external, localTrack, remoteTrack) {
                var _this = _super.call(this, external, localTrack, remoteTrack, icelink.StreamType.Video) || this;
                _this._external = external;
                return _this;
            }
            WebRtcVideoStream.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcVideoStream]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcVideoStream.prototype._getExternal = function () {
                return this._external;
            };
            return WebRtcVideoStream;
        }(icelink.WebRtcMediaStream));
        icelink.WebRtcVideoStream = WebRtcVideoStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebRtcMediaTrack.ts" />

/// <reference path="WebRtcMediaTrack.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var WebRtcVideoTrack = /** @class */ (function (_super) {
            __extends(WebRtcVideoTrack, _super);
            function WebRtcVideoTrack(external, media) {
                var _this = _super.call(this, external, media) || this;
                _this._external = external;
                return _this;
            }
            WebRtcVideoTrack.prototype.getTypeString = function () {
                return '[fm.icelink.WebRtcVideoTrack]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /** @internal */
            WebRtcVideoTrack.prototype._getExternal = function () {
                return this._external;
            };
            WebRtcVideoTrack.prototype.setConfig = function (config) {
                console.log('')
                var nativeMediaStreamTrack = this._getMediaStreamTrack();
                if (nativeMediaStreamTrack.applyConstraints) {
                    var constraints = {};
                    if (config.getWidth() > 0) {
                        constraints.width = config.getWidth();
                    }
                    if (config.getHeight() > 0) {
                        constraints.height = config.getHeight();
                    }
                    if (config.getFrameRate() > 0) {
                        constraints.frameRate = config.getFrameRate();
                    }
                    nativeMediaStreamTrack.applyConstraints(constraints);
                }
            };
            WebRtcVideoTrack.prototype.isLocal = function () {
                return (icelink.Util.isObjectType(this.getMedia(), '[fm.icelink.WebRtcLocalMedia]'));
            };
            WebRtcVideoTrack.prototype.changeSinkOutput = function (sinkOutput) {
                if (this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call VideoTrack.changeSinkOutput on a local track.'));
                    return promise;
                }
                return this.getMedia().changeVideoSinkOutput(sinkOutput);
            };
            WebRtcVideoTrack.prototype.getSinkOutput = function () {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSinkOutput on a local track.');
                }
                return this.getMedia().getVideoSinkOutput();
            };
            WebRtcVideoTrack.prototype.getSinkOutputs = function () {
                if (this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call VideoTrack.getSinkOutputs on a local track.'));
                    return promise;
                }
                return this.getMedia().getVideoSinkOutputs();
            };
            WebRtcVideoTrack.prototype.setSinkOutput = function (value) {
                if (this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.setSinkOutput on a local track.');
                }
                this.getMedia().setVideoSinkOutput(value);
            };
            WebRtcVideoTrack.prototype.changeSourceInput = function (sourceInput) {
                if (!this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call VideoTrack.changeSourceInput on a remote track.'));
                    return promise;
                }
                return this.getMedia().changeVideoSourceInput(sourceInput);
            };
            WebRtcVideoTrack.prototype.getSourceInput = function () {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.getSourceInput on a remote track.');
                }
                return this.getMedia().getVideoSourceInput();
            };
            WebRtcVideoTrack.prototype.getSourceInputs = function () {
                if (!this.isLocal()) {
                    var promise = new icelink.Promise();
                    promise.reject(new icelink.Exception('Cannot call VideoTrack.getSourceInputs on a remote track.'));
                    return promise;
                }
                return this.getMedia().getVideoSourceInputs();
            };
            WebRtcVideoTrack.prototype.setSourceInput = function (value) {
                if (!this.isLocal()) {
                    throw new icelink.Exception('Cannot call VideoTrack.setSourceInput on a remote track.');
                }
                this.getMedia().setVideoSourceInput(value);
            };
            WebRtcVideoTrack.prototype.addOnSize = function (value) {
                this.getMedia().addOnVideoSize(value);
            };
            WebRtcVideoTrack.prototype.getSize = function () {
                return this.getMedia().getVideoSize();
            };
            WebRtcVideoTrack.prototype.grabFrame = function () {
                return this.getMedia().grabVideoFrame();
            };
            WebRtcVideoTrack.prototype.removeOnSize = function (value) {
                this.getMedia().removeOnVideoSize(value);
            };
            return WebRtcVideoTrack;
        }(icelink.WebRtcMediaTrack));
        icelink.WebRtcVideoTrack = WebRtcVideoTrack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Address types.
         </div>
    
        */
        var AddressType;
        (function (AddressType) {
            /** <span id='prop-fm.icelink.AddressType-IPv4'>&nbsp;</span> **/
            /**
             <div>
             Indicates an IP version 4 address.
             </div>
    
            @field IPv4
            @type {fm.icelink.AddressType}
            */
            AddressType[AddressType["IPv4"] = 1] = "IPv4";
            /** <span id='prop-fm.icelink.AddressType-IPv6'>&nbsp;</span> **/
            /**
             <div>
             Indicates an IP version 6 address.
             </div>
    
            @field IPv6
            @type {fm.icelink.AddressType}
            */
            AddressType[AddressType["IPv6"] = 2] = "IPv6";
            /** <span id='prop-fm.icelink.AddressType-Unknown'>&nbsp;</span> **/
            /**
             <div>
             Indicates an unknown address type.
             </div>
    
            @field Unknown
            @type {fm.icelink.AddressType}
            */
            AddressType[AddressType["Unknown"] = 3] = "Unknown";
        })(AddressType = icelink.AddressType || (icelink.AddressType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var JsonCheckerMode;
        (function (JsonCheckerMode) {
            JsonCheckerMode[JsonCheckerMode["Array"] = 1] = "Array";
            JsonCheckerMode[JsonCheckerMode["Done"] = 2] = "Done";
            JsonCheckerMode[JsonCheckerMode["Key"] = 3] = "Key";
            JsonCheckerMode[JsonCheckerMode["Object"] = 4] = "Object";
            JsonCheckerMode[JsonCheckerMode["String"] = 5] = "String";
        })(JsonCheckerMode = icelink.JsonCheckerMode || (icelink.JsonCheckerMode = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An operating system.
         </div>
    
        */
        var OperatingSystem;
        (function (OperatingSystem) {
            /** <span id='prop-fm.icelink.OperatingSystem-Unknown'>&nbsp;</span> **/
            /**
             <div>
             Indicates an unknown or default OS.
             </div>
    
            @field Unknown
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["Unknown"] = 1] = "Unknown";
            /** <span id='prop-fm.icelink.OperatingSystem-Windows'>&nbsp;</span> **/
            /**
             <div>
             Indicates a Windows operating system.
             </div>
    
            @field Windows
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["Windows"] = 2] = "Windows";
            /** <span id='prop-fm.icelink.OperatingSystem-Android'>&nbsp;</span> **/
            /**
             <div>
             Indicates a Android operating system.
             </div>
    
            @field Android
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["Android"] = 3] = "Android";
            /** <span id='prop-fm.icelink.OperatingSystem-MacOS'>&nbsp;</span> **/
            /**
             <div>
             Indicates a macOS operating system.
             </div>
    
            @field MacOS
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["MacOS"] = 4] = "MacOS";
            /** <span id='prop-fm.icelink.OperatingSystem-IOS'>&nbsp;</span> **/
            /**
             <div>
             Indicates a iOS operating system.
             </div>
    
            @field IOS
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["IOS"] = 5] = "IOS";
            /** <span id='prop-fm.icelink.OperatingSystem-Linux'>&nbsp;</span> **/
            /**
             <div>
             Indicates a Linux operating system.
             </div>
    
            @field Linux
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["Linux"] = 6] = "Linux";
            /** <span id='prop-fm.icelink.OperatingSystem-TvOS'>&nbsp;</span> **/
            /**
             <div>
             Indicates a tvOS operating system.
             </div>
    
            @field TvOS
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["TvOS"] = 7] = "TvOS";
            /** <span id='prop-fm.icelink.OperatingSystem-WatchOS'>&nbsp;</span> **/
            /**
             <div>
             Indicates a watchOS operating system.
             </div>
    
            @field WatchOS
            @type {fm.icelink.OperatingSystem}
            */
            OperatingSystem[OperatingSystem["WatchOS"] = 8] = "WatchOS";
        })(OperatingSystem = icelink.OperatingSystem || (icelink.OperatingSystem = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A CPU architecture.
         </div>
    
        */
        var Architecture;
        (function (Architecture) {
            /** <span id='prop-fm.icelink.Architecture-Unknown'>&nbsp;</span> **/
            /**
             <div>
             Indicates an unknown or default CPU architecture.
             </div>
    
            @field Unknown
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Unknown"] = 1] = "Unknown";
            /** <span id='prop-fm.icelink.Architecture-X86'>&nbsp;</span> **/
            /**
             <div>
             Indicates an Intel-based 32-bit CPU architecture.
             </div>
    
            @field X86
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["X86"] = 2] = "X86";
            /** <span id='prop-fm.icelink.Architecture-X64'>&nbsp;</span> **/
            /**
             <div>
             Indicates an Intel-based 64-bit CPU architecture.
             </div>
    
            @field X64
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["X64"] = 3] = "X64";
            /** <span id='prop-fm.icelink.Architecture-Armv7'>&nbsp;</span> **/
            /**
             <div>
             Indicates an ARMv7-based 32-bit CPU architecture.
             </div>
    
            @field Armv7
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Armv7"] = 4] = "Armv7";
            /** <span id='prop-fm.icelink.Architecture-Armv8'>&nbsp;</span> **/
            /**
             <div>
             Indicates an ARMv8-based 32-bit CPU architecture.
             </div>
    
            @field Armv8
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Armv8"] = 5] = "Armv8";
            /** <span id='prop-fm.icelink.Architecture-Arm64'>&nbsp;</span> **/
            /**
             <div>
             Indicates an ARM-based 64-bit CPU architecture.
             </div>
    
            @field Arm64
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Arm64"] = 6] = "Arm64";
            /** <span id='prop-fm.icelink.Architecture-Mips'>&nbsp;</span> **/
            /**
             <div>
             Indicates a MIPS-based 32-bit CPU architecture.
             </div>
    
            @field Mips
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Mips"] = 7] = "Mips";
            /** <span id='prop-fm.icelink.Architecture-Mips64'>&nbsp;</span> **/
            /**
             <div>
             Indicates a MIPS-based 64-bit CPU architecture.
             </div>
    
            @field Mips64
            @type {fm.icelink.Architecture}
            */
            Architecture[Architecture["Mips64"] = 8] = "Mips64";
        })(Architecture = icelink.Architecture || (icelink.Architecture = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A source language.
         </div>
    
        */
        var SourceLanguage;
        (function (SourceLanguage) {
            /** <span id='prop-fm.icelink.SourceLanguage-CSharp'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the source language is C#.
             </div>
    
            @field CSharp
            @type {fm.icelink.SourceLanguage}
            */
            SourceLanguage[SourceLanguage["CSharp"] = 1] = "CSharp";
            /** <span id='prop-fm.icelink.SourceLanguage-Java'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the source language is Java.
             </div>
    
            @field Java
            @type {fm.icelink.SourceLanguage}
            */
            SourceLanguage[SourceLanguage["Java"] = 2] = "Java";
            /** <span id='prop-fm.icelink.SourceLanguage-ObjectiveC'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the source language is Objective-C.
             </div>
    
            @field ObjectiveC
            @type {fm.icelink.SourceLanguage}
            */
            SourceLanguage[SourceLanguage["ObjectiveC"] = 3] = "ObjectiveC";
            /** <span id='prop-fm.icelink.SourceLanguage-TypeScript'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the source language is TypeScript.
             </div>
    
            @field TypeScript
            @type {fm.icelink.SourceLanguage}
            */
            SourceLanguage[SourceLanguage["TypeScript"] = 4] = "TypeScript";
        })(SourceLanguage = icelink.SourceLanguage || (icelink.SourceLanguage = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var StringType;
        (function (StringType) {
            StringType[StringType["None"] = 1] = "None";
            StringType[StringType["Single"] = 2] = "Single";
            StringType[StringType["Double"] = 3] = "Double";
        })(StringType = icelink.StringType || (icelink.StringType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The compare result in a sort operation.
         </div>
    
        */
        var CompareResult;
        (function (CompareResult) {
            /** <span id='prop-fm.icelink.CompareResult-Equal'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the two elements are equal.
             </div>
    
            @field Equal
            @type {fm.icelink.CompareResult}
            */
            CompareResult[CompareResult["Equal"] = 1] = "Equal";
            /** <span id='prop-fm.icelink.CompareResult-Negative'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the first element belongs before the second.
             </div>
    
            @field Negative
            @type {fm.icelink.CompareResult}
            */
            CompareResult[CompareResult["Negative"] = 2] = "Negative";
            /** <span id='prop-fm.icelink.CompareResult-Positive'>&nbsp;</span> **/
            /**
             <div>
             Indicates that ths second element belongs before the first.
             </div>
    
            @field Positive
            @type {fm.icelink.CompareResult}
            */
            CompareResult[CompareResult["Positive"] = 3] = "Positive";
        })(CompareResult = icelink.CompareResult || (icelink.CompareResult = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A hash algorithm.
         </div>
    
        */
        var HashType;
        (function (HashType) {
            /** <span id='prop-fm.icelink.HashType-Md5'>&nbsp;</span> **/
            /**
             <div>
             Indciates MD5.
             </div>
    
            @field Md5
            @type {fm.icelink.HashType}
            */
            HashType[HashType["Md5"] = 1] = "Md5";
            /** <span id='prop-fm.icelink.HashType-Sha1'>&nbsp;</span> **/
            /**
             <div>
             Indicates SHA1.
             </div>
    
            @field Sha1
            @type {fm.icelink.HashType}
            */
            HashType[HashType["Sha1"] = 2] = "Sha1";
            /** <span id='prop-fm.icelink.HashType-Sha256'>&nbsp;</span> **/
            /**
             <div>
             Indicates SHA256.
             </div>
    
            @field Sha256
            @type {fm.icelink.HashType}
            */
            HashType[HashType["Sha256"] = 3] = "Sha256";
        })(HashType = icelink.HashType || (icelink.HashType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A message authentication code (MAC) algorithm.
         </div>
    
        */
        var MacType;
        (function (MacType) {
            /** <span id='prop-fm.icelink.MacType-HmacMd5'>&nbsp;</span> **/
            /**
             <div>
             Indicates HMAC-MD5.
             </div>
    
            @field HmacMd5
            @type {fm.icelink.MacType}
            */
            MacType[MacType["HmacMd5"] = 1] = "HmacMd5";
            /** <span id='prop-fm.icelink.MacType-HmacSha1'>&nbsp;</span> **/
            /**
             <div>
             Indicates HMAC-SHA1
             </div>
    
            @field HmacSha1
            @type {fm.icelink.MacType}
            */
            MacType[MacType["HmacSha1"] = 2] = "HmacSha1";
            /** <span id='prop-fm.icelink.MacType-HmacSha256'>&nbsp;</span> **/
            /**
             <div>
             Indicates HMAC-SHA256
             </div>
    
            @field HmacSha256
            @type {fm.icelink.MacType}
            */
            MacType[MacType["HmacSha256"] = 3] = "HmacSha256";
        })(MacType = icelink.MacType || (icelink.MacType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.
         </div>
    
        */
        var ErrorCode;
        (function (ErrorCode) {
            /** <span id='prop-fm.icelink.ErrorCode-SocketSendError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the socket encountered an error while sending.
             </div>
    
            @field SocketSendError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SocketSendError"] = 100000] = "SocketSendError";
            /** <span id='prop-fm.icelink.ErrorCode-SocketReceiveError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the socket encountered an error while receiving.
             </div>
    
            @field SocketReceiveError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SocketReceiveError"] = 100001] = "SocketReceiveError";
            /** <span id='prop-fm.icelink.ErrorCode-SocketClosed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the socket is closed.
             </div>
    
            @field SocketClosed
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SocketClosed"] = 100002] = "SocketClosed";
            /** <span id='prop-fm.icelink.ErrorCode-SocketSendBufferFull'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the socket's send buffer is full.
             </div>
    
            @field SocketSendBufferFull
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SocketSendBufferFull"] = 100003] = "SocketSendBufferFull";
            /** <span id='prop-fm.icelink.ErrorCode-StunTryAlternate'>&nbsp;</span> **/
            /**
             <div>
             300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
             replying to a request message with an error response message with an error code of 300 (Try Alternate).
             The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
             message MAY be authenticated; however, there are uses cases for
             ALTERNATE-SERVER where authentication of the response is not possible
             or practical.
             </div>
    
            @field StunTryAlternate
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTryAlternate"] = 114000] = "StunTryAlternate";
            /** <span id='prop-fm.icelink.ErrorCode-StunBadRequest'>&nbsp;</span> **/
            /**
             <div>
             400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the
             request without modification from the previous attempt.  The server may not be able
             to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
             a valid MESSAGE-INTEGRITY attribute on this response.
             </div>
    
            @field StunBadRequest
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunBadRequest"] = 114001] = "StunBadRequest";
            /** <span id='prop-fm.icelink.ErrorCode-StunUnauthorized'>&nbsp;</span> **/
            /**
             <div>
             401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
             credentials to proceed.  The client should retry the request with proper credentials.
             </div>
    
            @field StunUnauthorized
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunUnauthorized"] = 114002] = "StunUnauthorized";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnForbidden'>&nbsp;</span> **/
            /**
             <div>
             403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
             to perform it, likely due to administrative restrictions. The client considers the current
             transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
             same request with this server until it believes the problem has been fixed.
             </div>
    
            @field StunTurnForbidden
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnForbidden"] = 114003] = "StunTurnForbidden";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnMobilityForbidden'>&nbsp;</span> **/
            /**
             <div>
             405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
             likely due to administrative restrictions. The client considers the current transaction as having failed.
             The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
             containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
             </div>
    
            @field StunTurnMobilityForbidden
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnMobilityForbidden"] = 114004] = "StunTurnMobilityForbidden";
            /** <span id='prop-fm.icelink.ErrorCode-StunUnknownAttribute'>&nbsp;</span> **/
            /**
             <div>
             420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
             attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
             attribute of its error response.
             </div>
    
            @field StunUnknownAttribute
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunUnknownAttribute"] = 114005] = "StunUnknownAttribute";
            /** <span id='prop-fm.icelink.ErrorCode-StunStaleCredentials'>&nbsp;</span> **/
            /**
             <div>
             430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.
             </div>
    
            @field StunStaleCredentials
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunStaleCredentials"] = 114006] = "StunStaleCredentials";
            /** <span id='prop-fm.icelink.ErrorCode-StunIntegrityCheckFailure'>&nbsp;</span> **/
            /**
             <div>
             431 Integrity Check Failure.
             </div>
    
            @field StunIntegrityCheckFailure
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunIntegrityCheckFailure"] = 114007] = "StunIntegrityCheckFailure";
            /** <span id='prop-fm.icelink.ErrorCode-StunMissingUsername'>&nbsp;</span> **/
            /**
             <div>
             432 Missing Username; the username attribute is not present in the request.
             </div>
    
            @field StunMissingUsername
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunMissingUsername"] = 114008] = "StunMissingUsername";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnAllocationMismatch'>&nbsp;</span> **/
            /**
             <div>
             437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
             One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
             crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
             and retry the Allocate request (using a different transaction id).
             The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
             server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
             </div>
    
            @field StunTurnAllocationMismatch
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnAllocationMismatch"] = 114009] = "StunTurnAllocationMismatch";
            /** <span id='prop-fm.icelink.ErrorCode-StunStaleNonce'>&nbsp;</span> **/
            /**
             <div>
             438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
             NONCE provided in the response.
             </div>
    
            @field StunStaleNonce
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunStaleNonce"] = 114010] = "StunStaleNonce";
            /** <span id='prop-fm.icelink.ErrorCode-StunAddressFamilyNotSupported'>&nbsp;</span> **/
            /**
             <div>
             440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
             </div>
    
            @field StunAddressFamilyNotSupported
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunAddressFamilyNotSupported"] = 114011] = "StunAddressFamilyNotSupported";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnWrongCredentials'>&nbsp;</span> **/
            /**
             <div>
             441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
             in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
             until it believes the problem has been fixed.
             </div>
    
            @field StunTurnWrongCredentials
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnWrongCredentials"] = 114012] = "StunTurnWrongCredentials";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnUnsupportedTransportProtocol'>&nbsp;</span> **/
            /**
             <div>
             442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
             client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
             been fixed.
             </div>
    
            @field StunTurnUnsupportedTransportProtocol
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnUnsupportedTransportProtocol"] = 114013] = "StunTurnUnsupportedTransportProtocol";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnPeerAddressFamilyMismatch'>&nbsp;</span> **/
            /**
             <div>
             443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
             </div>
    
            @field StunTurnPeerAddressFamilyMismatch
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnPeerAddressFamilyMismatch"] = 114014] = "StunTurnPeerAddressFamilyMismatch";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnConnectionAlreadyExists'>&nbsp;</span> **/
            /**
             <div>
             446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
             the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
             and the resulting client and peer data connections are either pending or active
             </div>
    
            @field StunTurnConnectionAlreadyExists
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnConnectionAlreadyExists"] = 114015] = "StunTurnConnectionAlreadyExists";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnConnectionTimeoutOrFailure'>&nbsp;</span> **/
            /**
             <div>
             447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
             XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
             </div>
    
            @field StunTurnConnectionTimeoutOrFailure
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnConnectionTimeoutOrFailure"] = 114016] = "StunTurnConnectionTimeoutOrFailure";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnAllocationQuotaReached'>&nbsp;</span> **/
            /**
             <div>
             486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
             transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.
             </div>
    
            @field StunTurnAllocationQuotaReached
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnAllocationQuotaReached"] = 114017] = "StunTurnAllocationQuotaReached";
            /** <span id='prop-fm.icelink.ErrorCode-StunIceRoleConflict'>&nbsp;</span> **/
            /**
             <div>
             487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
             The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
             </div>
    
            @field StunIceRoleConflict
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunIceRoleConflict"] = 114018] = "StunIceRoleConflict";
            /** <span id='prop-fm.icelink.ErrorCode-StunServerError'>&nbsp;</span> **/
            /**
             <div>
             500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
             </div>
    
            @field StunServerError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunServerError"] = 114019] = "StunServerError";
            /** <span id='prop-fm.icelink.ErrorCode-StunTurnInsufficientCapacity'>&nbsp;</span> **/
            /**
             <div>
             508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
             reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
             RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
             wait at least 1 minute before trying to create any more allocations on this server.
             </div>
    
            @field StunTurnInsufficientCapacity
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunTurnInsufficientCapacity"] = 114020] = "StunTurnInsufficientCapacity";
            /** <span id='prop-fm.icelink.ErrorCode-StunInvalidResponseType'>&nbsp;</span> **/
            /**
             <div>
             Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.
             </div>
    
            @field StunInvalidResponseType
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunInvalidResponseType"] = 114021] = "StunInvalidResponseType";
            /** <span id='prop-fm.icelink.ErrorCode-StunInvalidErrorCode'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a failed response does not contain an error code or when the error code is inconsistent with
             the contents of the response.
             </div>
    
            @field StunInvalidErrorCode
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunInvalidErrorCode"] = 114022] = "StunInvalidErrorCode";
            /** <span id='prop-fm.icelink.ErrorCode-StunInvalidTransactionId'>&nbsp;</span> **/
            /**
             <div>
             Indicates Invalid Stun Transaction Id
             </div>
    
            @field StunInvalidTransactionId
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunInvalidTransactionId"] = 114023] = "StunInvalidTransactionId";
            /** <span id='prop-fm.icelink.ErrorCode-StunUnknownStunErrorCode'>&nbsp;</span> **/
            /**
             <div>
             Indicates Unknown Stun Error Code
             </div>
    
            @field StunUnknownStunErrorCode
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunUnknownStunErrorCode"] = 114024] = "StunUnknownStunErrorCode";
            /** <span id='prop-fm.icelink.ErrorCode-StunInvalidMessageIntegrity'>&nbsp;</span> **/
            /**
             <div>
             Indicates Invalid Stun Message Integrity
             </div>
    
            @field StunInvalidMessageIntegrity
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StunInvalidMessageIntegrity"] = 114025] = "StunInvalidMessageIntegrity";
            /** <span id='prop-fm.icelink.ErrorCode-SocketIPError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version
             </div>
    
            @field SocketIPError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SocketIPError"] = 115001] = "SocketIPError";
            /** <span id='prop-fm.icelink.ErrorCode-IceLocalRelayedDatagramCandidateError'>&nbsp;</span> **/
            /**
             <div>
             Indicates the local relayed candidate could not be processed.
             </div>
    
            @field IceLocalRelayedDatagramCandidateError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceLocalRelayedDatagramCandidateError"] = 101000] = "IceLocalRelayedDatagramCandidateError";
            /** <span id='prop-fm.icelink.ErrorCode-IceLocalServerReflexiveCandidateError'>&nbsp;</span> **/
            /**
             <div>
             Indicates the local server reflexive could not be processed.
             </div>
    
            @field IceLocalServerReflexiveCandidateError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceLocalServerReflexiveCandidateError"] = 101001] = "IceLocalServerReflexiveCandidateError";
            /** <span id='prop-fm.icelink.ErrorCode-IceStartError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE gatherer could not be started.
             </div>
    
            @field IceStartError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceStartError"] = 102000] = "IceStartError";
            /** <span id='prop-fm.icelink.ErrorCode-IceUnsuitableSocketAssignment'>&nbsp;</span> **/
            /**
             <div>
             Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.
             </div>
    
            @field IceUnsuitableSocketAssignment
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceUnsuitableSocketAssignment"] = 102001] = "IceUnsuitableSocketAssignment";
            /** <span id='prop-fm.icelink.ErrorCode-IceAllPortsInUse'>&nbsp;</span> **/
            /**
             <div>
             Indicates that all ports are in use.
             </div>
    
            @field IceAllPortsInUse
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceAllPortsInUse"] = 102002] = "IceAllPortsInUse";
            /** <span id='prop-fm.icelink.ErrorCode-IceLocalAddressUnavailable'>&nbsp;</span> **/
            /**
             <div>
             Indicates that no local addresses were found.
             </div>
    
            @field IceLocalAddressUnavailable
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceLocalAddressUnavailable"] = 102003] = "IceLocalAddressUnavailable";
            /** <span id='prop-fm.icelink.ErrorCode-IceGenericGathererError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an Ice Gatherer error occurred.
             </div>
    
            @field IceGenericGathererError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceGenericGathererError"] = 102004] = "IceGenericGathererError";
            /** <span id='prop-fm.icelink.ErrorCode-IceRefreshTimeout'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the relayed candidate refresh request timed out.
             </div>
    
            @field IceRefreshTimeout
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceRefreshTimeout"] = 103000] = "IceRefreshTimeout";
            /** <span id='prop-fm.icelink.ErrorCode-IceRefreshError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the relayed candidate refresh request failed.
             </div>
    
            @field IceRefreshError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceRefreshError"] = 103001] = "IceRefreshError";
            /** <span id='prop-fm.icelink.ErrorCode-IceCreatePermissionTimeout'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the candidate pair create-permission request timed out.
             </div>
    
            @field IceCreatePermissionTimeout
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceCreatePermissionTimeout"] = 104000] = "IceCreatePermissionTimeout";
            /** <span id='prop-fm.icelink.ErrorCode-IceCreatePermissionError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the candidate pair create-permission request failed.
             </div>
    
            @field IceCreatePermissionError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceCreatePermissionError"] = 104001] = "IceCreatePermissionError";
            /** <span id='prop-fm.icelink.ErrorCode-IceSendError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE transport encountered an error while sending.
             </div>
    
            @field IceSendError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceSendError"] = 105000] = "IceSendError";
            /** <span id='prop-fm.icelink.ErrorCode-IcePeerReflexiveError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.
             </div>
    
            @field IcePeerReflexiveError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IcePeerReflexiveError"] = 105001] = "IcePeerReflexiveError";
            /** <span id='prop-fm.icelink.ErrorCode-IncompatibleIceSetup'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the IcePolicy requirements are not supported by the remote client.
             </div>
    
            @field IncompatibleIceSetup
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IncompatibleIceSetup"] = 105002] = "IncompatibleIceSetup";
            /** <span id='prop-fm.icelink.ErrorCode-DtlsInternalError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an internal DTLS error occurred.
             </div>
    
            @field DtlsInternalError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["DtlsInternalError"] = 106000] = "DtlsInternalError";
            /** <span id='prop-fm.icelink.ErrorCode-DtlsKeyExchangeFailed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the DTLS key exchange failed.
             </div>
    
            @field DtlsKeyExchangeFailed
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["DtlsKeyExchangeFailed"] = 106001] = "DtlsKeyExchangeFailed";
            /** <span id='prop-fm.icelink.ErrorCode-DtlsNotReady'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a DTLS message was received before the DTLS endpoint was ready.
             </div>
    
            @field DtlsNotReady
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["DtlsNotReady"] = 106002] = "DtlsNotReady";
            /** <span id='prop-fm.icelink.ErrorCode-SctpNoPayloadData'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an SCTP message had no payload data.
             </div>
    
            @field SctpNoPayloadData
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SctpNoPayloadData"] = 107000] = "SctpNoPayloadData";
            /** <span id='prop-fm.icelink.ErrorCode-SctpUnsupportedStream'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an attempt was made to send data on an unsupported stream.
             </div>
    
            @field SctpUnsupportedStream
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SctpUnsupportedStream"] = 107001] = "SctpUnsupportedStream";
            /** <span id='prop-fm.icelink.ErrorCode-SctpInvalidState'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an operation was attempted while in a state that doesn't allow it.
             </div>
    
            @field SctpInvalidState
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SctpInvalidState"] = 107002] = "SctpInvalidState";
            /** <span id='prop-fm.icelink.ErrorCode-SctpInternalError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an internal SCTP error occurred.
             </div>
    
            @field SctpInternalError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["SctpInternalError"] = 107003] = "SctpInternalError";
            /** <span id='prop-fm.icelink.ErrorCode-MediaTransportFailed'>&nbsp;</span> **/
            /**
             <div>
             Indicates the media transport failed.
             </div>
    
            @field MediaTransportFailed
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["MediaTransportFailed"] = 108000] = "MediaTransportFailed";
            /** <span id='prop-fm.icelink.ErrorCode-ReliableDataChannelOpenError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the reliable data channel encountered an error while opening.
             </div>
    
            @field ReliableDataChannelOpenError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ReliableDataChannelOpenError"] = 109000] = "ReliableDataChannelOpenError";
            /** <span id='prop-fm.icelink.ErrorCode-ReliableDataChannelSendError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the reliable data channel encountered an error while sending.
             </div>
    
            @field ReliableDataChannelSendError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ReliableDataChannelSendError"] = 109001] = "ReliableDataChannelSendError";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionInvalidArchitecture'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection architecture is invalid.
             </div>
    
            @field ConnectionInvalidArchitecture
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionInvalidArchitecture"] = 110000] = "ConnectionInvalidArchitecture";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionInternalError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an internal connection error occurred.
             </div>
    
            @field ConnectionInternalError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionInternalError"] = 110001] = "ConnectionInternalError";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionTransportStartError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection's inner transport could not be started.
             </div>
    
            @field ConnectionTransportStartError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionTransportStartError"] = 110002] = "ConnectionTransportStartError";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionTransportClosed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection's inner transport is closed.
             </div>
    
            @field ConnectionTransportClosed
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionTransportClosed"] = 110003] = "ConnectionTransportClosed";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionDeadStream'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a connection has failed connectivity checks for an extended period.
             </div>
    
            @field ConnectionDeadStream
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionDeadStream"] = 110004] = "ConnectionDeadStream";
            /** <span id='prop-fm.icelink.ErrorCode-ConnectionNotEstablished'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a connection has not been established within allocated timeframe.
             </div>
    
            @field ConnectionNotEstablished
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["ConnectionNotEstablished"] = 110005] = "ConnectionNotEstablished";
            /** <span id='prop-fm.icelink.ErrorCode-StreamDisabled'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream was disabled.
             </div>
    
            @field StreamDisabled
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StreamDisabled"] = 111000] = "StreamDisabled";
            /** <span id='prop-fm.icelink.ErrorCode-StreamEncryptionMismatch'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local and remote stream encryption modes are not compatible.
             </div>
    
            @field StreamEncryptionMismatch
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StreamEncryptionMismatch"] = 111001] = "StreamEncryptionMismatch";
            /** <span id='prop-fm.icelink.ErrorCode-StreamDirectionMismatch'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local and remote stream directions are not compatible.
             </div>
    
            @field StreamDirectionMismatch
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["StreamDirectionMismatch"] = 111002] = "StreamDirectionMismatch";
            /** <span id='prop-fm.icelink.ErrorCode-DataStreamDirectionCannotBeChanged'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.
             </div>
    
            @field DataStreamDirectionCannotBeChanged
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["DataStreamDirectionCannotBeChanged"] = 111003] = "DataStreamDirectionCannotBeChanged";
            /** <span id='prop-fm.icelink.ErrorCode-InvalidStreamDirectionChange'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).
             </div>
    
            @field InvalidStreamDirectionChange
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["InvalidStreamDirectionChange"] = 111004] = "InvalidStreamDirectionChange";
            /** <span id='prop-fm.icelink.ErrorCode-LocalDescriptionError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an error was encountered while processing the local description.
             </div>
    
            @field LocalDescriptionError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["LocalDescriptionError"] = 112000] = "LocalDescriptionError";
            /** <span id='prop-fm.icelink.ErrorCode-RemoteDescriptionError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an error was encountered while processing the remote description.
             </div>
    
            @field RemoteDescriptionError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["RemoteDescriptionError"] = 112001] = "RemoteDescriptionError";
            /** <span id='prop-fm.icelink.ErrorCode-IceLocalRelayedStreamCandidateError'>&nbsp;</span> **/
            /**
             <div>
             Indicates the local relayed candidate could not be processed.
             </div>
    
            @field IceLocalRelayedStreamCandidateError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceLocalRelayedStreamCandidateError"] = 113000] = "IceLocalRelayedStreamCandidateError";
            /** <span id='prop-fm.icelink.ErrorCode-IceInvalidServerAssignmentError'>&nbsp;</span> **/
            /**
             <div>
             Indicates the supplied Turn relay server is invalid or not resolved
             </div>
    
            @field IceInvalidServerAssignmentError
            @type {fm.icelink.ErrorCode}
            */
            ErrorCode[ErrorCode["IceInvalidServerAssignmentError"] = 113001] = "IceInvalidServerAssignmentError";
        })(ErrorCode = icelink.ErrorCode || (icelink.ErrorCode = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The method used by an HTTP request.
         </div>
    
        */
        var HttpMethod;
        (function (HttpMethod) {
            /** <span id='prop-fm.icelink.HttpMethod-Get'>&nbsp;</span> **/
            /**
             <div>
             Indicates a GET request.
             </div>
    
            @field Get
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Get"] = 1] = "Get";
            /** <span id='prop-fm.icelink.HttpMethod-Head'>&nbsp;</span> **/
            /**
             <div>
             Indicates a HEAD request.
             </div>
    
            @field Head
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Head"] = 2] = "Head";
            /** <span id='prop-fm.icelink.HttpMethod-Post'>&nbsp;</span> **/
            /**
             <div>
             Indicates a POST request.
             </div>
    
            @field Post
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Post"] = 3] = "Post";
            /** <span id='prop-fm.icelink.HttpMethod-Put'>&nbsp;</span> **/
            /**
             <div>
             Indicates a PUT request.
             </div>
    
            @field Put
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Put"] = 4] = "Put";
            /** <span id='prop-fm.icelink.HttpMethod-Patch'>&nbsp;</span> **/
            /**
             <div>
             Indicates a PATCH request.
             </div>
    
            @field Patch
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Patch"] = 5] = "Patch";
            /** <span id='prop-fm.icelink.HttpMethod-Delete'>&nbsp;</span> **/
            /**
             <div>
             Indicates a DELETE request.
             </div>
    
            @field Delete
            @type {fm.icelink.HttpMethod}
            */
            HttpMethod[HttpMethod["Delete"] = 6] = "Delete";
        })(HttpMethod = icelink.HttpMethod || (icelink.HttpMethod = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The level at which to log.
         </div>
    
        */
        var LogLevel;
        (function (LogLevel) {
            /** <span id='prop-fm.icelink.LogLevel-Verbose'>&nbsp;</span> **/
            /**
             <div>
             Logs extensive messages detailing the program's state for troubleshooting.
             </div>
    
            @field Verbose
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Verbose"] = 1] = "Verbose";
            /** <span id='prop-fm.icelink.LogLevel-Debug'>&nbsp;</span> **/
            /**
             <div>
             Logs messages relevant to development and troubleshooting.
             </div>
    
            @field Debug
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Debug"] = 2] = "Debug";
            /** <span id='prop-fm.icelink.LogLevel-Info'>&nbsp;</span> **/
            /**
             <div>
             Logs messages relevant to expected use.
             </div>
    
            @field Info
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Info"] = 3] = "Info";
            /** <span id='prop-fm.icelink.LogLevel-Warn'>&nbsp;</span> **/
            /**
             <div>
             Logs messages relevant to potential pit-falls.
             </div>
    
            @field Warn
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Warn"] = 4] = "Warn";
            /** <span id='prop-fm.icelink.LogLevel-Error'>&nbsp;</span> **/
            /**
             <div>
             Logs messages relevant to errors that allow program execution to continue.
             </div>
    
            @field Error
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Error"] = 5] = "Error";
            /** <span id='prop-fm.icelink.LogLevel-Fatal'>&nbsp;</span> **/
            /**
             <div>
             Logs messages relevant to errors that require the program to terminate.
             </div>
    
            @field Fatal
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["Fatal"] = 6] = "Fatal";
            /** <span id='prop-fm.icelink.LogLevel-None'>&nbsp;</span> **/
            /**
             <div>
             Logs nothing.
             </div>
    
            @field None
            @type {fm.icelink.LogLevel}
            */
            LogLevel[LogLevel["None"] = 7] = "None";
        })(LogLevel = icelink.LogLevel || (icelink.LogLevel = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of a future.
         </div>
    
        */
        var FutureState;
        (function (FutureState) {
            /** <span id='prop-fm.icelink.FutureState-Pending'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the promise has not been resolved or rejected.
             </div>
    
            @field Pending
            @type {fm.icelink.FutureState}
            */
            FutureState[FutureState["Pending"] = 1] = "Pending";
            /** <span id='prop-fm.icelink.FutureState-Resolved'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the promise has been resolved.
             </div>
    
            @field Resolved
            @type {fm.icelink.FutureState}
            */
            FutureState[FutureState["Resolved"] = 2] = "Resolved";
            /** <span id='prop-fm.icelink.FutureState-Rejected'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the promise has been rejected.
             </div>
    
            @field Rejected
            @type {fm.icelink.FutureState}
            */
            FutureState[FutureState["Rejected"] = 3] = "Rejected";
        })(FutureState = icelink.FutureState || (icelink.FutureState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An enumeration of potential WebSocket status codes.
         </div>
    
        */
        var WebSocketStatusCode;
        (function (WebSocketStatusCode) {
            /** <span id='prop-fm.icelink.WebSocketStatusCode-Normal'>&nbsp;</span> **/
            /**
             <div>
             Indicates normal closure, meaning that the purpose for which
             the connection was established has been fulfilled.
             </div>
    
            @field Normal
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["Normal"] = 1000] = "Normal";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-GoingAway'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is "going away", such as a server
             going down or a browser having navigated away from a page.
             </div>
    
            @field GoingAway
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["GoingAway"] = 1001] = "GoingAway";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-ProtocolError'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is terminating the connection
             due to a protocol error.
             </div>
    
            @field ProtocolError
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["ProtocolError"] = 1002] = "ProtocolError";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-InvalidType'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is terminating the connection
             because it has received a type of data that it cannot accept.
             </div>
    
            @field InvalidType
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["InvalidType"] = 1003] = "InvalidType";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-NoStatus'>&nbsp;</span> **/
            /**
             <div>
             Indicates that no status code was present in the Close frame.
             Reserved for use outside Close frames.
             </div>
    
            @field NoStatus
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["NoStatus"] = 1005] = "NoStatus";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-Abnormal'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection was closed abnormally, without
             sending a Close frame. Reserved for use outside Close frames.
             </div>
    
            @field Abnormal
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["Abnormal"] = 1006] = "Abnormal";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-InvalidData'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is terminating the connection
             because it has received data within a message that was not
             consistent with the type of message.
             </div>
    
            @field InvalidData
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["InvalidData"] = 1007] = "InvalidData";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-PolicyViolation'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is terminating the connection
             because it has received a message that violates its policy.
             </div>
    
            @field PolicyViolation
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["PolicyViolation"] = 1008] = "PolicyViolation";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-MessageTooLarge'>&nbsp;</span> **/
            /**
             <div>
             Indicates that an endpoint is terminating the connection
             because it has received a message that is too big for it
             to process.
             </div>
    
            @field MessageTooLarge
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["MessageTooLarge"] = 1009] = "MessageTooLarge";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-UnsupportedExtension'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the client is terminating the connection
             because it has expected the server to negotiate one or
             more extensions, but the server didn't return them in the
             response message of the WebSocket handshake.
             </div>
    
            @field UnsupportedExtension
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["UnsupportedExtension"] = 1010] = "UnsupportedExtension";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-UnexpectedCondition'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the server is terminating the connection
             because it encountered an unexpected condition that
             prevented it from fulfilling the request.
             </div>
    
            @field UnexpectedCondition
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["UnexpectedCondition"] = 1011] = "UnexpectedCondition";
            /** <span id='prop-fm.icelink.WebSocketStatusCode-SecureHandshakeFailure'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection was closed due to a failure
             to perform a TLS handshake. Reserved for use outside Close
             frames.
             </div>
    
            @field SecureHandshakeFailure
            @type {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStatusCode[WebSocketStatusCode["SecureHandshakeFailure"] = 1015] = "SecureHandshakeFailure";
        })(WebSocketStatusCode = icelink.WebSocketStatusCode || (icelink.WebSocketStatusCode = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of a candidate pair.
         </div>
    
        */
        var CandidatePairState;
        (function (CandidatePairState) {
            /** <span id='prop-fm.icelink.CandidatePairState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the candidate pair has been formed,
             but connectivity checks have not yet started.
             </div>
    
            @field New
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.CandidatePairState-Waiting'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connectivity check is ready for
             connectivity checks, but checks have not yet started.
             </div>
    
            @field Waiting
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["Waiting"] = 2] = "Waiting";
            /** <span id='prop-fm.icelink.CandidatePairState-InProgress'>&nbsp;</span> **/
            /**
             <div>
             Indicates that connectivity checks are in progress.
             </div>
    
            @field InProgress
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["InProgress"] = 3] = "InProgress";
            /** <span id='prop-fm.icelink.CandidatePairState-Succeeded'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a connectivity check was successful.
             </div>
    
            @field Succeeded
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["Succeeded"] = 4] = "Succeeded";
            /** <span id='prop-fm.icelink.CandidatePairState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that all connectivity checks have timed
             out or produced a failure response.
             </div>
    
            @field Failed
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["Failed"] = 5] = "Failed";
            /** <span id='prop-fm.icelink.CandidatePairState-Closed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that connectivity checks have been stopped
             intentionally due to transport closure.
             </div>
    
            @field Closed
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["Closed"] = 6] = "Closed";
            /** <span id='prop-fm.icelink.CandidatePairState-ConnectivityLost'>&nbsp;</span> **/
            /**
             <div>
             Indicates that connectivity checks have succeeded in
             the past, but are currently not responding.
             </div>
    
            @field ConnectivityLost
            @type {fm.icelink.CandidatePairState}
            */
            CandidatePairState[CandidatePairState["ConnectivityLost"] = 7] = "ConnectivityLost";
        })(CandidatePairState = icelink.CandidatePairState || (icelink.CandidatePairState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The type of a candidate.
         </div>
    
        */
        var CandidateType;
        (function (CandidateType) {
            /** <span id='prop-fm.icelink.CandidateType-Host'>&nbsp;</span> **/
            /**
             <div>
             Indicates a 'host' candidate, discovered by
             querying a local network interface adapter.
             The candidate should contain a private IP
             address of this client.
             </div>
    
            @field Host
            @type {fm.icelink.CandidateType}
            */
            CandidateType[CandidateType["Host"] = 1] = "Host";
            /** <span id='prop-fm.icelink.CandidateType-ServerReflexive'>&nbsp;</span> **/
            /**
             <div>
             Indicates a 'srflx' candidate, discovered by
             using a STUN server to echo back the source
             IP address it sees in a UDP binding request.
             When the STUN server is properly configured,
             the candidate should contain a public IP
             address of this client.
             </div>
    
            @field ServerReflexive
            @type {fm.icelink.CandidateType}
            */
            CandidateType[CandidateType["ServerReflexive"] = 2] = "ServerReflexive";
            /** <span id='prop-fm.icelink.CandidateType-Relayed'>&nbsp;</span> **/
            /**
             <div>
             Indicates a 'relay' candidate, discovered by
             using a TURN server to set up a public port
             in response to a UDP or TCP allocate request.
             When the TURN server is properly configured,
             the candidate should contain a public IP
             address of the TURN server.
             </div>
    
            @field Relayed
            @type {fm.icelink.CandidateType}
            */
            CandidateType[CandidateType["Relayed"] = 3] = "Relayed";
            /** <span id='prop-fm.icelink.CandidateType-PeerReflexive'>&nbsp;</span> **/
            /**
             <div>
             Indicates a 'prflx' candidate, discovered by
             sending STUN connectivity checks between peers
             residing behind more restrictive firewalls.
             The candidate should contain a public IP
             address of this client.
             </div>
    
            @field PeerReflexive
            @type {fm.icelink.CandidateType}
            */
            CandidateType[CandidateType["PeerReflexive"] = 4] = "PeerReflexive";
            /** <span id='prop-fm.icelink.CandidateType-Unknown'>&nbsp;</span> **/
            /**
             <div>
             Indicates an unknown candidate type.
             </div>
    
            @field Unknown
            @type {fm.icelink.CandidateType}
            */
            CandidateType[CandidateType["Unknown"] = 5] = "Unknown";
        })(CandidateType = icelink.CandidateType || (icelink.CandidateType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A value used to indicate whether this codec is used to encode or decode.
         </div>
    
        */
        var CodecType;
        (function (CodecType) {
            /** <span id='prop-fm.icelink.CodecType-Encode'>&nbsp;</span> **/
            /**
             <div>
             The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.
             </div>
    
            @field Encode
            @type {fm.icelink.CodecType}
            */
            CodecType[CodecType["Encode"] = 1] = "Encode";
            /** <span id='prop-fm.icelink.CodecType-Decode'>&nbsp;</span> **/
            /**
             <div>
             The attached RTCCodecStats represents a media format that the implementation is prepared to decode.
             </div>
    
            @field Decode
            @type {fm.icelink.CodecType}
            */
            CodecType[CodecType["Decode"] = 2] = "Decode";
        })(CodecType = icelink.CodecType || (icelink.CodecType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of a connection.
         </div>
    
        */
        var ConnectionState;
        (function (ConnectionState) {
            /** <span id='prop-fm.icelink.ConnectionState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection is new and has not been started.
             </div>
    
            @field New
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.ConnectionState-Initializing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection is being initialized but no connecting attempts have been made.
             </div>
    
            @field Initializing
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Initializing"] = 2] = "Initializing";
            /** <span id='prop-fm.icelink.ConnectionState-Connecting'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection is currently connecting.
             </div>
    
            @field Connecting
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Connecting"] = 3] = "Connecting";
            /** <span id='prop-fm.icelink.ConnectionState-Connected'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection is currently connected.
             </div>
    
            @field Connected
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Connected"] = 4] = "Connected";
            /** <span id='prop-fm.icelink.ConnectionState-Failing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has encountered an error and is cleaning up.
             </div>
    
            @field Failing
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Failing"] = 5] = "Failing";
            /** <span id='prop-fm.icelink.ConnectionState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has encountered an error and has cleaned up.
             </div>
    
            @field Failed
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Failed"] = 6] = "Failed";
            /** <span id='prop-fm.icelink.ConnectionState-Closing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has been instructed to close and is cleaning up.
             </div>
    
            @field Closing
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Closing"] = 7] = "Closing";
            /** <span id='prop-fm.icelink.ConnectionState-Closed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has been instructed to close and has cleaned up.
             </div>
    
            @field Closed
            @type {fm.icelink.ConnectionState}
            */
            ConnectionState[ConnectionState["Closed"] = 8] = "Closed";
        })(ConnectionState = icelink.ConnectionState || (icelink.ConnectionState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A data channel state.
         </div>
    
        */
        var DataChannelState;
        (function (DataChannelState) {
            /** <span id='prop-fm.icelink.DataChannelState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` has been created and has not started negotiating yet.
             </div>
    
            @field New
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.DataChannelState-Connecting'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` is in the process of negotiating a secure connection.
             </div>
    
            @field Connecting
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["Connecting"] = 2] = "Connecting";
            /** <span id='prop-fm.icelink.DataChannelState-Connected'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` has completed negotiation of a secure connection.
             </div>
    
            @field Connected
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["Connected"] = 3] = "Connected";
            /** <span id='prop-fm.icelink.DataChannelState-Closing'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` is in the process of closing due to an intentional request.
             </div>
    
            @field Closing
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["Closing"] = 4] = "Closing";
            /** <span id='prop-fm.icelink.DataChannelState-Closed'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` has been closed due to an intentional request.
             </div>
    
            @field Closed
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["Closed"] = 5] = "Closed";
            /** <span id='prop-fm.icelink.DataChannelState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates the `fm.icelink.dataChannel` has been closed as the result of an error.
             </div>
    
            @field Failed
            @type {fm.icelink.DataChannelState}
            */
            DataChannelState[DataChannelState["Failed"] = 6] = "Failed";
        })(DataChannelState = icelink.DataChannelState || (icelink.DataChannelState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The encryption mode for the stream.
         </div>
    
        */
        var EncryptionMode;
        (function (EncryptionMode) {
            /** <span id='prop-fm.icelink.EncryptionMode-Null'>&nbsp;</span> **/
            /**
             <div>
             No encryption and no integrity checking.
             </div>
    
            @field Null
            @type {fm.icelink.EncryptionMode}
            */
            EncryptionMode[EncryptionMode["Null"] = 1] = "Null";
            /** <span id='prop-fm.icelink.EncryptionMode-Aes128Strong'>&nbsp;</span> **/
            /**
             <div>
             AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
             </div>
    
            @field Aes128Strong
            @type {fm.icelink.EncryptionMode}
            */
            EncryptionMode[EncryptionMode["Aes128Strong"] = 2] = "Aes128Strong";
            /** <span id='prop-fm.icelink.EncryptionMode-Aes128Weak'>&nbsp;</span> **/
            /**
             <div>
             AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
             </div>
    
            @field Aes128Weak
            @type {fm.icelink.EncryptionMode}
            */
            EncryptionMode[EncryptionMode["Aes128Weak"] = 3] = "Aes128Weak";
            /** <span id='prop-fm.icelink.EncryptionMode-NullStrong'>&nbsp;</span> **/
            /**
             <div>
             Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
             </div>
    
            @field NullStrong
            @type {fm.icelink.EncryptionMode}
            */
            EncryptionMode[EncryptionMode["NullStrong"] = 4] = "NullStrong";
            /** <span id='prop-fm.icelink.EncryptionMode-NullWeak'>&nbsp;</span> **/
            /**
             <div>
             Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
             </div>
    
            @field NullWeak
            @type {fm.icelink.EncryptionMode}
            */
            EncryptionMode[EncryptionMode["NullWeak"] = 5] = "NullWeak";
        })(EncryptionMode = icelink.EncryptionMode || (icelink.EncryptionMode = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Indicates encryption policy for a connection.
         </div>
    
        */
        var EncryptionPolicy;
        (function (EncryptionPolicy) {
            /** <span id='prop-fm.icelink.EncryptionPolicy-Required'>&nbsp;</span> **/
            /**
             <div>
             Encryption is required. If encryption is not supported by peer, connection must fail.
             </div>
    
            @field Required
            @type {fm.icelink.EncryptionPolicy}
            */
            EncryptionPolicy[EncryptionPolicy["Required"] = 1] = "Required";
            /** <span id='prop-fm.icelink.EncryptionPolicy-Negotiated'>&nbsp;</span> **/
            /**
             <div>
             Encryption is preferred but not required. If the other peer does not support encryption, connection will be established without encryption.
             </div>
    
            @field Negotiated
            @type {fm.icelink.EncryptionPolicy}
            */
            EncryptionPolicy[EncryptionPolicy["Negotiated"] = 2] = "Negotiated";
            /** <span id='prop-fm.icelink.EncryptionPolicy-Disabled'>&nbsp;</span> **/
            /**
             <div>
             Encryption will not be available for the given connection.
             </div>
    
            @field Disabled
            @type {fm.icelink.EncryptionPolicy}
            */
            EncryptionPolicy[EncryptionPolicy["Disabled"] = 3] = "Disabled";
        })(EncryptionPolicy = icelink.EncryptionPolicy || (icelink.EncryptionPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of an ICE gatherer.
         </div>
    
        */
        var IceConnectionState;
        (function (IceConnectionState) {
            /** <span id='prop-fm.icelink.IceConnectionState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE agent(s) is(are) gathering addresses or is(are) waiting to be given remote candidates (or both)..
             </div>
    
            @field New
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.IceConnectionState-Checking'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE agent(s) has(ve) been given one or more remote candidates and is(are) checking pairs of local and remote candidates against one another to try to find a compatible match, but has(ve) not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.
             </div>
    
            @field Checking
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Checking"] = 2] = "Checking";
            /** <span id='prop-fm.icelink.IceConnectionState-Connected'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a usable pairing of local and remote candidates has been found for all components of the connection, and the connection has been established. It's possible that gathering is still underway, and it's also possible that the ICE agent is still checking candidates against one another looking for a better connection to use.
             </div>
    
            @field Connected
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Connected"] = 3] = "Connected";
            /** <span id='prop-fm.icelink.IceConnectionState-Completed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.
             </div>
    
            @field Completed
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Completed"] = 4] = "Completed";
            /** <span id='prop-fm.icelink.IceConnectionState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.
             </div>
    
            @field Failed
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Failed"] = 5] = "Failed";
            /** <span id='prop-fm.icelink.IceConnectionState-Disconnected'>&nbsp;</span> **/
            /**
             <div>
             Indicates that checks to ensure that components are still connected failed for at least one component of the RTCPeerConnection. This is a less stringent test than "failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks, or during temporary disconnections. When the problem resolves, the connection may return to the "Connected" state.
             </div>
    
            @field Disconnected
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Disconnected"] = 6] = "Disconnected";
            /** <span id='prop-fm.icelink.IceConnectionState-Closed'>&nbsp;</span> **/
            /**
             <div>
             The ICE agent(s) for this RTCPeerConnection has shut down and is no longer handling requests
             </div>
    
            @field Closed
            @type {fm.icelink.IceConnectionState}
            */
            IceConnectionState[IceConnectionState["Closed"] = 7] = "Closed";
        })(IceConnectionState = icelink.IceConnectionState || (icelink.IceConnectionState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of an ICE gatherer.
         </div>
    
        */
        var IceGatheringState;
        (function (IceGatheringState) {
            /** <span id='prop-fm.icelink.IceGatheringState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer has been created and no gathering has occurred yet.
             </div>
    
            @field New
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.IceGatheringState-Gathering'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer is in the process of gathering candidates.
             </div>
    
            @field Gathering
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["Gathering"] = 2] = "Gathering";
            /** <span id='prop-fm.icelink.IceGatheringState-Complete'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer has completed gathering candidates.
             </div>
    
            @field Complete
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["Complete"] = 3] = "Complete";
            /** <span id='prop-fm.icelink.IceGatheringState-Closing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer has started closing intentionally via a call to stop.
             </div>
    
            @field Closing
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["Closing"] = 4] = "Closing";
            /** <span id='prop-fm.icelink.IceGatheringState-Closed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer has been closed intentionally via a call to stop.
             </div>
    
            @field Closed
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["Closed"] = 5] = "Closed";
            /** <span id='prop-fm.icelink.IceGatheringState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the gatherer failed due to an error.
             </div>
    
            @field Failed
            @type {fm.icelink.IceGatheringState}
            */
            IceGatheringState[IceGatheringState["Failed"] = 6] = "Failed";
        })(IceGatheringState = icelink.IceGatheringState || (icelink.IceGatheringState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The local policy for gathering candidates.
         </div>
    
        */
        var IceGatherPolicy;
        (function (IceGatherPolicy) {
            /** <span id='prop-fm.icelink.IceGatherPolicy-All'>&nbsp;</span> **/
            /**
             <div>
             All candidates (host, reflexive, and relay) will be gathered.
             </div>
    
            @field All
            @type {fm.icelink.IceGatherPolicy}
            */
            IceGatherPolicy[IceGatherPolicy["All"] = 1] = "All";
            /** <span id='prop-fm.icelink.IceGatherPolicy-NoHost'>&nbsp;</span> **/
            /**
             <div>
             Only reflexive and relay candidates will be gathered.
             </div>
    
            @field NoHost
            @type {fm.icelink.IceGatherPolicy}
            */
            IceGatherPolicy[IceGatherPolicy["NoHost"] = 2] = "NoHost";
            /** <span id='prop-fm.icelink.IceGatherPolicy-Relay'>&nbsp;</span> **/
            /**
             <div>
             Only relay candidates will be gathered.
             </div>
    
            @field Relay
            @type {fm.icelink.IceGatherPolicy}
            */
            IceGatherPolicy[IceGatherPolicy["Relay"] = 3] = "Relay";
        })(IceGatherPolicy = icelink.IceGatherPolicy || (icelink.IceGatherPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A layout alignment definition.
         </div>
    
        */
        var LayoutAlignment;
        (function (LayoutAlignment) {
            /** <span id='prop-fm.icelink.LayoutAlignment-TopLeft'>&nbsp;</span> **/
            /**
             <div>
             Indicates a top-left alignment.
             </div>
    
            @field TopLeft
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["TopLeft"] = 1] = "TopLeft";
            /** <span id='prop-fm.icelink.LayoutAlignment-Top'>&nbsp;</span> **/
            /**
             <div>
             Indicates a top-center alignment.
             </div>
    
            @field Top
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["Top"] = 2] = "Top";
            /** <span id='prop-fm.icelink.LayoutAlignment-TopRight'>&nbsp;</span> **/
            /**
             <div>
             Indicates a top-right alignment.
             </div>
    
            @field TopRight
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["TopRight"] = 3] = "TopRight";
            /** <span id='prop-fm.icelink.LayoutAlignment-Left'>&nbsp;</span> **/
            /**
             <div>
             Indicates a center-left alignment.
             </div>
    
            @field Left
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["Left"] = 4] = "Left";
            /** <span id='prop-fm.icelink.LayoutAlignment-Center'>&nbsp;</span> **/
            /**
             <div>
             Indicates a center-center alignment.
             </div>
    
            @field Center
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["Center"] = 5] = "Center";
            /** <span id='prop-fm.icelink.LayoutAlignment-Right'>&nbsp;</span> **/
            /**
             <div>
             Indicates a center-right alignment.
             </div>
    
            @field Right
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["Right"] = 6] = "Right";
            /** <span id='prop-fm.icelink.LayoutAlignment-BottomLeft'>&nbsp;</span> **/
            /**
             <div>
             Indicates a bottom-left alignment.
             </div>
    
            @field BottomLeft
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["BottomLeft"] = 7] = "BottomLeft";
            /** <span id='prop-fm.icelink.LayoutAlignment-Bottom'>&nbsp;</span> **/
            /**
             <div>
             Indicates a bottom-center alignment.
             </div>
    
            @field Bottom
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["Bottom"] = 8] = "Bottom";
            /** <span id='prop-fm.icelink.LayoutAlignment-BottomRight'>&nbsp;</span> **/
            /**
             <div>
             Indicates a bottom-right alignment.
             </div>
    
            @field BottomRight
            @type {fm.icelink.LayoutAlignment}
            */
            LayoutAlignment[LayoutAlignment["BottomRight"] = 9] = "BottomRight";
        })(LayoutAlignment = icelink.LayoutAlignment || (icelink.LayoutAlignment = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Specifies the direction of the layout flow.
         </div>
    
        */
        var LayoutDirection;
        (function (LayoutDirection) {
            /** <span id='prop-fm.icelink.LayoutDirection-Horizontal'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the layout should flow
             horizontally, filling rows as needed.
             </div>
    
            @field Horizontal
            @type {fm.icelink.LayoutDirection}
            */
            LayoutDirection[LayoutDirection["Horizontal"] = 1] = "Horizontal";
            /** <span id='prop-fm.icelink.LayoutDirection-Vertical'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the layout should flow
             vertically, filling columns as needed.
             </div>
    
            @field Vertical
            @type {fm.icelink.LayoutDirection}
            */
            LayoutDirection[LayoutDirection["Vertical"] = 2] = "Vertical";
        })(LayoutDirection = icelink.LayoutDirection || (icelink.LayoutDirection = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Specifies the layout mode that should be used.
         </div>
    
        */
        var LayoutMode;
        (function (LayoutMode) {
            /** <span id='prop-fm.icelink.LayoutMode-FloatLocal'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local video feed should be displayed as
             a floating element above the remote video feeds.
             </div>
    
            @field FloatLocal
            @type {fm.icelink.LayoutMode}
            */
            LayoutMode[LayoutMode["FloatLocal"] = 1] = "FloatLocal";
            /** <span id='prop-fm.icelink.LayoutMode-FloatRemote'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the remote video feeds should be displayed as
             floating elements above the local video feed.
             </div>
    
            @field FloatRemote
            @type {fm.icelink.LayoutMode}
            */
            LayoutMode[LayoutMode["FloatRemote"] = 2] = "FloatRemote";
            /** <span id='prop-fm.icelink.LayoutMode-Block'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the video feed should be displayed as a block
             element on its own row, separate from other video feeds.
             </div>
    
            @field Block
            @type {fm.icelink.LayoutMode}
            */
            LayoutMode[LayoutMode["Block"] = 3] = "Block";
            /** <span id='prop-fm.icelink.LayoutMode-Inline'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the video feed should be displayed as an inline
             element that shares a row with other video feeds.
             </div>
    
            @field Inline
            @type {fm.icelink.LayoutMode}
            */
            LayoutMode[LayoutMode["Inline"] = 4] = "Inline";
        })(LayoutMode = icelink.LayoutMode || (icelink.LayoutMode = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A layout origin definition.
         </div>
    
        */
        var LayoutOrigin;
        (function (LayoutOrigin) {
            /** <span id='prop-fm.icelink.LayoutOrigin-TopLeft'>&nbsp;</span> **/
            /**
             <div>
             Indicates an origin where 0,0 is in the top-left corner.
             </div>
    
            @field TopLeft
            @type {fm.icelink.LayoutOrigin}
            */
            LayoutOrigin[LayoutOrigin["TopLeft"] = 1] = "TopLeft";
            /** <span id='prop-fm.icelink.LayoutOrigin-TopRight'>&nbsp;</span> **/
            /**
             <div>
             Indicates an origin where 0,0 is in the top-right corner.
             </div>
    
            @field TopRight
            @type {fm.icelink.LayoutOrigin}
            */
            LayoutOrigin[LayoutOrigin["TopRight"] = 2] = "TopRight";
            /** <span id='prop-fm.icelink.LayoutOrigin-BottomRight'>&nbsp;</span> **/
            /**
             <div>
             Indicates an origin where 0,0 is in the bottom-right corner.
             </div>
    
            @field BottomRight
            @type {fm.icelink.LayoutOrigin}
            */
            LayoutOrigin[LayoutOrigin["BottomRight"] = 3] = "BottomRight";
            /** <span id='prop-fm.icelink.LayoutOrigin-BottomLeft'>&nbsp;</span> **/
            /**
             <div>
             Indicates an origin where 0,0 is in the bottom-left corner.
             </div>
    
            @field BottomLeft
            @type {fm.icelink.LayoutOrigin}
            */
            LayoutOrigin[LayoutOrigin["BottomLeft"] = 4] = "BottomLeft";
        })(LayoutOrigin = icelink.LayoutOrigin || (icelink.LayoutOrigin = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Specifies how an element should be scaled within a layout.
         </div>
    
        */
        var LayoutScale;
        (function (LayoutScale) {
            /** <span id='prop-fm.icelink.LayoutScale-Contain'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the element should be uniformly scaled
             (maintaining aspect ratio) to the largest size such
             that both its width and its height can fit inside its
             bounding box.
             </div>
    
            @field Contain
            @type {fm.icelink.LayoutScale}
            */
            LayoutScale[LayoutScale["Contain"] = 1] = "Contain";
            /** <span id='prop-fm.icelink.LayoutScale-Cover'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the element should be uniformly scaled
             (maintaining aspect ratio) to be as large as possible
             so that the bounding box is completely covered. Some
             parts of the element may not be in view (cropped).
             </div>
    
            @field Cover
            @type {fm.icelink.LayoutScale}
            */
            LayoutScale[LayoutScale["Cover"] = 2] = "Cover";
            /** <span id='prop-fm.icelink.LayoutScale-Stretch'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the element should be non-uniformly
             scaled (not maintaining aspect ratio) so that the
             bounding box is completely covered, but all parts
             of the element are in view (no cropping).
             </div>
    
            @field Stretch
            @type {fm.icelink.LayoutScale}
            */
            LayoutScale[LayoutScale["Stretch"] = 3] = "Stretch";
        })(LayoutScale = icelink.LayoutScale || (icelink.LayoutScale = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of local media.
         </div>
    
        */
        var LocalMediaState;
        (function (LocalMediaState) {
            /** <span id='prop-fm.icelink.LocalMediaState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media has not been started yet.
             </div>
    
            @field New
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.LocalMediaState-Starting'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media is starting.
             </div>
    
            @field Starting
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Starting"] = 2] = "Starting";
            /** <span id='prop-fm.icelink.LocalMediaState-Started'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media has started.
             </div>
    
            @field Started
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Started"] = 3] = "Started";
            /** <span id='prop-fm.icelink.LocalMediaState-Stopping'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media is stopping.
             </div>
    
            @field Stopping
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Stopping"] = 4] = "Stopping";
            /** <span id='prop-fm.icelink.LocalMediaState-Stopped'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media has stopped.
             </div>
    
            @field Stopped
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Stopped"] = 5] = "Stopped";
            /** <span id='prop-fm.icelink.LocalMediaState-Destroying'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media is being destroyed.
             </div>
    
            @field Destroying
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Destroying"] = 6] = "Destroying";
            /** <span id='prop-fm.icelink.LocalMediaState-Destroyed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the local media has been destroyed.
             </div>
    
            @field Destroyed
            @type {fm.icelink.LocalMediaState}
            */
            LocalMediaState[LocalMediaState["Destroyed"] = 7] = "Destroyed";
        })(LocalMediaState = icelink.LocalMediaState || (icelink.LocalMediaState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The local policy for the use of generic RTP Negative Acknowledgements (NACK).
         Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26
         </div>
    
        */
        var NackPolicy;
        (function (NackPolicy) {
            /** <span id='prop-fm.icelink.NackPolicy-Disabled'>&nbsp;</span> **/
            /**
             <div>
             The usage of generic NACKs is disabled.
             </div>
    
            @field Disabled
            @type {fm.icelink.NackPolicy}
            */
            NackPolicy[NackPolicy["Disabled"] = 1] = "Disabled";
            /** <span id='prop-fm.icelink.NackPolicy-Negotiated'>&nbsp;</span> **/
            /**
             <div>
             The usage of generic NACKs is negotiated with the peer.
             </div>
    
            @field Negotiated
            @type {fm.icelink.NackPolicy}
            */
            NackPolicy[NackPolicy["Negotiated"] = 2] = "Negotiated";
        })(NackPolicy = icelink.NackPolicy || (icelink.NackPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A protocol type.
         </div>
    
        */
        var ProtocolType;
        (function (ProtocolType) {
            /** <span id='prop-fm.icelink.ProtocolType-Udp'>&nbsp;</span> **/
            /**
             <div>
             Indicates the UDP protocol.
             </div>
    
            @field Udp
            @type {fm.icelink.ProtocolType}
            */
            ProtocolType[ProtocolType["Udp"] = 1] = "Udp";
            /** <span id='prop-fm.icelink.ProtocolType-Tcp'>&nbsp;</span> **/
            /**
             <div>
             Indicates the TCP protocol.
             </div>
    
            @field Tcp
            @type {fm.icelink.ProtocolType}
            */
            ProtocolType[ProtocolType["Tcp"] = 2] = "Tcp";
            /** <span id='prop-fm.icelink.ProtocolType-Tls'>&nbsp;</span> **/
            /**
             <div>
             Indicates the TLS protocol.
             </div>
    
            @field Tls
            @type {fm.icelink.ProtocolType}
            */
            ProtocolType[ProtocolType["Tls"] = 3] = "Tls";
            /** <span id='prop-fm.icelink.ProtocolType-Unknown'>&nbsp;</span> **/
            /**
             <div>
             Indicates an unknown protocol.
             </div>
    
            @field Unknown
            @type {fm.icelink.ProtocolType}
            */
            ProtocolType[ProtocolType["Unknown"] = 4] = "Unknown";
        })(ProtocolType = icelink.ProtocolType || (icelink.ProtocolType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The local policy for the RED Forward Error Correction support.
         Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-fec-04
         </div>
    
        */
        var RedFecPolicy;
        (function (RedFecPolicy) {
            /** <span id='prop-fm.icelink.RedFecPolicy-Disabled'>&nbsp;</span> **/
            /**
             <div>
             The usage of RED FEC is disabled.
             </div>
    
            @field Disabled
            @type {fm.icelink.RedFecPolicy}
            */
            RedFecPolicy[RedFecPolicy["Disabled"] = 1] = "Disabled";
            /** <span id='prop-fm.icelink.RedFecPolicy-Negotiated'>&nbsp;</span> **/
            /**
             <div>
             The usage of RED FEC is negotiated with the peer.
             </div>
    
            @field Negotiated
            @type {fm.icelink.RedFecPolicy}
            */
            RedFecPolicy[RedFecPolicy["Negotiated"] = 2] = "Negotiated";
        })(RedFecPolicy = icelink.RedFecPolicy || (icelink.RedFecPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The local policy for the use of Receiver Estimated Maximum Bitrates (goog-remb).
         Cf. https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03
         </div>
    
        */
        var RembPolicy;
        (function (RembPolicy) {
            /** <span id='prop-fm.icelink.RembPolicy-Disabled'>&nbsp;</span> **/
            /**
             <div>
             The usage of goog-rembs is disabled.
             </div>
    
            @field Disabled
            @type {fm.icelink.RembPolicy}
            */
            RembPolicy[RembPolicy["Disabled"] = 1] = "Disabled";
            /** <span id='prop-fm.icelink.RembPolicy-Negotiated'>&nbsp;</span> **/
            /**
             <div>
             The usage of goog-rembs is negotiated with the peer.
             </div>
    
            @field Negotiated
            @type {fm.icelink.RembPolicy}
            */
            RembPolicy[RembPolicy["Negotiated"] = 2] = "Negotiated";
        })(RembPolicy = icelink.RembPolicy || (icelink.RembPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Indicates Sdes policy for stream.
         </div>
    
        */
        var SdesPolicy;
        (function (SdesPolicy) {
            /** <span id='prop-fm.icelink.SdesPolicy-Negotiated'>&nbsp;</span> **/
            /**
             <div>
             Sdes is preferred but not required. If stream type is compatible (i.e. not a DataStream) Crypto attributes will be included in the session description.
             </div>
    
            @field Negotiated
            @type {fm.icelink.SdesPolicy}
            */
            SdesPolicy[SdesPolicy["Negotiated"] = 2] = "Negotiated";
            /** <span id='prop-fm.icelink.SdesPolicy-Disabled'>&nbsp;</span> **/
            /**
             <div>
             Sdes is disabled. Crypto attributes will not be included in the session description.
             </div>
    
            @field Disabled
            @type {fm.icelink.SdesPolicy}
            */
            SdesPolicy[SdesPolicy["Disabled"] = 3] = "Disabled";
        })(SdesPolicy = icelink.SdesPolicy || (icelink.SdesPolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             SDP Attribute types
             </div>
        
            */
            var AttributeType;
            (function (AttributeType) {
                /** <span id='prop-fm.icelink.sdp.AttributeType-UnknownAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 Unknown SDP Attribute
                 </div>
        
                @field UnknownAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["UnknownAttribute"] = 999666] = "UnknownAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-DirectionAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Direction Attribute
                 </div>
        
                @field DirectionAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["DirectionAttribute"] = 1] = "DirectionAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-CategoryAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Category Attribute
                 </div>
        
                @field CategoryAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["CategoryAttribute"] = 2] = "CategoryAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-CharacterSetAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Character Set Attribute
                 </div>
        
                @field CharacterSetAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["CharacterSetAttribute"] = 3] = "CharacterSetAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-ConferenceTypeAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Conference Type Attribute
                 </div>
        
                @field ConferenceTypeAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["ConferenceTypeAttribute"] = 4] = "ConferenceTypeAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-CryptoAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Crypto Attribute
                 </div>
        
                @field CryptoAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["CryptoAttribute"] = 5] = "CryptoAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-FormatParametersAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Format Parameters Attribute
                 </div>
        
                @field FormatParametersAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["FormatParametersAttribute"] = 6] = "FormatParametersAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-FrameRateAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Frame Rate Attribute
                 </div>
        
                @field FrameRateAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["FrameRateAttribute"] = 7] = "FrameRateAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-KeywordsAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Keywords Attribute
                 </div>
        
                @field KeywordsAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["KeywordsAttribute"] = 8] = "KeywordsAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-LanguageAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Language Attribute
                 </div>
        
                @field LanguageAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["LanguageAttribute"] = 9] = "LanguageAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-MaxPacketTimeAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Max Packet Time Attribute
                 </div>
        
                @field MaxPacketTimeAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["MaxPacketTimeAttribute"] = 10] = "MaxPacketTimeAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-OrientationAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Orientiation Attribute
                 </div>
        
                @field OrientationAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["OrientationAttribute"] = 11] = "OrientationAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-PacketTimeAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Packet Time Attribute
                 </div>
        
                @field PacketTimeAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["PacketTimeAttribute"] = 12] = "PacketTimeAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-QualityAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Quality Attribute
                 </div>
        
                @field QualityAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["QualityAttribute"] = 13] = "QualityAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-SdpLanguageAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Sdp Language Attribute
                 </div>
        
                @field SdpLanguageAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["SdpLanguageAttribute"] = 14] = "SdpLanguageAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-SetupAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Setup Attribute
                 </div>
        
                @field SetupAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["SetupAttribute"] = 15] = "SetupAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-ToolAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Tool  Attribute
                 </div>
        
                @field ToolAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["ToolAttribute"] = 16] = "ToolAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-MediaStreamIdSemanticAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Media Stream Id Semantic Attribute
                 </div>
        
                @field MediaStreamIdSemanticAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["MediaStreamIdSemanticAttribute"] = 17] = "MediaStreamIdSemanticAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-MediaStreamIdAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Stream Id Attribute
                 </div>
        
                @field MediaStreamIdAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["MediaStreamIdAttribute"] = 18] = "MediaStreamIdAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceCandidateAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Candidate Attribute
                 </div>
        
                @field IceCandidateAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceCandidateAttribute"] = 19] = "IceCandidateAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceFingerprintAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Fingerprint Attribute
                 </div>
        
                @field IceFingerprintAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceFingerprintAttribute"] = 20] = "IceFingerprintAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceLiteAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Lite Attribute
                 </div>
        
                @field IceLiteAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceLiteAttribute"] = 21] = "IceLiteAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceMismatchAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Mismatch Attribute
                 </div>
        
                @field IceMismatchAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceMismatchAttribute"] = 22] = "IceMismatchAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceOptionsAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Options Attribute
                 </div>
        
                @field IceOptionsAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceOptionsAttribute"] = 23] = "IceOptionsAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IcePasswordAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Password Attribute
                 </div>
        
                @field IcePasswordAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IcePasswordAttribute"] = 24] = "IcePasswordAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceUfragAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Ufrag Attribute
                 </div>
        
                @field IceUfragAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceUfragAttribute"] = 25] = "IceUfragAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-IceRemoteCandidatesAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP Ice Remote Candidates Attribute
                 </div>
        
                @field IceRemoteCandidatesAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["IceRemoteCandidatesAttribute"] = 26] = "IceRemoteCandidatesAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtpMapAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTP Map Attribute
                 </div>
        
                @field RtpMapAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtpMapAttribute"] = 27] = "RtpMapAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtpSsrcAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTP SSRC Attribute
                 </div>
        
                @field RtpSsrcAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtpSsrcAttribute"] = 28] = "RtpSsrcAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtpExtMapAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)
                 </div>
        
                @field RtpExtMapAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtpExtMapAttribute"] = 29] = "RtpExtMapAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTCP Attribute
                 </div>
        
                @field RtcpAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtcpAttribute"] = 30] = "RtcpAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpFeedbackAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTCP Feedback Attribute
                 </div>
        
                @field RtcpFeedbackAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtcpFeedbackAttribute"] = 31] = "RtcpFeedbackAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpMuxAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP RTCP Mux Attribute
                 </div>
        
                @field RtcpMuxAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["RtcpMuxAttribute"] = 32] = "RtcpMuxAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-SctpPortAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP SCTP Port Attribute
                 </div>
        
                @field SctpPortAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["SctpPortAttribute"] = 33] = "SctpPortAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-SctpMapAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP SCTP Map Attribute
                 </div>
        
                @field SctpMapAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["SctpMapAttribute"] = 34] = "SctpMapAttribute";
                /** <span id='prop-fm.icelink.sdp.AttributeType-SctpMaxMessageSizeAttribute'>&nbsp;</span> **/
                /**
                 <div>
                 SDP SCTP Max Message Size Attribute
                 </div>
        
                @field SctpMaxMessageSizeAttribute
                @type {fm.icelink.sdp.AttributeType}
                */
                AttributeType[AttributeType["SctpMaxMessageSizeAttribute"] = 35] = "SctpMaxMessageSizeAttribute";
            })(AttributeType = sdp.AttributeType || (sdp.AttributeType = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 A list of known types for `fm.icelink.sdp.ice.optionTag`.
                 </div>
            
                */
                var OptionTagType;
                (function (OptionTagType) {
                    /** <span id='prop-fm.icelink.sdp.ice.OptionTagType-Unknown'>&nbsp;</span> **/
                    /**
                     <div>
                     Indicates an unknown option tag.
                     </div>
            
                    @field Unknown
                    @type {fm.icelink.sdp.ice.OptionTagType}
                    */
                    OptionTagType[OptionTagType["Unknown"] = 1] = "Unknown";
                    /** <span id='prop-fm.icelink.sdp.ice.OptionTagType-Trickle'>&nbsp;</span> **/
                    /**
                     <div>
                     Indicates the trickle-ice option tag.
                     </div>
            
                    @field Trickle
                    @type {fm.icelink.sdp.ice.OptionTagType}
                    */
                    OptionTagType[OptionTagType["Trickle"] = 2] = "Trickle";
                })(OptionTagType = ice.OptionTagType || (ice.OptionTagType = {}));
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Media Stream Id Semantic Tokens
             </div>
        
            */
            var MediaStreamIdSemanticToken;
            (function (MediaStreamIdSemanticToken) {
                /** <span id='prop-fm.icelink.sdp.MediaStreamIdSemanticToken-Wms'>&nbsp;</span> **/
                /**
                 <div>
                 WebRTC Media Stream Semantic
                 </div>
        
                @field Wms
                @type {fm.icelink.sdp.MediaStreamIdSemanticToken}
                */
                MediaStreamIdSemanticToken[MediaStreamIdSemanticToken["Wms"] = 1] = "Wms";
            })(MediaStreamIdSemanticToken = sdp.MediaStreamIdSemanticToken || (sdp.MediaStreamIdSemanticToken = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A session description type.
         </div>
    
        */
        var SessionDescriptionType;
        (function (SessionDescriptionType) {
            /** <span id='prop-fm.icelink.SessionDescriptionType-Offer'>&nbsp;</span> **/
            /**
             <div>
             Indicates an offer.
             </div>
    
            @field Offer
            @type {fm.icelink.SessionDescriptionType}
            */
            SessionDescriptionType[SessionDescriptionType["Offer"] = 1] = "Offer";
            /** <span id='prop-fm.icelink.SessionDescriptionType-Answer'>&nbsp;</span> **/
            /**
             <div>
             Indicates an answer.
             </div>
    
            @field Answer
            @type {fm.icelink.SessionDescriptionType}
            */
            SessionDescriptionType[SessionDescriptionType["Answer"] = 2] = "Answer";
        })(SessionDescriptionType = icelink.SessionDescriptionType || (icelink.SessionDescriptionType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The signalling state of a connection.
         </div>
    
        */
        var SignallingState;
        (function (SignallingState) {
            /** <span id='prop-fm.icelink.SignallingState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that no offer/answer exchange ever occurred.
             </div>
    
            @field New
            @type {fm.icelink.SignallingState}
            */
            SignallingState[SignallingState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.SignallingState-HaveLocalOffer'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has a local offer and remote answer is outstanding.
             </div>
    
            @field HaveLocalOffer
            @type {fm.icelink.SignallingState}
            */
            SignallingState[SignallingState["HaveLocalOffer"] = 2] = "HaveLocalOffer";
            /** <span id='prop-fm.icelink.SignallingState-HaveRemoteOffer'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the connection has a remote offer and local answer is outstanding.
             </div>
    
            @field HaveRemoteOffer
            @type {fm.icelink.SignallingState}
            */
            SignallingState[SignallingState["HaveRemoteOffer"] = 3] = "HaveRemoteOffer";
            /** <span id='prop-fm.icelink.SignallingState-Stable'>&nbsp;</span> **/
            /**
             <div>
             Indicates that for each offer there is a matching answer.
             </div>
    
            @field Stable
            @type {fm.icelink.SignallingState}
            */
            SignallingState[SignallingState["Stable"] = 4] = "Stable";
        })(SignallingState = icelink.SignallingState || (icelink.SignallingState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A stream direction.
         </div>
    
        */
        var StreamDirection;
        (function (StreamDirection) {
            /** <span id='prop-fm.icelink.StreamDirection-SendReceive'>&nbsp;</span> **/
            /**
             <div>
             Indicates a stream that can send and can receive.
             </div>
    
            @field SendReceive
            @type {fm.icelink.StreamDirection}
            */
            StreamDirection[StreamDirection["SendReceive"] = 1] = "SendReceive";
            /** <span id='prop-fm.icelink.StreamDirection-SendOnly'>&nbsp;</span> **/
            /**
             <div>
             Indicates a stream that can send.
             </div>
    
            @field SendOnly
            @type {fm.icelink.StreamDirection}
            */
            StreamDirection[StreamDirection["SendOnly"] = 2] = "SendOnly";
            /** <span id='prop-fm.icelink.StreamDirection-ReceiveOnly'>&nbsp;</span> **/
            /**
             <div>
             Indicates a stream that can receive.
             </div>
    
            @field ReceiveOnly
            @type {fm.icelink.StreamDirection}
            */
            StreamDirection[StreamDirection["ReceiveOnly"] = 3] = "ReceiveOnly";
            /** <span id='prop-fm.icelink.StreamDirection-Inactive'>&nbsp;</span> **/
            /**
             <div>
             Indicates a stream that cannot send or receive.
             </div>
    
            @field Inactive
            @type {fm.icelink.StreamDirection}
            */
            StreamDirection[StreamDirection["Inactive"] = 4] = "Inactive";
            /** <span id='prop-fm.icelink.StreamDirection-Unset'>&nbsp;</span> **/
            /**
             <div>
             Indicates that a stream direction has not been set.
             </div>
    
            @field Unset
            @type {fm.icelink.StreamDirection}
            */
            StreamDirection[StreamDirection["Unset"] = 5] = "Unset";
        })(StreamDirection = icelink.StreamDirection || (icelink.StreamDirection = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The state of a stream.
         </div>
    
        */
        var StreamState;
        (function (StreamState) {
            /** <span id='prop-fm.icelink.StreamState-New'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream is new and has not been started.
             </div>
    
            @field New
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["New"] = 1] = "New";
            /** <span id='prop-fm.icelink.StreamState-Initializing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream is being initialized but no connecting attempts have been made.
             </div>
    
            @field Initializing
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Initializing"] = 2] = "Initializing";
            /** <span id='prop-fm.icelink.StreamState-Connecting'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream is currently connecting.
             </div>
    
            @field Connecting
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Connecting"] = 3] = "Connecting";
            /** <span id='prop-fm.icelink.StreamState-Connected'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream is currently connected.
             </div>
    
            @field Connected
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Connected"] = 4] = "Connected";
            /** <span id='prop-fm.icelink.StreamState-Failing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream has encountered an error and is cleaning up.
             </div>
    
            @field Failing
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Failing"] = 5] = "Failing";
            /** <span id='prop-fm.icelink.StreamState-Failed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream has encountered an error and has cleaned up.
             </div>
    
            @field Failed
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Failed"] = 6] = "Failed";
            /** <span id='prop-fm.icelink.StreamState-Closing'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream has been instructed to close and is cleaning up.
             </div>
    
            @field Closing
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Closing"] = 7] = "Closing";
            /** <span id='prop-fm.icelink.StreamState-Closed'>&nbsp;</span> **/
            /**
             <div>
             Indicates that the stream has been instructed to close and has cleaned up.
             </div>
    
            @field Closed
            @type {fm.icelink.StreamState}
            */
            StreamState[StreamState["Closed"] = 8] = "Closed";
        })(StreamState = icelink.StreamState || (icelink.StreamState = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A stream type.
         </div>
    
        */
        var StreamType;
        (function (StreamType) {
            /** <span id='prop-fm.icelink.StreamType-Audio'>&nbsp;</span> **/
            /**
             <div>
             Indicates an audio stream.
             </div>
    
            @field Audio
            @type {fm.icelink.StreamType}
            */
            StreamType[StreamType["Audio"] = 1] = "Audio";
            /** <span id='prop-fm.icelink.StreamType-Video'>&nbsp;</span> **/
            /**
             <div>
             Indicates a video stream.
             </div>
    
            @field Video
            @type {fm.icelink.StreamType}
            */
            StreamType[StreamType["Video"] = 2] = "Video";
            /** <span id='prop-fm.icelink.StreamType-Application'>&nbsp;</span> **/
            /**
             <div>
             Indicates an application stream.
             </div>
    
            @field Application
            @type {fm.icelink.StreamType}
            */
            StreamType[StreamType["Application"] = 3] = "Application";
            /** <span id='prop-fm.icelink.StreamType-Message'>&nbsp;</span> **/
            /**
             <div>
             Indicates a message stream.
             </div>
    
            @field Message
            @type {fm.icelink.StreamType}
            */
            StreamType[StreamType["Message"] = 4] = "Message";
            /** <span id='prop-fm.icelink.StreamType-Text'>&nbsp;</span> **/
            /**
             <div>
             Indicates a text stream.
             </div>
    
            @field Text
            @type {fm.icelink.StreamType}
            */
            StreamType[StreamType["Text"] = 5] = "Text";
        })(StreamType = icelink.StreamType || (icelink.StreamType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var TransportType;
        (function (TransportType) {
            TransportType[TransportType["Gatherer"] = 1] = "Gatherer";
            TransportType[TransportType["IceTransport"] = 2] = "IceTransport";
            TransportType[TransportType["DtlsTransport"] = 3] = "DtlsTransport";
            TransportType[TransportType["SctpTransport"] = 4] = "SctpTransport";
            TransportType[TransportType["ReliableDataTransport"] = 5] = "ReliableDataTransport";
            TransportType[TransportType["SrtpTransport"] = 6] = "SrtpTransport";
            TransportType[TransportType["Unset"] = 7] = "Unset";
            TransportType[TransportType["MediaTransport"] = 8] = "MediaTransport";
        })(TransportType = icelink.TransportType || (icelink.TransportType = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The local policy for TrickleIce support.
         Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-04
         </div>
    
        */
        var TrickleIcePolicy;
        (function (TrickleIcePolicy) {
            /** <span id='prop-fm.icelink.TrickleIcePolicy-NotSupported'>&nbsp;</span> **/
            /**
             <div>
             A Trickle ICE mode of operation where the offerer
             gathers all of the possible candidates strictly before
             creating and sending the offer.
             </div>
    
            @field NotSupported
            @type {fm.icelink.TrickleIcePolicy}
            */
            TrickleIcePolicy[TrickleIcePolicy["NotSupported"] = 1] = "NotSupported";
            /** <span id='prop-fm.icelink.TrickleIcePolicy-FullTrickle'>&nbsp;</span> **/
            /**
             <div>
             The regular mode of operation for Trickle ICE agents,
             in which an initial offer can include any number of candidates
             (even zero candidates) and does not need to include the entire
             first generation of candidates as in half trickle.
             </div>
    
            @field FullTrickle
            @type {fm.icelink.TrickleIcePolicy}
            */
            TrickleIcePolicy[TrickleIcePolicy["FullTrickle"] = 2] = "FullTrickle";
            /** <span id='prop-fm.icelink.TrickleIcePolicy-HalfTrickle'>&nbsp;</span> **/
            /**
             <div>
             A Trickle ICE mode of operation where the offerer
             gathers its first generation of candidates strictly before
             creating and sending the offer. Once sent, that offer can be
             processed by Vanilla ICE agents and does not require support for
             this specification. It also allows Trickle ICE capable answerers
             to still gather candidates and perform connectivity checks in a
             non-blocking way, thus roughly offering "half" the advantages of
             Trickle ICE. The mechanism is mostly meant for use in cases where
             support for Trickle ICE cannot be confirmed prior to sending an
             initial offer.
             </div>
    
            @field HalfTrickle
            @type {fm.icelink.TrickleIcePolicy}
            */
            TrickleIcePolicy[TrickleIcePolicy["HalfTrickle"] = 3] = "HalfTrickle";
        })(TrickleIcePolicy = icelink.TrickleIcePolicy || (icelink.TrickleIcePolicy = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var AddressTypeWrapper = /** @class */ (function () {
            function AddressTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_2 = __arguments[0];
                    //super();
                    this._value = value_2;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            AddressTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.AddressTypeWrapper]';
            };
            AddressTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.AddressType.IPv4)
                        return 'IPv4';
                    if (this._value == fm.icelink.AddressType.IPv6)
                        return 'IPv6';
                    if (this._value == fm.icelink.AddressType.Unknown)
                        return 'Unknown';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return AddressTypeWrapper;
        }());
        icelink.AddressTypeWrapper = AddressTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         ASCII encoding/decoding utility.
         </div>
    
        */
        var Ascii = /** @class */ (function () {
            function Ascii() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Ascii.prototype.getTypeString = function () {
                return '[fm.icelink.Ascii]';
            };
            Ascii.decode = function () {
                if (arguments.length == 3) {
                    var input = arguments[0];
                    var index = arguments[1];
                    var length_6 = arguments[2];
                    return fm.icelink.Encoding.getAscii().getString(input, index, length_6);
                }
                else if (arguments.length == 1) {
                    var input = arguments[0];
                    return fm.icelink.Ascii.decode(input, 0, input.length);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Ascii-encode'>&nbsp;</span>**/
            /**
             <div>
             Encodes a string to a UTF-8 byte array.
             </div>
    
            @param {string} input The input string.
            @return {Uint8Array}
            */
            Ascii.encode = function (input) {
                if (arguments.length == 1) {
                    return fm.icelink.Encoding.getAscii().getBytes(input);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Ascii-getByteCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes that would be returned by
             a call to encode.
             </div>
    
            @param {string} input The input string.
            @return {number}
            */
            Ascii.getByteCount = function (input) {
                if (arguments.length == 1) {
                    return fm.icelink.Encoding.getAscii().getByteCount(input);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Ascii;
        }());
        icelink.Ascii = Ascii;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A managed mutex.
         </div>
    
        */
        var AtomicMutex = /** @class */ (function () {
            /**<span id='method-fm.icelink.AtomicMutex-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of an AtomicMutex.
             </div>
    
    
            @return {}
            */
            function AtomicMutex() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.__lock = new fm.icelink.AtomicInteger(0);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            AtomicMutex.prototype.getTypeString = function () {
                return '[fm.icelink.AtomicMutex]';
            };
            /**<span id='method-fm.icelink.AtomicMutex-getIsLocked'>&nbsp;</span>**/
            /**
             <div>
             Gets if the mutex is locked or not.
             </div>
    
    
            @return {boolean}
            */
            AtomicMutex.prototype.getIsLocked = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.__lock.getValue(), 1));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AtomicMutex-release'>&nbsp;</span>**/
            /**
             <div>
             Releases the lock.
             </div>
    
    
            @return {void}
            */
            AtomicMutex.prototype.release = function () {
                if (arguments.length == 0) {
                    this.__lock.compareAndSwap(1, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AtomicMutex-tryLock'>&nbsp;</span>**/
            /**
             <div>
             Tries to obtain a lock with this thread.
             </div>
    
            @return {boolean}
            */
            AtomicMutex.prototype.tryLock = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.__lock.compareAndSwap(0, 1), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return AtomicMutex;
        }());
        icelink.AtomicMutex = AtomicMutex;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Common binary methods.
         </div>
    
        */
        var Binary = /** @class */ (function () {
            function Binary() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Binary.prototype.getTypeString = function () {
                return '[fm.icelink.Binary]';
            };
            Binary.bitStringToBytes = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isBoolean(arguments[1]))) {
                    var bitString = arguments[0];
                    var padLeft = arguments[1];
                    var numberOfUnusedBits = 0;
                    var _var0 = new fm.icelink.Holder(numberOfUnusedBits);
                    var _var1 = fm.icelink.Binary.bitStringToBytes(bitString, padLeft, _var0);
                    numberOfUnusedBits = _var0.getValue();
                    return _var1;
                }
                else if (arguments.length == 3) {
                    var bitString = arguments[0];
                    var padLeft = arguments[1];
                    var numberOfUnusedBits = arguments[2];
                    var num = (bitString.length % 8);
                    numberOfUnusedBits.setValue(0);
                    if ((num > 0)) {
                        numberOfUnusedBits.setValue((8 - num));
                        for (var j = 0; (j < numberOfUnusedBits.getValue()); j++) {
                            if (padLeft) {
                                bitString = fm.icelink.StringExtensions.concat("0", bitString);
                            }
                            else {
                                bitString = fm.icelink.StringExtensions.concat(bitString, "0");
                            }
                        }
                    }
                    var buffer = new Uint8Array(icelink.MathAssistant.floor(bitString.length / 8));
                    var index = 0;
                    for (var i = 0; (index < buffer.length); i = (i + 8)) {
                        var flag = (!fm.icelink.Global.equals(bitString.charCodeAt(i), 48));
                        var flag2 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 1)), 48));
                        var flag3 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 2)), 48));
                        var flag4 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 3)), 48));
                        var flag5 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 4)), 48));
                        var flag6 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 5)), 48));
                        var flag7 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 6)), 48));
                        var flag8 = (!fm.icelink.Global.equals(bitString.charCodeAt((i + 7)), 48));
                        var num5 = 0;
                        if (flag) {
                            num5 = (num5 + 128);
                        }
                        if (flag2) {
                            num5 = (num5 + 64);
                        }
                        if (flag3) {
                            num5 = (num5 + 32);
                        }
                        if (flag4) {
                            num5 = (num5 + 16);
                        }
                        if (flag5) {
                            num5 = (num5 + 8);
                        }
                        if (flag6) {
                            num5 = (num5 + 4);
                        }
                        if (flag7) {
                            num5 = (num5 + 2);
                        }
                        if (flag8) {
                            num5++;
                        }
                        buffer[index] = fm.icelink.BitAssistant.castByte(num5);
                        index++;
                    }
                    return buffer;
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isObjectType(arguments[1], '[fm.icelink.Holder<number>]'))) {
                    var bitString = arguments[0];
                    var numberOfUnusedBits = arguments[1];
                    var _var0 = fm.icelink.Binary.bitStringToBytes(bitString, false, numberOfUnusedBits);
                    return _var0;
                }
                else if (arguments.length == 1) {
                    var bitString = arguments[0];
                    var numberOfUnusedBits = 0;
                    var _var0 = new fm.icelink.Holder(numberOfUnusedBits);
                    var _var1 = fm.icelink.Binary.bitStringToBytes(bitString, _var0);
                    numberOfUnusedBits = _var0.getValue();
                    return _var1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.bytesToBitString = function () {
                if (arguments.length == 4) {
                    var bytes = arguments[0];
                    var offset = arguments[1];
                    var length_7 = arguments[2];
                    var numberOfUnusedBits = arguments[3];
                    return fm.icelink.Binary.bytesToBitString(bytes, offset, length_7, numberOfUnusedBits, false);
                }
                else if (arguments.length == 5) {
                    var bytes = arguments[0];
                    var offset = arguments[1];
                    var length_8 = arguments[2];
                    var numberOfUnusedBits = arguments[3];
                    var trimLeft = arguments[4];
                    var str = "";
                    for (var i = offset; (i < (offset + length_8)); i++) {
                        var num2 = bytes[i];
                        var flag = (fm.icelink.Global.equals((num2 & 128), 128));
                        var flag2 = (fm.icelink.Global.equals((num2 & 64), 64));
                        var flag3 = (fm.icelink.Global.equals((num2 & 32), 32));
                        var flag4 = (fm.icelink.Global.equals((num2 & 16), 16));
                        var flag5 = (fm.icelink.Global.equals((num2 & 8), 8));
                        var flag6 = (fm.icelink.Global.equals((num2 & 4), 4));
                        var flag7 = (fm.icelink.Global.equals((num2 & 2), 2));
                        var flag8 = (fm.icelink.Global.equals((num2 & 1), 1));
                        str = fm.icelink.StringExtensions.concat(str, fm.icelink.StringExtensions.format("{0}{1}{2}{3}{4}{5}{6}{7}", [(flag ? "1" : "0"), (flag2 ? "1" : "0"), (flag3 ? "1" : "0"), (flag4 ? "1" : "0"), (flag5 ? "1" : "0"), (flag6 ? "1" : "0"), (flag7 ? "1" : "0"), (flag8 ? "1" : "0")]));
                    }
                    if (trimLeft) {
                        return fm.icelink.StringExtensions.substring(str, numberOfUnusedBits, (str.length - numberOfUnusedBits));
                    }
                    return fm.icelink.StringExtensions.substring(str, 0, (str.length - numberOfUnusedBits));
                }
                else if (arguments.length == 3) {
                    var bytes = arguments[0];
                    var offset = arguments[1];
                    var length_9 = arguments[2];
                    return fm.icelink.Binary.bytesToBitString(bytes, offset, length_9, 0);
                }
                else if (arguments.length == 1) {
                    var bytes = arguments[0];
                    return fm.icelink.Binary.bytesToBitString(bytes, 0, bytes.length);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.deinterleave = function () {
                if (arguments.length == 2) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    fm.icelink.Binary.deinterleave(inputFrame, outputFrame, 0, inputFrame.length, false);
                }
                else if (arguments.length == 4) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var start = arguments[2];
                    var length_10 = arguments[3];
                    fm.icelink.Binary.deinterleave(inputFrame, outputFrame, start, length_10, false);
                }
                else if (arguments.length == 5) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var start = arguments[2];
                    var length_11 = arguments[3];
                    var reversePlanes = arguments[4];
                    var num = (start + length_11);
                    var num2 = icelink.MathAssistant.floor(length_11 / 2);
                    if ((num > outputFrame.length)) {
                        fm.icelink.Log.error("start + length greater than outputFrame length");
                    }
                    else {
                        var num3 = void 0;
                        var num4 = void 0;
                        if (reversePlanes) {
                            num3 = (start + num2);
                            num4 = start;
                        }
                        else {
                            num3 = start;
                            num4 = (start + num2);
                        }
                        for (var i = start; (i < num); i = (i + 2)) {
                            outputFrame[num3++] = inputFrame[i];
                            outputFrame[num4++] = inputFrame[(i + 1)];
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.deinterleaveTransform = function () {
                if (arguments.length == 8) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var start = arguments[6];
                    var reversePlanes = arguments[7];
                    var num = (width * height);
                    var length_12 = (num * 2);
                    var num3 = (stride - width);
                    var num4 = (start + length_12);
                    if ((num4 > outputFrame.length)) {
                        fm.icelink.Log.error("start + length greater than outputFrame length");
                    }
                    else {
                        var num5 = void 0;
                        var num6 = void 0;
                        var num9 = void 0;
                        var num10 = void 0;
                        if (reversePlanes) {
                            num5 = (start + num);
                            num6 = start;
                        }
                        else {
                            num5 = start;
                            num6 = (start + num);
                        }
                        var num7 = (height + 1);
                        var numArray = new Array(num7);
                        var num8 = (width * 2);
                        for (num9 = 0; (num9 < num7); num9++) {
                            numArray[num9] = ((num8 * num9) + start);
                            if ((num9 > 1)) {
                                numArray[num9] = (numArray[num9] + (num3 * (num9 - 1)));
                            }
                        }
                        if ((fm.icelink.Global.equals(rotation, 270))) {
                            for (num9 = 1; (num9 <= num8); num9 = (num9 + 2)) {
                                num10 = 1;
                                while ((num10 < num7)) {
                                    outputFrame[num5++] = inputFrame[(numArray[num10] - (num9 + 1))];
                                    outputFrame[num6++] = inputFrame[(numArray[num10] - num9)];
                                    num10++;
                                }
                            }
                        }
                        else {
                            if ((fm.icelink.Global.equals(rotation, 90))) {
                                for (num9 = 0; (num9 < num8); num9 = (num9 + 2)) {
                                    for (num10 = (num7 - 2); (num10 >= 0); num10--) {
                                        outputFrame[num5++] = inputFrame[(numArray[num10] + num9)];
                                        outputFrame[num6++] = inputFrame[(numArray[num10] + (num9 + 1))];
                                    }
                                }
                            }
                            else {
                                if ((fm.icelink.Global.equals(rotation, 180))) {
                                    for (num9 = ((start + length_12) - 1); (num9 >= start); num9 = (num9 - 2)) {
                                        outputFrame[num5++] = inputFrame[(num9 - 1)];
                                        outputFrame[num6++] = inputFrame[num9];
                                    }
                                }
                                else {
                                    fm.icelink.Binary.deinterleave(inputFrame, outputFrame, start, length_12, reversePlanes);
                                }
                            }
                        }
                    }
                }
                else if (arguments.length == 6) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    fm.icelink.Binary.deinterleaveTransform(inputFrame, outputFrame, width, height, stride, rotation, 0, false);
                }
                else if (arguments.length == 7) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var start = arguments[6];
                    fm.icelink.Binary.deinterleaveTransform(inputFrame, outputFrame, width, height, stride, rotation, start, false);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes1'>&nbsp;</span>**/
            /**
             <div>
             Reads a 1-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {boolean} The value.
            */
            Binary.fromBytes1 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.Global.equals((fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (7 - bitOffset)) & 1), 1));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes10'>&nbsp;</span>**/
            /**
             <div>
             Reads a 10-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes10 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 7)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (14 - bitOffset)) & 1023);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (6 - bitOffset)) & 1023);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 10 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes11'>&nbsp;</span>**/
            /**
             <div>
             Reads a 11-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes11 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 6)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (13 - bitOffset)) & 2047);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (5 - bitOffset)) & 2047);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 11 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes12'>&nbsp;</span>**/
            /**
             <div>
             Reads a 12-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes12 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 5)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (12 - bitOffset)) & 4095);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (4 - bitOffset)) & 4095);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 12 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes13'>&nbsp;</span>**/
            /**
             <div>
             Reads a 13-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes13 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 4)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (11 - bitOffset)) & 8191);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (3 - bitOffset)) & 8191);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 13 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes14'>&nbsp;</span>**/
            /**
             <div>
             Reads a 14-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes14 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 3)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (10 - bitOffset)) & 16383);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (2 - bitOffset)) & 16383);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 14 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes15'>&nbsp;</span>**/
            /**
             <div>
             Reads a 15-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes15 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 2)) {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (9 - bitOffset)) & 32767);
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (1 - bitOffset)) & 32767);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 15 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes16'>&nbsp;</span>**/
            /**
             <div>
             Reads a 16-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes16 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 0));
                        return (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 8));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes17'>&nbsp;</span>**/
            /**
             <div>
             Reads an 17-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes17 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (7 - bitOffset)) & 131071);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes18'>&nbsp;</span>**/
            /**
             <div>
             Reads an 18-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes18 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 7)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (14 - bitOffset)) & 262143);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (6 - bitOffset)) & 262143);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 18 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes19'>&nbsp;</span>**/
            /**
             <div>
             Reads an 19-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes19 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 6)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (13 - bitOffset)) & 524287);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (5 - bitOffset)) & 524287);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 19 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes2'>&nbsp;</span>**/
            /**
             <div>
             Reads a 2-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes2 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (6 - bitOffset)) & 3);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes20'>&nbsp;</span>**/
            /**
             <div>
             Reads an 20-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes20 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 5)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (12 - bitOffset)) & 1048575);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (4 - bitOffset)) & 1048575);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 20 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes21'>&nbsp;</span>**/
            /**
             <div>
             Reads an 21-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes21 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 4)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (11 - bitOffset)) & 2097151);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (3 - bitOffset)) & 2097151);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 21 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes22'>&nbsp;</span>**/
            /**
             <div>
             Reads an 22-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes22 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 3)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (10 - bitOffset)) & 4194303);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (2 - bitOffset)) & 4194303);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 22 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes23'>&nbsp;</span>**/
            /**
             <div>
             Reads an 23-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes23 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if ((bitOffset >= 2)) {
                        if (((inputIndex + 3) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftLong(fm.icelink.Binary.fromBytes32(input, inputIndex, false), (9 - bitOffset)) & 8388607);
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes24(input, inputIndex, false), (1 - bitOffset)) & 8388607);
                        }
                    }
                    throw new fm.icelink.Exception("Input data is not large enough to read 23 bits.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes24'>&nbsp;</span>**/
            /**
             <div>
             Reads a 24-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes24 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 8));
                        return (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 16));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes3'>&nbsp;</span>**/
            /**
             <div>
             Reads a 3-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes3 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (5 - bitOffset)) & 7);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes32'>&nbsp;</span>**/
            /**
             <div>
             Reads a 32-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes32 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                        return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes4'>&nbsp;</span>**/
            /**
             <div>
             Reads a 4-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes4 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (4 - bitOffset)) & 15);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes40'>&nbsp;</span>**/
            /**
             <div>
             Reads a 40-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes40 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                        return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes48'>&nbsp;</span>**/
            /**
             <div>
             Reads a 48-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes48 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                        return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes5'>&nbsp;</span>**/
            /**
             <div>
             Reads a 5-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes5 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (3 - bitOffset)) & 31);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes56'>&nbsp;</span>**/
            /**
             <div>
             Reads a 56-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes56 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                        return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 48));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 48));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes6'>&nbsp;</span>**/
            /**
             <div>
             Reads a 6-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes6 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (2 - bitOffset)) & 63);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes64'>&nbsp;</span>**/
            /**
             <div>
             Reads a 64-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @return {number} The value.
            */
            Binary.fromBytes64 = function (input, inputIndex, littleEndian) {
                if (arguments.length == 3) {
                    var num = 0;
                    if (littleEndian) {
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                        num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 48));
                        return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 56));
                    }
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 56));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 48));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 40));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 32));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 24));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 16));
                    num = (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 8));
                    return (num | fm.icelink.BitAssistant.leftShiftLong(fm.icelink.BitAssistant.castLong(input[inputIndex++]), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes7'>&nbsp;</span>**/
            /**
             <div>
             Reads a 7-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes7 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes8(input, inputIndex), (1 - bitOffset)) & 127);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes8'>&nbsp;</span>**/
            /**
             <div>
             Reads an 8-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @return {number} The value.
            */
            Binary.fromBytes8 = function (input, inputIndex) {
                if (arguments.length == 2) {
                    return fm.icelink.BitAssistant.leftShiftInteger(fm.icelink.BitAssistant.castInteger(input[inputIndex]), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-fromBytes9'>&nbsp;</span>**/
            /**
             <div>
             Reads a 9-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @return {number} The value.
            */
            Binary.fromBytes9 = function (input, inputIndex, bitOffset) {
                if (arguments.length == 3) {
                    if (((inputIndex + 1) >= input.length)) {
                        throw new fm.icelink.Exception("Input data is not large enough to read 9 bits.");
                    }
                    return (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fromBytes16(input, inputIndex, false), (7 - bitOffset)) & 511);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.interleave = function () {
                if (arguments.length == 4) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var start = arguments[2];
                    var length_13 = arguments[3];
                    fm.icelink.Binary.interleave(inputFrame, outputFrame, start, length_13, false);
                }
                else if (arguments.length == 5) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var start = arguments[2];
                    var length_14 = arguments[3];
                    var reversePlanes = arguments[4];
                    var num = (start + length_14);
                    var num2 = icelink.MathAssistant.floor(length_14 / 2);
                    if ((num > outputFrame.length)) {
                        fm.icelink.Log.error("start + length greater than outputFrame length");
                    }
                    else {
                        var num3 = void 0;
                        var num4 = void 0;
                        if (reversePlanes) {
                            num3 = (start + num2);
                            num4 = start;
                        }
                        else {
                            num3 = start;
                            num4 = (start + num2);
                        }
                        var num5 = 0;
                        for (var i = 0; (i < num2); i++) {
                            outputFrame[num5++] = inputFrame[(num3 + i)];
                            outputFrame[num5++] = inputFrame[(num4 + i)];
                        }
                    }
                }
                else if (arguments.length == 2) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    fm.icelink.Binary.interleave(inputFrame, outputFrame, 0, inputFrame.length, false);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.interleaveTransform = function () {
                if (arguments.length == 6) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    fm.icelink.Binary.interleaveTransform(inputFrame, outputFrame, width, height, stride, rotation, 0, false);
                }
                else if (arguments.length == 7) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var start = arguments[6];
                    fm.icelink.Binary.interleaveTransform(inputFrame, outputFrame, width, height, stride, rotation, start, false);
                }
                else if (arguments.length == 8) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var start = arguments[6];
                    var reversePlanes = arguments[7];
                    var num = ((stride > 0) ? (stride * height) : (width * height));
                    var num2 = ((width * height) * 2);
                    var num3 = ((stride > 0) ? (stride - width) : width);
                    var num4 = (start + num2);
                    if ((num4 > outputFrame.length)) {
                        fm.icelink.Log.error("start + length greater than outputFrame length");
                    }
                    else {
                        var num5 = void 0;
                        var num6 = void 0;
                        var num9 = void 0;
                        var num11 = void 0;
                        if (reversePlanes) {
                            num5 = (start + num);
                            num6 = start;
                        }
                        else {
                            num5 = start;
                            num6 = (start + num);
                        }
                        var num7 = (height + 1);
                        var numArray = new Array(num7);
                        var num8 = width;
                        for (num9 = 0; (num9 < num7); num9++) {
                            numArray[num9] = (((num8 * num9) + start) + (num3 * (num9 - 1)));
                        }
                        var num10 = 0;
                        if ((fm.icelink.Global.equals(rotation, 270))) {
                            for (num9 = 1; (num9 <= num8); num9++) {
                                num11 = 1;
                                while ((num11 < num7)) {
                                    outputFrame[num10++] = inputFrame[((num5 + numArray[num11]) - num9)];
                                    outputFrame[num10++] = inputFrame[((num6 + numArray[num11]) - num9)];
                                    num11++;
                                }
                            }
                        }
                        else {
                            if ((fm.icelink.Global.equals(rotation, 90))) {
                                for (num9 = 0; (num9 < num8); num9++) {
                                    for (num11 = (num7 - 2); (num11 >= 0); num11--) {
                                        outputFrame[num10++] = inputFrame[(((num5 + numArray[num11]) + num9) + num3)];
                                        outputFrame[num10++] = inputFrame[(((num6 + numArray[num11]) + num9) + num3)];
                                    }
                                }
                            }
                            else {
                                if ((fm.icelink.Global.equals(rotation, 180))) {
                                    for (num9 = (num - 1); (num9 >= 0); num9--) {
                                        outputFrame[num10++] = inputFrame[(num5 + num9)];
                                        outputFrame[num10++] = inputFrame[(num6 + num9)];
                                    }
                                }
                                else {
                                    fm.icelink.Binary.interleave(inputFrame, outputFrame, start, (num * 2), reversePlanes);
                                }
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Binary.roundUp = function (value, multiple) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(multiple, 0))) {
                        return value;
                    }
                    var num = (value % multiple);
                    if ((fm.icelink.Global.equals(num, 0))) {
                        return value;
                    }
                    return ((value + multiple) - num);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Binary.toBytes = function (value, bitOffset, littleEndian, output, outputIndex, bitCount) {
                if (arguments.length == 6) {
                    var num4 = void 0;
                    var num5 = void 0;
                    if ((bitOffset >= 8)) {
                        return fm.icelink.Binary.toBytes(value, (bitOffset % 8), littleEndian, output, (outputIndex + icelink.MathAssistant.floor(bitOffset / 8)), bitCount);
                    }
                    var num = fm.icelink.Binary.roundUp((bitCount + bitOffset), 8);
                    var num2 = icelink.MathAssistant.floor(num / 8);
                    if (((outputIndex + num2) > output.length)) {
                        throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Output data is not large enough to write {0} bits.", fm.icelink.IntExtensions.toString(bitCount)));
                    }
                    if (littleEndian) {
                        throw new fm.icelink.Exception("Little-endian bit-level serialization is not supported.");
                    }
                    var num3 = fm.icelink.BitAssistant.leftShiftInteger(value, ((num - bitCount) - bitOffset));
                    if ((num2 > 0)) {
                        num4 = (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fm_icelink_Binary___bitmasks[(bitCount - 1)][0], bitOffset) & 255);
                        num5 = (num - 8);
                        output[outputIndex] = ((output[outputIndex] & num4) | fm.icelink.BitAssistant.rightShiftInteger((num3 & fm.icelink.BitAssistant.leftShiftInteger(~num4, num5)), num5));
                        outputIndex++;
                    }
                    if ((num2 > 1)) {
                        num4 = (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fm_icelink_Binary___bitmasks[(bitCount - 1)][1], bitOffset) & 255);
                        num5 = (num - 16);
                        output[outputIndex] = ((output[outputIndex] & num4) | fm.icelink.BitAssistant.rightShiftInteger((num3 & fm.icelink.BitAssistant.leftShiftInteger(~num4, num5)), num5));
                        outputIndex++;
                    }
                    if ((num2 > 2)) {
                        num4 = (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fm_icelink_Binary___bitmasks[(bitCount - 1)][2], bitOffset) & 255);
                        num5 = (num - 24);
                        output[outputIndex] = ((output[outputIndex] & num4) | fm.icelink.BitAssistant.rightShiftInteger((num3 & fm.icelink.BitAssistant.leftShiftInteger(~num4, num5)), num5));
                        outputIndex++;
                    }
                    if ((num2 > 3)) {
                        num4 = (fm.icelink.BitAssistant.rightShiftInteger(fm.icelink.Binary.fm_icelink_Binary___bitmasks[(bitCount - 1)][3], bitOffset) & 255);
                        num5 = (num - 32);
                        output[outputIndex] = ((output[outputIndex] & num4) | fm.icelink.BitAssistant.rightShiftInteger((num3 & fm.icelink.BitAssistant.leftShiftInteger(~num4, num5)), num5));
                        outputIndex++;
                    }
                    return output;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes1 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes1(value, bitOffset, new Uint8Array(1), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes((value ? 1 : 0), bitOffset, false, output, outputIndex, 1);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes10 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 7)) {
                        return fm.icelink.Binary.toBytes10(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes10(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 10);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes11 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 6)) {
                        return fm.icelink.Binary.toBytes11(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes11(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 11);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes12 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 5)) {
                        return fm.icelink.Binary.toBytes12(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes12(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 12);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes13 = function () {
                if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 13);
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 4)) {
                        return fm.icelink.Binary.toBytes13(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes13(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes14 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 3)) {
                        return fm.icelink.Binary.toBytes14(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes14(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 14);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes15 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 2)) {
                        return fm.icelink.Binary.toBytes15(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                    }
                    return fm.icelink.Binary.toBytes15(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 15);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes16 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes16(value, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 1) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 65280), 8);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes17 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    return fm.icelink.Binary.toBytes17(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 17);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes18 = function () {
                if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 18);
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 7)) {
                        return fm.icelink.Binary.toBytes18(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes18(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes19 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 6)) {
                        return fm.icelink.Binary.toBytes19(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes19(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 19);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes2 = function () {
                if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 2);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes2(value, bitOffset, new Uint8Array(1), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes20 = function () {
                if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 20);
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 5)) {
                        return fm.icelink.Binary.toBytes20(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes20(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes21 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 4)) {
                        return fm.icelink.Binary.toBytes21(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes21(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 21);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes22 = function () {
                if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 22);
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 3)) {
                        return fm.icelink.Binary.toBytes22(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes22(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes23 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    if ((bitOffset >= 2)) {
                        return fm.icelink.Binary.toBytes23(value, bitOffset, littleEndian, new Uint8Array(4), 0);
                    }
                    return fm.icelink.Binary.toBytes23(value, bitOffset, littleEndian, new Uint8Array(3), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 23);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes24 = function () {
                if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 2) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 16711680), 16);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftInteger((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes24(value, littleEndian, new Uint8Array(3), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes3 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes3(value, bitOffset, new Uint8Array(1), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 3);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes32 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes32(value, littleEndian, new Uint8Array(4), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 3) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes4 = function () {
                if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 4);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes4(value, bitOffset, new Uint8Array(1), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes40 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes40(value, littleEndian, new Uint8Array(5), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 4) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes48 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes48(value, littleEndian, new Uint8Array(6), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 5) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes5 = function () {
                if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 5);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes5(value, bitOffset, new Uint8Array(1), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes56 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes56(value, littleEndian, new Uint8Array(7), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 6) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 71776119061217280), 48);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 71776119061217280), 48);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes6 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes6(value, bitOffset, new Uint8Array(1), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 6);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes64 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.Binary.toBytes64(value, littleEndian, new Uint8Array(8), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var littleEndian = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    if (((outputIndex + 7) < output.length)) {
                        if (littleEndian) {
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong(value, 0);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 71776119061217280), 48);
                            output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong(value, 56);
                            return output;
                        }
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong(value, 56);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 71776119061217280), 48);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 280375465082880), 40);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 1095216660480), 32);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 4278190080), 24);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 16711680), 16);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 65280), 8);
                        output[outputIndex++] = fm.icelink.BitAssistant.rightShiftLong((value & 255), 0);
                        return output;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes7 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    return fm.icelink.Binary.toBytes7(value, bitOffset, new Uint8Array(1), 0);
                }
                else if (arguments.length == 4) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var output = arguments[2];
                    var outputIndex = arguments[3];
                    return fm.icelink.Binary.toBytes(value, bitOffset, false, output, outputIndex, 7);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes8 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var output = arguments[1];
                    var outputIndex = arguments[2];
                    if ((outputIndex >= output.length)) {
                        throw new fm.icelink.Exception("Output data is not large enough to write 8 bits.");
                    }
                    output[outputIndex] = fm.icelink.BitAssistant.rightShiftInteger((value & 255), 0);
                    return output;
                }
                else if (arguments.length == 1) {
                    var value = arguments[0];
                    return fm.icelink.Binary.toBytes8(value, new Uint8Array(1), 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.toBytes9 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    return fm.icelink.Binary.toBytes9(value, bitOffset, littleEndian, new Uint8Array(2), 0);
                }
                else if (arguments.length == 5) {
                    var value = arguments[0];
                    var bitOffset = arguments[1];
                    var littleEndian = arguments[2];
                    var output = arguments[3];
                    var outputIndex = arguments[4];
                    return fm.icelink.Binary.toBytes(value, bitOffset, littleEndian, output, outputIndex, 9);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Binary.transform = function () {
                if (arguments.length == 9) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var inputStart = arguments[6];
                    var outputStart = arguments[7];
                    var chunkLength = arguments[8];
                    var num = ((width * height) * chunkLength);
                    var length_15 = ((stride > 0) ? ((stride * height) * chunkLength) : num);
                    var num3 = ((outputStart > 0) ? outputStart : inputStart);
                    var num4 = ((stride > 0) ? ((stride - width) * chunkLength) : 0);
                    var num5 = (outputStart + num);
                    if ((num5 > outputFrame.length)) {
                        fm.icelink.Log.error("otuputStart + calculated output plane length is greater than outputFrame length");
                    }
                    else {
                        var num8 = void 0;
                        var num9 = void 0;
                        var num10 = void 0;
                        var num6 = (height + 1);
                        var numArray = new Array(num6);
                        var num7 = (width * chunkLength);
                        for (num8 = 0; (num8 < num6); num8++) {
                            numArray[num8] = (((num7 * num8) + inputStart) + (num4 * (num8 - 1)));
                        }
                        if ((fm.icelink.Global.equals(rotation, 270))) {
                            for (num8 = 1; (num8 <= num7); num8 = (num8 + chunkLength)) {
                                num9 = 1;
                                while ((num9 < num6)) {
                                    num10 = (chunkLength - 1);
                                    while ((num10 >= 0)) {
                                        outputFrame[num3++] = inputFrame[((numArray[num9] - num8) - num10)];
                                        num10--;
                                    }
                                    num9++;
                                }
                            }
                        }
                        else {
                            if ((fm.icelink.Global.equals(rotation, 90))) {
                                for (num8 = 0; (num8 < num7); num8 = (num8 + chunkLength)) {
                                    for (num9 = (num6 - 2); (num9 >= 0); num9--) {
                                        num10 = 0;
                                        while ((num10 < chunkLength)) {
                                            outputFrame[num3++] = inputFrame[(((numArray[num9] + num4) + num8) + num10)];
                                            num10++;
                                        }
                                    }
                                }
                            }
                            else {
                                if ((fm.icelink.Global.equals(rotation, 180))) {
                                    var num11 = 0;
                                    for (num8 = (((inputStart + length_15) - num4) - 1); (num8 >= inputStart); num8 = (num8 - chunkLength)) {
                                        if ((((fm.icelink.Global.equals(num4, 0)) || (fm.icelink.Global.equals(num11, 0))) || (!fm.icelink.Global.equals((num11 % num7), 0)))) {
                                            for (num10 = (chunkLength - 1); (num10 >= 0); num10--) {
                                                outputFrame[num3++] = inputFrame[(num8 - num10)];
                                                num11++;
                                            }
                                        }
                                        else {
                                            num8 = (num8 - (num4 - chunkLength));
                                            num11 = 0;
                                        }
                                    }
                                }
                                else {
                                    if ((fm.icelink.Global.equals(num4, 0))) {
                                        fm.icelink.BitAssistant.copy(inputFrame, inputStart, outputFrame, outputStart, length_15);
                                    }
                                    else {
                                        for (num8 = 0; (num8 < height); num8++) {
                                            fm.icelink.BitAssistant.copy(inputFrame, (inputStart + ((stride * chunkLength) * num8)), outputFrame, (outputStart + ((width * chunkLength) * num8)), (width * chunkLength));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (arguments.length == 6) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    fm.icelink.Binary.transform(inputFrame, outputFrame, width, height, stride, rotation, 0, 0);
                }
                else if (arguments.length == 8) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var inputStart = arguments[6];
                    var outputStart = arguments[7];
                    fm.icelink.Binary.transform(inputFrame, outputFrame, width, height, stride, rotation, inputStart, outputStart, 1);
                }
                else if (arguments.length == 7) {
                    var inputFrame = arguments[0];
                    var outputFrame = arguments[1];
                    var width = arguments[2];
                    var height = arguments[3];
                    var stride = arguments[4];
                    var rotation = arguments[5];
                    var start = arguments[6];
                    fm.icelink.Binary.transform(inputFrame, outputFrame, width, height, stride, rotation, start, start);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes1'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 1-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<boolean>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes1 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes1(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(false);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes10'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 10-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes10 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 7)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes10(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes10(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes11'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 11-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes11 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 6)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes11(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes11(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes12'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 12-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes12 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 5)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes12(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes12(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes13'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 13-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes13 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 4)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes13(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes13(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes14'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 14-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes14 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 3)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes14(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes14(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes15'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 15-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes15 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 2)) {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes15(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 1) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes15(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes16'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 16-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes16 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 1) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes16(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes17'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 17-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes17 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes17(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes18'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 18-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes18 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((bitOffset >= 7)) {
                        if (((inputIndex + 3) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes18(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    else {
                        if (((inputIndex + 2) < input.length)) {
                            value.setValue(fm.icelink.Binary.fromBytes18(input, inputIndex, bitOffset));
                            return true;
                        }
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes19'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 19-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes19 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes19(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes2'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 2-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes2 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes2(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes20'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 20-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes20 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes20(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes21'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 21-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes21 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes21(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes22'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 22-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes22 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes22(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes23'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 23-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes23 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes23(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes24'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 24-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes24 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 2) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes24(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes3'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 3-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes3 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes3(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes32'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 32-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes32 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 3) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes32(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes4'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 4-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes4 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes4(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes40'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 40-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes40 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 4) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes40(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes48'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 48-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes48 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 5) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes48(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes5'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 5-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes5 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes5(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes56'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 56-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes56 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 6) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes56(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes6'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 6-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes6 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes6(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes64'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 64-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {boolean} littleEndian Whether to use little-endian format.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes64 = function (input, inputIndex, littleEndian, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 7) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes64(input, inputIndex, littleEndian));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes7'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 7-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes7 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes7(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes8'>&nbsp;</span>**/
            /**
             <div>
             Tries to read an 8-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes8 = function (input, inputIndex, value) {
                if (arguments.length == 3) {
                    if ((inputIndex < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes8(input, inputIndex));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Binary-tryFromBytes9'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 9-bit value from a byte array.
             </div>
    
            @param {Uint8Array} input The input byte array.
            @param {number} inputIndex The index to start reading.
            @param {number} bitOffset The offset of the value within the byte.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean} true if the index is valid and the value was read; otherwise, false
            */
            Binary.tryFromBytes9 = function (input, inputIndex, bitOffset, value) {
                if (arguments.length == 4) {
                    if (((inputIndex + 1) < input.length)) {
                        value.setValue(fm.icelink.Binary.fromBytes9(input, inputIndex, bitOffset));
                        return true;
                    }
                    value.setValue(0);
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            Binary.fmicelinkBinaryInitialize = function () {
                if (!fm.icelink.Binary.__fmicelinkBinaryInitialized) {
                    var numArray = new Array(24);
                    numArray[0] = [65407, 32767];
                    numArray[1] = [65343, 16383];
                    numArray[2] = [65311, 8191];
                    numArray[3] = [65295, 4095];
                    numArray[4] = [65287, 2047];
                    numArray[5] = [65283, 1023];
                    numArray[6] = [65281, 511];
                    numArray[7] = [65280, 255];
                    numArray[8] = [65280, 127, 32767];
                    numArray[9] = [65280, 63, 16383];
                    numArray[10] = [65280, 31, 8191];
                    numArray[11] = [65280, 15, 4095];
                    numArray[12] = [65280, 7, 2047];
                    numArray[13] = [65280, 3, 1023];
                    numArray[14] = [65280, 1, 511];
                    var numArray2 = new Array(3);
                    numArray2[0] = 65280;
                    numArray2[2] = 255;
                    numArray[15] = numArray2;
                    numArray[16] = [65280, 0, 127, 32767];
                    numArray[17] = [65280, 0, 63, 16383];
                    numArray[18] = [65280, 0, 31, 8191];
                    numArray[19] = [65280, 0, 15, 4095];
                    numArray[20] = [65280, 0, 7, 2047];
                    numArray[21] = [65280, 0, 3, 1023];
                    numArray[22] = [65280, 0, 1, 511];
                    numArray2 = new Array(4);
                    numArray2[0] = 65280;
                    numArray2[3] = 255;
                    numArray[23] = numArray2;
                    fm.icelink.Binary.fm_icelink_Binary___bitmasks = numArray;
                }
                fm.icelink.Binary.__fmicelinkBinaryInitialized = true;
            };
            /** @internal */
            Binary.__fmicelinkBinaryInitialized = false;
            return Binary;
        }());
        icelink.Binary = Binary;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a boolean value passed by reference.
         </div>
    
        */
        var BooleanHolder = /** @class */ (function () {
            function BooleanHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkBooleanHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkBooleanHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            BooleanHolder.prototype.getTypeString = function () {
                return '[fm.icelink.BooleanHolder]';
            };
            BooleanHolder.prototype.fmicelinkBooleanHolderInit = function () {
                this._value = false;
            };
            /**<span id='method-fm.icelink.BooleanHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {boolean}
            */
            BooleanHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.BooleanHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            BooleanHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return BooleanHolder;
        }());
        icelink.BooleanHolder = BooleanHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Details about the current build.
         </div>
    
        */
        var Build = /** @class */ (function () {
            function Build() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Build.prototype.getTypeString = function () {
                return '[fm.icelink.Build]';
            };
            /**<span id='method-fm.icelink.Build-getDate'>&nbsp;</span>**/
            /**
             <div>
             Gets the build date.
             </div>
    
    
            @return {fm.icelink.DateTime}
            */
            Build.getDate = function () {
                if (arguments.length == 0) {
                    if ((((fm.icelink.Global.equals(fm.icelink.Build.getYear(), 0)) && (fm.icelink.Global.equals(fm.icelink.Build.getMonth(), 0))) && (fm.icelink.Global.equals(fm.icelink.Build.getDay(), 0)))) {
                        return new fm.icelink.DateTime(1970, 1, 1, 0, 0, 0);
                    }
                    return new fm.icelink.DateTime(fm.icelink.Build.getYear(), fm.icelink.Build.getMonth(), fm.icelink.Build.getDay(), 0, 0, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the build day.
             </div>
    
    
            @return {number}
            */
            Build.getDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring("2018-07-13", 8, 2));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getMajorVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the build major version.
             </div>
    
    
            @return {number}
            */
            Build.getMajorVersion = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.split("3.2.4.716", [46])[0]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getMinorVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the build minor version.
             </div>
    
    
            @return {number}
            */
            Build.getMinorVersion = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.split("3.2.4.716", [46])[1]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getMonth'>&nbsp;</span>**/
            /**
             <div>
             Gets the build month.
             </div>
    
    
            @return {number}
            */
            Build.getMonth = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring("2018-07-13", 5, 2));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getPatchVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the build patch version.
             </div>
    
    
            @return {number}
            */
            Build.getPatchVersion = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.split("3.2.4.716", [46])[2]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getRevisionVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the build revision version.
             </div>
    
    
            @return {number}
            */
            Build.getRevisionVersion = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.split("3.2.4.716", [46])[3]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the full build version.
             </div>
    
    
            @return {string}
            */
            Build.getVersion = function () {
                if (arguments.length == 0) {
                    return "3.2.4.716";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Build-getYear'>&nbsp;</span>**/
            /**
             <div>
             Gets the build year.
             </div>
    
    
            @return {number}
            */
            Build.getYear = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring("2018-07-13", 0, 4));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            Build.fmicelinkBuildInitialize = function () {
                if (!fm.icelink.Build.__fmicelinkBuildInitialized) {
                    Build.fm_icelink_Build__versionConstant = "3.2.4.716";
                }
                fm.icelink.Build.__fmicelinkBuildInitialized = true;
            };
            /** @internal */
            Build.__fmicelinkBuildInitialized = false;
            return Build;
        }());
        icelink.Build = Build;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a byte value passed by reference.
         </div>
    
        */
        var ByteHolder = /** @class */ (function () {
            function ByteHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkByteHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkByteHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ByteHolder.prototype.getTypeString = function () {
                return '[fm.icelink.ByteHolder]';
            };
            ByteHolder.prototype.fmicelinkByteHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.ByteHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            ByteHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ByteHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            ByteHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ByteHolder;
        }());
        icelink.ByteHolder = ByteHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a character value passed by reference.
         </div>
    
        */
        var CharacterHolder = /** @class */ (function () {
            function CharacterHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkCharacterHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkCharacterHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CharacterHolder.prototype.getTypeString = function () {
                return '[fm.icelink.CharacterHolder]';
            };
            CharacterHolder.prototype.fmicelinkCharacterHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.CharacterHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            CharacterHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CharacterHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            CharacterHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CharacterHolder;
        }());
        icelink.CharacterHolder = CharacterHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A circular buffer.
         </div>
    
        */
        var CircularBuffer = /** @class */ (function () {
            function CircularBuffer() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var length_16 = __arguments[0];
                    var latency = __arguments[1];
                    var littleEndian = __arguments[2];
                    //super();
                    this.fmicelinkCircularBufferInit();
                    this.__allowRead = false;
                    if ((length_16 <= 0)) {
                        throw new fm.icelink.Exception("Cannot create a circular buffer with no length.");
                    }
                    this.__buffer = fm.icelink.DataBuffer.allocate(length_16, littleEndian);
                    this.setReadOffset(0);
                    this.setWriteOffset(this.getLatency());
                    this.setLatency(latency);
                    this.setLittleEndian(littleEndian);
                }
                else if (__arguments.length == 2) {
                    var length_17 = __arguments[0];
                    var latency = __arguments[1];
                    // chained constructor: CircularBuffer.call(this, length, latency, false);
                    __arguments = new Array(3);
                    __arguments[0] = length_17;
                    __arguments[1] = latency;
                    __arguments[2] = false;
                    {
                        var length_18 = __arguments[0];
                        var latency_1 = __arguments[1];
                        var littleEndian = __arguments[2];
                        //super();
                        this.fmicelinkCircularBufferInit();
                        this.__allowRead = false;
                        if ((length_18 <= 0)) {
                            throw new fm.icelink.Exception("Cannot create a circular buffer with no length.");
                        }
                        this.__buffer = fm.icelink.DataBuffer.allocate(length_18, littleEndian);
                        this.setReadOffset(0);
                        this.setWriteOffset(this.getLatency());
                        this.setLatency(latency_1);
                        this.setLittleEndian(littleEndian);
                    }
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CircularBuffer.prototype.getTypeString = function () {
                return '[fm.icelink.CircularBuffer]';
            };
            CircularBuffer.prototype.fmicelinkCircularBufferInit = function () {
                this.__allowRead = false;
                this._latency = 0;
                this._littleEndian = false;
                this._readOffset = 0;
                this._writeOffset = 0;
            };
            /**<span id='method-fm.icelink.CircularBuffer-getAvailable'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes available for reading.
             </div>
    
    
            @return {number}
            */
            CircularBuffer.prototype.getAvailable = function () {
                if (arguments.length == 0) {
                    return (this.getWriteOffset() - this.getReadOffset());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-getLatency'>&nbsp;</span>**/
            /**
             <div>
             Gets the latency.
             </div>
    
    
            @return {number}
            */
            CircularBuffer.prototype.getLatency = function () {
                if (arguments.length == 0) {
                    return this._latency;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-getLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the length.
             </div>
    
    
            @return {number}
            */
            CircularBuffer.prototype.getLength = function () {
                if (arguments.length == 0) {
                    return this.__buffer.getLength();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-getLittleEndian'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the data is little-endian.
             </div>
    
    
            @return {boolean}
            */
            CircularBuffer.prototype.getLittleEndian = function () {
                if (arguments.length == 0) {
                    return this._littleEndian;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-getReadOffset'>&nbsp;</span>**/
            /**
             <div>
             Gets the read offset.
             </div>
    
    
            @return {number}
            */
            CircularBuffer.prototype.getReadOffset = function () {
                if (arguments.length == 0) {
                    return this._readOffset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-getWriteOffset'>&nbsp;</span>**/
            /**
             <div>
             Gets the read offset.
             </div>
    
    
            @return {number}
            */
            CircularBuffer.prototype.getWriteOffset = function () {
                if (arguments.length == 0) {
                    return this._writeOffset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-read'>&nbsp;</span>**/
            /**
             <div>
             Reads data from the buffer.
             </div>
    
            @param {number} length The number of bytes to read.
            @return {fm.icelink.DataBuffer}
            */
            CircularBuffer.prototype.read = function (length) {
                if (arguments.length == 1) {
                    if ((length > this.getLength())) {
                        return null;
                    }
                    var buffer = fm.icelink.DataBuffer.allocate(length, this.getLittleEndian());
                    if (this.__allowRead) {
                        if (((this.getReadOffset() + length) <= this.getLength())) {
                            buffer.write(this.__buffer.subset(this.getReadOffset(), length), 0);
                            this.__buffer.set(0, this.getReadOffset(), length);
                        }
                        else {
                            var num = (this.__buffer.getLength() - this.getReadOffset());
                            var num2 = (length - num);
                            buffer.write(this.__buffer.subset(this.getReadOffset(), num), 0);
                            buffer.write(this.__buffer.subset(0, num2), num);
                            this.__buffer.set(0, this.getReadOffset(), num);
                            this.__buffer.set(0, 0, num2);
                        }
                        this.setReadOffset(((this.getReadOffset() + length) % this.getLength()));
                    }
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CircularBuffer.prototype.setLatency = function (value) {
                if (arguments.length == 1) {
                    this._latency = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CircularBuffer.prototype.setLittleEndian = function (value) {
                if (arguments.length == 1) {
                    this._littleEndian = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CircularBuffer.prototype.setReadOffset = function (value) {
                if (arguments.length == 1) {
                    this._readOffset = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CircularBuffer.prototype.setWriteOffset = function (value) {
                if (arguments.length == 1) {
                    this._writeOffset = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CircularBuffer-write'>&nbsp;</span>**/
            /**
             <div>
             Writes data to the buffer.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer The data to write.
            @return {void}
            */
            CircularBuffer.prototype.write = function (buffer) {
                if (arguments.length == 1) {
                    var num2 = void 0;
                    for (var i = 0; (i < buffer.getLength()); i = (i + num2)) {
                        num2 = 0;
                        if (((buffer.getLength() - i) < (this.getLength() - this.getWriteOffset()))) {
                            num2 = (buffer.getLength() - i);
                        }
                        else {
                            num2 = (this.getLength() - this.getWriteOffset());
                        }
                        this.__buffer.write(buffer.subset(i, num2), this.getWriteOffset());
                        this.setWriteOffset(((this.getWriteOffset() + num2) % this.getLength()));
                    }
                    if ((!this.__allowRead && (this.getWriteOffset() >= (this.getReadOffset() + this.getLatency())))) {
                        this.__allowRead = true;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CircularBuffer;
        }());
        icelink.CircularBuffer = CircularBuffer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A record that calculates the min, max, and average from integer samples.
         </div>
    
        */
        var DiagnosticSampler = /** @class */ (function () {
            function DiagnosticSampler() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    // chained constructor: DiagnosticSampler.call(this, 100);
                    __arguments = new Array(1);
                    __arguments[0] = 100;
                    {
                        var averageSampleCount = __arguments[0];
                        //super();
                        this.fmicelinkDiagnosticSamplerInit();
                        this.setLastValue(0);
                        this.__min = new fm.icelink.AtomicLong();
                        this.__max = new fm.icelink.AtomicLong();
                        this.__count = new fm.icelink.AtomicLong();
                        this.__arrayPointer = new fm.icelink.AtomicInteger();
                        this.__samples = new Array(averageSampleCount);
                    }
                }
                else if (__arguments.length == 1) {
                    var averageSampleCount = __arguments[0];
                    //super();
                    this.fmicelinkDiagnosticSamplerInit();
                    this.setLastValue(0);
                    this.__min = new fm.icelink.AtomicLong();
                    this.__max = new fm.icelink.AtomicLong();
                    this.__count = new fm.icelink.AtomicLong();
                    this.__arrayPointer = new fm.icelink.AtomicInteger();
                    this.__samples = new Array(averageSampleCount);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DiagnosticSampler.prototype.getTypeString = function () {
                return '[fm.icelink.DiagnosticSampler]';
            };
            DiagnosticSampler.prototype.fmicelinkDiagnosticSamplerInit = function () {
                this._lastValue = 0;
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-addSample'>&nbsp;</span>**/
            /**
             <div>
             Adds a new sample to the calculation.
             </div>
    
            @param {number} longSample The sample to add.
            @return {void}
            */
            DiagnosticSampler.prototype.addSample = function (longSample) {
                if (arguments.length == 1) {
                    this.setLastValue(longSample);
                    this.__count.increment();
                    var index = (this.__arrayPointer.increment() % this.__samples.length);
                    this.__samples[index] = longSample;
                    if ((this.__min.getValue() > longSample)) {
                        var num2 = this.__min.getValue();
                        for (var i = fm.icelink.MathAssistant.min(num2, longSample); (!fm.icelink.Global.equals(this.__min.compareAndSwap(num2, i), num2)); i = fm.icelink.MathAssistant.min(num2, longSample)) {
                            num2 = this.__min.getValue();
                        }
                    }
                    if ((this.__max.getValue() < longSample)) {
                        var num4 = this.__max.getValue();
                        for (var j = fm.icelink.MathAssistant.max(num4, longSample); (!fm.icelink.Global.equals(this.__max.compareAndSwap(num4, j), num4)); j = fm.icelink.MathAssistant.max(num4, longSample)) {
                            num4 = this.__max.getValue();
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getAverage'>&nbsp;</span>**/
            /**
             <div>
             Gets the average of all samples.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getAverage = function () {
                if (arguments.length == 0) {
                    var num = fm.icelink.MathAssistant.min(this.__samples.length, this.getCount());
                    var num2 = 0;
                    for (var i = 0; (i < num); i++) {
                        num2 = (num2 + this.__samples[i]);
                    }
                    return (num2 / num);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets how many samples this record has used.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return this.__count.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getLastValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value of the last sample recorded.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getLastValue = function () {
                if (arguments.length == 0) {
                    return this._lastValue;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getMax'>&nbsp;</span>**/
            /**
             <div>
             Gets the maximum sample ever recorded.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getMax = function () {
                if (arguments.length == 0) {
                    return this.__max.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getMin'>&nbsp;</span>**/
            /**
             <div>
             Gets the minimum sample ever recorded.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getMin = function () {
                if (arguments.length == 0) {
                    return this.__min.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DiagnosticSampler-getSamplesInAverage'>&nbsp;</span>**/
            /**
             <div>
             Gets how many samples are included in the average.
             </div>
    
    
            @return {number}
            */
            DiagnosticSampler.prototype.getSamplesInAverage = function () {
                if (arguments.length == 0) {
                    return this.__samples.length;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DiagnosticSampler.prototype.setLastValue = function (value) {
                if (arguments.length == 1) {
                    this._lastValue = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DiagnosticSampler;
        }());
        icelink.DiagnosticSampler = DiagnosticSampler;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var JsonCheckerModeWrapper = /** @class */ (function () {
            function JsonCheckerModeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_3 = __arguments[0];
                    //super();
                    this._value = value_3;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            JsonCheckerModeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.JsonCheckerModeWrapper]';
            };
            JsonCheckerModeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.JsonCheckerMode.Array)
                        return 'Array';
                    if (this._value == fm.icelink.JsonCheckerMode.Done)
                        return 'Done';
                    if (this._value == fm.icelink.JsonCheckerMode.Key)
                        return 'Key';
                    if (this._value == fm.icelink.JsonCheckerMode.Object)
                        return 'Object';
                    if (this._value == fm.icelink.JsonCheckerMode.String)
                        return 'String';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return JsonCheckerModeWrapper;
        }());
        icelink.JsonCheckerModeWrapper = JsonCheckerModeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A countdown latch that will signal when the counter reaches zero.
         </div>
    
        */
        var ManagedCountdownLatch = /** @class */ (function () {
            function ManagedCountdownLatch() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var initialCount = __arguments[0];
                    //super();
                    this.__counter = new fm.icelink.AtomicInteger(initialCount);
                    this.__waitPromise = new fm.icelink.Promise();
                }
                else if (__arguments.length == 0) {
                    //super();
                    this.__counter = new fm.icelink.AtomicInteger();
                    this.__waitPromise = new fm.icelink.Promise();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ManagedCountdownLatch.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedCountdownLatch]';
            };
            /**<span id='method-fm.icelink.ManagedCountdownLatch-decrement'>&nbsp;</span>**/
            /**
             <div>
             Decrements the counter by one and signals if it reaches zero.
             </div>
    
    
            @return {void}
            */
            ManagedCountdownLatch.prototype.decrement = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.__counter.decrement(), 0))) {
                        this.__waitPromise.resolveAsync(null);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedCountdownLatch-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the current count on the latch.
             </div>
    
    
            @return {number}
            */
            ManagedCountdownLatch.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return this.__counter.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedCountdownLatch-setCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the counter for the latch.
             This brings the count back up into positive numbers.
             </div>
    
    
            @param {number} count
            @return {void}
            */
            ManagedCountdownLatch.prototype.setCount = function (count) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(this.__counter.add(count), 0))) {
                        this.__waitPromise.resolveAsync(null);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedCountdownLatch-waitAsync'>&nbsp;</span>**/
            /**
             <div>
             Returns a promise that resolves once the counter reaches zero.
             </div>
    
            @return {fm.icelink.Future<Object>}
            */
            ManagedCountdownLatch.prototype.waitAsync = function () {
                if (arguments.length == 0) {
                    if ((this.__counter.getValue() <= 0)) {
                        return fm.icelink.PromiseBase.resolveNow(null);
                    }
                    return this.__waitPromise;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ManagedCountdownLatch;
        }());
        icelink.ManagedCountdownLatch = ManagedCountdownLatch;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var OperatingSystemWrapper = /** @class */ (function () {
            function OperatingSystemWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_4 = __arguments[0];
                    //super();
                    this._value = value_4;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            OperatingSystemWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.OperatingSystemWrapper]';
            };
            OperatingSystemWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.OperatingSystem.Unknown)
                        return 'Unknown';
                    if (this._value == fm.icelink.OperatingSystem.Windows)
                        return 'Windows';
                    if (this._value == fm.icelink.OperatingSystem.Android)
                        return 'Android';
                    if (this._value == fm.icelink.OperatingSystem.MacOS)
                        return 'MacOS';
                    if (this._value == fm.icelink.OperatingSystem.IOS)
                        return 'IOS';
                    if (this._value == fm.icelink.OperatingSystem.Linux)
                        return 'Linux';
                    if (this._value == fm.icelink.OperatingSystem.TvOS)
                        return 'TvOS';
                    if (this._value == fm.icelink.OperatingSystem.WatchOS)
                        return 'WatchOS';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return OperatingSystemWrapper;
        }());
        icelink.OperatingSystemWrapper = OperatingSystemWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ArchitectureWrapper = /** @class */ (function () {
            function ArchitectureWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_5 = __arguments[0];
                    //super();
                    this._value = value_5;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ArchitectureWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.ArchitectureWrapper]';
            };
            ArchitectureWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.Architecture.Unknown)
                        return 'Unknown';
                    if (this._value == fm.icelink.Architecture.X86)
                        return 'X86';
                    if (this._value == fm.icelink.Architecture.X64)
                        return 'X64';
                    if (this._value == fm.icelink.Architecture.Armv7)
                        return 'Armv7';
                    if (this._value == fm.icelink.Architecture.Armv8)
                        return 'Armv8';
                    if (this._value == fm.icelink.Architecture.Arm64)
                        return 'Arm64';
                    if (this._value == fm.icelink.Architecture.Mips)
                        return 'Mips';
                    if (this._value == fm.icelink.Architecture.Mips64)
                        return 'Mips64';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ArchitectureWrapper;
        }());
        icelink.ArchitectureWrapper = ArchitectureWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A pool of objects.
         </div><typeparam name="T"></typeparam>
    
        */
        var Pool = /** @class */ (function () {
            function Pool() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var createObject = __arguments[0];
                    var minSize = __arguments[1];
                    // chained constructor: Pool.call(this, createObject, minSize, 2147483647);
                    __arguments = new Array(3);
                    __arguments[0] = createObject;
                    __arguments[1] = minSize;
                    __arguments[2] = 2147483647;
                    {
                        var createObject_1 = __arguments[0];
                        var minSize_1 = __arguments[1];
                        var maxSize = __arguments[2];
                        //super();
                        this.fmicelinkPoolInit();
                        if ((fm.icelink.Global.equals(createObject_1, null))) {
                            throw new fm.icelink.Exception("Cannot initialize pool without a function to create objects.");
                        }
                        if ((minSize_1 < 0)) {
                            throw new fm.icelink.Exception("Minimum pool size cannot be less than zero.");
                        }
                        if ((maxSize < 0)) {
                            throw new fm.icelink.Exception("Maximum pool size cannot be less than zero.");
                        }
                        if ((minSize_1 > maxSize)) {
                            throw new fm.icelink.Exception("Minimum pool size cannot be greater than maximum pool size.");
                        }
                        this.__createObject = createObject_1;
                        this.setMinSize(minSize_1);
                        this.setMaxSize(maxSize);
                        this.__stack = new fm.icelink.ManagedConcurrentStack();
                        this.__createObjectCounter = new fm.icelink.AtomicInteger();
                        for (var i = 0; (i < this.getMinSize()); i++) {
                            this.__createObjectCounter.increment();
                            this.__stack.push(this.__createObject());
                        }
                    }
                }
                else if (__arguments.length == 3) {
                    var createObject = __arguments[0];
                    var minSize = __arguments[1];
                    var maxSize = __arguments[2];
                    //super();
                    this.fmicelinkPoolInit();
                    if ((fm.icelink.Global.equals(createObject, null))) {
                        throw new fm.icelink.Exception("Cannot initialize pool without a function to create objects.");
                    }
                    if ((minSize < 0)) {
                        throw new fm.icelink.Exception("Minimum pool size cannot be less than zero.");
                    }
                    if ((maxSize < 0)) {
                        throw new fm.icelink.Exception("Maximum pool size cannot be less than zero.");
                    }
                    if ((minSize > maxSize)) {
                        throw new fm.icelink.Exception("Minimum pool size cannot be greater than maximum pool size.");
                    }
                    this.__createObject = createObject;
                    this.setMinSize(minSize);
                    this.setMaxSize(maxSize);
                    this.__stack = new fm.icelink.ManagedConcurrentStack();
                    this.__createObjectCounter = new fm.icelink.AtomicInteger();
                    for (var i = 0; (i < this.getMinSize()); i++) {
                        this.__createObjectCounter.increment();
                        this.__stack.push(this.__createObject());
                    }
                }
                else if (__arguments.length == 1) {
                    var createObject = __arguments[0];
                    // chained constructor: Pool.call(this, createObject, 0);
                    __arguments = new Array(2);
                    __arguments[0] = createObject;
                    __arguments[1] = 0;
                    {
                        var createObject_2 = __arguments[0];
                        var minSize = __arguments[1];
                        // chained constructor: Pool.call(this, createObject, minSize, 2147483647);
                        __arguments = new Array(3);
                        __arguments[0] = createObject_2;
                        __arguments[1] = minSize;
                        __arguments[2] = 2147483647;
                        {
                            var createObject_3 = __arguments[0];
                            var minSize_2 = __arguments[1];
                            var maxSize = __arguments[2];
                            //super();
                            this.fmicelinkPoolInit();
                            if ((fm.icelink.Global.equals(createObject_3, null))) {
                                throw new fm.icelink.Exception("Cannot initialize pool without a function to create objects.");
                            }
                            if ((minSize_2 < 0)) {
                                throw new fm.icelink.Exception("Minimum pool size cannot be less than zero.");
                            }
                            if ((maxSize < 0)) {
                                throw new fm.icelink.Exception("Maximum pool size cannot be less than zero.");
                            }
                            if ((minSize_2 > maxSize)) {
                                throw new fm.icelink.Exception("Minimum pool size cannot be greater than maximum pool size.");
                            }
                            this.__createObject = createObject_3;
                            this.setMinSize(minSize_2);
                            this.setMaxSize(maxSize);
                            this.__stack = new fm.icelink.ManagedConcurrentStack();
                            this.__createObjectCounter = new fm.icelink.AtomicInteger();
                            for (var i = 0; (i < this.getMinSize()); i++) {
                                this.__createObjectCounter.increment();
                                this.__stack.push(this.__createObject());
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Pool.prototype.getTypeString = function () {
                return '[fm.icelink.Pool]';
            };
            Pool.prototype.fmicelinkPoolInit = function () {
                this._maxSize = 0;
                this._minSize = 0;
            };
            /**<span id='method-fm.icelink.Pool-get'>&nbsp;</span>**/
            /**
             <div>
             Gets an object.
             </div>
    
            @return {T}
            */
            Pool.prototype.get = function () {
                if (arguments.length == 0) {
                    var result = null;
                    var _var0 = new fm.icelink.Holder(result);
                    var _var1 = this.__stack.tryPop(_var0);
                    result = _var0.getValue();
                    if (_var1) {
                        return result;
                    }
                    if ((this.__createObjectCounter.increment() > this.getMaxSize())) {
                        this.__createObjectCounter.decrement();
                        throw new fm.icelink.Exception("Could not create pooled object. Maximum size reached.");
                    }
                    return this.__createObject();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pool-getAvailable'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of available objects.
             </div>
    
    
            @return {number}
            */
            Pool.prototype.getAvailable = function () {
                if (arguments.length == 0) {
                    return this.__stack.getCount();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pool-getMaxSize'>&nbsp;</span>**/
            /**
             <div>
             Gets the maximum size. Value must be &gt;= 0.
             A value of 0 indicates no maximum.
             </div>
    
    
            @return {number}
            */
            Pool.prototype.getMaxSize = function () {
                if (arguments.length == 0) {
                    return this._maxSize;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pool-getMinSize'>&nbsp;</span>**/
            /**
             <div>
             Gets the minimum size. Value must be &gt;= 0.
             </div>
    
    
            @return {number}
            */
            Pool.prototype.getMinSize = function () {
                if (arguments.length == 0) {
                    return this._minSize;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pool-getSize'>&nbsp;</span>**/
            /**
             <div>
             Gets the current size of the pool.
             </div>
    
    
            @return {number}
            */
            Pool.prototype.getSize = function () {
                if (arguments.length == 0) {
                    return this.__createObjectCounter.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pool-put'>&nbsp;</span>**/
            /**
             <div>
             Put an object back.
             </div>
    
            @param {T} item
            @return {void}
            */
            Pool.prototype.put = function (item) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(item, null))) {
                        this.__stack.push(item);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Pool.prototype.setMaxSize = function (value) {
                if (arguments.length == 1) {
                    this._maxSize = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Pool.prototype.setMinSize = function (value) {
                if (arguments.length == 1) {
                    this._minSize = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Pool;
        }());
        icelink.Pool = Pool;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var SourceLanguageWrapper = /** @class */ (function () {
            function SourceLanguageWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_6 = __arguments[0];
                    //super();
                    this._value = value_6;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SourceLanguageWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.SourceLanguageWrapper]';
            };
            SourceLanguageWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.SourceLanguage.CSharp)
                        return 'CSharp';
                    if (this._value == fm.icelink.SourceLanguage.Java)
                        return 'Java';
                    if (this._value == fm.icelink.SourceLanguage.ObjectiveC)
                        return 'ObjectiveC';
                    if (this._value == fm.icelink.SourceLanguage.TypeScript)
                        return 'TypeScript';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SourceLanguageWrapper;
        }());
        icelink.SourceLanguageWrapper = SourceLanguageWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Provides methods for serializing/deserializing .NET value types to/from JSON
         as well as facilities for converting objects and arrays if appropriate callbacks
         are supplied to assist with the conversion.
         </div>
    
        */
        var JsonSerializer = /** @class */ (function () {
            function JsonSerializer() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            JsonSerializer.prototype.getTypeString = function () {
                return '[fm.icelink.JsonSerializer]';
            };
            /**
            @internal
    
            */
            JsonSerializer.charToUnicodeString = function (value) {
                if (arguments.length == 1) {
                    var ch = fm.icelink.JsonSerializer.intToHex(((value >> 12) & 15));
                    var ch2 = fm.icelink.JsonSerializer.intToHex(((value >> 8) & 15));
                    var ch3 = fm.icelink.JsonSerializer.intToHex(((value >> 4) & 15));
                    var ch4 = fm.icelink.JsonSerializer.intToHex((value & 15));
                    return fm.icelink.StringExtensions.concat(["\\u", String.fromCharCode(ch), String.fromCharCode(ch2), String.fromCharCode(ch3), String.fromCharCode(ch4)]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeBoolean'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a boolean value.
             </div>
    
            @param {string} valueJson The boolean JSON to deserialize.
            @return {boolean} The deserialized boolean value.
            */
            JsonSerializer.deserializeBoolean = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var boolResult = false;
                        var _var0 = new fm.icelink.Holder(boolResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseBooleanValue(valueJson, _var0);
                        boolResult = _var0.getValue();
                        if (_var1) {
                            return boolResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeBooleanArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a boolean array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized boolean array.
            @return {boolean[]} An array of boolean values.
            */
            JsonSerializer.deserializeBooleanArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var flagArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            flagArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            flagArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                flagArray[i] = fm.icelink.JsonSerializer.deserializeBoolean(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return flagArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeDecimal'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a decimal value.
             </div>
    
            @param {string} valueJson The decimal JSON to deserialize.
            @return {number} The deserialized decimal value.
            */
            JsonSerializer.deserializeDecimal = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var decimalResult = 0;
                        var _var0 = new fm.icelink.Holder(decimalResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseDecimalValue(valueJson, _var0);
                        decimalResult = _var0.getValue();
                        if (_var1) {
                            return decimalResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeDecimalArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a decimal array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized decimal array.
            @return {number[]} An array of decimal values.
            */
            JsonSerializer.deserializeDecimalArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var numArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            numArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            numArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                numArray[i] = fm.icelink.JsonSerializer.deserializeDecimal(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeDictionary'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a JSON string into a dictionary.
             </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
    
            @param {string} dictionaryJson The JSON-encoded dictionary.
            @param {fm.icelink.IFunction0<fm.icelink.Hash<string,T>>} createDictionaryCallback The callback that creates a blank dictionary.
            @param {fm.icelink.IFunction1<string,T>} deserializeValueCallback The callback that deserializes a value.
            @return {fm.icelink.Hash<string,T>}
             The deserialized dictionary.
     
            */
            JsonSerializer.deserializeDictionary = function (dictionaryJson, createDictionaryCallback, deserializeValueCallback) {
                if (arguments.length == 3) {
                    return fm.icelink.JsonSerializer.deserializeObject(dictionaryJson, createDictionaryCallback, function (dictionary, key, valueJson) {
                        dictionary[key] = deserializeValueCallback(valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeDouble'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a double value.
             </div>
    
            @param {string} valueJson The double JSON to deserialize.
            @return {number} The deserialized double value.
            */
            JsonSerializer.deserializeDouble = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var doubleResult = 0;
                        var _var0 = new fm.icelink.Holder(doubleResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseDoubleValue(valueJson, _var0);
                        doubleResult = _var0.getValue();
                        if (_var1) {
                            return doubleResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeDoubleArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a double array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized double array.
            @return {number[]} An array of double values.
            */
            JsonSerializer.deserializeDoubleArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var numArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            numArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            numArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                numArray[i] = fm.icelink.JsonSerializer.deserializeDouble(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeFloat'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a float value.
             </div>
    
            @param {string} valueJson The float JSON to deserialize.
            @return {number} The deserialized float value.
            */
            JsonSerializer.deserializeFloat = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var floatResult = 0;
                        var _var0 = new fm.icelink.Holder(floatResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseFloatValue(valueJson, _var0);
                        floatResult = _var0.getValue();
                        if (_var1) {
                            return floatResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeFloatArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a float array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized float array.
            @return {number[]} An array of float values.
            */
            JsonSerializer.deserializeFloatArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var numArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            numArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            numArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                numArray[i] = fm.icelink.JsonSerializer.deserializeFloat(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeGuid'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a globally unique identifier.
             </div>
    
            @param {string} valueJson The GUID JSON to deserialize.
            @return {fm.icelink.Guid} The deserialized GUID.
            */
            JsonSerializer.deserializeGuid = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var empty = fm.icelink.Guid.empty;
                        var _var0 = new fm.icelink.Holder(empty);
                        var _var1 = fm.icelink.ParseAssistant.tryParseGuidValue(fm.icelink.JsonSerializer.deserializeString(valueJson), _var0);
                        empty = _var0.getValue();
                        if (_var1) {
                            return empty;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeGuidArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a GUID array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized GUID array.
            @return {fm.icelink.Guid[]} An array of GUID values.
            */
            JsonSerializer.deserializeGuidArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var guidArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            guidArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            guidArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                guidArray[i] = fm.icelink.JsonSerializer.deserializeGuid(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return guidArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeInteger'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an integer value.
             </div>
    
            @param {string} valueJson The integer JSON to deserialize.
            @return {number} The deserialized integer value.
            */
            JsonSerializer.deserializeInteger = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var intResult = 0;
                        var _var0 = new fm.icelink.Holder(intResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseIntegerValue(valueJson, _var0);
                        intResult = _var0.getValue();
                        if (_var1) {
                            return intResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeIntegerArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a integer array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized integer array.
            @return {number[]} An array of integer values.
            */
            JsonSerializer.deserializeIntegerArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var numArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            numArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            numArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                numArray[i] = fm.icelink.JsonSerializer.deserializeInteger(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeLong'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a long value.
             </div>
    
            @param {string} valueJson The long JSON to deserialize.
            @return {number} The deserialized long value.
            */
            JsonSerializer.deserializeLong = function (valueJson) {
                if (arguments.length == 1) {
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        valueJson = fm.icelink.StringExtensions.trim(valueJson);
                        if ((fm.icelink.Global.equals(valueJson, "null"))) {
                            return null;
                        }
                        var longResult = 0;
                        var _var0 = new fm.icelink.Holder(longResult);
                        var _var1 = fm.icelink.ParseAssistant.tryParseLongValue(valueJson, _var0);
                        longResult = _var0.getValue();
                        if (_var1) {
                            return longResult;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeLongArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a long array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized long array.
            @return {number[]} An array of long values.
            */
            JsonSerializer.deserializeLongArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                        return null;
                    }
                    arrayJson = fm.icelink.StringExtensions.trim(arrayJson);
                    if ((fm.icelink.Global.equals(arrayJson, "null"))) {
                        return null;
                    }
                    var numArray = null;
                    if ((fm.icelink.Global.equals(arrayJson.charCodeAt(0), 91))) {
                        arrayJson = fm.icelink.StringExtensions.substring(arrayJson, 1, (arrayJson.length - 2));
                        if (fm.icelink.StringExtensions.isNullOrEmpty(arrayJson)) {
                            numArray = new Array(0);
                        }
                        else {
                            var strArray = fm.icelink.StringExtensions.split(arrayJson, [44]);
                            numArray = new Array(strArray.length);
                            for (var i = 0; (i < strArray.length); i++) {
                                numArray[i] = fm.icelink.JsonSerializer.deserializeLong(fm.icelink.StringExtensions.trim(strArray[i]));
                            }
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeObject'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a JSON string into a target object type.
             </div><typeparam name="T">The type of the object to deserialize.</typeparam>
    
            @param {string} json The JSON-encoded string.
            @param {fm.icelink.IFunction0<T>} creator The method used for creating a new object.
            @param {fm.icelink.IAction3<T,string,string>} callback The method used for deserializing a property.
            @return {T} The deserialized object.
            */
            JsonSerializer.deserializeObject = function (json, creator, callback) {
                if (arguments.length == 3) {
                    if ((fm.icelink.Global.equals(json, null))) {
                        return null;
                    }
                    json = fm.icelink.StringExtensions.trim(json);
                    if (((fm.icelink.Global.equals(json, "null")) || (json.length < 2))) {
                        return null;
                    }
                    var local = creator();
                    if ((((fm.icelink.Global.equals(json.charCodeAt(0), 123)) && (fm.icelink.Global.equals(json.charCodeAt((json.length - 1)), 125))) && (json.length > 2))) {
                        json = fm.icelink.StringExtensions.concat(fm.icelink.StringExtensions.substring(json, 1, (json.length - 2)), ",");
                        var num = 0;
                        var num2 = 0;
                        var flag = false;
                        var num3 = -2;
                        var none = fm.icelink.StringType.None;
                        var startIndex = 0;
                        var num5 = 0;
                        var valueJson = fm.icelink.StringExtensions.empty;
                        var str2 = fm.icelink.StringExtensions.empty;
                        for (var i = 0; (i < json.length); i++) {
                            var ch = json.charCodeAt(i);
                            var flag2 = (fm.icelink.Global.equals(num3, (i - 1)));
                            var flag3 = false;
                            if (!flag) {
                                var _var0 = ch;
                                if (_var0 == 91) {
                                    do {
                                        num2++;
                                        flag3 = true;
                                        break;
                                    } while (false);
                                }
                                else if (_var0 == 93) {
                                    do {
                                        num2--;
                                        flag3 = true;
                                        break;
                                    } while (false);
                                }
                                else if (_var0 == 123) {
                                    do {
                                        num++;
                                        flag3 = true;
                                        break;
                                    } while (false);
                                }
                                else if (_var0 == 125) {
                                    do {
                                        num--;
                                        flag3 = true;
                                        break;
                                    } while (false);
                                }
                            }
                            if (!flag3) {
                                if ((flag && !((!fm.icelink.Global.equals(ch, 92)) || flag2))) {
                                    num3 = i;
                                    flag3 = true;
                                }
                                if (!flag3) {
                                    if (((fm.icelink.Global.equals(num, 0)) && (fm.icelink.Global.equals(num2, 0)))) {
                                        var _var1 = ch;
                                        if (_var1 == 44) {
                                            do {
                                                if (!flag) {
                                                    str2 = fm.icelink.StringExtensions.trim(fm.icelink.StringExtensions.substring(json, num5, (i - num5)));
                                                    callback(local, fm.icelink.JsonSerializer.deserializeString(valueJson), str2);
                                                    startIndex = (i + 1);
                                                }
                                                flag3 = true;
                                                break;
                                            } while (false);
                                        }
                                        else if (_var1 == 58) {
                                            do {
                                                if (!flag) {
                                                    valueJson = fm.icelink.StringExtensions.trim(fm.icelink.StringExtensions.substring(json, startIndex, (i - startIndex)));
                                                    num5 = (i + 1);
                                                }
                                                flag3 = true;
                                                break;
                                            } while (false);
                                        }
                                    }
                                    if ((!flag3 && (((fm.icelink.Global.equals(ch, 39)) || (fm.icelink.Global.equals(ch, 34))) && !flag2))) {
                                        var type2 = ((fm.icelink.Global.equals(ch, 34)) ? fm.icelink.StringType.Double : fm.icelink.StringType.Single);
                                        if (!flag) {
                                            flag = true;
                                            none = type2;
                                        }
                                        else {
                                            if ((fm.icelink.Global.equals(none, type2))) {
                                                flag = false;
                                                none = fm.icelink.StringType.None;
                                            }
                                        }
                                        flag3 = true;
                                    }
                                }
                            }
                        }
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeObjectArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a JSON string into an array of target object types.
             </div><typeparam name="T">The type of the object to deserialize.</typeparam>
    
            @param {string} json The JSON-encoded string.
            @param {fm.icelink.IFunction1<string,T>} deserializer The callback used to deserialize each item in the array.
            @return {Array<T>} An array of deserialized objects.
            */
            JsonSerializer.deserializeObjectArray = function (json, deserializer) {
                if (arguments.length == 2) {
                    var list = fm.icelink.JsonSerializer.deserializeRawArray(json);
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    var list2 = new Array();
                    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                        var str = list_1[_i];
                        var item = deserializer(str);
                        fm.icelink.ArrayExtensions.add(list2, item);
                    }
                    return list2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeObjectFast'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a JSON string into a `fm.icelink.serializable` target object type.
             </div><typeparam name="T">The type of the object to deserialize.</typeparam>
    
            @param {string} json The JSON-encoded string.
            @param {fm.icelink.IFunction0<T>} creator The method used for creating a new object.
            @param {fm.icelink.IAction3<T,string,string>} callback The method used for deserializing a property.
            @return {T} The deserialized object.
            */
            JsonSerializer.deserializeObjectFast = function (json, creator, callback) {
                if (arguments.length == 3) {
                    var local = fm.icelink.JsonSerializer.deserializeObject(json, creator, callback);
                    if ((!fm.icelink.Global.equals(local, null))) {
                        local.setSerialized(json);
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeRaw'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a piece of raw JSON.
             </div>
    
            @param {string} dataJson The raw data.
            @return {string} The deserialized data.
            */
            JsonSerializer.deserializeRaw = function (dataJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(dataJson)) {
                        return null;
                    }
                    return fm.icelink.StringExtensions.trim(dataJson);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeRawArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a raw array from JSON.
             </div>
    
            @param {string} json A JSON-serialized raw array.
            @return {Array<string>} An array of raw values.
            */
            JsonSerializer.deserializeRawArray = function (json) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(json, null))) {
                        return null;
                    }
                    json = fm.icelink.StringExtensions.trim(json);
                    if (((fm.icelink.Global.equals(json, "null")) || (json.length < 2))) {
                        return null;
                    }
                    var list = new Array();
                    if ((((fm.icelink.Global.equals(json.charCodeAt(0), 91)) && (fm.icelink.Global.equals(json.charCodeAt((json.length - 1)), 93))) && (json.length > 2))) {
                        var num = 0;
                        var startIndex = 0;
                        var flag = false;
                        var num3 = -2;
                        var none = fm.icelink.StringType.None;
                        for (var i = 1; (i < (json.length - 1)); i++) {
                            var ch = json.charCodeAt(i);
                            var flag2 = (fm.icelink.Global.equals(num3, (i - 1)));
                            if (!flag) {
                                var _var0 = ch;
                                if (_var0 == 123) {
                                    do {
                                        if ((fm.icelink.Global.equals(num, 0))) {
                                            startIndex = i;
                                        }
                                        num++;
                                        break;
                                    } while (false);
                                }
                                else if (_var0 == 125) {
                                    do {
                                        num--;
                                        if ((fm.icelink.Global.equals(num, 0))) {
                                            fm.icelink.ArrayExtensions.add(list, fm.icelink.StringExtensions.substring(json, startIndex, ((i - startIndex) + 1)));
                                        }
                                        break;
                                    } while (false);
                                }
                            }
                            if ((flag && !((!fm.icelink.Global.equals(ch, 92)) || flag2))) {
                                num3 = i;
                            }
                            else {
                                if ((((fm.icelink.Global.equals(ch, 39)) || (fm.icelink.Global.equals(ch, 34))) && !flag2)) {
                                    var type2 = ((fm.icelink.Global.equals(ch, 34)) ? fm.icelink.StringType.Double : fm.icelink.StringType.Single);
                                    if (!flag) {
                                        flag = true;
                                        none = type2;
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(none, type2))) {
                                            flag = false;
                                            none = fm.icelink.StringType.None;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return list;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeString'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a string.
             </div>
    
            @param {string} valueJson The string to deserialize.
            @return {string} The deserialized string value.
            */
            JsonSerializer.deserializeString = function (valueJson) {
                if (arguments.length == 1) {
                    if (fm.icelink.StringExtensions.isNullOrEmpty(valueJson)) {
                        return null;
                    }
                    valueJson = fm.icelink.StringExtensions.trim(valueJson);
                    if ((fm.icelink.Global.equals(valueJson, "null"))) {
                        return null;
                    }
                    var flag = (fm.icelink.StringExtensions.startsWith(valueJson, "\"") || fm.icelink.StringExtensions.startsWith(valueJson, "'"));
                    var flag2 = (fm.icelink.StringExtensions.endsWith(valueJson, "\"") || fm.icelink.StringExtensions.endsWith(valueJson, "'"));
                    if (!(flag && flag2)) {
                        return null;
                    }
                    return fm.icelink.JsonSerializer.unescapeString(fm.icelink.JsonSerializer.trimQuotes(valueJson));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-deserializeStringArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a simple string array from JSON.
             </div>
    
            @param {string} arrayJson A JSON-serialized string array.
            @return {string[]} An array of string values.
            */
            JsonSerializer.deserializeStringArray = function (arrayJson) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(arrayJson, null))) {
                        return null;
                    }
                    var str = null;
                    var list = new Array();
                    var str2 = "array-start";
                    for (var i = 0; (i < arrayJson.length); i++) {
                        var ch = arrayJson.charCodeAt(i);
                        var _var0 = str2;
                        if (_var0 == "array-start") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 91))) {
                                    str2 = "value-start";
                                }
                                else {
                                    if (((((!fm.icelink.Global.equals(ch, 32)) && (fm.icelink.Global.equals(ch, 9))) && (!fm.icelink.Global.equals(ch, 10))) && (!fm.icelink.Global.equals(ch, 13)))) {
                                        return null;
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else if (_var0 == "value-start") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 93))) {
                                    str2 = "array-end";
                                }
                                else {
                                    if ((fm.icelink.Global.equals(ch, 34))) {
                                        str = "";
                                        str2 = "in-string";
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(ch, 110))) {
                                            str = null;
                                            str2 = "in-null-n";
                                        }
                                        else {
                                            if (((((!fm.icelink.Global.equals(ch, 32)) && (!fm.icelink.Global.equals(ch, 9))) && (!fm.icelink.Global.equals(ch, 10))) && (!fm.icelink.Global.equals(ch, 13)))) {
                                                return null;
                                            }
                                        }
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else if (_var0 == "in-null-n") {
                            do {
                                if ((!fm.icelink.Global.equals(ch, 117))) {
                                    return null;
                                }
                                str2 = "in-null-nu";
                                break;
                            } while (false);
                        }
                        else if (_var0 == "in-null-nu") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 108))) {
                                    str2 = "in-null-nul";
                                    break;
                                }
                                return null;
                            } while (false);
                        }
                        else if (_var0 == "in-null-nul") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 108))) {
                                    fm.icelink.ArrayExtensions.add(list, null);
                                    str2 = "value-end";
                                    break;
                                }
                                return null;
                            } while (false);
                        }
                        else if (_var0 == "in-string") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 34))) {
                                    fm.icelink.ArrayExtensions.add(list, fm.icelink.JsonSerializer.unescapeString(fm.icelink.JsonSerializer.trimQuotes(fm.icelink.StringExtensions.trim(str))));
                                    str = null;
                                    str2 = "value-end";
                                }
                                else {
                                    if ((fm.icelink.Global.equals(ch, 92))) {
                                        str = fm.icelink.StringExtensions.concat(str, "\\");
                                        str2 = "in-string-escape";
                                    }
                                    else {
                                        str = fm.icelink.StringExtensions.concat(str, String.fromCharCode(ch));
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else if (_var0 == "in-string-escape") {
                            do {
                                str = fm.icelink.StringExtensions.concat(str, String.fromCharCode(ch));
                                str2 = "in-string";
                                break;
                            } while (false);
                        }
                        else if (_var0 == "value-end") {
                            do {
                                if ((fm.icelink.Global.equals(ch, 44))) {
                                    str2 = "value-start";
                                }
                                else {
                                    if ((fm.icelink.Global.equals(ch, 93))) {
                                        str2 = "array-end";
                                    }
                                    else {
                                        if (((((!fm.icelink.Global.equals(ch, 32)) && (!fm.icelink.Global.equals(ch, 9))) && (!fm.icelink.Global.equals(ch, 10))) && (!fm.icelink.Global.equals(ch, 13)))) {
                                            return null;
                                        }
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else {
                            do {
                                if (((fm.icelink.Global.equals(str2, "array-end")) && ((((!fm.icelink.Global.equals(ch, 32)) && (!fm.icelink.Global.equals(ch, 9))) && (!fm.icelink.Global.equals(ch, 10))) && (!fm.icelink.Global.equals(ch, 13))))) {
                                    return null;
                                }
                                break;
                            } while (false);
                        }
                    }
                    if ((!fm.icelink.Global.equals(str2, "array-end"))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-escapeString'>&nbsp;</span>**/
            /**
             <div>
             Escapes any special characters in a string.
             </div>
    
            @param {string} text The string without escaped characters.
            @return {string} The escaped string.
            */
            JsonSerializer.escapeString = function (text) {
                if (arguments.length == 1) {
                    var builder = new fm.icelink.StringBuilder();
                    var startIndex = -1;
                    for (var i = 0; (i < text.length); i++) {
                        var ch = text.charCodeAt(i);
                        if ((ch > 126)) {
                            if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                builder.append(text, startIndex, (i - startIndex));
                                startIndex = -1;
                            }
                            builder.append(fm.icelink.JsonSerializer.charToUnicodeString(ch));
                        }
                        else {
                            var _var0 = ch;
                            if (_var0 == 8) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\b");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 12) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\f");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 10) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\n");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 13) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\r");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 9) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\t");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 34) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\\"");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 47) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\/");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 92) {
                                do {
                                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                        builder.append(text, startIndex, (i - startIndex));
                                        startIndex = -1;
                                    }
                                    builder.append("\\\\");
                                    break;
                                } while (false);
                            }
                            else {
                                do {
                                    if ((fm.icelink.Global.equals(startIndex, -1))) {
                                        startIndex = i;
                                    }
                                    break;
                                } while (false);
                            }
                        }
                    }
                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                        builder.append(text, startIndex, (text.length - startIndex));
                    }
                    return builder.toString();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonSerializer.intToHex = function (value) {
                if (arguments.length == 1) {
                    if ((value <= 9)) {
                        return (value + 48);
                    }
                    return ((value - 10) + 97);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-isValidJson'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified JSON string is valid.
             </div>
    
            @param {string} json The JSON string to validate.
            @return {boolean} True if the JSON string is valid; false otherwise.
            */
            JsonSerializer.isValidJson = function (json) {
                if (arguments.length == 1) {
                    return new fm.icelink.JsonChecker().checkString(json);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeBoolean'>&nbsp;</span>**/
            /**
             <div>
             Serializes a boolean value.
             </div>
    
            @param {boolean} value The boolean to serialize.
            @return {string} The serialized boolean value.
            */
            JsonSerializer.serializeBoolean = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    if (value) {
                        return "true";
                    }
                    return "false";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeBooleanArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a boolean array to JSON.
             </div>
    
            @param {boolean[]} array An array of boolean values.
            @return {string} A JSON-serialized boolean array.
            */
            JsonSerializer.serializeBooleanArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeBoolean(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeDecimal'>&nbsp;</span>**/
            /**
             <div>
             Serializes a decimal value.
             </div>
    
            @param {number} value The decimal to serialize.
            @return {string} The serialized decimal value.
            */
            JsonSerializer.serializeDecimal = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.IntExtensions.toString(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeDecimalArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a decimal array to JSON.
             </div>
    
            @param {number[]} array An array of decimal values.
            @return {string} A JSON-serialized decimal array.
            */
            JsonSerializer.serializeDecimalArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeDecimal(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeDictionary'>&nbsp;</span>**/
            /**
             <div>
             Serializes a dictionary into a JSON string.
             </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
    
            @param {fm.icelink.Hash<string,T>} dictionary The dictionary being serialized.
            @param {fm.icelink.IFunction1<T,string>} serializeValueCallback The callback that serializes a value.
            @return {string} The dictionary as a JSON string.
            */
            JsonSerializer.serializeDictionary = function (dictionary, serializeValueCallback) {
                if (arguments.length == 2) {
                    return fm.icelink.JsonSerializer.serializeObject(dictionary, function (d, jsonObject) {
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(d); _i < _a.length; _i++) {
                            var str = _a[_i];
                            jsonObject[str] = serializeValueCallback(d[str]);
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeDouble'>&nbsp;</span>**/
            /**
             <div>
             Serializes a double value.
             </div>
    
            @param {number} value The double to serialize.
            @return {string} The serialized double value.
            */
            JsonSerializer.serializeDouble = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.IntExtensions.toString(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeDoubleArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a double array to JSON.
             </div>
    
            @param {number[]} array An array of double values.
            @return {string} A JSON-serialized double array.
            */
            JsonSerializer.serializeDoubleArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeDouble(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeFloat'>&nbsp;</span>**/
            /**
             <div>
             Serializes a float value.
             </div>
    
            @param {number} value The float to serialize.
            @return {string} The serialized float value.
            */
            JsonSerializer.serializeFloat = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.IntExtensions.toString(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeFloatArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a float array to JSON.
             </div>
    
            @param {number[]} array An array of float values.
            @return {string} A JSON-serialized float array.
            */
            JsonSerializer.serializeFloatArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeFloat(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeGuid'>&nbsp;</span>**/
            /**
             <div>
             Serializes a globally unique identifier.
             </div>
    
            @param {fm.icelink.Guid} value The GUID to serialize.
            @return {string} The serialized GUID.
            */
            JsonSerializer.serializeGuid = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.StringExtensions.concat("\"", value.toString(), "\"");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeGuidArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a GUID array to JSON.
             </div>
    
            @param {fm.icelink.Guid[]} array An array of GUID values.
            @return {string} A JSON-serialized GUID array.
            */
            JsonSerializer.serializeGuidArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeGuid(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeInteger'>&nbsp;</span>**/
            /**
             <div>
             Serializes an integer value.
             </div>
    
            @param {number} value The integer to serialize.
            @return {string} The serialized integer value.
            */
            JsonSerializer.serializeInteger = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.IntExtensions.toString(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeIntegerArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a integer array to JSON.
             </div>
    
            @param {number[]} array An array of integer values.
            @return {string} A JSON-serialized integer array.
            */
            JsonSerializer.serializeIntegerArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeInteger(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeLong'>&nbsp;</span>**/
            /**
             <div>
             Serializes a long value.
             </div>
    
            @param {number} value The long to serialize.
            @return {string} The serialized long value.
            */
            JsonSerializer.serializeLong = function (value) {
                if (arguments.length == 1) {
                    if (!(value != null)) {
                        return "null";
                    }
                    return fm.icelink.IntExtensions.toString(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeLongArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a long array to JSON.
             </div>
    
            @param {number[]} array An array of long values.
            @return {string} A JSON-serialized long array.
            */
            JsonSerializer.serializeLongArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeLong(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeObject'>&nbsp;</span>**/
            /**
             <div>
             Serializes an object into a JSON string.
             </div><typeparam name="T">The type of the object to serialize.</typeparam>
    
            @param {T} source The object being serialized.
            @param {fm.icelink.IAction2<T,fm.icelink.Hash<string,string>>} callback The method used for serializing properties.
            @return {string} The object as a JSON string.
            */
            JsonSerializer.serializeObject = function (source, callback) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(source, null))) {
                        return "null";
                    }
                    var dictionary = {};
                    callback(source, dictionary);
                    var list = new Array();
                    for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(dictionary); _i < _a.length; _i++) {
                        var str = _a[_i];
                        fm.icelink.ArrayExtensions.add(list, fm.icelink.StringExtensions.concat(fm.icelink.JsonSerializer.serializeString(str), ":", dictionary[str]));
                    }
                    return fm.icelink.StringExtensions.concat("{", fm.icelink.StringExtensions.join(",", fm.icelink.ArrayExtensions.toArray(list)), "}");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeObjectArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an object array into a JSON string.
             </div><typeparam name="T">The type of the object to serialize.</typeparam>
    
            @param {T[]} objects The object array being serialized.
            @param {fm.icelink.IFunction1<T,string>} serializer The callback used to serialize each item in the array.
            @return {string} The object array as a JSON string.
            */
            JsonSerializer.serializeObjectArray = function (objects, serializer) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(objects, null))) {
                        return "null";
                    }
                    if ((fm.icelink.Global.equals(objects.length, 0))) {
                        return "[]";
                    }
                    var strArray = new Array(objects.length);
                    for (var i = 0; (i < objects.length); i++) {
                        strArray[i] = serializer(objects[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeObjectFast'>&nbsp;</span>**/
            /**
             <div>
             Serializes a `fm.icelink.serializable` object into a JSON string.
             </div><typeparam name="T">The type of the object to serialize.</typeparam>
    
            @param {T} source The object being serialized.
            @param {fm.icelink.IAction2<T,fm.icelink.Hash<string,string>>} callback The method used for serializing properties.
            @return {string} The object as a JSON string.
            */
            JsonSerializer.serializeObjectFast = function (source, callback) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(source, null))) {
                        return "null";
                    }
                    if (!(source.getIsSerialized() && !source.getIsDirty())) {
                        source.setSerialized(fm.icelink.JsonSerializer.serializeObject(source, callback));
                    }
                    return source.getSerialized();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeRaw'>&nbsp;</span>**/
            /**
             <div>
             Serializes a piece of raw JSON.
             </div>
    
            @param {string} dataJson The raw data.
            @return {string} The serialized data.
            */
            JsonSerializer.serializeRaw = function (dataJson) {
                if (arguments.length == 1) {
                    return dataJson;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeRawArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a raw array to JSON.
             </div>
    
            @param {string[]} jsons An array of raw values.
            @return {string} A JSON-serialized raw array.
            */
            JsonSerializer.serializeRawArray = function (jsons) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(jsons, null))) {
                        return "null";
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", jsons), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeString'>&nbsp;</span>**/
            /**
             <div>
             Serializes a string.
             </div>
    
            @param {string} value The string to serialize.
            @return {string} The serialized string value.
            */
            JsonSerializer.serializeString = function (value) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(value, null))) {
                        return "null";
                    }
                    return fm.icelink.StringExtensions.concat("\"", fm.icelink.JsonSerializer.escapeString(value), "\"");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-serializeStringArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes a string array to JSON.
             </div>
    
            @param {string[]} array An array of string values.
            @return {string} A JSON-serialized string array.
            */
            JsonSerializer.serializeStringArray = function (array) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(array, null))) {
                        return "null";
                    }
                    var strArray = new Array(array.length);
                    for (var i = 0; (i < array.length); i++) {
                        strArray[i] = fm.icelink.JsonSerializer.serializeString(array[i]);
                    }
                    return fm.icelink.StringExtensions.concat("[", fm.icelink.StringExtensions.join(",", strArray), "]");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-trimQuotes'>&nbsp;</span>**/
            /**
             <div>
             Trims the quotes from a JavaScript string value.
             </div>
    
            @param {string} value The JavaScript string value.
            @return {string} The string without quotes.
            */
            JsonSerializer.trimQuotes = function (value) {
                if (arguments.length == 1) {
                    if ((value.length > 1)) {
                        var ch = value.charCodeAt(0);
                        var ch2 = value.charCodeAt((value.length - 1));
                        if (((fm.icelink.Global.equals(ch, ch2)) && ((fm.icelink.Global.equals(ch, 39)) || (fm.icelink.Global.equals(ch, 34))))) {
                            value = fm.icelink.StringExtensions.substring(value, 1, (value.length - 2));
                        }
                    }
                    return value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.JsonSerializer-unescapeString'>&nbsp;</span>**/
            /**
             <div>
             Unescapes any special characters from a string.
             </div>
    
            @param {string} text The string with escaped characters.
            @return {string} The unescaped string.
            */
            JsonSerializer.unescapeString = function (text) {
                if (arguments.length == 1) {
                    var builder = new fm.icelink.StringBuilder();
                    var startIndex = -1;
                    for (var i = 0; (i < text.length); i++) {
                        var ch = text.charCodeAt(i);
                        if ((fm.icelink.Global.equals(ch, 92))) {
                            if ((!fm.icelink.Global.equals(startIndex, -1))) {
                                builder.append(text, startIndex, (i - startIndex));
                                startIndex = -1;
                            }
                            if ((fm.icelink.Global.equals(i, (text.length - 1)))) {
                                continue;
                            }
                            var ch2 = text.charCodeAt((i + 1));
                            var _var0 = ch2;
                            if (_var0 == 98) {
                                do {
                                    builder.append("\b");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 102) {
                                do {
                                    builder.append("\f");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 110) {
                                do {
                                    builder.append("\n");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 114) {
                                do {
                                    builder.append("\r");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 116) {
                                do {
                                    builder.append("\t");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 47) {
                                do {
                                    builder.append("/");
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 117) {
                                do {
                                    if ((i < (text.length - 5))) {
                                        builder.append(String.fromCharCode(fm.icelink.JsonSerializer.unicodeStringToChar(fm.icelink.StringExtensions.substring(text, i, 6))));
                                        i = (i + 4);
                                    }
                                    else {
                                        builder.append("u");
                                    }
                                    break;
                                } while (false);
                            }
                            else if (_var0 == 120) {
                                do {
                                    if ((i < (text.length - 3))) {
                                        builder.append(String.fromCharCode(fm.icelink.JsonSerializer.unicodeStringToChar(fm.icelink.StringExtensions.substring(text, i, 4))));
                                        i = (i + 2);
                                    }
                                    else {
                                        builder.append("x");
                                    }
                                    break;
                                } while (false);
                            }
                            else {
                                do {
                                    builder.append(String.fromCharCode(ch2));
                                    break;
                                } while (false);
                            }
                            i++;
                            continue;
                        }
                        if ((fm.icelink.Global.equals(startIndex, -1))) {
                            startIndex = i;
                        }
                    }
                    if ((!fm.icelink.Global.equals(startIndex, -1))) {
                        builder.append(text, startIndex, (text.length - startIndex));
                    }
                    return builder.toString();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonSerializer.unicodeStringToChar = function (value) {
                if (arguments.length == 1) {
                    if ((value.length < 2)) {
                        throw new fm.icelink.Exception("Unicode string has invalid length.");
                    }
                    return fm.icelink.Convert.toInt32(value.substring(2), 16);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return JsonSerializer;
        }());
        icelink.JsonSerializer = JsonSerializer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="JsonSerializer.ts" />

/// <reference path="JsonSerializer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Provides methods for serializing/deserializing .NET value types to/from JSON
         as well as facilities for converting objects and arrays if appropriate callbacks
         are supplied to assist with the conversion.
         </div>
    
        */
        var Serializer = /** @class */ (function (_super) {
            __extends(Serializer, _super);
            function Serializer() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            Serializer.prototype.getTypeString = function () {
                return '[fm.icelink.Serializer]' + ',' + _super.prototype.getTypeString.call(this);
            };
            return Serializer;
        }(fm.icelink.JsonSerializer));
        icelink.Serializer = Serializer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A simple state machine.
         </div>
    
        */
        var StateMachine = /** @class */ (function () {
            /**<span id='method-fm.icelink.StateMachine-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.stateMachine` class.
             </div>
    
            @param {T} initialState The initial state.
            @return {}
            */
            function StateMachine(initialState) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var initialState_1 = __arguments[0];
                    //super();
                    this.fmicelinkStateMachineInit();
                    this.__transitions = {};
                    this.__transitionsLock = new Object();
                    this.setSystemTimestamp(-1);
                    this.setLastStateTicks(-1);
                    this.setStateValue(this.stateToValue(initialState_1));
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StateMachine.prototype.getTypeString = function () {
                return '[fm.icelink.StateMachine]';
            };
            StateMachine.prototype.fmicelinkStateMachineInit = function () {
                this.__stateValue = 0;
                this._lastStateTicks = 0;
                this._systemTimestamp = 0;
            };
            /**<span id='method-fm.icelink.StateMachine-addTransition'>&nbsp;</span>**/
            /**
             <div>
             Adds an allowed transition.
             </div>
    
            @param {T} fromState The "from" state.
            @param {T} toState The "to" state.
            @return {void}
            */
            StateMachine.prototype.addTransition = function (fromState, toState) {
                if (arguments.length == 2) {
                    var key = fm.icelink.IntExtensions.toString(this.stateToValue(fromState));
                    var item = fm.icelink.IntExtensions.toString(this.stateToValue(toState));
                    var list = null;
                    var _var0 = new fm.icelink.Holder(list);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__transitions, key, _var0);
                    list = _var0.getValue();
                    if (!_var1) {
                        this.__transitions[key] = list = new Array();
                    }
                    if (!fm.icelink.ArrayExtensions.contains(list, item)) {
                        fm.icelink.ArrayExtensions.add(list, item);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-canTransition'>&nbsp;</span>**/
            /**
             <div>
             Determines whether a transition to the specified state is allowed.
             </div>
    
            @param {T} toState The "to" state.
            @return {boolean} true if a transition to the specified state is allowed; otherwise, false.
     
            */
            StateMachine.prototype.canTransition = function (toState) {
                if (arguments.length == 1) {
                    var item = fm.icelink.IntExtensions.toString(this.stateToValue(toState));
                    var list = null;
                    var _var0 = new fm.icelink.Holder(list);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__transitions, fm.icelink.IntExtensions.toString(this.getStateValue()), _var0);
                    list = _var0.getValue();
                    if (!_var1) {
                        return false;
                    }
                    return fm.icelink.ArrayExtensions.contains(list, item);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-getLastStateMillis'>&nbsp;</span>**/
            /**
             <div>
             Gets the length of time spent in the last state,
             in milliseconds.
             </div>
    
    
            @return {number}
            */
            StateMachine.prototype.getLastStateMillis = function () {
                if (arguments.length == 0) {
                    var lastStateTicks = this.getLastStateTicks();
                    if ((fm.icelink.Global.equals(lastStateTicks, -1))) {
                        return -1;
                    }
                    return icelink.MathAssistant.floor(lastStateTicks / fm.icelink.Constants.getTicksPerMillisecond());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-getLastStateTicks'>&nbsp;</span>**/
            /**
             <div>
             Gets the length of time spent in the last state,
             in ticks.
             </div>
    
    
            @return {number}
            */
            StateMachine.prototype.getLastStateTicks = function () {
                if (arguments.length == 0) {
                    return this._lastStateTicks;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state.
             </div>
    
    
            @return {T}
            */
            StateMachine.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this.valueToState(this.__stateValue);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-getStateValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the state value.
             </div>
    
    
            @return {number}
            */
            StateMachine.prototype.getStateValue = function () {
                if (arguments.length == 0) {
                    return this.__stateValue;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-getSystemTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Gets the system timestamp of the last
             state transition.
             </div>
    
    
            @return {number}
            */
            StateMachine.prototype.getSystemTimestamp = function () {
                if (arguments.length == 0) {
                    return this._systemTimestamp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StateMachine.prototype.setLastStateTicks = function (value) {
                if (arguments.length == 1) {
                    this._lastStateTicks = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StateMachine.prototype.setStateValue = function (value) {
                if (arguments.length == 1) {
                    var timestamp = fm.icelink.ManagedStopwatch.getTimestamp();
                    if ((!fm.icelink.Global.equals(this.getSystemTimestamp(), -1))) {
                        this.setLastStateTicks((timestamp - this.getSystemTimestamp()));
                    }
                    this.setSystemTimestamp(timestamp);
                    this.__stateValue = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StateMachine.prototype.setSystemTimestamp = function (value) {
                if (arguments.length == 1) {
                    this._systemTimestamp = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StateMachine-transition'>&nbsp;</span>**/
            /**
             <div>
             Transitions to the specified state.
             </div>
    
            @param {T} toState The "to" state.
            @return {boolean} true if a transition to the specified state is allowed; otherwise, false.
     
            */
            StateMachine.prototype.transition = function (toState) {
                if (arguments.length == 1) {
                    if (!this.canTransition(toState)) {
                        return false;
                    }
                    this.setStateValue(this.stateToValue(toState));
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StateMachine;
        }());
        icelink.StateMachine = StateMachine;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var StringTypeWrapper = /** @class */ (function () {
            function StringTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_7 = __arguments[0];
                    //super();
                    this._value = value_7;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StringTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.StringTypeWrapper]';
            };
            StringTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.StringType.None)
                        return 'None';
                    if (this._value == fm.icelink.StringType.Single)
                        return 'Single';
                    if (this._value == fm.icelink.StringType.Double)
                        return 'Double';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StringTypeWrapper;
        }());
        icelink.StringTypeWrapper = StringTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A linked list node.
         </div>
    
        */
        var LinkedListNode = /** @class */ (function () {
            /**<span id='method-fm.icelink.LinkedListNode-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.linkedListNode` class.
             </div>
    
            @param {T} item The item.
            @return {}
            */
            function LinkedListNode(item) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var item_1 = __arguments[0];
                    //super();
                    this.setValue(item_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LinkedListNode.prototype.getTypeString = function () {
                return '[fm.icelink.LinkedListNode]';
            };
            /**<span id='method-fm.icelink.LinkedListNode-getNext'>&nbsp;</span>**/
            /**
             <div>
             Gets the next node. Will be <c>null</c> if last.
             </div>
    
    
            @return {fm.icelink.LinkedListNode<T>}
            */
            LinkedListNode.prototype.getNext = function () {
                if (arguments.length == 0) {
                    return this._next;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LinkedListNode-getPrevious'>&nbsp;</span>**/
            /**
             <div>
             Gets the previous node. Null if first.
             </div>
    
    
            @return {fm.icelink.LinkedListNode<T>}
            */
            LinkedListNode.prototype.getPrevious = function () {
                if (arguments.length == 0) {
                    return this._previous;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LinkedListNode-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the item in the linked list.
             </div>
    
    
            @return {T}
            */
            LinkedListNode.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LinkedListNode.prototype.setNext = function (value) {
                if (arguments.length == 1) {
                    this._next = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LinkedListNode.prototype.setPrevious = function (value) {
                if (arguments.length == 1) {
                    this._previous = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LinkedListNode.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LinkedListNode;
        }());
        icelink.LinkedListNode = LinkedListNode;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A linked list enumerator.
         </div><typeparam name="T"></typeparam>
    
        */
        var LinkedListEnumerator = /** @class */ (function () {
            /**<span id='method-fm.icelink.LinkedListEnumerator-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.linkedListEnumerator` class.
             </div>
    
            @param {fm.icelink.LinkedListNode<T>} root The root node.
            @return {}
            */
            function LinkedListEnumerator(root) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var root_1 = __arguments[0];
                    //super();
                    this.fmicelinkLinkedListEnumeratorInit();
                    this.__root = root_1;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LinkedListEnumerator.prototype.getTypeString = function () {
                return '[fm.icelink.LinkedListEnumerator]';
            };
            LinkedListEnumerator.prototype.fmicelinkLinkedListEnumeratorInit = function () {
                this.__started = false;
            };
            /**<span id='method-fm.icelink.LinkedListEnumerator-getCurrent'>&nbsp;</span>**/
            /**
             <div>
             Gets the current value.
             </div>
    
    
            @return {T}
            */
            LinkedListEnumerator.prototype.getCurrent = function () {
                if (arguments.length == 0) {
                    return this.__currentNode.getValue();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LinkedListEnumerator-getCurrentNode'>&nbsp;</span>**/
            /**
             <div>
             Gets the current node.
             </div>
    
    
            @return {fm.icelink.LinkedListNode<T>}
            */
            LinkedListEnumerator.prototype.getCurrentNode = function () {
                if (arguments.length == 0) {
                    return this.__currentNode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LinkedListEnumerator-moveNext'>&nbsp;</span>**/
            /**
             <div>
             Moves to the next node.
             </div>
    
    
            @return {boolean}
            */
            LinkedListEnumerator.prototype.moveNext = function () {
                if (arguments.length == 0) {
                    if (!((!fm.icelink.Global.equals(this.__currentNode, null)) || this.__started)) {
                        this.__started = true;
                        this.__currentNode = this.__root;
                    }
                    else {
                        this.__currentNode = this.__currentNode.getNext();
                    }
                    return (!fm.icelink.Global.equals(this.__currentNode, null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LinkedListEnumerator-reset'>&nbsp;</span>**/
            /**
             <div>
             Resets this instance.
             </div>
    
    
            @return {void}
            */
            LinkedListEnumerator.prototype.reset = function () {
                if (arguments.length == 0) {
                    this.__started = false;
                    this.__currentNode = null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LinkedListEnumerator;
        }());
        icelink.LinkedListEnumerator = LinkedListEnumerator;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var InternalConcurrentQueue = /** @class */ (function () {
            function InternalConcurrentQueue() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this._backingData = new Array();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            InternalConcurrentQueue.prototype.getTypeString = function () {
                return '[fm.icelink.InternalConcurrentQueue]';
            };
            InternalConcurrentQueue.prototype.enqueue = function (item) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this._backingData, item);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentQueue.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ArrayExtensions.getCount(this._backingData);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentQueue.prototype.getIsEmpty = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getCount(), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentQueue.prototype.tryDequeue = function (item) {
                if (arguments.length == 1) {
                    if (this.getIsEmpty()) {
                        item.setValue(null);
                        return false;
                    }
                    item.setValue(this._backingData[0]);
                    fm.icelink.ArrayExtensions.removeAt(this._backingData, 0);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentQueue.prototype.tryPeek = function (item) {
                if (arguments.length == 1) {
                    if (this.getIsEmpty()) {
                        item.setValue(null);
                        return false;
                    }
                    item.setValue(this._backingData[0]);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return InternalConcurrentQueue;
        }());
        icelink.InternalConcurrentQueue = InternalConcurrentQueue;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var InternalConcurrentStack = /** @class */ (function () {
            function InternalConcurrentStack() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this._backingData = new Array();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            InternalConcurrentStack.prototype.getTypeString = function () {
                return '[fm.icelink.InternalConcurrentStack]';
            };
            InternalConcurrentStack.prototype.clear = function () {
                if (arguments.length == 0) {
                    fm.icelink.ArrayExtensions.clear(this._backingData);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentStack.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ArrayExtensions.getCount(this._backingData);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentStack.prototype.getIsEmpty = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getCount(), 0));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentStack.prototype.push = function (item) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.add(this._backingData, item);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentStack.prototype.tryPeek = function (result) {
                if (arguments.length == 1) {
                    if (this.getIsEmpty()) {
                        result.setValue(null);
                        return false;
                    }
                    result.setValue(this._backingData[(fm.icelink.ArrayExtensions.getCount(this._backingData) - 1)]);
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            InternalConcurrentStack.prototype.tryPop = function (result) {
                if (arguments.length == 1) {
                    if (this.getIsEmpty()) {
                        result.setValue(null);
                        return false;
                    }
                    result.setValue(this._backingData[(fm.icelink.ArrayExtensions.getCount(this._backingData) - 1)]);
                    fm.icelink.ArrayExtensions.removeAt(this._backingData, (fm.icelink.ArrayExtensions.getCount(this._backingData) - 1));
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return InternalConcurrentStack;
        }());
        icelink.InternalConcurrentStack = InternalConcurrentStack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A ConcurrentDictonary that maps to the appropriate platform version.
         </div>
    
        */
        var ManagedConcurrentDictionary = /** @class */ (function () {
            function ManagedConcurrentDictionary() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var hashCallback = __arguments[0];
                    //super();
                    if ((fm.icelink.Global.equals(hashCallback, null))) {
                        this.__dictionary = new fm.icelink.InternalConcurrentDictionary(this.hash.bind(this));
                    }
                    else {
                        this.__dictionary = new fm.icelink.InternalConcurrentDictionary(hashCallback);
                    }
                }
                else if (__arguments.length == 0) {
                    // chained constructor: ManagedConcurrentDictionary.call(this, null);
                    __arguments = new Array(1);
                    __arguments[0] = null;
                    {
                        var hashCallback = __arguments[0];
                        //super();
                        if ((fm.icelink.Global.equals(hashCallback, null))) {
                            this.__dictionary = new fm.icelink.InternalConcurrentDictionary(this.hash.bind(this));
                        }
                        else {
                            this.__dictionary = new fm.icelink.InternalConcurrentDictionary(hashCallback);
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ManagedConcurrentDictionary.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedConcurrentDictionary]';
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-addOrUpdate'>&nbsp;</span>**/
            /**
             <div>
             Updates a value in the dictionary or adds it if it does not exist.
             </div>
    
            @param {TKey} key The key to use for updating for adding.
            @param {TValue} addValue The value to be added for an absent key.
            @param {fm.icelink.IFunction2<TKey,TValue,TValue>} updateValueFactory The function to use for generating a value based on an existing key.
            @return {TValue}
            */
            ManagedConcurrentDictionary.prototype.addOrUpdate = function (key, addValue, updateValueFactory) {
                if (arguments.length == 3) {
                    return this.__dictionary.addOrUpdate(key, addValue, function (k, v) {
                        return updateValueFactory(k, v);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-clear'>&nbsp;</span>**/
            /**
             <div>
             Clears the dictionary of all items.
             </div>
    
    
            @return {void}
            */
            ManagedConcurrentDictionary.prototype.clear = function () {
                if (arguments.length == 0) {
                    this.__dictionary.clear();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-containsKey'>&nbsp;</span>**/
            /**
             <div>
             True if the dictionary contains the key.
             </div>
    
            @param {TKey} key The key to check.
            @return {boolean}
            */
            ManagedConcurrentDictionary.prototype.containsKey = function (key) {
                if (arguments.length == 1) {
                    return this.__dictionary.containsKey(key);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of items in the dictionary.
             </div>
    
    
            @return {number}
            */
            ManagedConcurrentDictionary.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return this.__dictionary.getCount();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getIsEmpty'>&nbsp;</span>**/
            /**
             <div>
             Gets true if dictionary is empty.
             </div>
    
    
            @return {boolean}
            */
            ManagedConcurrentDictionary.prototype.getIsEmpty = function () {
                if (arguments.length == 0) {
                    return this.__dictionary.getIsEmpty();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getKeys'>&nbsp;</span>**/
            /**
             <div>
             Gets an array of keys.
             </div>
    
    
            @return {Array<TKey>}
            */
            ManagedConcurrentDictionary.prototype.getKeys = function () {
                if (arguments.length == 0) {
                    return this.__dictionary.getKeys();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getOrAdd'>&nbsp;</span>**/
            /**
             <div>
             Gets the value from the dictionary or adds a new one if it does not exist.
             </div>
    
            @param {TKey} key The key to use when adding to the dictionary.
            @param {fm.icelink.IFunction1<TKey,TValue>} valueFactory The Func that will create a value if needed.
            @return {TValue} The dictionary value if exist, the value returned by the Func if not.
            */
            ManagedConcurrentDictionary.prototype.getOrAdd = function (key, valueFactory) {
                if (arguments.length == 2) {
                    return this.__dictionary.getOrAdd(key, function (k) {
                        return valueFactory(k);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getValues'>&nbsp;</span>**/
            /**
             <div>
             Gets an array of Values.
             </div>
    
    
            @return {Array<TValue>}
            */
            ManagedConcurrentDictionary.prototype.getValues = function () {
                if (arguments.length == 0) {
                    return this.__dictionary.getValues();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            ManagedConcurrentDictionary.prototype.hash = function (key) {
                if (arguments.length == 1) {
                    return key.toString();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryAdd'>&nbsp;</span>**/
            /**
             <div>
             Tries to add a new value to the dictionary.
             </div>
    
            @param {TKey} key The key to use when adding.
            @param {TValue} value The value to be added to the dictionary.
            @return {boolean} True if added, false if key already exists.
            */
            ManagedConcurrentDictionary.prototype.tryAdd = function (key, value) {
                if (arguments.length == 2) {
                    return this.__dictionary.tryAdd(key, value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryGetValue'>&nbsp;</span>**/
            /**
             <div>
             Tries to get a value from the dictionary.
             </div>
    
            @param {TKey} key They key of the item to get form the dictionary.
            @param {fm.icelink.Holder<TValue>} value The value that was just received or null if failed.
            @return {boolean} True if succeeded.
            */
            ManagedConcurrentDictionary.prototype.tryGetValue = function (key, value) {
                if (arguments.length == 2) {
                    var _var0 = this.__dictionary.tryGetValue(key, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryRemove'>&nbsp;</span>**/
            /**
             <div>
             Tries and removes a value from the dictionary.
             </div>
    
            @param {TKey} key The key of the item to remove.
            @param {fm.icelink.Holder<TValue>} value The value that was just removed.
            @return {boolean} True if successful.
            */
            ManagedConcurrentDictionary.prototype.tryRemove = function (key, value) {
                if (arguments.length == 2) {
                    var _var0 = this.__dictionary.tryRemove(key, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryUpdate'>&nbsp;</span>**/
            /**
             <div>
             Tries to update the value in the dictionary.
             </div>
    
            @param {TKey} key The key to use when updating.
            @param {TValue} newValue The new value.
            @param {TValue} comparisonValue The value to compare with the current value in the dictionary.
            @return {boolean} True if succeeded.
            */
            ManagedConcurrentDictionary.prototype.tryUpdate = function (key, newValue, comparisonValue) {
                if (arguments.length == 3) {
                    return this.__dictionary.tryUpdate(key, newValue, comparisonValue);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ManagedConcurrentDictionary;
        }());
        icelink.ManagedConcurrentDictionary = ManagedConcurrentDictionary;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A thread-safe queue.
         </div><typeparam name="T">The type that the queue holds.</typeparam>
    
        */
        var ManagedConcurrentQueue = /** @class */ (function () {
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new ConcurrentQueue.
             </div>
    
    
            @return {}
            */
            function ManagedConcurrentQueue() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.__queue = new fm.icelink.InternalConcurrentQueue();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ManagedConcurrentQueue.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedConcurrentQueue]';
            };
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-enqueue'>&nbsp;</span>**/
            /**
             <div>
             Add the item to the end of the queue.
             </div>
    
            @param {T} item The item to add.
            @return {void}
            */
            ManagedConcurrentQueue.prototype.enqueue = function (item) {
                if (arguments.length == 1) {
                    this.__queue.enqueue(item);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the amount of items in this queue.
             </div>
    
    
            @return {number}
            */
            ManagedConcurrentQueue.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return this.__queue.getCount();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-getIsEmpty'>&nbsp;</span>**/
            /**
             <div>
             Gets true if the queue is empty.
             </div>
    
    
            @return {boolean}
            */
            ManagedConcurrentQueue.prototype.getIsEmpty = function () {
                if (arguments.length == 0) {
                    return this.__queue.getIsEmpty();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-tryDequeue'>&nbsp;</span>**/
            /**
             <div>
             Removes and returns the item at the front of the queue.
             </div>
    
            @param {fm.icelink.Holder<T>} item The dequeued item.
            @return {boolean} True if item received, false if no item.
            */
            ManagedConcurrentQueue.prototype.tryDequeue = function (item) {
                if (arguments.length == 1) {
                    var _var0 = this.__queue.tryDequeue(item);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentQueue-tryPeek'>&nbsp;</span>**/
            /**
             <div>
             Peeks at the first item in the queue.
             </div>
    
            @param {fm.icelink.Holder<T>} item The item at the front of the queue.
            @return {boolean} False if queue is empty. True if first item peeked at.
            */
            ManagedConcurrentQueue.prototype.tryPeek = function (item) {
                if (arguments.length == 1) {
                    var _var0 = this.__queue.tryPeek(item);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ManagedConcurrentQueue;
        }());
        icelink.ManagedConcurrentQueue = ManagedConcurrentQueue;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A ConcurrentStack that maps to the appropriate platform version.
         </div>
    
        */
        var ManagedConcurrentStack = /** @class */ (function () {
            /**<span id='method-fm.icelink.ManagedConcurrentStack-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of a ConcurrentStack.
             </div>
    
    
            @return {}
            */
            function ManagedConcurrentStack() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.__stack = new fm.icelink.InternalConcurrentStack();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ManagedConcurrentStack.prototype.getTypeString = function () {
                return '[fm.icelink.ManagedConcurrentStack]';
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-clear'>&nbsp;</span>**/
            /**
             <div>
             Clears the stack of all items.
             </div>
    
    
            @return {void}
            */
            ManagedConcurrentStack.prototype.clear = function () {
                if (arguments.length == 0) {
                    this.__stack.clear();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the amount of items in the stack.
             </div>
    
    
            @return {number}
            */
            ManagedConcurrentStack.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return this.__stack.getCount();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-getIsEmpty'>&nbsp;</span>**/
            /**
             <div>
             Gets true if the stack is empty.
             </div>
    
    
            @return {boolean}
            */
            ManagedConcurrentStack.prototype.getIsEmpty = function () {
                if (arguments.length == 0) {
                    return this.__stack.getIsEmpty();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-push'>&nbsp;</span>**/
            /**
             <div>
             Pushes a new item on top of the stack.
             </div>
    
            @param {TValue} item The item to push.
            @return {void}
            */
            ManagedConcurrentStack.prototype.push = function (item) {
                if (arguments.length == 1) {
                    this.__stack.push(item);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-tryPeek'>&nbsp;</span>**/
            /**
             <div>
             Tries to peek at the top value in stack.
             </div>
    
            @param {fm.icelink.Holder<TValue>} result The value from the stack if possible, null otherwise.
            @return {boolean} True if peek succeeded, false if not.
            */
            ManagedConcurrentStack.prototype.tryPeek = function (result) {
                if (arguments.length == 1) {
                    var _var0 = this.__stack.tryPeek(result);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ManagedConcurrentStack-tryPop'>&nbsp;</span>**/
            /**
             <div>
             Tries to pop the top value off of the stack.
             </div>
    
            @param {fm.icelink.Holder<TValue>} result The value from the top of the stack if possible, null otherwise.
            @return {boolean} True if pop suceeded, false if not.
            */
            ManagedConcurrentStack.prototype.tryPop = function (result) {
                if (arguments.length == 1) {
                    var _var0 = this.__stack.tryPop(result);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ManagedConcurrentStack;
        }());
        icelink.ManagedConcurrentStack = ManagedConcurrentStack;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A mutable 2-tuple.
         </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>
    
        */
        var MutablePair = /** @class */ (function () {
            /**<span id='method-fm.icelink.MutablePair-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.mutablePair` class.
             </div>
    
            @param {T1} item1 First item the tuple holds.
            @param {T2} item2 Second item the tuple holds.
            @return {}
            */
            function MutablePair(item1, item2) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var item1_1 = __arguments[0];
                    var item2_1 = __arguments[1];
                    //super();
                    this.setItem1(item1_1);
                    this.setItem2(item2_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MutablePair.prototype.getTypeString = function () {
                return '[fm.icelink.MutablePair]';
            };
            /**<span id='method-fm.icelink.MutablePair-getItem1'>&nbsp;</span>**/
            /**
             <div>
             Gets the first item in the tuple.
             </div>
    
    
            @return {T1}
            */
            MutablePair.prototype.getItem1 = function () {
                if (arguments.length == 0) {
                    return this._item1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MutablePair-getItem2'>&nbsp;</span>**/
            /**
             <div>
             Gets the second item in the tuple.
             </div>
    
    
            @return {T2}
            */
            MutablePair.prototype.getItem2 = function () {
                if (arguments.length == 0) {
                    return this._item2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MutablePair-setItem1'>&nbsp;</span>**/
            /**
             <div>
             Sets the first item in the tuple.
             </div>
    
    
            @param {T1} value
            @return {void}
            */
            MutablePair.prototype.setItem1 = function (value) {
                if (arguments.length == 1) {
                    this._item1 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MutablePair-setItem2'>&nbsp;</span>**/
            /**
             <div>
             Sets the second item in the tuple.
             </div>
    
    
            @param {T2} value
            @return {void}
            */
            MutablePair.prototype.setItem2 = function (value) {
                if (arguments.length == 1) {
                    this._item2 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MutablePair;
        }());
        icelink.MutablePair = MutablePair;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A mutable 1-tuple.
         </div><typeparam name="T">Type the tuple holds.</typeparam>
    
        */
        var MutableUnit = /** @class */ (function () {
            /**<span id='method-fm.icelink.MutableUnit-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.mutableUnit` class.
             </div>
    
            @param {T} item The item to hold.
            @return {}
            */
            function MutableUnit(item) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var item_2 = __arguments[0];
                    //super();
                    this.setItem(item_2);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MutableUnit.prototype.getTypeString = function () {
                return '[fm.icelink.MutableUnit]';
            };
            /**<span id='method-fm.icelink.MutableUnit-getItem'>&nbsp;</span>**/
            /**
             <div>
             Gets the first item in the tuple.
             </div>
    
    
            @return {T}
            */
            MutableUnit.prototype.getItem = function () {
                if (arguments.length == 0) {
                    return this._item;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MutableUnit-setItem'>&nbsp;</span>**/
            /**
             <div>
             Sets the first item in the tuple.
             </div>
    
    
            @param {T} value
            @return {void}
            */
            MutableUnit.prototype.setItem = function (value) {
                if (arguments.length == 1) {
                    this._item = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MutableUnit;
        }());
        icelink.MutableUnit = MutableUnit;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A 2-tuple.
         </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>
    
        */
        var Pair = /** @class */ (function () {
            /**<span id='method-fm.icelink.Pair-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.pair` class.
             </div>
    
            @param {T1} item1 First item the tuple holds.
            @param {T2} item2 Second item the tuple holds.
            @return {}
            */
            function Pair(item1, item2) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var item1_2 = __arguments[0];
                    var item2_2 = __arguments[1];
                    //super();
                    this.setItem1(item1_2);
                    this.setItem2(item2_2);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Pair.prototype.getTypeString = function () {
                return '[fm.icelink.Pair]';
            };
            /**<span id='method-fm.icelink.Pair-getHashCode'>&nbsp;</span>**/
            /**
             <div>
             Calculates the hashcode for this pair.
             </div>
    
    
            @return {number}
            */
            Pair.prototype.getHashCode = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.ObjectExtensions.getHashCode(this.getItem1()) + fm.icelink.ObjectExtensions.getHashCode(this.getItem2()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pair-getItem1'>&nbsp;</span>**/
            /**
             <div>
             Gets the first item in the tuple.
             </div>
    
    
            @return {T1}
            */
            Pair.prototype.getItem1 = function () {
                if (arguments.length == 0) {
                    return this._item1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Pair-getItem2'>&nbsp;</span>**/
            /**
             <div>
             Gets the second item in the tuple.
             </div>
    
    
            @return {T2}
            */
            Pair.prototype.getItem2 = function () {
                if (arguments.length == 0) {
                    return this._item2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Pair.prototype.setItem1 = function (value) {
                if (arguments.length == 1) {
                    this._item1 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Pair.prototype.setItem2 = function (value) {
                if (arguments.length == 1) {
                    this._item2 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Pair;
        }());
        icelink.Pair = Pair;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A 3-tuple.
         </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam><typeparam name="T3">Third type the tuple holds.</typeparam>
    
        */
        var Triple = /** @class */ (function () {
            /**<span id='method-fm.icelink.Triple-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.triple` class.
             </div>
    
            @param {T1} item1 First item the tuple holds.
            @param {T2} item2 Second item the tuple holds.
            @param {T3} item3 Third item the tuple holds.
            @return {}
            */
            function Triple(item1, item2, item3) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var item1_3 = __arguments[0];
                    var item2_3 = __arguments[1];
                    var item3_1 = __arguments[2];
                    //super();
                    this.setItem1(item1_3);
                    this.setItem2(item2_3);
                    this.setItem3(item3_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Triple.prototype.getTypeString = function () {
                return '[fm.icelink.Triple]';
            };
            /**<span id='method-fm.icelink.Triple-getItem1'>&nbsp;</span>**/
            /**
             <div>
             Gets the first item in the tuple.
             </div>
    
    
            @return {T1}
            */
            Triple.prototype.getItem1 = function () {
                if (arguments.length == 0) {
                    return this._item1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Triple-getItem2'>&nbsp;</span>**/
            /**
             <div>
             Gets the second item in the tuple.
             </div>
    
    
            @return {T2}
            */
            Triple.prototype.getItem2 = function () {
                if (arguments.length == 0) {
                    return this._item2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Triple-getItem3'>&nbsp;</span>**/
            /**
             <div>
             Gets the third item in the tuple.
             </div>
    
    
            @return {T3}
            */
            Triple.prototype.getItem3 = function () {
                if (arguments.length == 0) {
                    return this._item3;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Triple.prototype.setItem1 = function (value) {
                if (arguments.length == 1) {
                    this._item1 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Triple.prototype.setItem2 = function (value) {
                if (arguments.length == 1) {
                    this._item2 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Triple.prototype.setItem3 = function (value) {
                if (arguments.length == 1) {
                    this._item3 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Triple;
        }());
        icelink.Triple = Triple;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A 1-tuple.
         </div><typeparam name="T">Type the tuple holds.</typeparam>
    
        */
        var Unit = /** @class */ (function () {
            /**<span id='method-fm.icelink.Unit-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.unit` class.
             </div>
    
            @param {T} item The item to hold.
            @return {}
            */
            function Unit(item) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var item_3 = __arguments[0];
                    //super();
                    this.setItem(item_3);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Unit.prototype.getTypeString = function () {
                return '[fm.icelink.Unit]';
            };
            /**<span id='method-fm.icelink.Unit-getItem'>&nbsp;</span>**/
            /**
             <div>
             Gets the item in the tuple.
             </div>
    
    
            @return {T}
            */
            Unit.prototype.getItem = function () {
                if (arguments.length == 0) {
                    return this._item;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Unit.prototype.setItem = function (value) {
                if (arguments.length == 1) {
                    this._item = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Unit;
        }());
        icelink.Unit = Unit;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var CompareResultWrapper = /** @class */ (function () {
            function CompareResultWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_8 = __arguments[0];
                    //super();
                    this._value = value_8;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CompareResultWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.CompareResultWrapper]';
            };
            CompareResultWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.CompareResult.Equal)
                        return 'Equal';
                    if (this._value == fm.icelink.CompareResult.Negative)
                        return 'Negative';
                    if (this._value == fm.icelink.CompareResult.Positive)
                        return 'Positive';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CompareResultWrapper;
        }());
        icelink.CompareResultWrapper = CompareResultWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of platform-independent constant values.
         </div>
    
        */
        var Constants = /** @class */ (function () {
            function Constants() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Constants.prototype.getTypeString = function () {
                return '[fm.icelink.Constants]';
            };
            /**<span id='method-fm.icelink.Constants-getHoursPerDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of hours in one day.
             </div>
    
    
            @return {number}
            */
            Constants.getHoursPerDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___hoursPerDay;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMillisecondsPerDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of milliseconds in one hour.
             </div>
    
    
            @return {number}
            */
            Constants.getMillisecondsPerDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___millisecondsPerDay;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMillisecondsPerHour'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of milliseconds in one hour.
             </div>
    
    
            @return {number}
            */
            Constants.getMillisecondsPerHour = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___millisecondsPerHour;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMillisecondsPerMinute'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of milliseconds in one minute.
             </div>
    
    
            @return {number}
            */
            Constants.getMillisecondsPerMinute = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___millisecondsPerMinute;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMillisecondsPerSecond'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of milliseconds in one second.
             </div>
    
    
            @return {number}
            */
            Constants.getMillisecondsPerSecond = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___millisecondsPerSecond;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMinutesPerDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of minutes in one day.
             </div>
    
    
            @return {number}
            */
            Constants.getMinutesPerDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___minutesPerDay;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getMinutesPerHour'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of minutes in one hour.
             </div>
    
    
            @return {number}
            */
            Constants.getMinutesPerHour = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___minutesPerHour;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getNanosecondsPerTick'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of nanoseconds in one tick.
             </div>
    
    
            @return {number}
            */
            Constants.getNanosecondsPerTick = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___nanosecondsPerTick;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getSecondsPerDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of seconds in one day.
             </div>
    
    
            @return {number}
            */
            Constants.getSecondsPerDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___secondsPerDay;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getSecondsPerHour'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of seconds in one hour.
             </div>
    
    
            @return {number}
            */
            Constants.getSecondsPerHour = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___secondsPerHour;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getSecondsPerMinute'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of seconds in one minute.
             </div>
    
    
            @return {number}
            */
            Constants.getSecondsPerMinute = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___secondsPerMinute;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getTicksPerDay'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of ticks in one day.
             </div>
    
    
            @return {number}
            */
            Constants.getTicksPerDay = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___ticksPerDay;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getTicksPerHour'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of ticks in one hour.
             </div>
    
    
            @return {number}
            */
            Constants.getTicksPerHour = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___ticksPerHour;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getTicksPerMillisecond'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of ticks in one millisecond.
             </div>
    
    
            @return {number}
            */
            Constants.getTicksPerMillisecond = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___ticksPerMillisecond;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getTicksPerMinute'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of ticks in one minute.
             </div>
    
    
            @return {number}
            */
            Constants.getTicksPerMinute = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___ticksPerMinute;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Constants-getTicksPerSecond'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of ticks in one second.
             </div>
    
    
            @return {number}
            */
            Constants.getTicksPerSecond = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Constants.fm_icelink_Constants___ticksPerSecond;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            Constants.fmicelinkConstantsInitialize = function () {
                if (!fm.icelink.Constants.__fmicelinkConstantsInitialized) {
                    Constants.fm_icelink_Constants___hoursPerDay = 0;
                    Constants.fm_icelink_Constants___millisecondsPerDay = 0;
                    Constants.fm_icelink_Constants___millisecondsPerHour = 0;
                    Constants.fm_icelink_Constants___millisecondsPerMinute = 0;
                    Constants.fm_icelink_Constants___millisecondsPerSecond = 0;
                    Constants.fm_icelink_Constants___minutesPerDay = 0;
                    Constants.fm_icelink_Constants___minutesPerHour = 0;
                    Constants.fm_icelink_Constants___nanosecondsPerTick = 0;
                    Constants.fm_icelink_Constants___secondsPerDay = 0;
                    Constants.fm_icelink_Constants___secondsPerHour = 0;
                    Constants.fm_icelink_Constants___secondsPerMinute = 0;
                    Constants.fm_icelink_Constants___ticksPerDay = 0;
                    Constants.fm_icelink_Constants___ticksPerHour = 0;
                    Constants.fm_icelink_Constants___ticksPerMillisecond = 0;
                    Constants.fm_icelink_Constants___ticksPerMinute = 0;
                    Constants.fm_icelink_Constants___ticksPerSecond = 0;
                    fm.icelink.Constants.fm_icelink_Constants___nanosecondsPerTick = 100;
                    fm.icelink.Constants.fm_icelink_Constants___ticksPerMillisecond = 10000;
                    fm.icelink.Constants.fm_icelink_Constants___millisecondsPerSecond = 1000;
                    fm.icelink.Constants.fm_icelink_Constants___secondsPerMinute = 60;
                    fm.icelink.Constants.fm_icelink_Constants___minutesPerHour = 60;
                    fm.icelink.Constants.fm_icelink_Constants___hoursPerDay = 24;
                    fm.icelink.Constants.fm_icelink_Constants___ticksPerSecond = (fm.icelink.Constants.getTicksPerMillisecond() * fm.icelink.Constants.getMillisecondsPerSecond());
                    fm.icelink.Constants.fm_icelink_Constants___ticksPerMinute = (fm.icelink.Constants.getTicksPerSecond() * fm.icelink.Constants.getSecondsPerMinute());
                    fm.icelink.Constants.fm_icelink_Constants___ticksPerHour = (fm.icelink.Constants.getTicksPerMinute() * fm.icelink.Constants.getMinutesPerHour());
                    fm.icelink.Constants.fm_icelink_Constants___ticksPerDay = (fm.icelink.Constants.getTicksPerHour() * fm.icelink.Constants.getHoursPerDay());
                    fm.icelink.Constants.fm_icelink_Constants___millisecondsPerMinute = (fm.icelink.Constants.getMillisecondsPerSecond() * fm.icelink.Constants.getSecondsPerMinute());
                    fm.icelink.Constants.fm_icelink_Constants___millisecondsPerHour = (fm.icelink.Constants.getMillisecondsPerMinute() * fm.icelink.Constants.getMinutesPerHour());
                    fm.icelink.Constants.fm_icelink_Constants___millisecondsPerDay = (fm.icelink.Constants.getMillisecondsPerHour() * fm.icelink.Constants.getHoursPerDay());
                    fm.icelink.Constants.fm_icelink_Constants___secondsPerHour = (fm.icelink.Constants.getSecondsPerMinute() * fm.icelink.Constants.getMinutesPerHour());
                    fm.icelink.Constants.fm_icelink_Constants___secondsPerDay = (fm.icelink.Constants.getSecondsPerHour() * fm.icelink.Constants.getHoursPerDay());
                    fm.icelink.Constants.fm_icelink_Constants___minutesPerDay = (fm.icelink.Constants.getMinutesPerHour() * fm.icelink.Constants.getHoursPerDay());
                }
                fm.icelink.Constants.__fmicelinkConstantsInitialized = true;
            };
            /** @internal */
            Constants.__fmicelinkConstantsInitialized = false;
            return Constants;
        }());
        icelink.Constants = Constants;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A data buffer stream.
         </div>
    
        */
        var DataBufferStream = /** @class */ (function () {
            function DataBufferStream() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isNumber(arguments[0]))) {
                    var dataBufferSize = __arguments[0];
                    // chained constructor: DataBufferStream.call(this, dataBufferSize, false);
                    __arguments = new Array(2);
                    __arguments[0] = dataBufferSize;
                    __arguments[1] = false;
                    {
                        var dataBufferSize_1 = __arguments[0];
                        var littleEndian = __arguments[1];
                        // chained constructor: DataBufferStream.call(this, fm.icelink.DataBuffer.allocate(dataBufferSize, littleEndian));
                        __arguments = new Array(1);
                        __arguments[0] = fm.icelink.DataBuffer.allocate(dataBufferSize_1, littleEndian);
                        {
                            var buffer = __arguments[0];
                            //super();
                            this.fmicelinkDataBufferStreamInit();
                            this.__buffer = buffer;
                        }
                    }
                }
                else if (__arguments.length == 2) {
                    var dataBufferSize = __arguments[0];
                    var littleEndian = __arguments[1];
                    // chained constructor: DataBufferStream.call(this, fm.icelink.DataBuffer.allocate(dataBufferSize, littleEndian));
                    __arguments = new Array(1);
                    __arguments[0] = fm.icelink.DataBuffer.allocate(dataBufferSize, littleEndian);
                    {
                        var buffer = __arguments[0];
                        //super();
                        this.fmicelinkDataBufferStreamInit();
                        this.__buffer = buffer;
                    }
                }
                else if (__arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = __arguments[0];
                    //super();
                    this.fmicelinkDataBufferStreamInit();
                    this.__buffer = buffer;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DataBufferStream.prototype.getTypeString = function () {
                return '[fm.icelink.DataBufferStream]';
            };
            DataBufferStream.prototype.fmicelinkDataBufferStreamInit = function () {
                this.__bitPosition = 0;
                this.__position = 0;
            };
            /**<span id='method-fm.icelink.DataBufferStream-getAvailable'>&nbsp;</span>**/
            /**
             <div>
             Gets the available bytes to be read from the DataBuffer.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.getAvailable = function () {
                if (arguments.length == 0) {
                    return (this.getLength() - this.__position);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-getBitPosition'>&nbsp;</span>**/
            /**
             <div>
             Gets the bit position within a byte.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.getBitPosition = function () {
                if (arguments.length == 0) {
                    return this.__bitPosition;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-getBuffer'>&nbsp;</span>**/
            /**
             <div>
             Gets the buffer.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBufferStream.prototype.getBuffer = function () {
                if (arguments.length == 0) {
                    return this.__buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-getLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the buffer length.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.getLength = function () {
                if (arguments.length == 0) {
                    return this.__buffer.getLength();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-getPosition'>&nbsp;</span>**/
            /**
             <div>
             Gets the position within the stream.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.getPosition = function () {
                if (arguments.length == 0) {
                    return this.__position;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-nextByte'>&nbsp;</span>**/
            /**
             <div>
             Resets the bit count to 0 and advances to the next byte.
             </div>
    
    
            @return {void}
            */
            DataBufferStream.prototype.nextByte = function () {
                if (arguments.length == 0) {
                    this.__bitPosition = 0;
                    this.__position++;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-peek'>&nbsp;</span>**/
            /**
             <div>
             Reads an 8-bit value from the DataBuffer without advancing the Position.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.peek = function () {
                if (arguments.length == 0) {
                    return this.__buffer.read8(this.getPosition());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read'>&nbsp;</span>**/
            /**
             <div>
             Reads the specified length from the DataBuffer and advances the position by the length.
             </div>
    
            @param {number} length The length.
            @return {fm.icelink.DataBuffer}
            */
            DataBufferStream.prototype.read = function (length) {
                if (arguments.length == 1) {
                    var buffer = this.__buffer.subset(this.__position, length);
                    this.__position = (this.__position + length);
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read1'>&nbsp;</span>**/
            /**
             <div>
             Read a single bit and advance the bit position by 1.
             </div>
    
    
            @return {boolean}
            */
            DataBufferStream.prototype.read1 = function () {
                if (arguments.length == 0) {
                    var flag = this.__buffer.read1(this.__position, this.__bitPosition);
                    this.__bitPosition = (this.__bitPosition + 1);
                    if ((fm.icelink.Global.equals(this.__bitPosition, 8))) {
                        this.__position++;
                        this.__bitPosition = 0;
                    }
                    return flag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read15'>&nbsp;</span>**/
            /**
             <div>
             Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read15 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read15(this.__position, this.__bitPosition);
                    this.__position++;
                    this.__bitPosition = (this.__bitPosition + 7);
                    if ((this.__bitPosition >= 8)) {
                        this.__position++;
                        this.__bitPosition = (this.__bitPosition - 8);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read16'>&nbsp;</span>**/
            /**
             <div>
             Reads an 16-bit value from the DataBuffer and advances the Position by 2.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read16 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read16(this.__position);
                    this.__position = (this.__position + 2);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read2'>&nbsp;</span>**/
            /**
             <div>
             Read a 2-bit value and advance the BitPosition by 2.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read2 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read2(this.__position, this.__bitPosition);
                    this.__bitPosition = (this.__bitPosition + 2);
                    if ((this.__bitPosition >= 8)) {
                        this.__position++;
                        this.__bitPosition = (this.__bitPosition - 8);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read24'>&nbsp;</span>**/
            /**
             <div>
             Reads an 24-bit value from the DataBuffer and advances the Position by 3.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read24 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read24(this.__position);
                    this.__position = (this.__position + 3);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read3'>&nbsp;</span>**/
            /**
             <div>
             Read a 3-bit value and advance the BitPosition by 3.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read3 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read3(this.__position, this.__bitPosition);
                    this.__bitPosition = (this.__bitPosition + 3);
                    if ((this.__bitPosition >= 8)) {
                        this.__position++;
                        this.__bitPosition = (this.__bitPosition - 8);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read32'>&nbsp;</span>**/
            /**
             <div>
             Reads an 32-bit value from the DataBuffer and advances the Position by 4.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read32 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read32(this.__position);
                    this.__position = (this.__position + 4);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read4'>&nbsp;</span>**/
            /**
             <div>
             Read a 4-bit value and advance the BitPosition by 4.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read4 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read4(this.__position, this.__bitPosition);
                    this.__bitPosition = (this.__bitPosition + 4);
                    if ((this.__bitPosition >= 8)) {
                        this.__position++;
                        this.__bitPosition = (this.__bitPosition - 8);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read40'>&nbsp;</span>**/
            /**
             <div>
             Reads an 40-bit value from the DataBuffer and advances the Position by 5.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read40 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read40(this.__position);
                    this.__position = (this.__position + 5);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read48'>&nbsp;</span>**/
            /**
             <div>
             Reads an 48-bit value from the DataBuffer and advances the Position by 6.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read48 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read48(this.__position);
                    this.__position = (this.__position + 6);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read56'>&nbsp;</span>**/
            /**
             <div>
             Reads an 56-bit value from the DataBuffer and advances the Position by 7.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read56 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read56(this.__position);
                    this.__position = (this.__position + 7);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read64'>&nbsp;</span>**/
            /**
             <div>
             Reads an 64-bit value from the DataBuffer and advances the Position by 8.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read64 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read64(this.__position);
                    this.__position = (this.__position + 8);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read7'>&nbsp;</span>**/
            /**
             <div>
             Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read7 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read7(this.__position, this.__bitPosition);
                    this.__bitPosition = (this.__bitPosition + 7);
                    if ((this.__bitPosition >= 8)) {
                        this.__position++;
                        this.__bitPosition = (this.__bitPosition - 8);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-read8'>&nbsp;</span>**/
            /**
             <div>
             Reads an 8-bit value from the DataBuffer and advances the Position by 1.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.read8 = function () {
                if (arguments.length == 0) {
                    var num = this.__buffer.read8(this.__position);
                    this.__position++;
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-readByte'>&nbsp;</span>**/
            /**
             <div>
             Reads a single byte from the stream and advances the Position by 1.
             </div>
    
    
            @return {number}
            */
            DataBufferStream.prototype.readByte = function () {
                if (arguments.length == 0) {
                    return this.read8();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-readBytes'>&nbsp;</span>**/
            /**
             <div>
             Read a specified number of bytes from the DataBuffer and advance the Position by that number.
             </div>
    
            @param {number} length The number of bytes to read.
            @return {Uint8Array}
            */
            DataBufferStream.prototype.readBytes = function (length) {
                if (arguments.length == 1) {
                    var buffer = this.__buffer.subset(this.__position, length).toArray();
                    this.__position = (this.__position + length);
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-setBitPosition'>&nbsp;</span>**/
            /**
             <div>
             Sets the bit position within a byte.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            DataBufferStream.prototype.setBitPosition = function (value) {
                if (arguments.length == 1) {
                    this.__bitPosition = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-setPosition'>&nbsp;</span>**/
            /**
             <div>
             Sets the position within the stream.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            DataBufferStream.prototype.setPosition = function (value) {
                if (arguments.length == 1) {
                    this.__position = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-write'>&nbsp;</span>**/
            /**
             <div>
             Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer The buffer.
            @return {fm.icelink.DataBufferStream}
            */
            DataBufferStream.prototype.write = function (buffer) {
                if (arguments.length == 1) {
                    this.__buffer.write(buffer, this.__position);
                    this.__position = (this.__position + buffer.getLength());
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-write16'>&nbsp;</span>**/
            /**
             <div>
             Writes an 16-bit value to the DataBuffer and advances the Position by 2.
             </div>
    
            @param {number} value The value.
            @return {fm.icelink.DataBufferStream}
            */
            DataBufferStream.prototype.write16 = function (value) {
                if (arguments.length == 1) {
                    this.__buffer.write16(value, this.__position);
                    this.__position = (this.__position + 2);
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-write32'>&nbsp;</span>**/
            /**
             <div>
             Writes an 32-bit value to the DataBuffer and advances the Position by 4.
             </div>
    
            @param {number} value The value.
            @return {fm.icelink.DataBufferStream}
            */
            DataBufferStream.prototype.write32 = function (value) {
                if (arguments.length == 1) {
                    this.__buffer.write32(value, this.__position);
                    this.__position = (this.__position + 4);
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-write64'>&nbsp;</span>**/
            /**
             <div>
             Writes an 64-bit value to the DataBuffer and advances the Position by 8.
             </div>
    
            @param {number} value The value.
            @return {fm.icelink.DataBufferStream}
            */
            DataBufferStream.prototype.write64 = function (value) {
                if (arguments.length == 1) {
                    this.__buffer.write64(value, this.__position);
                    this.__position = (this.__position + 8);
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferStream-write8'>&nbsp;</span>**/
            /**
             <div>
             Writes an 8-bit value to the DataBuffer and advances the Position by 1.
             </div>
    
            @param {number} value The value.
            @return {fm.icelink.DataBufferStream}
            */
            DataBufferStream.prototype.write8 = function (value) {
                if (arguments.length == 1) {
                    this.__buffer.write8(value, this.__position);
                    this.__position++;
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBufferStream.prototype.writeBytes = function () {
                if (arguments.length == 1) {
                    var data = arguments[0];
                    return this.writeBytes(data, 0, data.length);
                }
                else if (arguments.length == 3) {
                    var data = arguments[0];
                    var index = arguments[1];
                    var length_19 = arguments[2];
                    if ((this.getAvailable() < length_19)) {
                        this.getBuffer().resize((this.getBuffer().getLength() + length_19));
                    }
                    this.__buffer.writeBytes(data, index, length_19, this.__position);
                    this.__position = (this.__position + length_19);
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataBufferStream;
        }());
        icelink.DataBufferStream = DataBufferStream;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Binary data buffer implementation
         </div>
    
        */
        var DataBuffer = /** @class */ (function () {
            function DataBuffer() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkDataBufferInit();
                }
                else if (__arguments.length == 4) {
                    var data = __arguments[0];
                    var index = __arguments[1];
                    var length_20 = __arguments[2];
                    var littleEndian = __arguments[3];
                    //super();
                    this.fmicelinkDataBufferInit();
                    this.setInnerData(data);
                    this.setIndex(index);
                    this.setLength(length_20);
                    this.setLittleEndian(littleEndian);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DataBuffer.prototype.getTypeString = function () {
                return '[fm.icelink.DataBuffer]';
            };
            DataBuffer.prototype.fmicelinkDataBufferInit = function () {
                this._index = 0;
                this._length = 0;
                this._littleEndian = false;
            };
            DataBuffer.allocate = function () {
                if (arguments.length == 3) {
                    var count = arguments[0];
                    var littleEndian = arguments[1];
                    var pooled = arguments[2];
                    return fm.icelink.DataBuffer.wrap(new Uint8Array(count), littleEndian);
                }
                else if (arguments.length == 1) {
                    var count = arguments[0];
                    return fm.icelink.DataBuffer.allocate(count, false);
                }
                else if (arguments.length == 2) {
                    var count = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.DataBuffer.wrap(new Uint8Array(count), littleEndian);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-areEqual'>&nbsp;</span>**/
            /**
             <div>
             Tests if the two buffers have equal contents.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer1 First buffer to test.
            @param {fm.icelink.DataBuffer} buffer2 Second buffer to test.
            @return {boolean}
            */
            DataBuffer.areEqual = function (buffer1, buffer2) {
                if (arguments.length == 2) {
                    if ((!fm.icelink.Global.equals(buffer1.getLength(), buffer2.getLength()))) {
                        return false;
                    }
                    for (var i = 0; (i < buffer1.getLength()); i++) {
                        if ((!fm.icelink.Global.equals(buffer1.read8(i), buffer2.read8(i)))) {
                            return false;
                        }
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.check = function () {
                if (arguments.length == 1) {
                    var condition = arguments[0];
                    fm.icelink.DataBuffer.check(condition, "Condition failed.");
                }
                else if (arguments.length == 2) {
                    var condition = arguments[0];
                    var message = arguments[1];
                    if (!condition) {
                        throw new fm.icelink.Exception(message);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataBuffer.checkSequenceEqual = function (test, actual) {
                if (arguments.length == 2) {
                    if ((!fm.icelink.Global.equals(test.length, actual.length))) {
                        throw new fm.icelink.Exception("Sequence not equal.");
                    }
                    for (var i = 0; (i < test.length); i++) {
                        if ((!fm.icelink.Global.equals(test[i], actual[i]))) {
                            throw new fm.icelink.Exception("Seqeunce not equal.");
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} dataBufferJson The data buffer JSON.
            @return {fm.icelink.DataBuffer}
            */
            DataBuffer.fromJson = function (dataBufferJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(dataBufferJson, function () {
                        return new fm.icelink.DataBuffer();
                    }, function (dataBuffer, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "data"))) {
                                if ((fm.icelink.Global.equals(str, "index"))) {
                                    dataBuffer.setIndex(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str, "length"))) {
                                        dataBuffer.setLength(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str, "littleEndian"))) {
                                            dataBuffer.setLittleEndian(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                                        }
                                    }
                                }
                            }
                            else {
                                dataBuffer.setInnerData(fm.icelink.Base64.decode(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an array of instances from JSON.
             </div>
    
            @param {string} dataBuffersJson The data buffers JSON.
            @return {fm.icelink.DataBuffer[]}
            */
            DataBuffer.fromJsonArray = function (dataBuffersJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(dataBuffersJson, fm.icelink.DataBuffer.fromJson.bind(fm.icelink.DataBuffer));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getEmpty'>&nbsp;</span>**/
            /**
             <div>
             Gets an empty data buffer.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBuffer.getEmpty = function () {
                if (arguments.length == 0) {
                    return fm.icelink.DataBuffer.allocate(0, false);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.DataBuffer} dataBuffer The data buffer.
            @return {string}
            */
            DataBuffer.toJson = function (dataBuffer) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(dataBuffer, function (obj, jsonObject) {
                        var b = dataBuffer.toArray();
                        jsonObject["data"] = fm.icelink.Base64.encode(b);
                        jsonObject["index"] = fm.icelink.JsonSerializer.serializeInteger(0);
                        jsonObject["length"] = fm.icelink.JsonSerializer.serializeInteger(b.length);
                        jsonObject["littleEndian"] = fm.icelink.JsonSerializer.serializeBoolean(dataBuffer.getLittleEndian());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of instances to JSON.
             </div>
    
            @param {fm.icelink.DataBuffer[]} dataBuffers The data buffers.
            @return {string}
            */
            DataBuffer.toJsonArray = function (dataBuffers) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(dataBuffers, fm.icelink.DataBuffer.toJson.bind(fm.icelink.DataBuffer));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.wrap = function () {
                if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isBoolean(arguments[1]))) {
                    var data = arguments[0];
                    var littleEndian = arguments[1];
                    return fm.icelink.DataBuffer.wrap(data, 0, -1, littleEndian);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[1]) || icelink.Util.isNumber(arguments[1]))) {
                    var data = arguments[0];
                    var index = arguments[1];
                    return fm.icelink.DataBuffer.wrap(data, index, -1, false);
                }
                else if (arguments.length == 1) {
                    var data = arguments[0];
                    return fm.icelink.DataBuffer.wrap(data, 0, -1, false);
                }
                else if (arguments.length == 3 && (icelink.Util.isNullOrUndefined(arguments[2]) || icelink.Util.isNumber(arguments[2]))) {
                    var data = arguments[0];
                    var index = arguments[1];
                    var length_21 = arguments[2];
                    return fm.icelink.DataBuffer.wrap(data, index, length_21, false);
                }
                else if (arguments.length == 3 && (icelink.Util.isNullOrUndefined(arguments[2]) || icelink.Util.isBoolean(arguments[2]))) {
                    var data = arguments[0];
                    var index = arguments[1];
                    var littleEndian = arguments[2];
                    return fm.icelink.DataBuffer.wrap(data, index, -1, littleEndian);
                }
                else if (arguments.length == 4) {
                    var data = arguments[0];
                    var index = arguments[1];
                    var length_22 = arguments[2];
                    var littleEndian = arguments[3];
                    if ((fm.icelink.Global.equals(data, null))) {
                        return null;
                    }
                    if ((index < 0)) {
                        return null;
                    }
                    if ((length_22 < 0)) {
                        length_22 = (data.length - index);
                    }
                    return new fm.icelink.DataBuffer(data, index, length_22, littleEndian);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-and'>&nbsp;</span>**/
            /**
             <div>
             Performs a bitwise "and" operation on a value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @return {boolean}
            */
            DataBuffer.prototype.and = function (value, offset) {
                if (arguments.length == 2) {
                    return this.write8((this.read8(offset) & value), offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.append = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObjectType(arguments[0][0], '[fm.icelink.DataBuffer]')))))) {
                    var buffers = arguments[0];
                    if (((!fm.icelink.Global.equals(buffers, null)) && (buffers.length > 0))) {
                        var length_23 = this.getLength();
                        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
                            var buffer = buffers_1[_i];
                            length_23 = (length_23 + buffer.getLength());
                        }
                        if ((length_23 > this.getLength())) {
                            var offset = this.getLength();
                            this.resize(length_23);
                            for (var _a = 0, buffers_2 = buffers; _a < buffers_2.length; _a++) {
                                var buffer = buffers_2[_a];
                                this.write(buffer, offset);
                                offset = (offset + buffer.getLength());
                            }
                        }
                    }
                    return this;
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = arguments[0];
                    if (((!fm.icelink.Global.equals(buffer, null)) && (buffer.getLength() > 0))) {
                        var newLength = (this.getLength() + buffer.getLength());
                        if ((newLength > this.getLength())) {
                            var length_24 = this.getLength();
                            this.resize(newLength);
                            this.write(buffer, length_24);
                            length_24 = (length_24 + buffer.getLength());
                        }
                    }
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.clone = function () {
                if (arguments.length == 1) {
                    var littleEndian = arguments[0];
                    return this.subset(0);
                }
                else if (arguments.length == 0) {
                    return this.clone(this.getLittleEndian());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-copy'>&nbsp;</span>**/
            /**
             <div>
             Copies of this instance.
             </div>
    
            @return {fm.icelink.DataBuffer}
            */
            DataBuffer.prototype.copy = function () {
                if (arguments.length == 0) {
                    return fm.icelink.DataBuffer.wrap(this.toArray());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-free'>&nbsp;</span>**/
            /**
             <div>
             Decrements the retain count by one and returns the Buffer to the pool if zero.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBuffer.prototype.free = function () {
                if (arguments.length == 0) {
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getData'>&nbsp;</span>**/
            /**
             <div>
             Gets the data.
             </div>
    
    
            @return {Uint8Array}
            */
            DataBuffer.prototype.getData = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.getInnerData(), null))) {
                        throw new fm.icelink.Exception("This data buffer has been invalidated.");
                    }
                    return this.getInnerData();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getIndex'>&nbsp;</span>**/
            /**
             <div>
             Gets the index.
             </div>
    
    
            @return {number}
            */
            DataBuffer.prototype.getIndex = function () {
                if (arguments.length == 0) {
                    return this._index;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getInnerData'>&nbsp;</span>**/
            /**
             <div>
             Gets backing data buffer.
             </div>
    
    
            @return {Uint8Array}
            */
            DataBuffer.prototype.getInnerData = function () {
                if (arguments.length == 0) {
                    return this._innerData;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getIsPooled'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this DataBuffer is from a pool.
             </div>
    
    
            @return {boolean}
            */
            DataBuffer.prototype.getIsPooled = function () {
                if (arguments.length == 0) {
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getIsSubset'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this DataBuffer is a subset.
             </div>
    
    
            @return {boolean}
            */
            DataBuffer.prototype.getIsSubset = function () {
                if (arguments.length == 0) {
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the length.
             </div>
    
    
            @return {number}
            */
            DataBuffer.prototype.getLength = function () {
                if (arguments.length == 0) {
                    return this._length;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-getLittleEndian'>&nbsp;</span>**/
            /**
             <div>
             Gets whether `fm.icelink.dataBuffer.data` is little-endian.
             </div>
    
    
            @return {boolean}
            */
            DataBuffer.prototype.getLittleEndian = function () {
                if (arguments.length == 0) {
                    return this._littleEndian;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-keep'>&nbsp;</span>**/
            /**
             <div>
             Increment the retain count by one.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBuffer.prototype.keep = function () {
                if (arguments.length == 0) {
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-or'>&nbsp;</span>**/
            /**
             <div>
             Performs a bitwise "or" operation on a value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @return {boolean}
            */
            DataBuffer.prototype.or = function (value, offset) {
                if (arguments.length == 2) {
                    return this.write8((this.read8(offset) | value), offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.prepend = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = arguments[0];
                    var length_25 = buffer.getLength();
                    if ((length_25 <= this.getIndex())) {
                        this.setIndex((this.getIndex() - length_25));
                        this.setLength((this.getLength() + length_25));
                    }
                    else {
                        this.resize((this.getLength() + length_25), 0);
                    }
                    var offset = 0;
                    this.write(buffer, offset);
                    offset = (offset + buffer.getLength());
                    return this;
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObjectType(arguments[0][0], '[fm.icelink.DataBuffer]')))))) {
                    var buffers = arguments[0];
                    if (((!fm.icelink.Global.equals(buffers, null)) && (buffers.length > 0))) {
                        var num = 0;
                        for (var _i = 0, buffers_3 = buffers; _i < buffers_3.length; _i++) {
                            var buffer = buffers_3[_i];
                            num = (num + buffer.getLength());
                        }
                        if ((num <= this.getIndex())) {
                            this.setIndex((this.getIndex() - num));
                            this.setLength((this.getLength() + num));
                        }
                        else {
                            this.resize((this.getLength() + num), 0);
                        }
                        var offset = 0;
                        for (var _a = 0, buffers_4 = buffers; _a < buffers_4.length; _a++) {
                            var buffer = buffers_4[_a];
                            this.write(buffer, offset);
                            offset = (offset + buffer.getLength());
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read1'>&nbsp;</span>**/
            /**
             <div>
             Reads a 1-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.read1 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes1(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read10'>&nbsp;</span>**/
            /**
             <div>
             Reads a 10-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bitoffset.
            @return {number}
            */
            DataBuffer.prototype.read10 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes10(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read10Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 10-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read10Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read10(offset, bitOffset);
                    if ((num > 511)) {
                        num = (num - 1023);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read11'>&nbsp;</span>**/
            /**
             <div>
             Reads a 11-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bitoffset.
            @return {number}
            */
            DataBuffer.prototype.read11 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes11(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read11Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 11-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read11Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read11(offset, bitOffset);
                    if ((num > 1023)) {
                        num = (num - 2047);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read12'>&nbsp;</span>**/
            /**
             <div>
             Reads a 12-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bitoffset.
            @return {number}
            */
            DataBuffer.prototype.read12 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes12(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read12Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 12-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read12Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read12(offset, bitOffset);
                    if ((num > 2047)) {
                        num = (num - 4095);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read13'>&nbsp;</span>**/
            /**
             <div>
             Reads a 13-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bitoffset.
            @return {number}
            */
            DataBuffer.prototype.read13 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes13(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read13Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 13-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read13Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read13(offset, bitOffset);
                    if ((num > 4095)) {
                        num = (num - 8191);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read14'>&nbsp;</span>**/
            /**
             <div>
             Reads a 14-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read14 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes14(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read14Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 14-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read14Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read14(offset, bitOffset);
                    if ((num > 8191)) {
                        num = (num - 16383);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read15'>&nbsp;</span>**/
            /**
             <div>
             Reads a 15-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read15 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes15(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read15Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 15-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read15Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read15(offset, bitOffset);
                    if ((num > 16383)) {
                        num = (num - 32767);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read16 = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 2));
                    return this.read16(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes16(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read16Signed = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 2));
                    return this.read16Signed(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read16(offset);
                    if ((num > 32767)) {
                        num = (num - 65535);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read17'>&nbsp;</span>**/
            /**
             <div>
             Reads a 17-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read17 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes17(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read17Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 17-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read17Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read17(offset, bitOffset);
                    if ((num > 65535)) {
                        num = (num - 131071);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read18'>&nbsp;</span>**/
            /**
             <div>
             Reads an 18-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read18 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes18(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read18Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads an 18-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read18Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read18(offset, bitOffset);
                    if ((num > 131071)) {
                        num = (num - 262143);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read19'>&nbsp;</span>**/
            /**
             <div>
             Reads a 19-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read19 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes19(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read19Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 19-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read19Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read19(offset, bitOffset);
                    if ((num > 262143)) {
                        num = (num - 524287);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read2'>&nbsp;</span>**/
            /**
             <div>
             Reads a 2-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read2 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes2(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read20'>&nbsp;</span>**/
            /**
             <div>
             Reads a 20-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read20 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes20(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read20Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 20-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read20Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read20(offset, bitOffset);
                    if ((num > 524287)) {
                        num = (num - 1048575);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read21'>&nbsp;</span>**/
            /**
             <div>
             Reads a 21-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read21 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes21(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read21Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 21-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read21Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read21(offset, bitOffset);
                    if ((num > 1048575)) {
                        num = (num - 2097151);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read22'>&nbsp;</span>**/
            /**
             <div>
             Reads a 22-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read22 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes22(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read22Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 22-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read22Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read22(offset, bitOffset);
                    if ((num > 2097151)) {
                        num = (num - 4194303);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read23'>&nbsp;</span>**/
            /**
             <div>
             Reads a 23-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read23 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes23(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read23Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 23-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read23Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read22(offset, bitOffset);
                    if ((num > 4194303)) {
                        num = (num - 8388607);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read24 = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes24(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 3));
                    return this.read24(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read24Signed = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read24(offset);
                    if ((num > 8388607)) {
                        num = (num - 16777215);
                    }
                    return num;
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 3));
                    return this.read24Signed(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read2Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 2-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read2Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read4(offset, bitOffset);
                    if ((num > 1)) {
                        num = (num - 3);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read3'>&nbsp;</span>**/
            /**
             <div>
             Reads a 3-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read3 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes3(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read32 = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 4));
                    return this.read32(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes32(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read32Signed = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read32(offset);
                    if ((num > 2147483647)) {
                        num = (num - 4294967295);
                    }
                    return num;
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 4));
                    return this.read32Signed(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read3Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 3-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read3Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read4(offset, bitOffset);
                    if ((num > 3)) {
                        num = (num - 7);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read4'>&nbsp;</span>**/
            /**
             <div>
             Reads a 4-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read4 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes4(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read40 = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 5));
                    return this.read40(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes40(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read40Signed = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read40(offset);
                    if ((num > 549755813887)) {
                        num = (num - 1099511627775);
                    }
                    return num;
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 5));
                    return this.read40Signed(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read48 = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes48(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 6));
                    return this.read48(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read48Signed = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 6));
                    return this.read48Signed(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read48(offset);
                    if ((num > 140737488355327)) {
                        num = (num - 281474976710655);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read4Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 4-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read4Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read4(offset, bitOffset);
                    if ((num > 7)) {
                        num = (num - 15);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read5'>&nbsp;</span>**/
            /**
             <div>
             Reads a 5-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read5 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes5(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read56 = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes56(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 7));
                    return this.read56(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read56Signed = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 7));
                    return this.read56Signed(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read56(offset);
                    if ((num > 36028797018963967)) {
                        num = (num - 72057594037927935);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read5Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 5-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read5Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read5(offset, bitOffset);
                    if ((num > 15)) {
                        num = (num - 31);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read6'>&nbsp;</span>**/
            /**
             <div>
             Reads a 6-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read6 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes6(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read64 = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes64(this.getData(), (this.getIndex() + offset), this.getLittleEndian());
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 8));
                    return this.read64(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read64Signed = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 8));
                    return this.read64Signed(offset);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return this.read64(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read6Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 6-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read6Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read6(offset, bitOffset);
                    if ((num > 31)) {
                        num = (num - 63);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read7'>&nbsp;</span>**/
            /**
             <div>
             Reads a 7-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read7 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes7(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read7Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 7-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read7Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read7(offset, bitOffset);
                    if ((num > 63)) {
                        num = (num - 127);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read8 = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Binary.fromBytes8(this.getData(), (this.getIndex() + offset));
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 1));
                    return this.read8(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.read8Signed = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    var num = this.read8(offset);
                    if ((num > 127)) {
                        num = (num - 255);
                    }
                    return num;
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var offsetPlus = arguments[1];
                    offsetPlus.setValue((offset + 1));
                    return this.read8Signed(offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read9'>&nbsp;</span>**/
            /**
             <div>
             Reads a 9-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bitoffset.
            @return {number}
            */
            DataBuffer.prototype.read9 = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    return fm.icelink.Binary.fromBytes9(this.getData(), (this.getIndex() + offset), bitOffset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-read9Signed'>&nbsp;</span>**/
            /**
             <div>
             Reads a 9-bit signed value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {number}
            */
            DataBuffer.prototype.read9Signed = function (offset, bitOffset) {
                if (arguments.length == 2) {
                    var num = this.read9(offset, bitOffset);
                    if ((num > 255)) {
                        num = (num - 511);
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.readUtf8String = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var length_26 = arguments[1];
                    return fm.icelink.Encoding.getUtf8().getString(this.getData(), (this.getIndex() + offset), length_26);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return fm.icelink.Encoding.getUtf8().getString(this.getData(), (this.getIndex() + offset), ((this.getLength() - this.getIndex()) - offset));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.resize = function () {
                if (arguments.length == 3) {
                    var newLength = arguments[0];
                    var offset = arguments[1];
                    var setZero = arguments[2];
                    var length_27 = (newLength - this.getLength());
                    if ((length_27 < 0)) {
                        length_27 = -length_27;
                        if ((offset < 0)) {
                            if (setZero) {
                                fm.icelink.BitAssistant.set(this.getData(), newLength, length_27, 0);
                            }
                        }
                        else {
                            if ((offset <= this.getIndex())) {
                                if (setZero) {
                                    fm.icelink.BitAssistant.set(this.getData(), this.getIndex(), length_27, 0);
                                }
                                this.setIndex((this.getIndex() + length_27));
                            }
                            else {
                                if ((offset >= this.getIndex())) {
                                    var num2 = (offset - this.getIndex());
                                    var num3 = ((this.getLength() - offset) - length_27);
                                    if ((num2 < num3)) {
                                        fm.icelink.BitAssistant.copy(this.getData(), this.getIndex(), this.getData(), (this.getIndex() + length_27), num2);
                                        if (setZero) {
                                            fm.icelink.BitAssistant.set(this.getData(), this.getIndex(), length_27, 0);
                                        }
                                        this.setIndex((this.getIndex() + length_27));
                                    }
                                    else {
                                        fm.icelink.BitAssistant.copy(this.getData(), (this.getLength() - num3), this.getData(), (this.getIndex() + num2), num3);
                                        if (setZero) {
                                            fm.icelink.BitAssistant.set(this.getData(), newLength, length_27, 0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((length_27 > 0)) {
                            var index = void 0;
                            var num5 = void 0;
                            var buffer = void 0;
                            if ((offset >= this.getIndex())) {
                                if (((this.getIndex() + newLength) < this.getData().length)) {
                                    index = (this.getIndex() + offset);
                                    num5 = ((this.getIndex() + offset) + length_27);
                                    var num6 = (this.getLength() - offset);
                                    fm.icelink.BitAssistant.copy(this.getData(), index, this.getData(), num5, num6);
                                    if (setZero) {
                                        fm.icelink.BitAssistant.set(this.getData(), index, length_27, 0);
                                    }
                                }
                                else {
                                    if (this.getIsPooled()) {
                                        throw new fm.icelink.Exception("Cannot resize pooled data buffer.");
                                    }
                                    buffer = new Uint8Array((this.getIndex() + newLength));
                                    fm.icelink.BitAssistant.copy(this.getData(), this.getIndex(), buffer, this.getIndex(), offset);
                                    index = (this.getIndex() + offset);
                                    num5 = ((this.getIndex() + offset) + length_27);
                                    var num7 = (this.getLength() - offset);
                                    fm.icelink.BitAssistant.copy(this.getData(), index, buffer, num5, num7);
                                    this.setInnerData(buffer);
                                }
                            }
                            else {
                                if ((offset < 0)) {
                                    if (((this.getIndex() + newLength) <= this.getData().length)) {
                                        if (setZero) {
                                            fm.icelink.BitAssistant.set(this.getData(), this.getLength(), length_27, 0);
                                        }
                                    }
                                    else {
                                        if (this.getIsPooled()) {
                                            throw new fm.icelink.Exception("Cannot resize pooled data buffer.");
                                        }
                                        buffer = new Uint8Array((this.getIndex() + newLength));
                                        fm.icelink.BitAssistant.copy(this.getData(), this.getIndex(), buffer, this.getIndex(), this.getLength());
                                        this.setInnerData(buffer);
                                    }
                                }
                                else {
                                    if ((((this.getIndex() - offset) + newLength) < this.getData().length)) {
                                        this.setIndex(offset);
                                    }
                                    else {
                                        if (this.getIsPooled()) {
                                            throw new fm.icelink.Exception("Cannot resize pooled data buffer.");
                                        }
                                        buffer = new Uint8Array(newLength);
                                        index = this.getIndex();
                                        num5 = length_27;
                                        fm.icelink.BitAssistant.copy(this.getData(), index, buffer, num5, this.getLength());
                                        this.setInnerData(buffer);
                                        this.setIndex(0);
                                    }
                                }
                            }
                        }
                    }
                    this.setLength(newLength);
                }
                else if (arguments.length == 2) {
                    var newLength = arguments[0];
                    var offset = arguments[1];
                    this.resize(newLength, offset, false);
                }
                else if (arguments.length == 1) {
                    var newLength = arguments[0];
                    this.resize(newLength, -1);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-sequenceEquals'>&nbsp;</span>**/
            /**
             <div>
             Compares a data buffer for equality.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer The data buffer.
            @return {boolean} true if the sequences are equal; otherwise, false.
     
            */
            DataBuffer.prototype.sequenceEquals = function (buffer) {
                if (arguments.length == 1) {
                    return fm.icelink.BitAssistant.sequencesAreEqual(this.getData(), this.getIndex(), buffer.getData(), buffer.getIndex(), this.getLength());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-sequenceEqualsConstantTime'>&nbsp;</span>**/
            /**
             <div>
             Compares a data buffer for equality in constant time.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer The buffer.
            @return {boolean} true if the sequences are equal; otherwise, false.
     
            */
            DataBuffer.prototype.sequenceEqualsConstantTime = function (buffer) {
                if (arguments.length == 1) {
                    return fm.icelink.BitAssistant.sequencesAreEqualConstantTime(this.getData(), this.getIndex(), buffer.getData(), buffer.getIndex(), this.getLength());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.set = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    fm.icelink.BitAssistant.set(this.getData(), (this.getIndex() + offset), (this.getLength() - offset), value);
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var length_28 = arguments[2];
                    fm.icelink.BitAssistant.set(this.getData(), (this.getIndex() + offset), length_28, value);
                }
                else if (arguments.length == 1) {
                    var value = arguments[0];
                    this.set(value, 0, this.getLength());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-setIndex'>&nbsp;</span>**/
            /**
             <div>
             Sets the index.
             </div>
    
    
            @param {number} value
            @return {void}
            @internal
    
            */
            DataBuffer.prototype.setIndex = function (value) {
                if (arguments.length == 1) {
                    this._index = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-setInnerData'>&nbsp;</span>**/
            /**
             <div>
             Sets backing data buffer.
             </div>
    
    
            @param {Uint8Array} value
            @return {void}
            */
            DataBuffer.prototype.setInnerData = function (value) {
                if (arguments.length == 1) {
                    this._innerData = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-setLength'>&nbsp;</span>**/
            /**
             <div>
             Sets the length.
             </div>
    
    
            @param {number} value
            @return {void}
            @internal
    
            */
            DataBuffer.prototype.setLength = function (value) {
                if (arguments.length == 1) {
                    this._length = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-setLittleEndian'>&nbsp;</span>**/
            /**
             <div>
             Sets whether `fm.icelink.dataBuffer.data` is little-endian.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            DataBuffer.prototype.setLittleEndian = function (value) {
                if (arguments.length == 1) {
                    this._littleEndian = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.subset = function () {
                if (arguments.length == 1) {
                    var offset = arguments[0];
                    return this.subset(offset, (this.getLength() - offset));
                }
                else if (arguments.length == 2) {
                    var offset = arguments[0];
                    var length_29 = arguments[1];
                    if ((((offset + length_29) > this.getLength()) || (length_29 < 0))) {
                        return null;
                    }
                    if (this.getIsPooled()) {
                        return new fm.icelink.DataBufferSubset(this, (this.getIndex() + offset), length_29);
                    }
                    return new fm.icelink.DataBuffer(this.getData(), (this.getIndex() + offset), length_29, this.getLittleEndian());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-toArray'>&nbsp;</span>**/
            /**
             <div>
             Converts this instance to an array of bytes.
             </div>
    
    
            @return {Uint8Array}
            */
            DataBuffer.prototype.toArray = function () {
                if (arguments.length == 0) {
                    var destination = new Uint8Array(this.getLength());
                    fm.icelink.BitAssistant.copy(this.getData(), this.getIndex(), destination, 0, this.getLength());
                    return destination;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-toHexString'>&nbsp;</span>**/
            /**
             <div>
             Converts this instance to a hexadecimal string.
             </div>
    
    
            @return {string}
            */
            DataBuffer.prototype.toHexString = function () {
                if (arguments.length == 0) {
                    return fm.icelink.BitAssistant.getHexString(this.getData(), this.getIndex(), this.getLength());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
            */
            DataBuffer.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.DataBuffer.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead1'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 1-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<boolean>} value if set to true [value].
            @return {boolean}
            */
            DataBuffer.prototype.tryRead1 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes1(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead10'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 10-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead10 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes10(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead11'>&nbsp;</span>**/
            /**
             <div>
             Tries to read an 11-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead11 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes11(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead12'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 12-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead12 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes12(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead13'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 13-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead13 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes13(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead14'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 14-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead14 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes14(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead15'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 15-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead15 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes15(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead16'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 16-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead16 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes16(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead17'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 17-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead17 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes17(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead18'>&nbsp;</span>**/
            /**
             <div>
             Tries to read an 18-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead18 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes18(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead19'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 19-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead19 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes19(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead2'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 2-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead2 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes2(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead20'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 20-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead20 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes20(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead21'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 21-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead21 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes21(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead22'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 22-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead22 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes22(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead23'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 23-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead23 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes23(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead24'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 24-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead24 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes24(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead3'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 3-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead3 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes3(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead32'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 32-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead32 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes32(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead4'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 4-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead4 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes4(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead40'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 40-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead40 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes40(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead48'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 48-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead48 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes48(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead5'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 5-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead5 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes5(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead56'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 56-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead56 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes56(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead6'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 6-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead6 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes6(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead64'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 64-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead64 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes64(this.getData(), (this.getIndex() + offset), this.getLittleEndian(), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead7'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 7-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead7 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes7(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead8'>&nbsp;</span>**/
            /**
             <div>
             Tries to read an 8-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead8 = function (offset, value) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.Binary.tryFromBytes8(this.getData(), (this.getIndex() + offset), value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-tryRead9'>&nbsp;</span>**/
            /**
             <div>
             Tries to read a 9-bit value.
             </div>
    
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @param {fm.icelink.Holder<number>} value The value.
            @return {boolean}
            */
            DataBuffer.prototype.tryRead9 = function (offset, bitOffset, value) {
                if (arguments.length == 3) {
                    var _var0 = fm.icelink.Binary.tryFromBytes9(this.getData(), (this.getIndex() + offset), bitOffset, value);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write = function () {
                if (arguments.length == 3) {
                    var buffer = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + buffer.getLength()));
                    this.write(buffer, offset);
                }
                else if (arguments.length == 1) {
                    var buffer = arguments[0];
                    this.write(buffer, 0);
                }
                else if (arguments.length == 2) {
                    var buffer = arguments[0];
                    var offset = arguments[1];
                    fm.icelink.BitAssistant.copy(buffer.getData(), buffer.getIndex(), this.getData(), (this.getIndex() + offset), buffer.getLength());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write1'>&nbsp;</span>**/
            /**
             <div>
             Writes a 1-bit value.
             </div>
    
            @param {boolean} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write1 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes1(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write10'>&nbsp;</span>**/
            /**
             <div>
             Writes a 10-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write10 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes10(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write11'>&nbsp;</span>**/
            /**
             <div>
             Writes an 11-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write11 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes11(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write12'>&nbsp;</span>**/
            /**
             <div>
             Writes a 12-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write12 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes12(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write13'>&nbsp;</span>**/
            /**
             <div>
             Writes a 13-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write13 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes13(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write14'>&nbsp;</span>**/
            /**
             <div>
             Writes a 14-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write14 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes14(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write15'>&nbsp;</span>**/
            /**
             <div>
             Writes a 15-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write15 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes15(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write16 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes16(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 2));
                    return this.write16(value, offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write17'>&nbsp;</span>**/
            /**
             <div>
             Writes a 17-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write17 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes17(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write18'>&nbsp;</span>**/
            /**
             <div>
             Writes an 18-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write18 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes18(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write19'>&nbsp;</span>**/
            /**
             <div>
             Writes a 19-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write19 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes19(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write2'>&nbsp;</span>**/
            /**
             <div>
             Writes a 2-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write2 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes2(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write20'>&nbsp;</span>**/
            /**
             <div>
             Writes a 20-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write20 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes20(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write21'>&nbsp;</span>**/
            /**
             <div>
             Writes a 21-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write21 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes21(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write22'>&nbsp;</span>**/
            /**
             <div>
             Writes a 22-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write22 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes22(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write23'>&nbsp;</span>**/
            /**
             <div>
             Writes a 23-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write23 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes23(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write24 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes24(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 3));
                    return this.write24(value, offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write3'>&nbsp;</span>**/
            /**
             <div>
             Writes a 3-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write3 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes3(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write32 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 4));
                    return this.write32(value, offset);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes32(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write4'>&nbsp;</span>**/
            /**
             <div>
             Writes a 4-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write4 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes4(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write40 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 5));
                    return this.write40(value, offset);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes40(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write48 = function () {
                if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 6));
                    return this.write48(value, offset);
                }
                else if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes48(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write5'>&nbsp;</span>**/
            /**
             <div>
             Writes a 5-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write5 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes5(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write56 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes56(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 7));
                    return this.write56(value, offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write6'>&nbsp;</span>**/
            /**
             <div>
             Writes a 6-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write6 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes6(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write64 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes64(value, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 8));
                    return this.write64(value, offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write7'>&nbsp;</span>**/
            /**
             <div>
             Writes a 7-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write7 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes7(value, bitOffset, this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.write8 = function () {
                if (arguments.length == 2) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes8(value, this.getData(), (this.getIndex() + offset)), null));
                }
                else if (arguments.length == 3) {
                    var value = arguments[0];
                    var offset = arguments[1];
                    var offsetPlus = arguments[2];
                    offsetPlus.setValue((offset + 1));
                    return this.write8(value, offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-write9'>&nbsp;</span>**/
            /**
             <div>
             Writes a 9-bit value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @param {number} bitOffset The bit offset.
            @return {boolean}
            */
            DataBuffer.prototype.write9 = function (value, offset, bitOffset) {
                if (arguments.length == 3) {
                    return (!fm.icelink.Global.equals(fm.icelink.Binary.toBytes9(value, bitOffset, this.getLittleEndian(), this.getData(), (this.getIndex() + offset)), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBuffer.prototype.writeBytes = function () {
                if (arguments.length == 5) {
                    var bytes = arguments[0];
                    var bytesIndex = arguments[1];
                    var bytesLength = arguments[2];
                    var offset = arguments[3];
                    var offsetPlus = arguments[4];
                    offsetPlus.setValue((offset + bytesLength));
                    this.writeBytes(bytes, bytesIndex, bytesLength, offset);
                }
                else if (arguments.length == 1) {
                    var bytes = arguments[0];
                    this.writeBytes(bytes, 0, bytes.length, 0);
                }
                else if (arguments.length == 2) {
                    var bytes = arguments[0];
                    var offset = arguments[1];
                    this.writeBytes(bytes, 0, bytes.length, offset);
                }
                else if (arguments.length == 3) {
                    var bytes = arguments[0];
                    var bytesIndex = arguments[1];
                    var offset = arguments[2];
                    this.writeBytes(bytes, bytesIndex, (bytes.length - bytesIndex), offset);
                }
                else if (arguments.length == 4) {
                    var bytes = arguments[0];
                    var bytesIndex = arguments[1];
                    var bytesLength = arguments[2];
                    var offset = arguments[3];
                    if (((offset + bytesLength) > this.getLength())) {
                        throw new fm.icelink.Exception("Would write out of the allowed bounds for this data buffer.");
                    }
                    fm.icelink.BitAssistant.copy(bytes, bytesIndex, this.getData(), (this.getIndex() + offset), bytesLength);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBuffer-xor'>&nbsp;</span>**/
            /**
             <div>
             Performs a bitwise "xor" operation on a value.
             </div>
    
            @param {number} value The value.
            @param {number} offset The offset.
            @return {boolean}
            */
            DataBuffer.prototype.xor = function (value, offset) {
                if (arguments.length == 2) {
                    return this.write8((this.read8(offset) ^ value), offset);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataBuffer;
        }());
        icelink.DataBuffer = DataBuffer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="DataBuffer.ts" />

/// <reference path="DataBuffer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A subset of a DataBuffer.
         </div>
    
        */
        var DataBufferSubset = /** @class */ (function (_super) {
            __extends(DataBufferSubset, _super);
            /** @internal */
            function DataBufferSubset(buffer, index, length) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var buffer_1 = __arguments[0];
                    var index_1 = __arguments[1];
                    var length_30 = __arguments[2];
                    _this = _super.call(this, null, index_1, length_30, buffer_1.getLittleEndian()) || this;
                    _this.setParent(buffer_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            DataBufferSubset.prototype.getTypeString = function () {
                return '[fm.icelink.DataBufferSubset]' + ',' + _super.prototype.getTypeString.call(this);
            };
            DataBufferSubset.prototype.append = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObjectType(arguments[0][0], '[fm.icelink.DataBuffer]')))))) {
                    var buffers = arguments[0];
                    throw new fm.icelink.Exception("Cannot append to a DataBuffer subset.");
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = arguments[0];
                    throw new fm.icelink.Exception("Cannot append to a DataBuffer subset.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-free'>&nbsp;</span>**/
            /**
             <div>
             Decrements the retain count by one and returns the Buffer to the pool if zero.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBufferSubset.prototype.free = function () {
                if (arguments.length == 0) {
                    this.getParent().free();
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-getData'>&nbsp;</span>**/
            /**
             <div>
             Gets the data.
             </div>
    
    
            @return {Uint8Array}
            */
            DataBufferSubset.prototype.getData = function () {
                if (arguments.length == 0) {
                    return this.getParent().getData();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-getIsPooled'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this DataBuffer is from a pool.
             </div>
    
    
            @return {boolean}
            */
            DataBufferSubset.prototype.getIsPooled = function () {
                if (arguments.length == 0) {
                    return this.getParent().getIsPooled();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-getIsSubset'>&nbsp;</span>**/
            /**
             <div>
             Gets whether this DataBuffer is a subset.
             </div>
    
    
            @return {boolean}
            */
            DataBufferSubset.prototype.getIsSubset = function () {
                if (arguments.length == 0) {
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-getParent'>&nbsp;</span>**/
            /**
             <div>
             Gets the Subset parent.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBufferSubset.prototype.getParent = function () {
                if (arguments.length == 0) {
                    return this._parent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataBufferSubset-keep'>&nbsp;</span>**/
            /**
             <div>
             Increment the retain count by one.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataBufferSubset.prototype.keep = function () {
                if (arguments.length == 0) {
                    this.getParent().keep();
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBufferSubset.prototype.prepend = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = arguments[0];
                    throw new fm.icelink.Exception("Cannot prepend to a DataBuffer subset.");
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObjectType(arguments[0][0], '[fm.icelink.DataBuffer]')))))) {
                    var buffers = arguments[0];
                    throw new fm.icelink.Exception("Cannot prepend to a DataBuffer subset.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataBufferSubset.prototype.setParent = function (value) {
                if (arguments.length == 1) {
                    this._parent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataBufferSubset.prototype.subset = function () {
                if (arguments.length == 2) {
                    var offset = arguments[0];
                    var length_31 = arguments[1];
                    return this.getParent().subset((offset + _super.prototype.getIndex.call(this)), length_31);
                }
                else if (arguments.length == 1) {
                    var offset = arguments[0];
                    return this.getParent().subset((offset + _super.prototype.getIndex.call(this)), (_super.prototype.getLength.call(this) - offset));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataBufferSubset;
        }(fm.icelink.DataBuffer));
        icelink.DataBufferSubset = DataBufferSubset;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         LogItem class that contains the log event details.
         </div>
    
        */
        var LogEvent = /** @class */ (function () {
            /** @internal */
            function LogEvent(timestamp, tag, scope, level, msg, ex, threadId) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 7) {
                    var timestamp_2 = __arguments[0];
                    var tag_2 = __arguments[1];
                    var scope_1 = __arguments[2];
                    var level_1 = __arguments[3];
                    var msg_1 = __arguments[4];
                    var ex_1 = __arguments[5];
                    var threadId_1 = __arguments[6];
                    //super();
                    this.fmicelinkLogEventInit();
                    this.setTimeStamp(timestamp_2);
                    this.setTag(tag_2);
                    this.setScope(scope_1);
                    this.setLogLevel(level_1);
                    this.setMessage(msg_1);
                    this.setException(ex_1);
                    this.setThreadId(threadId_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LogEvent.prototype.getTypeString = function () {
                return '[fm.icelink.LogEvent]';
            };
            LogEvent.prototype.fmicelinkLogEventInit = function () {
                this._threadId = 0;
            };
            /**<span id='method-fm.icelink.LogEvent-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception if one exists for this log event.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            LogEvent.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getLogLevel'>&nbsp;</span>**/
            /**
             <div>
             Gets the level of this log event.
             </div>
    
    
            @return {fm.icelink.LogLevel}
            */
            LogEvent.prototype.getLogLevel = function () {
                if (arguments.length == 0) {
                    return this._logLevel;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the log message.
             </div>
    
    
            @return {string}
            */
            LogEvent.prototype.getMessage = function () {
                if (arguments.length == 0) {
                    return this._message;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getScope'>&nbsp;</span>**/
            /**
             <div>
             Gets the scope of this log event.
             </div>
    
    
            @return {string}
            */
            LogEvent.prototype.getScope = function () {
                if (arguments.length == 0) {
                    return this._scope;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getTag'>&nbsp;</span>**/
            /**
             <div>
             Gets the tag of this log event.
             </div>
    
    
            @return {string}
            */
            LogEvent.prototype.getTag = function () {
                if (arguments.length == 0) {
                    return this._tag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getThreadId'>&nbsp;</span>**/
            /**
             <div>
             Gets the id of the thread this log event occurred on.
             </div>
    
    
            @return {number}
            */
            LogEvent.prototype.getThreadId = function () {
                if (arguments.length == 0) {
                    return this._threadId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LogEvent-getTimeStamp'>&nbsp;</span>**/
            /**
             <div>
             Gets the timestamp when this log event occurred.
             </div>
    
    
            @return {fm.icelink.DateTime}
            */
            LogEvent.prototype.getTimeStamp = function () {
                if (arguments.length == 0) {
                    return this._timeStamp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setLogLevel = function (value) {
                if (arguments.length == 1) {
                    this._logLevel = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setMessage = function (value) {
                if (arguments.length == 1) {
                    this._message = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setScope = function (value) {
                if (arguments.length == 1) {
                    this._scope = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setTag = function (value) {
                if (arguments.length == 1) {
                    this._tag = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setThreadId = function (value) {
                if (arguments.length == 1) {
                    this._threadId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogEvent.prototype.setTimeStamp = function (value) {
                if (arguments.length == 1) {
                    this._timeStamp = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LogEvent;
        }());
        icelink.LogEvent = LogEvent;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var HashTypeWrapper = /** @class */ (function () {
            function HashTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_9 = __arguments[0];
                    //super();
                    this._value = value_9;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HashTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.HashTypeWrapper]';
            };
            HashTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.HashType.Md5)
                        return 'Md5';
                    if (this._value == fm.icelink.HashType.Sha1)
                        return 'Sha1';
                    if (this._value == fm.icelink.HashType.Sha256)
                        return 'Sha256';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HashTypeWrapper;
        }());
        icelink.HashTypeWrapper = HashTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var MacTypeWrapper = /** @class */ (function () {
            function MacTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_10 = __arguments[0];
                    //super();
                    this._value = value_10;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MacTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.MacTypeWrapper]';
            };
            MacTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.MacType.HmacMd5)
                        return 'HmacMd5';
                    if (this._value == fm.icelink.MacType.HmacSha1)
                        return 'HmacSha1';
                    if (this._value == fm.icelink.MacType.HmacSha256)
                        return 'HmacSha256';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MacTypeWrapper;
        }());
        icelink.MacTypeWrapper = MacTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Utility class to assist with Unix timestamp conversions.
         </div>
    
        */
        var UnixTimestamp = /** @class */ (function () {
            function UnixTimestamp() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            UnixTimestamp.prototype.getTypeString = function () {
                return '[fm.icelink.UnixTimestamp]';
            };
            /**<span id='method-fm.icelink.UnixTimestamp-dateTimeToUnix'>&nbsp;</span>**/
            /**
             <div>
             Converts a date to a Unix timestamp.
             </div>
    
            @param {fm.icelink.DateTime} dateTime The date to convert.
            @return {number} The equivalent Unix timestamp.
            */
            UnixTimestamp.dateTimeToUnix = function (dateTime) {
                if (arguments.length == 1) {
                    return fm.icelink.UnixTimestamp.ticksToUnix(dateTime.getTicks());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-dateTimeToUnixMillis'>&nbsp;</span>**/
            /**
             <div>
             Converts a date to a Unix timestamp with millisecond precision.
             </div>
    
            @param {fm.icelink.DateTime} dateTime The date to convert.
            @return {number} The equivalent Unix timestamp.
            */
            UnixTimestamp.dateTimeToUnixMillis = function (dateTime) {
                if (arguments.length == 1) {
                    return fm.icelink.UnixTimestamp.ticksToUnixMillis(dateTime.getTicks());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-getUtcNow'>&nbsp;</span>**/
            /**
             <div>
             Gets the current UTC time in NTP format.
             </div>
    
    
            @return {number}
            */
            UnixTimestamp.getUtcNow = function () {
                if (arguments.length == 0) {
                    return fm.icelink.UnixTimestamp.dateTimeToUnix(fm.icelink.DateTime.getUtcNow());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-ticksToUnix'>&nbsp;</span>**/
            /**
             <div>
             Converts ticks to a Unix timestamp.
             </div>
    
            @param {number} ticks The ticks to convert.
            @return {number} The equivalent Unix timestamp.
            */
            UnixTimestamp.ticksToUnix = function (ticks) {
                if (arguments.length == 1) {
                    return icelink.MathAssistant.floor((ticks - fm.icelink.UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks) / fm.icelink.Constants.getTicksPerSecond());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-ticksToUnixMillis'>&nbsp;</span>**/
            /**
             <div>
             Converts ticks to a Unix timestamp with millisecond precision.
             </div>
    
            @param {number} ticks The ticks to convert.
            @return {number} The equivalent Unix timestamp.
            */
            UnixTimestamp.ticksToUnixMillis = function (ticks) {
                if (arguments.length == 1) {
                    return icelink.MathAssistant.floor((ticks - fm.icelink.UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks) / fm.icelink.Constants.getTicksPerMillisecond());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-unixMillisToDateTime'>&nbsp;</span>**/
            /**
             <div>
             Converts a Unix timestamp with millisecond precision to a date.
             </div>
    
            @param {number} unix The Unix timestamp to convert.
            @return {fm.icelink.DateTime} The equivalent date.
            */
            UnixTimestamp.unixMillisToDateTime = function (unix) {
                if (arguments.length == 1) {
                    return new fm.icelink.DateTime(fm.icelink.UnixTimestamp.unixMillisToTicks(unix));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-unixMillisToTicks'>&nbsp;</span>**/
            /**
             <div>
             Converts a Unix timestamp with millisecond precision to ticks.
             </div>
    
            @param {number} unix The Unix timestamp to convert.
            @return {number} The equivalent ticks.
            */
            UnixTimestamp.unixMillisToTicks = function (unix) {
                if (arguments.length == 1) {
                    return (fm.icelink.UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks + (unix * fm.icelink.Constants.getTicksPerMillisecond()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-unixToDateTime'>&nbsp;</span>**/
            /**
             <div>
             Converts a Unix timestamp to a date.
             </div>
    
            @param {number} unix The Unix timestamp to convert.
            @return {fm.icelink.DateTime} The equivalent date.
            */
            UnixTimestamp.unixToDateTime = function (unix) {
                if (arguments.length == 1) {
                    return new fm.icelink.DateTime(fm.icelink.UnixTimestamp.unixToTicks(unix));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnixTimestamp-unixToTicks'>&nbsp;</span>**/
            /**
             <div>
             Converts a Unix timestamp to ticks.
             </div>
    
            @param {number} unix The Unix timestamp to convert.
            @return {number} The equivalent ticks.
            */
            UnixTimestamp.unixToTicks = function (unix) {
                if (arguments.length == 1) {
                    return (fm.icelink.UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks + (unix * fm.icelink.Constants.getTicksPerSecond()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            UnixTimestamp.fmicelinkUnixTimestampInitialize = function () {
                if (!fm.icelink.UnixTimestamp.__fmicelinkUnixTimestampInitialized) {
                    UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks = 0;
                    var time = new fm.icelink.DateTime(1970, 1, 1, 0, 0, 0);
                    fm.icelink.UnixTimestamp.fm_icelink_UnixTimestamp__baseTicks = time.getTicks();
                }
                fm.icelink.UnixTimestamp.__fmicelinkUnixTimestampInitialized = true;
            };
            /** @internal */
            UnixTimestamp.__fmicelinkUnixTimestampInitialized = false;
            return UnixTimestamp;
        }());
        icelink.UnixTimestamp = UnixTimestamp;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a double value passed by reference.
         </div>
    
        */
        var DoubleHolder = /** @class */ (function () {
            function DoubleHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkDoubleHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkDoubleHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DoubleHolder.prototype.getTypeString = function () {
                return '[fm.icelink.DoubleHolder]';
            };
            DoubleHolder.prototype.fmicelinkDoubleHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.DoubleHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            DoubleHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DoubleHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            DoubleHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DoubleHolder;
        }());
        icelink.DoubleHolder = DoubleHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An error.
         </div>
    
        */
        var Error = /** @class */ (function () {
            function Error() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var errorCode = __arguments[0];
                    var exception = __arguments[1];
                    //super();
                    this.setErrorCode(errorCode);
                    this.setException(exception);
                }
                else if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Error.prototype.getTypeString = function () {
                return '[fm.icelink.Error]';
            };
            /**<span id='method-fm.icelink.Error-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} errorJson The JSON to deserialize.
            @return {fm.icelink.Error} The deserialized error.
            */
            Error.fromJson = function (errorJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(errorJson, function () {
                        return new fm.icelink.Error();
                    }, function (error, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "errorCode"))) {
                                if ((fm.icelink.Global.equals(str, "exception"))) {
                                    error.setException(new fm.icelink.Exception(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                                }
                            }
                            else {
                                var intResult = -1;
                                var _var0 = new fm.icelink.Holder(intResult);
                                var _var1 = fm.icelink.ParseAssistant.tryParseIntegerValue(valueJson, _var0);
                                intResult = _var0.getValue();
                                if (_var1) {
                                    error.setErrorCode(intResult);
                                }
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.Error} error The error.
            @return {string}
             The serialized JSON.
     
            */
            Error.toJson = function (error) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(error, function (e, jsonObject) {
                        jsonObject["errorCode"] = fm.icelink.JsonSerializer.serializeString(new fm.icelink.ErrorCodeWrapper(error.getErrorCode()).toString());
                        if ((!fm.icelink.Global.equals(error.getException(), null))) {
                            jsonObject["exception"] = fm.icelink.JsonSerializer.serializeString(error.getException().message);
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-getDescription'>&nbsp;</span>**/
            /**
             <div>
             Gets the description for this `fm.icelink.error`.
             </div>
    
    
            @return {string}
            */
            Error.prototype.getDescription = function () {
                if (arguments.length == 0) {
                    var str = new fm.icelink.ErrorCodeWrapper(this.getErrorCode()).toString();
                    if ((!fm.icelink.Global.equals(this.getException(), null))) {
                        str = fm.icelink.StringExtensions.concat(str, " ", this.getException().message);
                    }
                    str = fm.icelink.StringExtensions.trimEnd(str, new Array(0));
                    if (!fm.icelink.StringExtensions.endsWith(str, ".")) {
                        str = fm.icelink.StringExtensions.concat(str, ".");
                    }
                    return str;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-getErrorCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the error code.
             </div>
    
    
            @return {fm.icelink.ErrorCode}
            */
            Error.prototype.getErrorCode = function () {
                if (arguments.length == 0) {
                    return this._errorCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            Error.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-setErrorCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the error code.
             </div>
    
    
            @param {fm.icelink.ErrorCode} value
            @return {void}
            */
            Error.prototype.setErrorCode = function (value) {
                if (arguments.length == 1) {
                    this._errorCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-setException'>&nbsp;</span>**/
            /**
             <div>
             Sets the exception.
             </div>
    
    
            @param {fm.icelink.Exception} value
            @return {void}
            */
            Error.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
             The serialized JSON.
     
            */
            Error.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Error.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Error-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns the string representation of this error.
             </div>
    
            @return {string}
            */
            Error.prototype.toString = function () {
                if (arguments.length == 0) {
                    return this.getDescription();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Error;
        }());
        icelink.Error = Error;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ErrorCodeWrapper = /** @class */ (function () {
            function ErrorCodeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_11 = __arguments[0];
                    //super();
                    this._value = value_11;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ErrorCodeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.ErrorCodeWrapper]';
            };
            ErrorCodeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.ErrorCode.SocketSendError)
                        return 'SocketSendError';
                    if (this._value == fm.icelink.ErrorCode.SocketReceiveError)
                        return 'SocketReceiveError';
                    if (this._value == fm.icelink.ErrorCode.SocketClosed)
                        return 'SocketClosed';
                    if (this._value == fm.icelink.ErrorCode.SocketSendBufferFull)
                        return 'SocketSendBufferFull';
                    if (this._value == fm.icelink.ErrorCode.StunTryAlternate)
                        return 'StunTryAlternate';
                    if (this._value == fm.icelink.ErrorCode.StunBadRequest)
                        return 'StunBadRequest';
                    if (this._value == fm.icelink.ErrorCode.StunUnauthorized)
                        return 'StunUnauthorized';
                    if (this._value == fm.icelink.ErrorCode.StunTurnForbidden)
                        return 'StunTurnForbidden';
                    if (this._value == fm.icelink.ErrorCode.StunTurnMobilityForbidden)
                        return 'StunTurnMobilityForbidden';
                    if (this._value == fm.icelink.ErrorCode.StunUnknownAttribute)
                        return 'StunUnknownAttribute';
                    if (this._value == fm.icelink.ErrorCode.StunStaleCredentials)
                        return 'StunStaleCredentials';
                    if (this._value == fm.icelink.ErrorCode.StunIntegrityCheckFailure)
                        return 'StunIntegrityCheckFailure';
                    if (this._value == fm.icelink.ErrorCode.StunMissingUsername)
                        return 'StunMissingUsername';
                    if (this._value == fm.icelink.ErrorCode.StunTurnAllocationMismatch)
                        return 'StunTurnAllocationMismatch';
                    if (this._value == fm.icelink.ErrorCode.StunStaleNonce)
                        return 'StunStaleNonce';
                    if (this._value == fm.icelink.ErrorCode.StunAddressFamilyNotSupported)
                        return 'StunAddressFamilyNotSupported';
                    if (this._value == fm.icelink.ErrorCode.StunTurnWrongCredentials)
                        return 'StunTurnWrongCredentials';
                    if (this._value == fm.icelink.ErrorCode.StunTurnUnsupportedTransportProtocol)
                        return 'StunTurnUnsupportedTransportProtocol';
                    if (this._value == fm.icelink.ErrorCode.StunTurnPeerAddressFamilyMismatch)
                        return 'StunTurnPeerAddressFamilyMismatch';
                    if (this._value == fm.icelink.ErrorCode.StunTurnConnectionAlreadyExists)
                        return 'StunTurnConnectionAlreadyExists';
                    if (this._value == fm.icelink.ErrorCode.StunTurnConnectionTimeoutOrFailure)
                        return 'StunTurnConnectionTimeoutOrFailure';
                    if (this._value == fm.icelink.ErrorCode.StunTurnAllocationQuotaReached)
                        return 'StunTurnAllocationQuotaReached';
                    if (this._value == fm.icelink.ErrorCode.StunIceRoleConflict)
                        return 'StunIceRoleConflict';
                    if (this._value == fm.icelink.ErrorCode.StunServerError)
                        return 'StunServerError';
                    if (this._value == fm.icelink.ErrorCode.StunTurnInsufficientCapacity)
                        return 'StunTurnInsufficientCapacity';
                    if (this._value == fm.icelink.ErrorCode.StunInvalidResponseType)
                        return 'StunInvalidResponseType';
                    if (this._value == fm.icelink.ErrorCode.StunInvalidErrorCode)
                        return 'StunInvalidErrorCode';
                    if (this._value == fm.icelink.ErrorCode.StunInvalidTransactionId)
                        return 'StunInvalidTransactionId';
                    if (this._value == fm.icelink.ErrorCode.StunUnknownStunErrorCode)
                        return 'StunUnknownStunErrorCode';
                    if (this._value == fm.icelink.ErrorCode.StunInvalidMessageIntegrity)
                        return 'StunInvalidMessageIntegrity';
                    if (this._value == fm.icelink.ErrorCode.SocketIPError)
                        return 'SocketIPError';
                    if (this._value == fm.icelink.ErrorCode.IceLocalRelayedDatagramCandidateError)
                        return 'IceLocalRelayedDatagramCandidateError';
                    if (this._value == fm.icelink.ErrorCode.IceLocalServerReflexiveCandidateError)
                        return 'IceLocalServerReflexiveCandidateError';
                    if (this._value == fm.icelink.ErrorCode.IceStartError)
                        return 'IceStartError';
                    if (this._value == fm.icelink.ErrorCode.IceUnsuitableSocketAssignment)
                        return 'IceUnsuitableSocketAssignment';
                    if (this._value == fm.icelink.ErrorCode.IceAllPortsInUse)
                        return 'IceAllPortsInUse';
                    if (this._value == fm.icelink.ErrorCode.IceLocalAddressUnavailable)
                        return 'IceLocalAddressUnavailable';
                    if (this._value == fm.icelink.ErrorCode.IceGenericGathererError)
                        return 'IceGenericGathererError';
                    if (this._value == fm.icelink.ErrorCode.IceRefreshTimeout)
                        return 'IceRefreshTimeout';
                    if (this._value == fm.icelink.ErrorCode.IceRefreshError)
                        return 'IceRefreshError';
                    if (this._value == fm.icelink.ErrorCode.IceCreatePermissionTimeout)
                        return 'IceCreatePermissionTimeout';
                    if (this._value == fm.icelink.ErrorCode.IceCreatePermissionError)
                        return 'IceCreatePermissionError';
                    if (this._value == fm.icelink.ErrorCode.IceSendError)
                        return 'IceSendError';
                    if (this._value == fm.icelink.ErrorCode.IcePeerReflexiveError)
                        return 'IcePeerReflexiveError';
                    if (this._value == fm.icelink.ErrorCode.IncompatibleIceSetup)
                        return 'IncompatibleIceSetup';
                    if (this._value == fm.icelink.ErrorCode.DtlsInternalError)
                        return 'DtlsInternalError';
                    if (this._value == fm.icelink.ErrorCode.DtlsKeyExchangeFailed)
                        return 'DtlsKeyExchangeFailed';
                    if (this._value == fm.icelink.ErrorCode.DtlsNotReady)
                        return 'DtlsNotReady';
                    if (this._value == fm.icelink.ErrorCode.SctpNoPayloadData)
                        return 'SctpNoPayloadData';
                    if (this._value == fm.icelink.ErrorCode.SctpUnsupportedStream)
                        return 'SctpUnsupportedStream';
                    if (this._value == fm.icelink.ErrorCode.SctpInvalidState)
                        return 'SctpInvalidState';
                    if (this._value == fm.icelink.ErrorCode.SctpInternalError)
                        return 'SctpInternalError';
                    if (this._value == fm.icelink.ErrorCode.MediaTransportFailed)
                        return 'MediaTransportFailed';
                    if (this._value == fm.icelink.ErrorCode.ReliableDataChannelOpenError)
                        return 'ReliableDataChannelOpenError';
                    if (this._value == fm.icelink.ErrorCode.ReliableDataChannelSendError)
                        return 'ReliableDataChannelSendError';
                    if (this._value == fm.icelink.ErrorCode.ConnectionInvalidArchitecture)
                        return 'ConnectionInvalidArchitecture';
                    if (this._value == fm.icelink.ErrorCode.ConnectionInternalError)
                        return 'ConnectionInternalError';
                    if (this._value == fm.icelink.ErrorCode.ConnectionTransportStartError)
                        return 'ConnectionTransportStartError';
                    if (this._value == fm.icelink.ErrorCode.ConnectionTransportClosed)
                        return 'ConnectionTransportClosed';
                    if (this._value == fm.icelink.ErrorCode.ConnectionDeadStream)
                        return 'ConnectionDeadStream';
                    if (this._value == fm.icelink.ErrorCode.ConnectionNotEstablished)
                        return 'ConnectionNotEstablished';
                    if (this._value == fm.icelink.ErrorCode.StreamDisabled)
                        return 'StreamDisabled';
                    if (this._value == fm.icelink.ErrorCode.StreamEncryptionMismatch)
                        return 'StreamEncryptionMismatch';
                    if (this._value == fm.icelink.ErrorCode.StreamDirectionMismatch)
                        return 'StreamDirectionMismatch';
                    if (this._value == fm.icelink.ErrorCode.DataStreamDirectionCannotBeChanged)
                        return 'DataStreamDirectionCannotBeChanged';
                    if (this._value == fm.icelink.ErrorCode.InvalidStreamDirectionChange)
                        return 'InvalidStreamDirectionChange';
                    if (this._value == fm.icelink.ErrorCode.LocalDescriptionError)
                        return 'LocalDescriptionError';
                    if (this._value == fm.icelink.ErrorCode.RemoteDescriptionError)
                        return 'RemoteDescriptionError';
                    if (this._value == fm.icelink.ErrorCode.IceLocalRelayedStreamCandidateError)
                        return 'IceLocalRelayedStreamCandidateError';
                    if (this._value == fm.icelink.ErrorCode.IceInvalidServerAssignmentError)
                        return 'IceInvalidServerAssignmentError';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ErrorCodeWrapper;
        }());
        icelink.ErrorCodeWrapper = ErrorCodeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a float value passed by reference.
         </div>
    
        */
        var FloatHolder = /** @class */ (function () {
            function FloatHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkFloatHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkFloatHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            FloatHolder.prototype.getTypeString = function () {
                return '[fm.icelink.FloatHolder]';
            };
            FloatHolder.prototype.fmicelinkFloatHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.FloatHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            FloatHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.FloatHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            FloatHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return FloatHolder;
        }());
        icelink.FloatHolder = FloatHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var HttpMethodWrapper = /** @class */ (function () {
            function HttpMethodWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_12 = __arguments[0];
                    //super();
                    this._value = value_12;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpMethodWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.HttpMethodWrapper]';
            };
            HttpMethodWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.HttpMethod.Get)
                        return 'Get';
                    if (this._value == fm.icelink.HttpMethod.Head)
                        return 'Head';
                    if (this._value == fm.icelink.HttpMethod.Post)
                        return 'Post';
                    if (this._value == fm.icelink.HttpMethod.Put)
                        return 'Put';
                    if (this._value == fm.icelink.HttpMethod.Patch)
                        return 'Patch';
                    if (this._value == fm.icelink.HttpMethod.Delete)
                        return 'Delete';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpMethodWrapper;
        }());
        icelink.HttpMethodWrapper = HttpMethodWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for sending an HTTP request.
         </div>
    
        */
        var HttpRequestArgs = /** @class */ (function (_super) {
            __extends(HttpRequestArgs, _super);
            /**<span id='method-fm.icelink.HttpRequestArgs-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.httpRequestArgs` class
             with default values.
             </div>
    
    
            @return {}
            */
            function HttpRequestArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkHttpRequestArgsInit();
                    _this.setTimeout(15000);
                    _this.setMethod(fm.icelink.HttpMethod.Post);
                    _this.__headers = new fm.icelink.NameValueCollection();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            HttpRequestArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpRequestArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            HttpRequestArgs.prototype.fmicelinkHttpRequestArgsInit = function () {
                this._timeout = 0;
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content to transfer over HTTP.
             Overrides `fm.icelink.httpRequestArgs.textContent`.
             </div>
    
    
            @return {Uint8Array}
            */
            HttpRequestArgs.prototype.getBinaryContent = function () {
                if (arguments.length == 0) {
                    return this._binaryContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getHeaders'>&nbsp;</span>**/
            /**
             <div>
             Gets the headers to transfer over HTTP.
             </div>
    
    
            @return {fm.icelink.NameValueCollection}
            */
            HttpRequestArgs.prototype.getHeaders = function () {
                if (arguments.length == 0) {
                    return this.__headers;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getMethod'>&nbsp;</span>**/
            /**
             <div>
             Gets the HTTP method.
             </div>
    
    
            @return {fm.icelink.HttpMethod}
            */
            HttpRequestArgs.prototype.getMethod = function () {
                if (arguments.length == 0) {
                    return this._method;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke once the outgoing HTTP request is created.
             See `fm.icelink.httpRequestCreatedArgs` for callback argument details.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
            */
            HttpRequestArgs.prototype.getOnRequestCreated = function () {
                if (arguments.length == 0) {
                    return this._onRequestCreated;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke once the incoming HTTP response has been
             received. See `fm.icelink.httpResponseReceivedArgs` for callback argument details.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
            */
            HttpRequestArgs.prototype.getOnResponseReceived = function () {
                if (arguments.length == 0) {
                    return this._onResponseReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the content, either a client or publisher.
             </div>
    
    
            @return {Object}
            */
            HttpRequestArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getTextContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the text content to transfer over HTTP.
             </div>
    
    
            @return {string}
            */
            HttpRequestArgs.prototype.getTextContent = function () {
                if (arguments.length == 0) {
                    return this._textContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of milliseconds to wait before timing out the HTTP transfer.
             Defaults to 15000 ms (15 seconds).
             </div>
    
    
            @return {number}
            */
            HttpRequestArgs.prototype.getTimeout = function () {
                if (arguments.length == 0) {
                    return this._timeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-getUrl'>&nbsp;</span>**/
            /**
             <div>
             Gets the target URL for the HTTP request.
             </div>
    
    
            @return {string}
            */
            HttpRequestArgs.prototype.getUrl = function () {
                if (arguments.length == 0) {
                    return this._url;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Sets the binary content to transfer over HTTP.
             Overrides `fm.icelink.httpRequestArgs.textContent`.
             </div>
    
    
            @param {Uint8Array} value
            @return {void}
            */
            HttpRequestArgs.prototype.setBinaryContent = function (value) {
                if (arguments.length == 1) {
                    this._binaryContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setHeaders'>&nbsp;</span>**/
            /**
             <div>
             Sets the headers to transfer over HTTP.
             </div>
    
    
            @param {fm.icelink.NameValueCollection} value
            @return {void}
            */
            HttpRequestArgs.prototype.setHeaders = function (value) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(value, null))) {
                        this.__headers = new fm.icelink.NameValueCollection();
                    }
                    else {
                        this.__headers = value;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setMethod'>&nbsp;</span>**/
            /**
             <div>
             Sets the HTTP method.
             </div>
    
    
            @param {fm.icelink.HttpMethod} value
            @return {void}
            */
            HttpRequestArgs.prototype.setMethod = function (value) {
                if (arguments.length == 1) {
                    this._method = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke once the outgoing HTTP request is created.
             See `fm.icelink.httpRequestCreatedArgs` for callback argument details.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
            @return {void}
            */
            HttpRequestArgs.prototype.setOnRequestCreated = function (value) {
                if (arguments.length == 1) {
                    this._onRequestCreated = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke once the incoming HTTP response has been
             received. See `fm.icelink.httpResponseReceivedArgs` for callback argument details.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
            @return {void}
            */
            HttpRequestArgs.prototype.setOnResponseReceived = function (value) {
                if (arguments.length == 1) {
                    this._onResponseReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setSender'>&nbsp;</span>**/
            /**
             <div>
             Sets the sender of the content, either a client or publisher.
             </div>
    
    
            @param {Object} value
            @return {void}
            */
            HttpRequestArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setTextContent'>&nbsp;</span>**/
            /**
             <div>
             Sets the text content to transfer over HTTP.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            HttpRequestArgs.prototype.setTextContent = function (value) {
                if (arguments.length == 1) {
                    this._textContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the number of milliseconds to wait before timing out the HTTP transfer.
             Defaults to 15000 ms (15 seconds).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            HttpRequestArgs.prototype.setTimeout = function (value) {
                if (arguments.length == 1) {
                    this._timeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestArgs-setUrl'>&nbsp;</span>**/
            /**
             <div>
             Sets the target URL for the HTTP request.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            HttpRequestArgs.prototype.setUrl = function (value) {
                if (arguments.length == 1) {
                    this._url = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpRequestArgs;
        }(fm.icelink.Dynamic));
        icelink.HttpRequestArgs = HttpRequestArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments passed into callbacks when an HTTP request is created.
         </div>
    
        */
        var HttpRequestCreatedArgs = /** @class */ (function () {
            function HttpRequestCreatedArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpRequestCreatedArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpRequestCreatedArgs]';
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getRequest'>&nbsp;</span>**/
            /**
             <div>
             Gets the outgoing HTTP request about to be sent to the server.
             </div>
    
    
            @return {any}
            */
            HttpRequestCreatedArgs.prototype.getRequest = function () {
                if (arguments.length == 0) {
                    return this._request;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original request arguments.
             </div>
    
    
            @return {fm.icelink.HttpRequestArgs}
            */
            HttpRequestCreatedArgs.prototype.getRequestArgs = function () {
                if (arguments.length == 0) {
                    return this._requestArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the request, either a client or publisher.
             </div>
    
    
            @return {Object}
            */
            HttpRequestCreatedArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setRequest'>&nbsp;</span>**/
            /**
             <div>
             Sets the outgoing HTTP request about to be sent to the server.
             </div>
    
    
            @param {any} value
            @return {void}
            */
            HttpRequestCreatedArgs.prototype.setRequest = function (value) {
                if (arguments.length == 1) {
                    this._request = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original request arguments.
             </div>
    
    
            @param {fm.icelink.HttpRequestArgs} value
            @return {void}
            */
            HttpRequestCreatedArgs.prototype.setRequestArgs = function (value) {
                if (arguments.length == 1) {
                    this._requestArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setSender'>&nbsp;</span>**/
            /**
             <div>
             Sets the sender of the request, either a client or publisher.
             </div>
    
    
            @param {Object} value
            @return {void}
            */
            HttpRequestCreatedArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpRequestCreatedArgs;
        }());
        icelink.HttpRequestCreatedArgs = HttpRequestCreatedArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for receiving an HTTP response.
         </div>
    
        */
        var HttpResponseArgs = /** @class */ (function () {
            function HttpResponseArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkHttpResponseArgsInit();
                    this.setHeaders(new fm.icelink.NameValueCollection());
                }
                else if (__arguments.length == 1) {
                    var requestArgs = __arguments[0];
                    // chained constructor: HttpResponseArgs.call(this);
                    __arguments = new Array(0);
                    {
                        //super();
                        this.fmicelinkHttpResponseArgsInit();
                        this.setHeaders(new fm.icelink.NameValueCollection());
                    }
                    this.setRequestArgs(requestArgs);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpResponseArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpResponseArgs]';
            };
            HttpResponseArgs.prototype.fmicelinkHttpResponseArgsInit = function () {
                this._statusCode = 0;
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content read from the HTTP response.
             </div>
    
    
            @return {Uint8Array}
            */
            HttpResponseArgs.prototype.getBinaryContent = function () {
                if (arguments.length == 0) {
                    return this._binaryContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception generated while completing the request.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            HttpResponseArgs.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getHeaders'>&nbsp;</span>**/
            /**
             <div>
             Gets the headers read from the HTTP response.
             </div>
    
    
            @return {fm.icelink.NameValueCollection}
            */
            HttpResponseArgs.prototype.getHeaders = function () {
                if (arguments.length == 0) {
                    return this._headers;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original `fm.icelink.httpRequestArgs`.
             </div>
    
    
            @return {fm.icelink.HttpRequestArgs}
            */
            HttpResponseArgs.prototype.getRequestArgs = function () {
                if (arguments.length == 0) {
                    return this._requestArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the status code read from the HTTP response.
             </div>
    
    
            @return {number}
            */
            HttpResponseArgs.prototype.getStatusCode = function () {
                if (arguments.length == 0) {
                    return this._statusCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-getTextContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the text content read from the HTTP response.
             </div>
    
    
            @return {string}
            */
            HttpResponseArgs.prototype.getTextContent = function () {
                if (arguments.length == 0) {
                    return this._textContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-setBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Sets the binary content read from the HTTP response.
             </div>
    
    
            @param {Uint8Array} value
            @return {void}
            */
            HttpResponseArgs.prototype.setBinaryContent = function (value) {
                if (arguments.length == 1) {
                    this._binaryContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-setException'>&nbsp;</span>**/
            /**
             <div>
             Sets the exception generated while completing the request.
             </div>
    
    
            @param {fm.icelink.Exception} value
            @return {void}
            */
            HttpResponseArgs.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpResponseArgs.prototype.setHeaders = function (value) {
                if (arguments.length == 1) {
                    this._headers = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-setRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original `fm.icelink.httpRequestArgs`.
             </div>
    
    
            @param {fm.icelink.HttpRequestArgs} value
            @return {void}
            */
            HttpResponseArgs.prototype.setRequestArgs = function (value) {
                if (arguments.length == 1) {
                    this._requestArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-setStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the status code read from the HTTP response.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            HttpResponseArgs.prototype.setStatusCode = function (value) {
                if (arguments.length == 1) {
                    this._statusCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseArgs-setTextContent'>&nbsp;</span>**/
            /**
             <div>
             Sets the text content read from the HTTP response.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            HttpResponseArgs.prototype.setTextContent = function (value) {
                if (arguments.length == 1) {
                    this._textContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpResponseArgs;
        }());
        icelink.HttpResponseArgs = HttpResponseArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments passed into callbacks when an HTTP response is received.
         </div>
    
        */
        var HttpResponseReceivedArgs = /** @class */ (function () {
            function HttpResponseReceivedArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpResponseReceivedArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpResponseReceivedArgs]';
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original request arguments.
             </div>
    
    
            @return {fm.icelink.HttpRequestArgs}
            */
            HttpResponseReceivedArgs.prototype.getRequestArgs = function () {
                if (arguments.length == 0) {
                    return this._requestArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getResponse'>&nbsp;</span>**/
            /**
             <div>
             Gets the incoming HTTP response received from the server.
             </div>
    
    
            @return {any}
            */
            HttpResponseReceivedArgs.prototype.getResponse = function () {
                if (arguments.length == 0) {
                    return this._response;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the request, either a client or publisher.
             </div>
    
    
            @return {Object}
            */
            HttpResponseReceivedArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setRequestArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original request arguments.
             </div>
    
    
            @param {fm.icelink.HttpRequestArgs} value
            @return {void}
            */
            HttpResponseReceivedArgs.prototype.setRequestArgs = function (value) {
                if (arguments.length == 1) {
                    this._requestArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setResponse'>&nbsp;</span>**/
            /**
             <div>
             Sets the incoming HTTP response received from the server.
             </div>
    
    
            @param {any} value
            @return {void}
            */
            HttpResponseReceivedArgs.prototype.setResponse = function (value) {
                if (arguments.length == 1) {
                    this._response = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setSender'>&nbsp;</span>**/
            /**
             <div>
             Sets the sender of the request, either a client or publisher.
             </div>
    
    
            @param {Object} value
            @return {void}
            */
            HttpResponseReceivedArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpResponseReceivedArgs;
        }());
        icelink.HttpResponseReceivedArgs = HttpResponseReceivedArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.httpTransfer.addOnSendStart`.
         </div>
    
        */
        var HttpSendFinishArgs = /** @class */ (function () {
            function HttpSendFinishArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpSendFinishArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpSendFinishArgs]';
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getRequestBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content of the request.
             </div>
    
    
            @return {Uint8Array}
            */
            HttpSendFinishArgs.prototype.getRequestBinaryContent = function () {
                if (arguments.length == 0) {
                    return this._requestBinaryContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getRequestTextContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the text content of the request.
             </div>
    
    
            @return {string}
            */
            HttpSendFinishArgs.prototype.getRequestTextContent = function () {
                if (arguments.length == 0) {
                    return this._requestTextContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content of the response.
             </div>
    
    
            @return {Uint8Array}
            */
            HttpSendFinishArgs.prototype.getResponseBinaryContent = function () {
                if (arguments.length == 0) {
                    return this._responseBinaryContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseHeaders'>&nbsp;</span>**/
            /**
             <div>
             Gets the headers of the response.
             </div>
    
    
            @return {fm.icelink.NameValueCollection}
            */
            HttpSendFinishArgs.prototype.getResponseHeaders = function () {
                if (arguments.length == 0) {
                    return this._responseHeaders;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseTextContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content of the response.
             </div>
    
    
            @return {string}
            */
            HttpSendFinishArgs.prototype.getResponseTextContent = function () {
                if (arguments.length == 0) {
                    return this._responseTextContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendFinishArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the request, either a client or publisher.
             </div>
    
    
            @return {Object}
            */
            HttpSendFinishArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setRequestBinaryContent = function (value) {
                if (arguments.length == 1) {
                    this._requestBinaryContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setRequestTextContent = function (value) {
                if (arguments.length == 1) {
                    this._requestTextContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setResponseBinaryContent = function (value) {
                if (arguments.length == 1) {
                    this._responseBinaryContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setResponseHeaders = function (value) {
                if (arguments.length == 1) {
                    this._responseHeaders = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setResponseTextContent = function (value) {
                if (arguments.length == 1) {
                    this._responseTextContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendFinishArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpSendFinishArgs;
        }());
        icelink.HttpSendFinishArgs = HttpSendFinishArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.httpTransfer.addOnSendStart`.
         </div>
    
        */
        var HttpSendStartArgs = /** @class */ (function () {
            function HttpSendStartArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpSendStartArgs.prototype.getTypeString = function () {
                return '[fm.icelink.HttpSendStartArgs]';
            };
            /**<span id='method-fm.icelink.HttpSendStartArgs-getRequestBinaryContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the binary content of the request.
             </div>
    
    
            @return {Uint8Array}
            */
            HttpSendStartArgs.prototype.getRequestBinaryContent = function () {
                if (arguments.length == 0) {
                    return this._requestBinaryContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendStartArgs-getRequestTextContent'>&nbsp;</span>**/
            /**
             <div>
             Gets the text content of the request.
             </div>
    
    
            @return {string}
            */
            HttpSendStartArgs.prototype.getRequestTextContent = function () {
                if (arguments.length == 0) {
                    return this._requestTextContent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpSendStartArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the request, either a client or publisher.
             </div>
    
    
            @return {Object}
            */
            HttpSendStartArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendStartArgs.prototype.setRequestBinaryContent = function (value) {
                if (arguments.length == 1) {
                    this._requestBinaryContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendStartArgs.prototype.setRequestTextContent = function (value) {
                if (arguments.length == 1) {
                    this._requestTextContent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            HttpSendStartArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpSendStartArgs;
        }());
        icelink.HttpSendStartArgs = HttpSendStartArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Creates implementations of `fm.icelink.httpTransfer`.
         </div>
    
        */
        var HttpTransferFactory = /** @class */ (function () {
            function HttpTransferFactory() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            HttpTransferFactory.prototype.getTypeString = function () {
                return '[fm.icelink.HttpTransferFactory]';
            };
            /**
            @internal
    
            */
            HttpTransferFactory.defaultCreateHttpTransfer = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.HttpWebRequestTransfer();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransferFactory-getCreateHttpTransfer'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback that creates an HTTP-based transfer class.
             </div>
    
    
            @return {fm.icelink.IFunction0<fm.icelink.HttpTransfer>}
            */
            HttpTransferFactory.getCreateHttpTransfer = function () {
                if (arguments.length == 0) {
                    return fm.icelink.HttpTransferFactory.fm_icelink_HttpTransferFactory__createHttpTransfer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransferFactory-getHttpTransfer'>&nbsp;</span>**/
            /**
             <div>
             Gets an instance of the HTTP-based transfer class.
             </div>
    
    
            @return {fm.icelink.HttpTransfer}
            */
            HttpTransferFactory.getHttpTransfer = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(fm.icelink.HttpTransferFactory.getCreateHttpTransfer(), null))) {
                        fm.icelink.HttpTransferFactory.setCreateHttpTransfer(fm.icelink.HttpTransferFactory.defaultCreateHttpTransfer.bind(fm.icelink.HttpTransferFactory));
                    }
                    var transfer = fm.icelink.HttpTransferFactory.getCreateHttpTransfer()();
                    if ((fm.icelink.Global.equals(transfer, null))) {
                        transfer = fm.icelink.HttpTransferFactory.defaultCreateHttpTransfer();
                    }
                    return transfer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpTransferFactory-setCreateHttpTransfer'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback that creates an HTTP-based transfer class.
             </div>
    
    
            @param {fm.icelink.IFunction0<fm.icelink.HttpTransfer>} value
            @return {void}
            */
            HttpTransferFactory.setCreateHttpTransfer = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.HttpTransferFactory.fm_icelink_HttpTransferFactory__createHttpTransfer = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpTransferFactory;
        }());
        icelink.HttpTransferFactory = HttpTransferFactory;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An HTTP web request sender.
         </div>
    
        */
        var HttpWebRequestSender = /** @class */ (function (_super) {
            __extends(HttpWebRequestSender, _super);
            function HttpWebRequestSender() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkHttpWebRequestSenderInit();
                    _this.__disableJsonp = true;
                    _this.__forceJsonp = false;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            HttpWebRequestSender.prototype.getTypeString = function () {
                return '[fm.icelink.HttpWebRequestSender]' + ',' + _super.prototype.getTypeString.call(this);
            };
            HttpWebRequestSender.prototype.fmicelinkHttpWebRequestSenderInit = function () {
                this.__disableJsonp = false;
                this.__forceJsonp = false;
                this._disableCors = false;
                this._disablePostMessage = false;
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-getDisableCors'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether to disable the cross-origin resource sharing (CORS) transport.
             </div>
    
    
            @return {boolean}
            */
            HttpWebRequestSender.prototype.getDisableCors = function () {
                if (arguments.length == 0) {
                    return this._disableCors;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-getDisableJsonp'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether to disable the JSON-P transport.
             </div>
    
    
            @return {boolean}
            */
            HttpWebRequestSender.prototype.getDisableJsonp = function () {
                if (arguments.length == 0) {
                    return this.__disableJsonp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-getDisablePostMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether to disable the postMessage transport.
             </div>
    
    
            @return {boolean}
            */
            HttpWebRequestSender.prototype.getDisablePostMessage = function () {
                if (arguments.length == 0) {
                    return this._disablePostMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-getForceJsonp'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether to force the JSON-P transport.
             </div>
    
    
            @return {boolean}
            */
            HttpWebRequestSender.prototype.getForceJsonp = function () {
                if (arguments.length == 0) {
                    return this.__forceJsonp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-setDisableCors'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether to disable the cross-origin resource sharing (CORS) transport.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            HttpWebRequestSender.prototype.setDisableCors = function (value) {
                if (arguments.length == 1) {
                    this._disableCors = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-setDisableJsonp'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether to disable the JSON-P transport.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            HttpWebRequestSender.prototype.setDisableJsonp = function (value) {
                if (arguments.length == 1) {
                    this.__disableJsonp = value;
                    if (this.__disableJsonp) {
                        this.__forceJsonp = false;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-setDisablePostMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether to disable the postMessage transport.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            HttpWebRequestSender.prototype.setDisablePostMessage = function (value) {
                if (arguments.length == 1) {
                    this._disablePostMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.HttpWebRequestSender-setForceJsonp'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether to force the JSON-P transport.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            HttpWebRequestSender.prototype.setForceJsonp = function (value) {
                if (arguments.length == 1) {
                    this.__forceJsonp = value;
                    if (this.__forceJsonp) {
                        this.__disableJsonp = false;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return HttpWebRequestSender;
        }(fm.icelink.Dynamic));
        icelink.HttpWebRequestSender = HttpWebRequestSender;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold an integer value passed by reference.
         </div>
    
        */
        var IntegerHolder = /** @class */ (function () {
            function IntegerHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkIntegerHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkIntegerHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            IntegerHolder.prototype.getTypeString = function () {
                return '[fm.icelink.IntegerHolder]';
            };
            IntegerHolder.prototype.fmicelinkIntegerHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.IntegerHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            IntegerHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IntegerHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            IntegerHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IntegerHolder;
        }());
        icelink.IntegerHolder = IntegerHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var JsonChecker = /** @class */ (function () {
            function JsonChecker() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    // chained constructor: JsonChecker.call(this, 0);
                    __arguments = new Array(1);
                    __arguments[0] = 0;
                    {
                        var depth = __arguments[0];
                        //super();
                        this.fmicelinkJsonCheckerInit();
                        if ((depth < 0)) {
                            throw new fm.icelink.Exception("Invalid depth.");
                        }
                        this.__state = 0;
                        this.__depth = depth;
                        this.__stack = new fm.icelink.Stack(depth);
                        this.push(fm.icelink.JsonCheckerMode.Done);
                    }
                }
                else if (__arguments.length == 1) {
                    var depth = __arguments[0];
                    //super();
                    this.fmicelinkJsonCheckerInit();
                    if ((depth < 0)) {
                        throw new fm.icelink.Exception("Invalid depth.");
                    }
                    this.__state = 0;
                    this.__depth = depth;
                    this.__stack = new fm.icelink.Stack(depth);
                    this.push(fm.icelink.JsonCheckerMode.Done);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            JsonChecker.prototype.getTypeString = function () {
                return '[fm.icelink.JsonChecker]';
            };
            JsonChecker.prototype.fmicelinkJsonCheckerInit = function () {
                this.__depth = 0;
                this.__offset = 0;
                this.__state = 0;
            };
            /**
            @internal
    
            */
            JsonChecker.prototype.check = function (ch) {
                if (arguments.length == 1) {
                    var num = void 0;
                    if ((ch < 0)) {
                        this.onError();
                    }
                    if ((ch >= 128)) {
                        num = 30;
                    }
                    else {
                        num = fm.icelink.JsonChecker.fm_icelink_JsonChecker__ascii_class[ch];
                        if ((num <= -1)) {
                            this.onError();
                        }
                    }
                    var num2 = fm.icelink.JsonChecker.fm_icelink_JsonChecker__state_transition_table[this.__state][num];
                    if ((num2 >= 0)) {
                        this.__state = num2;
                        this.__offset = (this.__offset + 1);
                    }
                    else {
                        if ((fm.icelink.Global.equals(num2, -9))) {
                            this.pop(fm.icelink.JsonCheckerMode.Key);
                            this.__state = 1;
                        }
                        else {
                            if ((fm.icelink.Global.equals(num2, -8))) {
                                this.pop(fm.icelink.JsonCheckerMode.Object);
                                this.__state = 1;
                            }
                            else {
                                if ((fm.icelink.Global.equals(num2, -7))) {
                                    this.pop(fm.icelink.JsonCheckerMode.Array);
                                    this.__state = 1;
                                }
                                else {
                                    if ((fm.icelink.Global.equals(num2, -6))) {
                                        this.push(fm.icelink.JsonCheckerMode.Key);
                                        this.__state = 2;
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(num2, -5))) {
                                            this.push(fm.icelink.JsonCheckerMode.Array);
                                            this.__state = 6;
                                        }
                                        else {
                                            var mode = void 0;
                                            if ((fm.icelink.Global.equals(num2, -4))) {
                                                mode = this.__stack.peek();
                                                if ((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Key))) {
                                                    this.__state = 4;
                                                }
                                                else {
                                                    if (((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Array)) || (fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Object)))) {
                                                        this.__state = 1;
                                                    }
                                                    else {
                                                        if ((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Done))) {
                                                            this.push(fm.icelink.JsonCheckerMode.String);
                                                            this.__state = 7;
                                                        }
                                                        else {
                                                            if ((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.String))) {
                                                                this.pop(fm.icelink.JsonCheckerMode.String);
                                                                this.__state = 1;
                                                            }
                                                            else {
                                                                this.onError();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                if ((fm.icelink.Global.equals(num2, -3))) {
                                                    mode = this.__stack.peek();
                                                    if ((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Object))) {
                                                        this.pop(fm.icelink.JsonCheckerMode.Object);
                                                        this.push(fm.icelink.JsonCheckerMode.Key);
                                                        this.__state = 3;
                                                    }
                                                    else {
                                                        if ((fm.icelink.Global.equals(mode, fm.icelink.JsonCheckerMode.Array))) {
                                                            this.__state = 5;
                                                        }
                                                        else {
                                                            this.onError();
                                                        }
                                                    }
                                                }
                                                else {
                                                    if ((fm.icelink.Global.equals(num2, -2))) {
                                                        this.pop(fm.icelink.JsonCheckerMode.Key);
                                                        this.push(fm.icelink.JsonCheckerMode.Object);
                                                        this.__state = 5;
                                                    }
                                                    else {
                                                        this.onError();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        this.__offset = (this.__offset + 1);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            JsonChecker.prototype.checkString = function (str) {
                if (arguments.length == 1) {
                    var doubleResult = 0;
                    var decimalResult = 0;
                    var _var0 = new fm.icelink.Holder(doubleResult);
                    var _var1 = fm.icelink.ParseAssistant.tryParseDoubleValue(str, _var0);
                    doubleResult = _var0.getValue();
                    var _var2 = new fm.icelink.Holder(decimalResult);
                    var _var3 = fm.icelink.ParseAssistant.tryParseDecimalValue(str, _var2);
                    decimalResult = _var2.getValue();
                    if (((((fm.icelink.Global.equals(str, "true")) || (fm.icelink.Global.equals(str, "false"))) || ((fm.icelink.Global.equals(str, "null")) || _var1)) || _var3)) {
                        return true;
                    }
                    try {
                        for (var i = 0; (i < str.length); i++) {
                            this.check(str.charCodeAt(i));
                        }
                        this.finalCheck();
                        return true;
                    }
                    catch (exception1) {
                        return false;
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonChecker.prototype.finalCheck = function () {
                if (arguments.length == 0) {
                    if ((!fm.icelink.Global.equals(this.__state, 1))) {
                        this.onError();
                    }
                    this.pop(fm.icelink.JsonCheckerMode.Done);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonChecker.prototype.onError = function () {
                if (arguments.length == 0) {
                    throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Invalid JSON text at character offset {0}.", fm.icelink.IntExtensions.toString(this.__offset, "N0")));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonChecker.prototype.pop = function (mode) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.__stack.pop(), mode))) {
                        this.onError();
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            JsonChecker.prototype.push = function (mode) {
                if (arguments.length == 1) {
                    if (((this.__depth > 0) && (this.__stack.getCount() >= this.__depth))) {
                        this.onError();
                    }
                    this.__stack.push(mode);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            JsonChecker.fmicelinkJsonCheckerInitialize = function () {
                if (!fm.icelink.JsonChecker.__fmicelinkJsonCheckerInitialized) {
                    fm.icelink.JsonChecker.fm_icelink_JsonChecker__ascii_class = [-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 30, 8, 30, 30, 30, 30, 30, 30, 30, 30, 11, 7, 12, 13, 10, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 30, 30, 30, 30, 30, 30, 28, 28, 28, 28, 29, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 4, 9, 5, 30, 30, 30, 16, 17, 18, 19, 20, 21, 30, 30, 30, 30, 30, 22, 30, 23, 30, 30, 30, 24, 25, 26, 27, 30, 30, 30, 30, 30, 2, 30, 3, 30, 30];
                    fm.icelink.JsonChecker.fm_icelink_JsonChecker__state_transition_table = [[0, 0, -6, -1, -5, -1, -1, -1, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, -1, -8, -1, -7, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [2, 2, -1, -9, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [3, 3, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [4, 4, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [5, 5, -6, -1, -5, -1, -1, -1, 7, -1, -1, -1, 13, -1, 14, 15, -1, -1, -1, -1, -1, 23, -1, 27, -1, -1, 20, -1, -1, -1, -1], [6, 6, -6, -1, -5, -7, -1, -1, 7, -1, -1, -1, 13, -1, 14, 15, -1, -1, -1, -1, -1, 23, -1, 27, -1, -1, 20, -1, -1, -1, -1], [7, -1, 7, 7, 7, 7, 7, 7, -4, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [-1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, 7, -1, 7, 7, -1, 7, 9, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 10, 10, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, 11, 11, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, -1, -1, -1, -1, -1, -1, 12, 12, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, -1, -8, -1, -7, -1, -3, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, -1, -8, -1, -7, -1, -3, -1, -1, -1, -1, -1, 16, 15, 15, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1], [1, 1, -1, -8, -1, -7, -1, -3, -1, -1, -1, -1, -1, -1, 16, 16, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 18, -1, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, -1, -8, -1, -7, -1, -3, -1, -1, -1, -1, -1, -1, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1]];
                }
                fm.icelink.JsonChecker.__fmicelinkJsonCheckerInitialized = true;
            };
            /** @internal */
            JsonChecker.__fmicelinkJsonCheckerInitialized = false;
            return JsonChecker;
        }());
        icelink.JsonChecker = JsonChecker;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base class for all JSON provider implementations.
         </div>
    
        */
        var JsonProvider = /** @class */ (function () {
            function JsonProvider() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            JsonProvider.prototype.getTypeString = function () {
                return '[fm.icelink.JsonProvider]';
            };
            return JsonProvider;
        }());
        icelink.JsonProvider = JsonProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Thread-safe class providing access to a single `fm.icelink.lockedRandomizer.Randomizer`.
         </div>
    
        */
        var LockedRandomizer = /** @class */ (function () {
            function LockedRandomizer() {
            }
            LockedRandomizer.prototype.getTypeString = function () {
                return '[fm.icelink.LockedRandomizer]';
            };
            LockedRandomizer.next = function () {
                if (arguments.length == 2) {
                    var minValue = arguments[0];
                    var maxValue = arguments[1];
                    return fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.next(minValue, maxValue);
                }
                else if (arguments.length == 0) {
                    return fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.next();
                }
                else if (arguments.length == 1) {
                    var maxValue = arguments[0];
                    return fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.next(maxValue);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LockedRandomizer-nextBytes'>&nbsp;</span>**/
            /**
             <div>
             Fills the elements of a specified array of bytes with random numbers.
             </div>
    
            @param {Uint8Array} buffer The array of bytes to fill.
            @return {void}
            */
            LockedRandomizer.nextBytes = function (buffer) {
                if (arguments.length == 1) {
                    fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.nextBytes(buffer);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LockedRandomizer-nextDouble'>&nbsp;</span>**/
            /**
             <div>
             Returns a random number between 0.0 and 1.0.
             </div>
    
    
            @return {number}
            */
            LockedRandomizer.nextDouble = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.nextDouble();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LockedRandomizer-nextLong'>&nbsp;</span>**/
            /**
             <div>
             Returns a nonnegative random number.
             </div>
    
    
            @return {number}
            */
            LockedRandomizer.nextLong = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.nextDouble() * 9.22337203685478e+18);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LockedRandomizer-randomString'>&nbsp;</span>**/
            /**
             <div>
             Generates a random string of a specified size.
             </div>
    
            @param {number} size The size of the output string.
            @return {string}
            */
            LockedRandomizer.randomString = function (size) {
                if (arguments.length == 1) {
                    return fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer.randomString(size);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            LockedRandomizer.fmicelinkLockedRandomizerInitialize = function () {
                if (!fm.icelink.LockedRandomizer.__fmicelinkLockedRandomizerInitialized) {
                    fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomizer = new fm.icelink.Randomizer();
                    fm.icelink.LockedRandomizer.fm_icelink_LockedRandomizer__randomLock = new Object();
                }
                fm.icelink.LockedRandomizer.__fmicelinkLockedRandomizerInitialized = true;
            };
            /** @internal */
            LockedRandomizer.__fmicelinkLockedRandomizerInitialized = false;
            return LockedRandomizer;
        }());
        icelink.LockedRandomizer = LockedRandomizer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Log utility class.
         </div>
    
        */
        var Log = /** @class */ (function () {
            function Log() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Log.prototype.getTypeString = function () {
                return '[fm.icelink.Log]';
            };
            Log.debug = function () {
                if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.debug(message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.debug(message);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.error = function () {
                if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.error(message);
                }
                else if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.error(message, ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.fatal = function () {
                if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.fatal(message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.fatal(message);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-flush'>&nbsp;</span>**/
            /**
             <div>
             Blocks until all logs are written out.
             </div>
    
    
            @return {void}
            */
            Log.flush = function () {
                if (arguments.length == 0) {
                    fm.icelink.Log.fm_icelink_Log___staticLogger.flush();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsDebugEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for debug-level messages.
             </div><value>
             <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsDebugEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Debug);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsErrorEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for error-level messages.
             </div><value>
             <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsErrorEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Error);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsFatalEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for fatal-level messages.
             </div><value>
             <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsFatalEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Fatal);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsInfoEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for info-level messages.
             </div><value>
             <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsInfoEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Info);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsVerboseEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for verbose-level messages.
             </div><value>
             <c>true</c> if logging is enabled for verbose-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsVerboseEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Verbose);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getIsWarnEnabled'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether logging is enabled for warn-level messages.
             </div><value>
             <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
             </value>
    
    
            @return {boolean}
            */
            Log.getIsWarnEnabled = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.getDefaultLogLevel() <= fm.icelink.LogLevel.Warn);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.getLogger = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.Type]'))) {
                    var type = arguments[0];
                    return fm.icelink.Log.getLogger(type.getFullName());
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isString(arguments[0]))) {
                    var tag = arguments[0];
                    return new fm.icelink.AsyncLogger(tag);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.Type]'))) {
                    var type = arguments[0];
                    var level = arguments[1];
                    return fm.icelink.Log.getLogger(type.getFullName(), level);
                }
                else if (arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isString(arguments[0]))) {
                    var tag = arguments[0];
                    var level = arguments[1];
                    if (!fm.icelink.HashExtensions.containsKey(fm.icelink.LogConfiguration.getTagOverrides(), tag)) {
                        fm.icelink.Log.setTagOverride(tag, level);
                    }
                    return fm.icelink.Log.getLogger(tag);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getLogLevel'>&nbsp;</span>**/
            /**
             <div>
             Gets the default log level.
             </div>
    
    
            @return {fm.icelink.LogLevel}
            */
            Log.getLogLevel = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LogConfiguration.getDefaultLogLevel();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-getProvider'>&nbsp;</span>**/
            /**
             <div>
             Gets the first log provider.
             </div>
    
    
            @return {fm.icelink.LogProvider}
            */
            Log.getProvider = function () {
                if (arguments.length == 0) {
                    var logProviders = fm.icelink.LogConfiguration.getLogProviders();
                    return ((logProviders.length > 0) ? logProviders[0] : null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.info = function () {
                if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.info(message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.info(message);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-registerProvider'>&nbsp;</span>**/
            /**
             <div>
             Register a log provider to be logged to.
             </div>
    
            @param {fm.icelink.LogProvider} provider The new provider.
            @return {void}
            */
            Log.registerProvider = function (provider) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.addLogProvider(provider);
                    if ((provider.getLevel() < fm.icelink.LogConfiguration.getDefaultLogLevel())) {
                        fm.icelink.LogConfiguration.setDefaultLogLevel(provider.getLevel());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-removeProvider'>&nbsp;</span>**/
            /**
             <div>
             Removes a log provider from the list.
             </div>
    
            @param {fm.icelink.LogProvider} provider The provider to remove.
            @return {void}
            */
            Log.removeProvider = function (provider) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.removeLogProvider(provider);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-setLogLevel'>&nbsp;</span>**/
            /**
             <div>
             Sets the default log level.
             </div>
    
    
            @param {fm.icelink.LogLevel} value
            @return {void}
            */
            Log.setLogLevel = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.setDefaultLogLevel(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-setProvider'>&nbsp;</span>**/
            /**
             <div>
             Sets the first log provider.
             </div>
    
    
            @param {fm.icelink.LogProvider} value
            @return {void}
            */
            Log.setProvider = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.clearLogProviders();
                    fm.icelink.Log.registerProvider(value);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-setTagOverride'>&nbsp;</span>**/
            /**
             <div>
             Override the default log level for a specific tag.
             </div>
    
            @param {string} tag The Tag to set the log level to.
            @param {fm.icelink.LogLevel} level The new loglevel to use.
            @return {void}
            */
            Log.setTagOverride = function (tag, level) {
                if (arguments.length == 2) {
                    fm.icelink.LogConfiguration.getTagOverrides()[tag] = level;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.verbose = function () {
                if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.verbose(message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.verbose(message);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Log.warn = function () {
                if (arguments.length == 2) {
                    var message = arguments[0];
                    var ex = arguments[1];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.warn(message, ex);
                }
                else if (arguments.length == 1) {
                    var message = arguments[0];
                    fm.icelink.Log.fm_icelink_Log___staticLogger.warn(message);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Log-writeLine'>&nbsp;</span>**/
            /**
             <div>
             Writes a line of text to the log.
             </div>
    
            @param {string} text The text to write to the log.
            @return {void}
            */
            Log.writeLine = function (text) {
                if (arguments.length == 1) {
                    fm.icelink.Log.fm_icelink_Log___staticLogger.log(text);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            Log.fmicelinkLogInitialize = function () {
                if (!fm.icelink.Log.__fmicelinkLogInitialized) {
                    fm.icelink.Log.fm_icelink_Log___staticLogger = new fm.icelink.AsyncLogger("FM");
                }
                fm.icelink.Log.__fmicelinkLogInitialized = true;
            };
            /** @internal */
            Log.__fmicelinkLogInitialized = false;
            return Log;
        }());
        icelink.Log = Log;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var LogConfiguration = /** @class */ (function () {
            function LogConfiguration() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LogConfiguration.prototype.getTypeString = function () {
                return '[fm.icelink.LogConfiguration]';
            };
            LogConfiguration.addLogProvider = function (provider) {
                if (arguments.length == 1) {
                    var list = icelink.ArrayExtensions.newArray(fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders);
                    fm.icelink.ArrayExtensions.add(list, provider);
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___providerCount++;
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders = fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.clearLogProviders = function () {
                if (arguments.length == 0) {
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders = new Array(0);
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___providerCount = 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.getDefaultLogLevel = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LogConfiguration.fm_icelink_LogConfiguration__defaultLogLevel;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.getHaveProviders = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___providerCount > 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.getLogProviders = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.getTagLogLevel = function (tag) {
                if (arguments.length == 1) {
                    var defaultLogLevel = fm.icelink.LogConfiguration.getDefaultLogLevel();
                    if (fm.icelink.HashExtensions.containsKey(fm.icelink.LogConfiguration.getTagOverrides(), tag)) {
                        defaultLogLevel = fm.icelink.LogConfiguration.getTagOverrides()[tag];
                    }
                    return defaultLogLevel;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.getTagOverrides = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LogConfiguration.fm_icelink_LogConfiguration__tagOverrides;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.removeLogProvider = function (provider) {
                if (arguments.length == 1) {
                    var list = icelink.ArrayExtensions.newArray(fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders);
                    fm.icelink.ArrayExtensions.remove(list, provider);
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___providerCount--;
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders = fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            LogConfiguration.setDefaultLogLevel = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration__defaultLogLevel = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            LogConfiguration.setTagOverrides = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration__tagOverrides = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            LogConfiguration.fmicelinkLogConfigurationInitialize = function () {
                if (!fm.icelink.LogConfiguration.__fmicelinkLogConfigurationInitialized) {
                    LogConfiguration.fm_icelink_LogConfiguration___providerCount = 0;
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___lock = new Object();
                    fm.icelink.LogConfiguration.setDefaultLogLevel(fm.icelink.LogLevel.Info);
                    fm.icelink.LogConfiguration.fm_icelink_LogConfiguration___logProviders = new Array(0);
                    fm.icelink.LogConfiguration.setTagOverrides({});
                }
                fm.icelink.LogConfiguration.__fmicelinkLogConfigurationInitialized = true;
            };
            /** @internal */
            LogConfiguration.__fmicelinkLogConfigurationInitialized = false;
            return LogConfiguration;
        }());
        icelink.LogConfiguration = LogConfiguration;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LogLevelWrapper = /** @class */ (function () {
            function LogLevelWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_13 = __arguments[0];
                    //super();
                    this._value = value_13;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LogLevelWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LogLevelWrapper]';
            };
            LogLevelWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LogLevel.Verbose)
                        return 'Verbose';
                    if (this._value == fm.icelink.LogLevel.Debug)
                        return 'Debug';
                    if (this._value == fm.icelink.LogLevel.Info)
                        return 'Info';
                    if (this._value == fm.icelink.LogLevel.Warn)
                        return 'Warn';
                    if (this._value == fm.icelink.LogLevel.Error)
                        return 'Error';
                    if (this._value == fm.icelink.LogLevel.Fatal)
                        return 'Fatal';
                    if (this._value == fm.icelink.LogLevel.None)
                        return 'None';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LogLevelWrapper;
        }());
        icelink.LogLevelWrapper = LogLevelWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a long value passed by reference.
         </div>
    
        */
        var LongHolder = /** @class */ (function () {
            function LongHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkLongHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkLongHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LongHolder.prototype.getTypeString = function () {
                return '[fm.icelink.LongHolder]';
            };
            LongHolder.prototype.fmicelinkLongHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.LongHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            LongHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LongHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LongHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LongHolder;
        }());
        icelink.LongHolder = LongHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="JsonProvider.ts" />

/// <reference path="JsonProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An implementation of a JSON provider that does nothing.
         </div>
    
        */
        var NullJsonProvider = /** @class */ (function (_super) {
            __extends(NullJsonProvider, _super);
            function NullJsonProvider() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            NullJsonProvider.prototype.getTypeString = function () {
                return '[fm.icelink.NullJsonProvider]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.NullJsonProvider-deserialize'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a value from a JSON string.
             </div><typeparam name="T">The type the value to deserialize.</typeparam>
    
            @param {string} valueJson The JSON string to deserialize.
            @return {T}
             The deserialized value.
     
            */
            NullJsonProvider.prototype.deserialize = function (valueJson) {
                if (arguments.length == 1) {
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.NullJsonProvider-serialize'>&nbsp;</span>**/
            /**
             <div>
             Serializes a value to a JSON string.
             </div><typeparam name="T">The type the value to serialize.</typeparam>
    
            @param {T} value The value to serialize.
            @return {string}
             The serialized JSON string.
     
            */
            NullJsonProvider.prototype.serialize = function (value) {
                if (arguments.length == 1) {
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return NullJsonProvider;
        }(fm.icelink.JsonProvider));
        icelink.NullJsonProvider = NullJsonProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LogProvider.ts" />

/// <reference path="LogProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An implementation of a logging provider that does nothing.
         </div>
    
        */
        var NullLogProvider = /** @class */ (function (_super) {
            __extends(NullLogProvider, _super);
            function NullLogProvider() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            NullLogProvider.prototype.getTypeString = function () {
                return '[fm.icelink.NullLogProvider]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.NullLogProvider-doLog'>&nbsp;</span>**/
            /**
             <div>
             Logs a message at the specified log level.
             </div>
    
            @param {fm.icelink.LogEvent} logItem The log event containing the details.
            @return {void}
            */
            NullLogProvider.prototype.doLog = function (logItem) {
                if (arguments.length == 1) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return NullLogProvider;
        }(fm.icelink.LogProvider));
        icelink.NullLogProvider = NullLogProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var FutureStateWrapper = /** @class */ (function () {
            function FutureStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_14 = __arguments[0];
                    //super();
                    this._value = value_14;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            FutureStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.FutureStateWrapper]';
            };
            FutureStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.FutureState.Pending)
                        return 'Pending';
                    if (this._value == fm.icelink.FutureState.Resolved)
                        return 'Resolved';
                    if (this._value == fm.icelink.FutureState.Rejected)
                        return 'Rejected';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return FutureStateWrapper;
        }());
        icelink.FutureStateWrapper = FutureStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class to hold a short value passed by reference.
         </div>
    
        */
        var ShortHolder = /** @class */ (function () {
            function ShortHolder() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkShortHolderInit();
                }
                else if (__arguments.length == 1) {
                    var value = __arguments[0];
                    //super();
                    this.fmicelinkShortHolderInit();
                    this.setValue(value);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ShortHolder.prototype.getTypeString = function () {
                return '[fm.icelink.ShortHolder]';
            };
            ShortHolder.prototype.fmicelinkShortHolderInit = function () {
                this._value = 0;
            };
            /**<span id='method-fm.icelink.ShortHolder-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {number}
            */
            ShortHolder.prototype.getValue = function () {
                if (arguments.length == 0) {
                    return this._value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ShortHolder-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            ShortHolder.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this._value = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ShortHolder;
        }());
        icelink.ShortHolder = ShortHolder;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Encapsulates useful sorting utilities.
         </div>
    
        */
        var Sort = /** @class */ (function () {
            function Sort() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Sort.prototype.getTypeString = function () {
                return '[fm.icelink.Sort]';
            };
            /**
            @internal
    
            */
            Sort.doQuickSort = function (array, left, right, comparer) {
                if (arguments.length == 4) {
                    if ((left < right)) {
                        var pivotIndex = (left + icelink.MathAssistant.floor((right - left) / 2));
                        var num2 = fm.icelink.Sort.partition(array, left, right, pivotIndex, comparer);
                        fm.icelink.Sort.doQuickSort(array, left, (num2 - 1), comparer);
                        fm.icelink.Sort.doQuickSort(array, (num2 + 1), right, comparer);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Sort.partition = function (array, left, right, pivotIndex, comparer) {
                if (arguments.length == 5) {
                    var local = array[pivotIndex];
                    fm.icelink.Sort.swap(array, pivotIndex, right);
                    var num = left;
                    for (var i = left; (i < right); i++) {
                        if ((fm.icelink.Global.equals(comparer(array[i], local), fm.icelink.CompareResult.Negative))) {
                            fm.icelink.Sort.swap(array, i, num);
                            num++;
                        }
                    }
                    fm.icelink.Sort.swap(array, num, right);
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Sort-quickSort'>&nbsp;</span>**/
            /**
             <div>
             Sorts an array using the in-place quick-sort algorithm.
             </div><typeparam name="T">The type of elements in the array.</typeparam>
    
            @param {Array<T>} array The array of elements.
            @param {fm.icelink.IFunction2<T,T,fm.icelink.CompareResult>} comparer The function used to compare elements in the array -
             should return less than 0 if item 1 is less than item 2 (item 1 should appear
             before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
             than item 2 (item 1 should appear after item 2).
            @return {void}
            */
            Sort.quickSort = function (array, comparer) {
                if (arguments.length == 2) {
                    var right = (fm.icelink.ArrayExtensions.getCount(array) - 1);
                    fm.icelink.Sort.doQuickSort(array, 0, right, comparer);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Sort.swap = function (array, pos1, pos2) {
                if (arguments.length == 3) {
                    var local = array[pos1];
                    array[pos1] = array[pos2];
                    array[pos2] = local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Sort;
        }());
        icelink.Sort = Sort;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Utility class for splitting strings.
         </div>
    
        */
        var Splitter = /** @class */ (function () {
            function Splitter() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Splitter.prototype.getTypeString = function () {
                return '[fm.icelink.Splitter]';
            };
            /**<span id='method-fm.icelink.Splitter-split'>&nbsp;</span>**/
            /**
             <div>
             Splits a string using a given delimiter.
             </div>
    
            @param {string} str The string.
            @param {string} delimiter The delimiter.
            @return {string[]}
            */
            Splitter.split = function (str, delimiter) {
                if (arguments.length == 2) {
                    if ((fm.icelink.Global.equals(str, null))) {
                        throw new fm.icelink.Exception("str cannot be null.");
                    }
                    if ((fm.icelink.Global.equals(delimiter, null))) {
                        throw new fm.icelink.Exception("delimiter cannot be null.");
                    }
                    if ((fm.icelink.Global.equals(delimiter.length, 0))) {
                        return [str];
                    }
                    var startIndex = 0;
                    var num2 = 0;
                    var list = new Array();
                    for (var i = 0; (i < str.length); i++) {
                        var ch = str.charCodeAt(i);
                        var ch2 = delimiter.charCodeAt(num2);
                        if ((fm.icelink.Global.equals(ch, ch2))) {
                            if ((fm.icelink.Global.equals(num2, (delimiter.length - 1)))) {
                                fm.icelink.ArrayExtensions.add(list, fm.icelink.StringExtensions.substring(str, startIndex, ((i - num2) - startIndex)));
                                startIndex = (i + 1);
                                num2 = 0;
                            }
                            else {
                                num2++;
                            }
                        }
                        else {
                            num2 = 0;
                        }
                    }
                    fm.icelink.ArrayExtensions.add(list, str.substring(startIndex));
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Splitter;
        }());
        icelink.Splitter = Splitter;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Contains methods for string manipulation.
         </div>
    
        */
        var StringAssistant = /** @class */ (function () {
            function StringAssistant() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StringAssistant.prototype.getTypeString = function () {
                return '[fm.icelink.StringAssistant]';
            };
            /**<span id='method-fm.icelink.StringAssistant-isNullOrWhiteSpace'>&nbsp;</span>**/
            /**
             <div />
    
            @param {string} s The s.
            @return {boolean}
            */
            StringAssistant.isNullOrWhiteSpace = function (s) {
                if (arguments.length == 1) {
                    return ((fm.icelink.Global.equals(s, null)) || fm.icelink.StringExtensions.isNullOrEmpty(fm.icelink.StringExtensions.trim(s)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            StringAssistant.subArray = function () {
                if (arguments.length == 2) {
                    var array = arguments[0];
                    var offset = arguments[1];
                    return fm.icelink.StringAssistant.subArray(array, offset, (array.length - offset));
                }
                else if (arguments.length == 3) {
                    var array = arguments[0];
                    var offset = arguments[1];
                    var count = arguments[2];
                    var strArray = new Array(count);
                    for (var i = 0; (i < count); i++) {
                        strArray[i] = array[(offset + i)];
                    }
                    return strArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StringAssistant;
        }());
        icelink.StringAssistant = StringAssistant;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LogProvider.ts" />

/// <reference path="LogProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Simple log provider that writes to a local string builder.
         </div>
    
        */
        var TextLogProvider = /** @class */ (function (_super) {
            __extends(TextLogProvider, _super);
            function TextLogProvider() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var level = __arguments[0];
                    _this = _super.call(this) || this;
                    _this.__text = new fm.icelink.StringBuilder();
                    _this.__textLock = new Object();
                    _super.prototype.setLevel.call(_this, level);
                }
                else if (__arguments.length == 0) {
                    // chained constructor: TextLogProvider.call(this, fm.icelink.LogLevel.Info);
                    __arguments = new Array(1);
                    __arguments[0] = fm.icelink.LogLevel.Info;
                    {
                        var level = __arguments[0];
                        _this = _super.call(this) || this;
                        _this.__text = new fm.icelink.StringBuilder();
                        _this.__textLock = new Object();
                        _super.prototype.setLevel.call(_this, level);
                    }
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            TextLogProvider.prototype.getTypeString = function () {
                return '[fm.icelink.TextLogProvider]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.TextLogProvider-clear'>&nbsp;</span>**/
            /**
             <div>
             Clears all text from the log
             and returns the former contents.
             </div>
    
    
            @return {string}
            */
            TextLogProvider.prototype.clear = function () {
                if (arguments.length == 0) {
                    var str = void 0;
                    str = this.__text.toString();
                    this.__text = new fm.icelink.StringBuilder();
                    return str;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TextLogProvider-doLog'>&nbsp;</span>**/
            /**
             <div>
             Logs a message at the specified log level.
             </div>
    
            @param {fm.icelink.LogEvent} logItem The log event containing the details.
            @return {void}
            */
            TextLogProvider.prototype.doLog = function (logItem) {
                if (arguments.length == 1) {
                    this.writeLine(_super.prototype.generateLogLine.call(this, logItem));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TextLogProvider-getCallback'>&nbsp;</span>**/
            /**
             <div>
             Gets a callback to invoke
             whenever text is written to the log.
             </div>
    
    
            @return {fm.icelink.IAction1<string>}
            */
            TextLogProvider.prototype.getCallback = function () {
                if (arguments.length == 0) {
                    return this.__callback;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TextLogProvider-getText'>&nbsp;</span>**/
            /**
             <div>
             Gets the logged text.
             </div>
    
    
            @return {string}
            */
            TextLogProvider.prototype.getText = function () {
                if (arguments.length == 0) {
                    return this.__text.toString();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TextLogProvider-setCallback'>&nbsp;</span>**/
            /**
             <div>
             Sets a callback to invoke
             whenever text is written to the log.
             </div>
    
    
            @param {fm.icelink.IAction1<string>} value
            @return {void}
            */
            TextLogProvider.prototype.setCallback = function (value) {
                if (arguments.length == 1) {
                    var str = this.__text.toString();
                    if (!fm.icelink.StringExtensions.isNullOrEmpty(str)) {
                        if (fm.icelink.StringExtensions.endsWith(str, "\n")) {
                            str = fm.icelink.StringExtensions.substring(str, 0, (str.length - 1));
                        }
                        value(str);
                    }
                    this.__callback = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            TextLogProvider.prototype.writeLine = function (text) {
                if (arguments.length == 1) {
                    this.__text.append(fm.icelink.StringExtensions.concat(text, "\n"));
                    if ((!fm.icelink.Global.equals(this.__callback, null))) {
                        this.__callback(text);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return TextLogProvider;
        }(fm.icelink.LogProvider));
        icelink.TextLogProvider = TextLogProvider;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Throws exceptions on a separate thread.
         </div>
    
        */
        var Unhandled = /** @class */ (function () {
            function Unhandled() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Unhandled.prototype.getTypeString = function () {
                return '[fm.icelink.Unhandled]';
            };
            /**<span id='method-fm.icelink.Unhandled-logException'>&nbsp;</span>**/
            /**
             <div>
             Logs an unhandled exception.
             </div>
    
            @param {fm.icelink.Exception} ex The exception to throw.
            @param {string} source The source of the exception.
            @return {void}
            */
            Unhandled.logException = function (ex, source) {
                if (arguments.length == 2) {
                    fm.icelink.Log.error(fm.icelink.StringExtensions.concat("An exception in user code (", source, ") was unhandled."), ex);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Unhandled;
        }());
        icelink.Unhandled = Unhandled;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for an unhandled exception.
         </div>
    
        */
        var UnhandledExceptionArgs = /** @class */ (function () {
            /**<span id='method-fm.icelink.UnhandledExceptionArgs-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.unhandledExceptionArgs` class.
             </div>
    
            @param {fm.icelink.Exception} exception The exception.
            @return {}
            */
            function UnhandledExceptionArgs(exception) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var exception_1 = __arguments[0];
                    //super();
                    this.fmicelinkUnhandledExceptionArgsInit();
                    this.__exception = exception_1;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            UnhandledExceptionArgs.prototype.getTypeString = function () {
                return '[fm.icelink.UnhandledExceptionArgs]';
            };
            UnhandledExceptionArgs.prototype.fmicelinkUnhandledExceptionArgsInit = function () {
                this._handled = false;
            };
            /**<span id='method-fm.icelink.UnhandledExceptionArgs-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the unhandled exception.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            UnhandledExceptionArgs.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this.__exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnhandledExceptionArgs-getHandled'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the exception has been
             appropriately handled. If set to <c>true</c>,
             then the exception will not be thrown.
             </div>
    
    
            @return {boolean}
            */
            UnhandledExceptionArgs.prototype.getHandled = function () {
                if (arguments.length == 0) {
                    return this._handled;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.UnhandledExceptionArgs-setHandled'>&nbsp;</span>**/
            /**
             <div>
             Sets whether the exception has been
             appropriately handled. If set to <c>true</c>,
             then the exception will not be thrown.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            UnhandledExceptionArgs.prototype.setHandled = function (value) {
                if (arguments.length == 1) {
                    this._handled = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return UnhandledExceptionArgs;
        }());
        icelink.UnhandledExceptionArgs = UnhandledExceptionArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         UTF-8 encoding/decoding utility.
         </div>
    
        */
        var Utf8 = /** @class */ (function () {
            function Utf8() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Utf8.prototype.getTypeString = function () {
                return '[fm.icelink.Utf8]';
            };
            Utf8.decode = function () {
                if (arguments.length == 3) {
                    var input = arguments[0];
                    var index = arguments[1];
                    var length_32 = arguments[2];
                    return fm.icelink.Encoding.getUtf8().getString(input, index, length_32);
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var buffer = arguments[0];
                    return fm.icelink.Utf8.decode(buffer.getData(), buffer.getIndex(), buffer.getLength());
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isUint8Array(arguments[0]))) {
                    var input = arguments[0];
                    return fm.icelink.Utf8.decode(input, 0, input.length);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utf8-encode'>&nbsp;</span>**/
            /**
             <div>
             Encodes a string to a UTF-8 byte array.
             </div>
    
            @param {string} input The input string.
            @return {Uint8Array}
            */
            Utf8.encode = function (input) {
                if (arguments.length == 1) {
                    return fm.icelink.Encoding.getUtf8().getBytes(input);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utf8-getByteCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes that would be returned by
             a call to encode.
             </div>
    
            @param {string} input The input string.
            @return {number}
            */
            Utf8.getByteCount = function (input) {
                if (arguments.length == 1) {
                    return fm.icelink.Encoding.getUtf8().getByteCount(input);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Utf8;
        }());
        icelink.Utf8 = Utf8;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var WebSocketSendState = /** @class */ (function () {
            function WebSocketSendState() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketSendState.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketSendState]';
            };
            WebSocketSendState.prototype.getRequestBytes = function () {
                if (arguments.length == 0) {
                    return this._requestBytes;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketSendState.prototype.getSendArgs = function () {
                if (arguments.length == 0) {
                    return this._sendArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketSendState.prototype.setRequestBytes = function (value) {
                if (arguments.length == 1) {
                    this._requestBytes = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketSendState.prototype.setSendArgs = function (value) {
                if (arguments.length == 1) {
                    this._sendArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketSendState;
        }());
        icelink.WebSocketSendState = WebSocketSendState;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Close arguments for the `fm.icelink.webSocket` class.
         </div>
    
        */
        var WebSocketCloseArgs = /** @class */ (function (_super) {
            __extends(WebSocketCloseArgs, _super);
            /**<span id='method-fm.icelink.WebSocketCloseArgs-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of `fm.icelink.webSocketCloseArgs`
             with default values.
             </div>
    
    
            @return {}
            */
            function WebSocketCloseArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.setStatusCode(fm.icelink.WebSocketStatusCode.Normal);
                    _this.setReason(fm.icelink.StringExtensions.empty);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketCloseArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketCloseArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-getOnComplete'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to execute when the connection is closed.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>}
            */
            WebSocketCloseArgs.prototype.getOnComplete = function () {
                if (arguments.length == 0) {
                    return this._onComplete;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-getReason'>&nbsp;</span>**/
            /**
             <div>
             Gets the reason to send with the close frame.
             </div>
    
    
            @return {string}
            */
            WebSocketCloseArgs.prototype.getReason = function () {
                if (arguments.length == 0) {
                    return this._reason;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-getStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the status code to send with the close frame.
             </div>
    
    
            @return {fm.icelink.WebSocketStatusCode}
            */
            WebSocketCloseArgs.prototype.getStatusCode = function () {
                if (arguments.length == 0) {
                    return this._statusCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-setOnComplete'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to execute when the connection is closed.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>} value
            @return {void}
            */
            WebSocketCloseArgs.prototype.setOnComplete = function (value) {
                if (arguments.length == 1) {
                    this._onComplete = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-setReason'>&nbsp;</span>**/
            /**
             <div>
             Sets the reason to send with the close frame.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebSocketCloseArgs.prototype.setReason = function (value) {
                if (arguments.length == 1) {
                    this._reason = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseArgs-setStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the status code to send with the close frame.
             </div>
    
    
            @param {fm.icelink.WebSocketStatusCode} value
            @return {void}
            */
            WebSocketCloseArgs.prototype.setStatusCode = function (value) {
                if (arguments.length == 1) {
                    this._statusCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketCloseArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketCloseArgs = WebSocketCloseArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.webSocketCloseArgs.onComplete`.
         </div>
    
        */
        var WebSocketCloseCompleteArgs = /** @class */ (function (_super) {
            __extends(WebSocketCloseCompleteArgs, _super);
            function WebSocketCloseCompleteArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketCloseCompleteArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketCloseCompleteArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getCloseArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original arguments passed to the close method.
             </div>
    
    
            @return {fm.icelink.WebSocketCloseArgs}
            */
            WebSocketCloseCompleteArgs.prototype.getCloseArgs = function () {
                if (arguments.length == 0) {
                    return this._closeArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getReason'>&nbsp;</span>**/
            /**
             <div>
             Gets the reason given for closing the connection.
             </div>
    
    
            @return {string}
            */
            WebSocketCloseCompleteArgs.prototype.getReason = function () {
                if (arguments.length == 0) {
                    return this._reason;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the status code associated with the close operation.
             </div>
    
    
            @return {fm.icelink.WebSocketStatusCode}
            */
            WebSocketCloseCompleteArgs.prototype.getStatusCode = function () {
                if (arguments.length == 0) {
                    return this._statusCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setCloseArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original arguments passed to the close method.
             </div>
    
    
            @param {fm.icelink.WebSocketCloseArgs} value
            @return {void}
            */
            WebSocketCloseCompleteArgs.prototype.setCloseArgs = function (value) {
                if (arguments.length == 1) {
                    this._closeArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setReason'>&nbsp;</span>**/
            /**
             <div>
             Sets the reason given for closing the connection.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebSocketCloseCompleteArgs.prototype.setReason = function (value) {
                if (arguments.length == 1) {
                    this._reason = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the status code associated with the close operation.
             </div>
    
    
            @param {fm.icelink.WebSocketStatusCode} value
            @return {void}
            */
            WebSocketCloseCompleteArgs.prototype.setStatusCode = function (value) {
                if (arguments.length == 1) {
                    this._statusCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketCloseCompleteArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketCloseCompleteArgs = WebSocketCloseCompleteArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Open arguments for the `fm.icelink.webSocket` class.
         </div>
    
        */
        var WebSocketOpenArgs = /** @class */ (function (_super) {
            __extends(WebSocketOpenArgs, _super);
            /**<span id='method-fm.icelink.WebSocketOpenArgs-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of
             </div>
    
    
            @return {}
            */
            function WebSocketOpenArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkWebSocketOpenArgsInit();
                    _this.setHandshakeTimeout(15000);
                    _this.setStreamTimeout(40000);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketOpenArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketOpenArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebSocketOpenArgs.prototype.fmicelinkWebSocketOpenArgsInit = function () {
                this._handshakeTimeout = 0;
                this._streamTimeout = 0;
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getHandshakeTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the timeout for the handshake (in ms).
             </div>
    
    
            @return {number}
            */
            WebSocketOpenArgs.prototype.getHandshakeTimeout = function () {
                if (arguments.length == 0) {
                    return this._handshakeTimeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getHeaders'>&nbsp;</span>**/
            /**
             <div>
             Gets headers to send with the handshake request.
             </div>
    
    
            @return {fm.icelink.NameValueCollection}
            */
            WebSocketOpenArgs.prototype.getHeaders = function () {
                if (arguments.length == 0) {
                    return this._headers;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnFailure'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when a connection could not be established.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>}
            */
            WebSocketOpenArgs.prototype.getOnFailure = function () {
                if (arguments.length == 0) {
                    return this._onFailure;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnReceive'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when a message is received.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>}
            */
            WebSocketOpenArgs.prototype.getOnReceive = function () {
                if (arguments.length == 0) {
                    return this._onReceive;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke before the handshake request is sent.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
            */
            WebSocketOpenArgs.prototype.getOnRequestCreated = function () {
                if (arguments.length == 0) {
                    return this._onRequestCreated;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke after the handshake response is received.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
            */
            WebSocketOpenArgs.prototype.getOnResponseReceived = function () {
                if (arguments.length == 0) {
                    return this._onResponseReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnStreamFailure'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when a successful connection breaks down.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>}
            */
            WebSocketOpenArgs.prototype.getOnStreamFailure = function () {
                if (arguments.length == 0) {
                    return this._onStreamFailure;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnSuccess'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when a successful connection has been established.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>}
            */
            WebSocketOpenArgs.prototype.getOnSuccess = function () {
                if (arguments.length == 0) {
                    return this._onSuccess;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the request.
             </div>
    
    
            @return {Object}
            */
            WebSocketOpenArgs.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-getStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the timeout for the stream (in ms).
             </div>
    
    
            @return {number}
            */
            WebSocketOpenArgs.prototype.getStreamTimeout = function () {
                if (arguments.length == 0) {
                    return this._streamTimeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setHandshakeTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the timeout for the handshake (in ms).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setHandshakeTimeout = function (value) {
                if (arguments.length == 1) {
                    this._handshakeTimeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setHeaders'>&nbsp;</span>**/
            /**
             <div>
             Sets headers to send with the handshake request.
             </div>
    
    
            @param {fm.icelink.NameValueCollection} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setHeaders = function (value) {
                if (arguments.length == 1) {
                    this._headers = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnFailure'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when a connection could not be established.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnFailure = function (value) {
                if (arguments.length == 1) {
                    this._onFailure = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnReceive'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when a message is received.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnReceive = function (value) {
                if (arguments.length == 1) {
                    this._onReceive = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke before the handshake request is sent.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnRequestCreated = function (value) {
                if (arguments.length == 1) {
                    this._onRequestCreated = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke after the handshake response is received.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnResponseReceived = function (value) {
                if (arguments.length == 1) {
                    this._onResponseReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnStreamFailure'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when a successful connection breaks down.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnStreamFailure = function (value) {
                if (arguments.length == 1) {
                    this._onStreamFailure = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnSuccess'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when a successful connection has been established.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setOnSuccess = function (value) {
                if (arguments.length == 1) {
                    this._onSuccess = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setSender'>&nbsp;</span>**/
            /**
             <div>
             Sets the sender of the request.
             </div>
    
    
            @param {Object} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenArgs-setStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the timeout for the stream (in ms).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebSocketOpenArgs.prototype.setStreamTimeout = function (value) {
                if (arguments.length == 1) {
                    this._streamTimeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketOpenArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketOpenArgs = WebSocketOpenArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.webSocketOpenArgs.onFailure`.
         </div>
    
        */
        var WebSocketOpenFailureArgs = /** @class */ (function (_super) {
            __extends(WebSocketOpenFailureArgs, _super);
            function WebSocketOpenFailureArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketOpenFailureArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketOpenFailureArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception generated while connecting.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            WebSocketOpenFailureArgs.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original arguments passed to the open method.
             </div>
    
    
            @return {fm.icelink.WebSocketOpenArgs}
            */
            WebSocketOpenFailureArgs.prototype.getOpenArgs = function () {
                if (arguments.length == 0) {
                    return this._openArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the status code associated with the failure to connect.
             </div>
    
    
            @return {fm.icelink.WebSocketStatusCode}
            */
            WebSocketOpenFailureArgs.prototype.getStatusCode = function () {
                if (arguments.length == 0) {
                    return this._statusCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setException'>&nbsp;</span>**/
            /**
             <div>
             Sets the exception generated while connecting.
             </div>
    
    
            @param {fm.icelink.Exception} value
            @return {void}
            */
            WebSocketOpenFailureArgs.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original arguments passed to the open method.
             </div>
    
    
            @param {fm.icelink.WebSocketOpenArgs} value
            @return {void}
            */
            WebSocketOpenFailureArgs.prototype.setOpenArgs = function (value) {
                if (arguments.length == 1) {
                    this._openArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the status code associated with the failure to connect.
             </div>
    
    
            @param {fm.icelink.WebSocketStatusCode} value
            @return {void}
            */
            WebSocketOpenFailureArgs.prototype.setStatusCode = function (value) {
                if (arguments.length == 1) {
                    this._statusCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketOpenFailureArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketOpenFailureArgs = WebSocketOpenFailureArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.webSocketOpenArgs.onSuccess`.
         </div>
    
        */
        var WebSocketOpenSuccessArgs = /** @class */ (function (_super) {
            __extends(WebSocketOpenSuccessArgs, _super);
            function WebSocketOpenSuccessArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketOpenSuccessArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketOpenSuccessArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketOpenSuccessArgs-getOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original arguments passed to the open method.
             </div>
    
    
            @return {fm.icelink.WebSocketOpenArgs}
            */
            WebSocketOpenSuccessArgs.prototype.getOpenArgs = function () {
                if (arguments.length == 0) {
                    return this._openArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketOpenSuccessArgs-setOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original arguments passed to the open method.
             </div>
    
    
            @param {fm.icelink.WebSocketOpenArgs} value
            @return {void}
            */
            WebSocketOpenSuccessArgs.prototype.setOpenArgs = function (value) {
                if (arguments.length == 1) {
                    this._openArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketOpenSuccessArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketOpenSuccessArgs = WebSocketOpenSuccessArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.webSocketOpenArgs.onReceive`.
         </div>
    
        */
        var WebSocketReceiveArgs = /** @class */ (function (_super) {
            __extends(WebSocketReceiveArgs, _super);
            function WebSocketReceiveArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketReceiveArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketReceiveArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-getBinaryMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the message received from the server as binary data.
             </div>
    
    
            @return {Uint8Array}
            */
            WebSocketReceiveArgs.prototype.getBinaryMessage = function () {
                if (arguments.length == 0) {
                    return this._binaryMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-getIsText'>&nbsp;</span>**/
            /**
             <div>
             Gets whether or not the received message is text.
             </div>
    
    
            @return {boolean}
            */
            WebSocketReceiveArgs.prototype.getIsText = function () {
                if (arguments.length == 0) {
                    return (!fm.icelink.Global.equals(this.getTextMessage(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-getOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original arguments passed to the open method.
             </div>
    
    
            @return {fm.icelink.WebSocketOpenArgs}
            */
            WebSocketReceiveArgs.prototype.getOpenArgs = function () {
                if (arguments.length == 0) {
                    return this._openArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-getTextMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the message received from the server as text data.
             </div>
    
    
            @return {string}
            */
            WebSocketReceiveArgs.prototype.getTextMessage = function () {
                if (arguments.length == 0) {
                    return this._textMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-setBinaryMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets the message received from the server as binary data.
             </div>
    
    
            @param {Uint8Array} value
            @return {void}
            */
            WebSocketReceiveArgs.prototype.setBinaryMessage = function (value) {
                if (arguments.length == 1) {
                    this._binaryMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-setOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original arguments passed to the open method.
             </div>
    
    
            @param {fm.icelink.WebSocketOpenArgs} value
            @return {void}
            */
            WebSocketReceiveArgs.prototype.setOpenArgs = function (value) {
                if (arguments.length == 1) {
                    this._openArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketReceiveArgs-setTextMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets the message received from the server as text data.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebSocketReceiveArgs.prototype.setTextMessage = function (value) {
                if (arguments.length == 1) {
                    this._textMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketReceiveArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketReceiveArgs = WebSocketReceiveArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var WebSocketRequest = /** @class */ (function () {
            function WebSocketRequest() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketRequest.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketRequest]';
            };
            WebSocketRequest.prototype.getArgs = function () {
                if (arguments.length == 0) {
                    return this._args;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketRequest.prototype.getCallback = function () {
                if (arguments.length == 0) {
                    return this._callback;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketRequest.prototype.setArgs = function (value) {
                if (arguments.length == 1) {
                    this._args = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            WebSocketRequest.prototype.setCallback = function (value) {
                if (arguments.length == 1) {
                    this._callback = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketRequest;
        }());
        icelink.WebSocketRequest = WebSocketRequest;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Send arguments for the `fm.icelink.webSocket` class.
         </div>
    
        */
        var WebSocketSendArgs = /** @class */ (function (_super) {
            __extends(WebSocketSendArgs, _super);
            /**<span id='method-fm.icelink.WebSocketSendArgs-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new `fm.icelink.webSocketSendArgs` instance.
             </div>
    
    
            @return {}
            */
            function WebSocketSendArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkWebSocketSendArgsInit();
                    _this.setTimeout(15000);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketSendArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketSendArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            WebSocketSendArgs.prototype.fmicelinkWebSocketSendArgsInit = function () {
                this._timeout = 0;
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-getBinaryMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the message to send as binary data.
             </div>
    
    
            @return {Uint8Array}
            */
            WebSocketSendArgs.prototype.getBinaryMessage = function () {
                if (arguments.length == 0) {
                    return this._binaryMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketSendArgs.prototype.getIsText = function () {
                if (arguments.length == 0) {
                    return (!fm.icelink.Global.equals(this.getTextMessage(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-getTextMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the message to send as text data.
             </div>
    
    
            @return {string}
            */
            WebSocketSendArgs.prototype.getTextMessage = function () {
                if (arguments.length == 0) {
                    return this._textMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-getTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the timeout for the request (in ms).
             </div>
    
    
            @return {number}
            */
            WebSocketSendArgs.prototype.getTimeout = function () {
                if (arguments.length == 0) {
                    return this._timeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-setBinaryMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets the message to send as binary data.
             </div>
    
    
            @param {Uint8Array} value
            @return {void}
            */
            WebSocketSendArgs.prototype.setBinaryMessage = function (value) {
                if (arguments.length == 1) {
                    this._binaryMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-setTextMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets the message to send as text data.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebSocketSendArgs.prototype.setTextMessage = function (value) {
                if (arguments.length == 1) {
                    this._textMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketSendArgs-setTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the timeout for the request (in ms).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebSocketSendArgs.prototype.setTimeout = function (value) {
                if (arguments.length == 1) {
                    this._timeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketSendArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketSendArgs = WebSocketSendArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var WebSocketStatusCodeWrapper = /** @class */ (function () {
            function WebSocketStatusCodeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_15 = __arguments[0];
                    //super();
                    this._value = value_15;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketStatusCodeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketStatusCodeWrapper]';
            };
            WebSocketStatusCodeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.WebSocketStatusCode.Normal)
                        return 'Normal';
                    if (this._value == fm.icelink.WebSocketStatusCode.GoingAway)
                        return 'GoingAway';
                    if (this._value == fm.icelink.WebSocketStatusCode.ProtocolError)
                        return 'ProtocolError';
                    if (this._value == fm.icelink.WebSocketStatusCode.InvalidType)
                        return 'InvalidType';
                    if (this._value == fm.icelink.WebSocketStatusCode.NoStatus)
                        return 'NoStatus';
                    if (this._value == fm.icelink.WebSocketStatusCode.Abnormal)
                        return 'Abnormal';
                    if (this._value == fm.icelink.WebSocketStatusCode.InvalidData)
                        return 'InvalidData';
                    if (this._value == fm.icelink.WebSocketStatusCode.PolicyViolation)
                        return 'PolicyViolation';
                    if (this._value == fm.icelink.WebSocketStatusCode.MessageTooLarge)
                        return 'MessageTooLarge';
                    if (this._value == fm.icelink.WebSocketStatusCode.UnsupportedExtension)
                        return 'UnsupportedExtension';
                    if (this._value == fm.icelink.WebSocketStatusCode.UnexpectedCondition)
                        return 'UnexpectedCondition';
                    if (this._value == fm.icelink.WebSocketStatusCode.SecureHandshakeFailure)
                        return 'SecureHandshakeFailure';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketStatusCodeWrapper;
        }());
        icelink.WebSocketStatusCodeWrapper = WebSocketStatusCodeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for `fm.icelink.webSocketOpenArgs.onStreamFailure`.
         </div>
    
        */
        var WebSocketStreamFailureArgs = /** @class */ (function (_super) {
            __extends(WebSocketStreamFailureArgs, _super);
            function WebSocketStreamFailureArgs() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketStreamFailureArgs.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketStreamFailureArgs]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getException'>&nbsp;</span>**/
            /**
             <div>
             Gets the exception generated by the active connection.
             </div>
    
    
            @return {fm.icelink.Exception}
            */
            WebSocketStreamFailureArgs.prototype.getException = function () {
                if (arguments.length == 0) {
                    return this._exception;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Gets the original arguments passed to the open method.
             </div>
    
    
            @return {fm.icelink.WebSocketOpenArgs}
            */
            WebSocketStreamFailureArgs.prototype.getOpenArgs = function () {
                if (arguments.length == 0) {
                    return this._openArgs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Gets the status code associated with the stream failure.
             </div>
    
    
            @return {fm.icelink.WebSocketStatusCode}
            */
            WebSocketStreamFailureArgs.prototype.getStatusCode = function () {
                if (arguments.length == 0) {
                    return this._statusCode;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setException'>&nbsp;</span>**/
            /**
             <div>
             Sets the exception generated by the active connection.
             </div>
    
    
            @param {fm.icelink.Exception} value
            @return {void}
            */
            WebSocketStreamFailureArgs.prototype.setException = function (value) {
                if (arguments.length == 1) {
                    this._exception = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setOpenArgs'>&nbsp;</span>**/
            /**
             <div>
             Sets the original arguments passed to the open method.
             </div>
    
    
            @param {fm.icelink.WebSocketOpenArgs} value
            @return {void}
            */
            WebSocketStreamFailureArgs.prototype.setOpenArgs = function (value) {
                if (arguments.length == 1) {
                    this._openArgs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setStatusCode'>&nbsp;</span>**/
            /**
             <div>
             Sets the status code associated with the stream failure.
             </div>
    
    
            @param {fm.icelink.WebSocketStatusCode} value
            @return {void}
            */
            WebSocketStreamFailureArgs.prototype.setStatusCode = function (value) {
                if (arguments.length == 1) {
                    this._statusCode = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketStreamFailureArgs;
        }(fm.icelink.Dynamic));
        icelink.WebSocketStreamFailureArgs = WebSocketStreamFailureArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base class that defines methods for transferring content over the WebSocket protocol.
         </div>
    
        */
        var WebSocketTransfer = /** @class */ (function () {
            /**<span id='method-fm.icelink.WebSocketTransfer-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.webSocketTransfer` class.
             </div>
    
            @param {string} url The URL.
            @return {}
            */
            function WebSocketTransfer(url) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var url_1 = __arguments[0];
                    //super();
                    this.fmicelinkWebSocketTransferInit();
                    this.setUrl(url_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketTransfer.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketTransfer]';
            };
            WebSocketTransfer.prototype.fmicelinkWebSocketTransferInit = function () {
                this._handshakeTimeout = 0;
                this._streamTimeout = 0;
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getHandshakeTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the timeout for the initial handshake (in ms).
             </div>
    
    
            @return {number}
            */
            WebSocketTransfer.prototype.getHandshakeTimeout = function () {
                if (arguments.length == 0) {
                    return this._handshakeTimeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getOnOpenFailure'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke if the handshake fails.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>}
            */
            WebSocketTransfer.prototype.getOnOpenFailure = function () {
                if (arguments.length == 0) {
                    return this._onOpenFailure;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getOnOpenSuccess'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke if the handshake succeeds.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>}
            */
            WebSocketTransfer.prototype.getOnOpenSuccess = function () {
                if (arguments.length == 0) {
                    return this._onOpenSuccess;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when the handshake request is created.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
            */
            WebSocketTransfer.prototype.getOnRequestCreated = function () {
                if (arguments.length == 0) {
                    return this._onRequestCreated;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke when the handshake response is received.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
            */
            WebSocketTransfer.prototype.getOnResponseReceived = function () {
                if (arguments.length == 0) {
                    return this._onResponseReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getOnStreamFailure'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback to invoke if the stream errors out.
             </div>
    
    
            @return {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>}
            */
            WebSocketTransfer.prototype.getOnStreamFailure = function () {
                if (arguments.length == 0) {
                    return this._onStreamFailure;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender of the messages.
             </div>
    
    
            @return {Object}
            */
            WebSocketTransfer.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Gets the timeout for the stream (in ms).
             </div>
    
    
            @return {number}
            */
            WebSocketTransfer.prototype.getStreamTimeout = function () {
                if (arguments.length == 0) {
                    return this._streamTimeout;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-getUrl'>&nbsp;</span>**/
            /**
             <div>
             Gets the URL.
             </div>
    
    
            @return {string}
            */
            WebSocketTransfer.prototype.getUrl = function () {
                if (arguments.length == 0) {
                    return this.__url;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setHandshakeTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the timeout for the initial handshake (in ms).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebSocketTransfer.prototype.setHandshakeTimeout = function (value) {
                if (arguments.length == 1) {
                    this._handshakeTimeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setOnOpenFailure'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke if the handshake fails.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>} value
            @return {void}
            */
            WebSocketTransfer.prototype.setOnOpenFailure = function (value) {
                if (arguments.length == 1) {
                    this._onOpenFailure = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setOnOpenSuccess'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke if the handshake succeeds.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>} value
            @return {void}
            */
            WebSocketTransfer.prototype.setOnOpenSuccess = function (value) {
                if (arguments.length == 1) {
                    this._onOpenSuccess = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setOnRequestCreated'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when the handshake request is created.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
            @return {void}
            */
            WebSocketTransfer.prototype.setOnRequestCreated = function (value) {
                if (arguments.length == 1) {
                    this._onRequestCreated = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setOnResponseReceived'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke when the handshake response is received.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
            @return {void}
            */
            WebSocketTransfer.prototype.setOnResponseReceived = function (value) {
                if (arguments.length == 1) {
                    this._onResponseReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setOnStreamFailure'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback to invoke if the stream errors out.
             </div>
    
    
            @param {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>} value
            @return {void}
            */
            WebSocketTransfer.prototype.setOnStreamFailure = function (value) {
                if (arguments.length == 1) {
                    this._onStreamFailure = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setSender'>&nbsp;</span>**/
            /**
             <div>
             Sets the sender of the messages.
             </div>
    
    
            @param {Object} value
            @return {void}
            */
            WebSocketTransfer.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setStreamTimeout'>&nbsp;</span>**/
            /**
             <div>
             Sets the timeout for the stream (in ms).
             </div>
    
    
            @param {number} value
            @return {void}
            */
            WebSocketTransfer.prototype.setStreamTimeout = function (value) {
                if (arguments.length == 1) {
                    this._streamTimeout = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransfer-setUrl'>&nbsp;</span>**/
            /**
             <div>
             Sets the URL.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            WebSocketTransfer.prototype.setUrl = function (value) {
                if (arguments.length == 1) {
                    value = fm.icelink.StringExtensions.replace(value, "https://", "wss://");
                    value = fm.icelink.StringExtensions.replace(value, "http://", "ws://");
                    this.__url = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketTransfer;
        }());
        icelink.WebSocketTransfer = WebSocketTransfer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Creates implementations of `fm.icelink.webSocketWebRequestTransfer`.
         </div>
    
        */
        var WebSocketTransferFactory = /** @class */ (function () {
            function WebSocketTransferFactory() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            WebSocketTransferFactory.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketTransferFactory]';
            };
            /**
            @internal
    
            */
            WebSocketTransferFactory.defaultCreateWebSocketTransfer = function (url) {
                if (arguments.length == 1) {
                    return new fm.icelink.WebSocketWebRequestTransfer(url);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransferFactory-getCreateWebSocketTransfer'>&nbsp;</span>**/
            /**
             <div>
             Gets the callback that creates a WebSocket-based transfer class.
             </div>
    
    
            @return {fm.icelink.IFunction1<string,fm.icelink.WebSocketTransfer>}
            */
            WebSocketTransferFactory.getCreateWebSocketTransfer = function () {
                if (arguments.length == 0) {
                    return fm.icelink.WebSocketTransferFactory.fm_icelink_WebSocketTransferFactory__createWebSocketTransfer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransferFactory-getWebSocketTransfer'>&nbsp;</span>**/
            /**
             <div>
             Gets an instance of the WebSocket-based transfer class.
             </div>
    
    
            @param {string} url
            @return {fm.icelink.WebSocketTransfer}
            */
            WebSocketTransferFactory.getWebSocketTransfer = function (url) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(fm.icelink.WebSocketTransferFactory.getCreateWebSocketTransfer(), null))) {
                        fm.icelink.WebSocketTransferFactory.setCreateWebSocketTransfer(fm.icelink.WebSocketTransferFactory.defaultCreateWebSocketTransfer.bind(fm.icelink.WebSocketTransferFactory));
                    }
                    var transfer = fm.icelink.WebSocketTransferFactory.getCreateWebSocketTransfer()(url);
                    if ((fm.icelink.Global.equals(transfer, null))) {
                        transfer = fm.icelink.WebSocketTransferFactory.defaultCreateWebSocketTransfer(url);
                    }
                    return transfer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketTransferFactory-setCreateWebSocketTransfer'>&nbsp;</span>**/
            /**
             <div>
             Sets the callback that creates a WebSocket-based transfer class.
             </div>
    
    
            @param {fm.icelink.IFunction1<string,fm.icelink.WebSocketTransfer>} value
            @return {void}
            */
            WebSocketTransferFactory.setCreateWebSocketTransfer = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.WebSocketTransferFactory.fm_icelink_WebSocketTransferFactory__createWebSocketTransfer = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketTransferFactory;
        }());
        icelink.WebSocketTransferFactory = WebSocketTransferFactory;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="WebSocketTransfer.ts" />

/// <reference path="WebSocketTransfer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Defines methods for transferring messages using the WebSocket protocol.
         </div>
    
        */
        var WebSocketWebRequestTransfer = /** @class */ (function (_super) {
            __extends(WebSocketWebRequestTransfer, _super);
            /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of `fm.icelink.webSocketWebRequestTransfer`.
             </div>
    
            @param {string} url The URL.
            @return {}
            */
            function WebSocketWebRequestTransfer(url) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var url_2 = __arguments[0];
                    _this = _super.call(this, url_2) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            WebSocketWebRequestTransfer.prototype.getTypeString = function () {
                return '[fm.icelink.WebSocketWebRequestTransfer]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.connectFailure = function (e) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(_super.prototype.getOnOpenFailure.call(this), null))) {
                        _super.prototype.getOnOpenFailure.call(this)(e);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.connectSuccess = function (e) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(_super.prototype.getOnOpenSuccess.call(this), null))) {
                        _super.prototype.getOnOpenSuccess.call(this)(e);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.getWebSocket = function () {
                if (arguments.length == 0) {
                    return this._webSocket;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-open'>&nbsp;</span>**/
            /**
             <div>
             Opens the WebSocket connection.
             </div>
    
    
            @param {fm.icelink.NameValueCollection} headers
            @return {void}
            */
            WebSocketWebRequestTransfer.prototype.open = function (headers) {
                if (arguments.length == 1) {
                    this.setWebSocket(new fm.icelink.WebSocket(_super.prototype.getUrl.call(this)));
                    try {
                        var openArgs = new fm.icelink.WebSocketOpenArgs();
                        openArgs.setHandshakeTimeout(_super.prototype.getHandshakeTimeout.call(this));
                        openArgs.setHeaders(headers);
                        openArgs.setOnSuccess(this.connectSuccess.bind(this));
                        openArgs.setOnFailure(this.connectFailure.bind(this));
                        openArgs.setOnStreamFailure(this.streamFailure.bind(this));
                        openArgs.setOnRequestCreated(_super.prototype.getOnRequestCreated.call(this));
                        openArgs.setOnResponseReceived(_super.prototype.getOnResponseReceived.call(this));
                        openArgs.setOnReceive(this.receive.bind(this));
                        openArgs.setSender(_super.prototype.getSender.call(this));
                        this.getWebSocket().open(openArgs);
                    }
                    catch (exception) {
                        fm.icelink.Log.error("Could not open WebSocket.", exception);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.receive = function (e) {
                if (arguments.length == 1) {
                    var p = new fm.icelink.HttpResponseArgs(this._activeRequest.getArgs());
                    p.setTextContent(e.getTextMessage());
                    p.setBinaryContent(e.getBinaryMessage());
                    this._activeRequest.getCallback()(p);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-send'>&nbsp;</span>**/
            /**
             <div>
             Sends a request synchronously.
             </div>
    
            @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
            @return {fm.icelink.HttpResponseArgs} The response parameters.
            */
            WebSocketWebRequestTransfer.prototype.send = function (requestArgs) {
                if (arguments.length == 1) {
                    throw new fm.icelink.Exception("Synchronous WebSockets are not supported.");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-sendAsync'>&nbsp;</span>**/
            /**
             <div>
             Sends a request asynchronously.
             </div>
    
            @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
            @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute with the resulting response.
            @return {void}
            */
            WebSocketWebRequestTransfer.prototype.sendAsync = function (requestArgs, callback) {
                if (arguments.length == 2) {
                    try {
                        var request2 = new fm.icelink.WebSocketRequest();
                        request2.setArgs(requestArgs);
                        request2.setCallback(callback);
                        var request = request2;
                        var args2 = new fm.icelink.WebSocketSendArgs();
                        args2.setTimeout(request.getArgs().getTimeout());
                        var sendArgs = args2;
                        sendArgs.setTextMessage(request.getArgs().getTextContent());
                        sendArgs.setBinaryMessage(request.getArgs().getBinaryContent());
                        this._activeRequest = request;
                        this.getWebSocket().send(sendArgs);
                    }
                    catch (exception) {
                        var p = new fm.icelink.HttpResponseArgs(requestArgs);
                        p.setException(exception);
                        p.setStatusCode(0);
                        callback(p);
                    }
                    finally {
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.setWebSocket = function (value) {
                if (arguments.length == 1) {
                    this._webSocket = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-shutdown'>&nbsp;</span>**/
            /**
             <div>
             Releases any resources and shuts down.
             </div>
    
    
            @return {void}
            */
            WebSocketWebRequestTransfer.prototype.shutdown = function () {
                if (arguments.length == 0) {
                    this.getWebSocket().close();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            WebSocketWebRequestTransfer.prototype.streamFailure = function (e) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(_super.prototype.getOnStreamFailure.call(this), null))) {
                        _super.prototype.getOnStreamFailure.call(this)(e);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return WebSocketWebRequestTransfer;
        }(fm.icelink.WebSocketTransfer));
        icelink.WebSocketWebRequestTransfer = WebSocketWebRequestTransfer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A media buffer.
         </div><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam>
    
        */
        var MediaBuffer = /** @class */ (function (_super) {
            __extends(MediaBuffer, _super);
            function MediaBuffer() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObjectType(arguments[0][0], '[fm.icelink.DataBuffer]')))))) {
                    var dataBuffers = __arguments[0];
                    var format = __arguments[1];
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaBufferInit();
                    _this.setDataBuffers(dataBuffers);
                    _this.setFormat(format);
                }
                else if (__arguments.length == 2 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.DataBuffer]'))) {
                    var dataBuffer = __arguments[0];
                    var format = __arguments[1];
                    // chained constructor: MediaBuffer.call(this, [dataBuffer], format);
                    __arguments = new Array(2);
                    __arguments[0] = [dataBuffer];
                    __arguments[1] = format;
                    {
                        var dataBuffers = __arguments[0];
                        var format_1 = __arguments[1];
                        _this = _super.call(this) || this;
                        _this.fmicelinkMediaBufferInit();
                        _this.setDataBuffers(dataBuffers);
                        _this.setFormat(format_1);
                    }
                }
                else if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaBufferInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaBuffer.prototype.getTypeString = function () {
                return '[fm.icelink.MediaBuffer]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaBuffer.prototype.fmicelinkMediaBufferInit = function () {
                this._recoveredByFec = false;
            };
            /**<span id='method-fm.icelink.MediaBuffer-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this instance.
             </div>
    
    
            @return {TBuffer}
            */
            MediaBuffer.prototype.clone = function () {
                if (arguments.length == 0) {
                    var local = this.createInstance();
                    local.setDataBuffers(this.getDataBuffers());
                    local.setSequenceNumbers(this.getSequenceNumbers());
                    if ((!fm.icelink.Global.equals(this.getRtpHeaders(), null))) {
                        local.setRtpHeaders(new Array(this.getRtpHeaders().length));
                        for (var i = 0; (i < local.getRtpHeaders().length); i++) {
                            if ((!fm.icelink.Global.equals(this.getRtpHeaders()[i], null))) {
                                local.getRtpHeaders()[i] = this.getRtpHeaders()[i].clone();
                            }
                        }
                    }
                    local.setFormat(this.getFormat().clone());
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-free'>&nbsp;</span>**/
            /**
             <div>
             Frees the data buffers referenced by this instance.
             </div>
    
            @return {TBuffer} This instance.
            */
            MediaBuffer.prototype.free = function () {
                if (arguments.length == 0) {
                    for (var _i = 0, _a = this.getDataBuffers(); _i < _a.length; _i++) {
                        var buffer = _a[_i];
                        buffer.free();
                    }
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getDataBuffer'>&nbsp;</span>**/
            /**
             <div>
             Gets the data buffer.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            MediaBuffer.prototype.getDataBuffer = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getDataBuffers());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getDataBuffers'>&nbsp;</span>**/
            /**
             <div>
             Gets the data buffers.
             </div>
    
    
            @return {fm.icelink.DataBuffer[]}
            */
            MediaBuffer.prototype.getDataBuffers = function () {
                if (arguments.length == 0) {
                    return this._dataBuffers;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getFormat'>&nbsp;</span>**/
            /**
             <div>
             Gets the format.
             </div>
    
    
            @return {TFormat}
            */
            MediaBuffer.prototype.getFormat = function () {
                if (arguments.length == 0) {
                    return this._format;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaBuffer.prototype.getIsPacketized = function () {
                if (arguments.length == 0) {
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getLastSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Gets the last sequence number.
             </div>
    
    
            @return {number}
            */
            MediaBuffer.prototype.getLastSequenceNumber = function () {
                if (arguments.length == 0) {
                    var sequenceNumbers = this.getSequenceNumbers();
                    if ((fm.icelink.Global.equals(sequenceNumbers, null))) {
                        return 0;
                    }
                    return sequenceNumbers[(sequenceNumbers.length - 1)];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getRecoveredByFec'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer contains
             data recovered by forward error correction (FEC).
             </div>
    
    
            @return {boolean}
            */
            MediaBuffer.prototype.getRecoveredByFec = function () {
                if (arguments.length == 0) {
                    return this._recoveredByFec;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getRtpHeader'>&nbsp;</span>**/
            /**
             <div>
             Gets the Rtp Packet Header for this media buffer.
             </div>
    
    
            @return {fm.icelink.RtpPacketHeader}
            */
            MediaBuffer.prototype.getRtpHeader = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getRtpHeaders());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getRtpHeaders'>&nbsp;</span>**/
            /**
             <div>
             Gets the Rtp Packet Headers for this media buffer.
             </div>
    
    
            @return {fm.icelink.RtpPacketHeader[]}
            */
            MediaBuffer.prototype.getRtpHeaders = function () {
                if (arguments.length == 0) {
                    return this._rtpHeaders;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getRtpSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Gets the RTP sequence number.
             </div>
    
    
            @return {number}
            */
            MediaBuffer.prototype.getRtpSequenceNumber = function () {
                if (arguments.length == 0) {
                    var rtpSequenceNumbers = this.getRtpSequenceNumbers();
                    if ((fm.icelink.Global.equals(rtpSequenceNumbers, null))) {
                        return 0;
                    }
                    return rtpSequenceNumbers[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getRtpSequenceNumbers'>&nbsp;</span>**/
            /**
             <div>
             Gets the RTP sequence numbers.
             </div>
    
    
            @return {number[]}
            */
            MediaBuffer.prototype.getRtpSequenceNumbers = function () {
                if (arguments.length == 0) {
                    var numArray = null;
                    if (this.getIsPacketized()) {
                        numArray = new Array(this.getRtpHeaders().length);
                        for (var i = 0; (i < numArray.length); i++) {
                            numArray[i] = this.getRtpHeaders()[i].getSequenceNumber();
                        }
                    }
                    return numArray;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Gets the sequence number.
             </div>
    
    
            @return {number}
            */
            MediaBuffer.prototype.getSequenceNumber = function () {
                if (arguments.length == 0) {
                    var sequenceNumbers = this.getSequenceNumbers();
                    if ((fm.icelink.Global.equals(sequenceNumbers, null))) {
                        return 0;
                    }
                    return sequenceNumbers[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getSequenceNumbers'>&nbsp;</span>**/
            /**
             <div>
             Gets the sequence numbers.
             </div>
    
    
            @return {number[]}
            */
            MediaBuffer.prototype.getSequenceNumbers = function () {
                if (arguments.length == 0) {
                    return this._sequenceNumbers;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-getSourceId'>&nbsp;</span>**/
            /**
             <div>
             Gets the source identifier.
             </div>
    
    
            @return {string}
            */
            MediaBuffer.prototype.getSourceId = function () {
                if (arguments.length == 0) {
                    return this._sourceId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-keep'>&nbsp;</span>**/
            /**
             <div>
             Keeps the data buffers referenced by this instance.
             </div>
    
            @return {TBuffer} This instance.
            */
            MediaBuffer.prototype.keep = function () {
                if (arguments.length == 0) {
                    for (var _i = 0, _a = this.getDataBuffers(); _i < _a.length; _i++) {
                        var buffer = _a[_i];
                        buffer.keep();
                    }
                    return this;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setDataBuffer'>&nbsp;</span>**/
            /**
             <div>
             Sets the data buffer.
             </div>
    
    
            @param {fm.icelink.DataBuffer} value
            @return {void}
            */
            MediaBuffer.prototype.setDataBuffer = function (value) {
                if (arguments.length == 1) {
                    this.setDataBuffers(((fm.icelink.Global.equals(value, null)) ? null : [value]));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setDataBuffers'>&nbsp;</span>**/
            /**
             <div>
             Sets the data buffers.
             </div>
    
    
            @param {fm.icelink.DataBuffer[]} value
            @return {void}
            */
            MediaBuffer.prototype.setDataBuffers = function (value) {
                if (arguments.length == 1) {
                    this._dataBuffers = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setFormat'>&nbsp;</span>**/
            /**
             <div>
             Sets the format.
             </div>
    
    
            @param {TFormat} value
            @return {void}
            */
            MediaBuffer.prototype.setFormat = function (value) {
                if (arguments.length == 1) {
                    this._format = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setRecoveredByFec'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether this buffer contains
             data recovered by forward error correction (FEC).
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            MediaBuffer.prototype.setRecoveredByFec = function (value) {
                if (arguments.length == 1) {
                    this._recoveredByFec = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setRtpHeader'>&nbsp;</span>**/
            /**
             <div>
             Sets the Rtp Packet Header for this media buffer.
             </div>
    
    
            @param {fm.icelink.RtpPacketHeader} value
            @return {void}
            */
            MediaBuffer.prototype.setRtpHeader = function (value) {
                if (arguments.length == 1) {
                    this.setRtpHeaders(((fm.icelink.Global.equals(value, null)) ? null : [value]));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setRtpHeaders'>&nbsp;</span>**/
            /**
             <div>
             Sets the Rtp Packet Headers for this media buffer.
             </div>
    
    
            @param {fm.icelink.RtpPacketHeader[]} value
            @return {void}
            */
            MediaBuffer.prototype.setRtpHeaders = function (value) {
                if (arguments.length == 1) {
                    this._rtpHeaders = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Sets the sequence number.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaBuffer.prototype.setSequenceNumber = function (value) {
                if (arguments.length == 1) {
                    this.setSequenceNumbers([value]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setSequenceNumbers'>&nbsp;</span>**/
            /**
             <div>
             Sets the sequence numbers.
             </div>
    
    
            @param {number[]} value
            @return {void}
            */
            MediaBuffer.prototype.setSequenceNumbers = function (value) {
                if (arguments.length == 1) {
                    this._sequenceNumbers = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-setSourceId'>&nbsp;</span>**/
            /**
             <div>
             Sets the source identifier.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            MediaBuffer.prototype.setSourceId = function (value) {
                if (arguments.length == 1) {
                    this._sourceId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaBuffer-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
    
            @return {string}
            */
            MediaBuffer.prototype.toString = function () {
                if (arguments.length == 0) {
                    return this.getFormat().toString();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaBuffer;
        }(fm.icelink.Dynamic));
        icelink.MediaBuffer = MediaBuffer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of values.
         </div><typeparam name="T"></typeparam><typeparam name="TCollection"></typeparam>
    
        */
        var Collection = /** @class */ (function () {
            function Collection() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.__values = new Array();
                    this.__valuesLock = new Object();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Collection.prototype.getTypeString = function () {
                return '[fm.icelink.Collection]';
            };
            /**<span id='method-fm.icelink.Collection-add'>&nbsp;</span>**/
            /**
             <div>
             Adds a value.
             </div>
    
            @param {T} value The value.
            @return {boolean}
            */
            Collection.prototype.add = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(value, null))) {
                        if (!this.contains(value)) {
                            fm.icelink.ArrayExtensions.add(this.__values, value);
                            this.addSuccess(value);
                            return true;
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-addMany'>&nbsp;</span>**/
            /**
             <div>
             Adds some values.
             </div>
    
            @param {T[]} values The values.
            @return {boolean}
            */
            Collection.prototype.addMany = function (values) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(values, null))) {
                        fm.icelink.ArrayExtensions.addRange(this.__values, values);
                        for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                            var local = values_2[_i];
                            this.addSuccess(local);
                        }
                        return true;
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-addSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is added to the collection.
             </div>
    
            @param {T} value The value.
            @return {void}
            */
            Collection.prototype.addSuccess = function (value) {
                if (arguments.length == 1) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.any = function () {
                if (arguments.length == 1) {
                    var predicate = arguments[0];
                    for (var _i = 0, _a = this.__values; _i < _a.length; _i++) {
                        var local = _a[_i];
                        if (!((fm.icelink.Global.equals(predicate, null)) ? false : !predicate(local))) {
                            return true;
                        }
                    }
                    return false;
                }
                else if (arguments.length == 0) {
                    return this.any(null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-contains'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the collection contains a value.
             </div>
    
            @param {T} value The value.
            @return {boolean}
            */
            Collection.prototype.contains = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(value, null))) {
                        return fm.icelink.ArrayExtensions.contains(this.__values, value);
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.first = function () {
                if (arguments.length == 1) {
                    var predicate = arguments[0];
                    var local = this.firstOrDefault(predicate);
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain any matching values.");
                    }
                    return local;
                }
                else if (arguments.length == 0) {
                    var local = this.firstOrDefault();
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain any values.");
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.firstOrDefault = function () {
                if (arguments.length == 0) {
                    return this.firstOrDefault(null);
                }
                else if (arguments.length == 1) {
                    var predicate = arguments[0];
                    for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__values)); i++) {
                        var p = this.__values[i];
                        if (!((fm.icelink.Global.equals(predicate, null)) ? false : !predicate(p))) {
                            return p;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-forEach'>&nbsp;</span>**/
            /**
             <div>
             Executes a callback function once per value.
             </div>
    
            @param {fm.icelink.IAction2<T,number>} callback The callback to execute.
            @return {void}
            */
            Collection.prototype.forEach = function (callback) {
                if (arguments.length == 1) {
                    var num = 0;
                    for (var _i = 0, _a = this.getValues(); _i < _a.length; _i++) {
                        var local = _a[_i];
                        callback(local, num++);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-getCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the count.
             </div>
    
    
            @return {number}
            */
            Collection.prototype.getCount = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ArrayExtensions.getCount(this.__values);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-getValue'>&nbsp;</span>**/
            /**
             <div>
             Gets the value.
             </div>
    
    
            @return {T}
            */
            Collection.prototype.getValue = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.ArrayExtensions.getCount(this.__values) > 0)) {
                        return this.__values[0];
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-getValues'>&nbsp;</span>**/
            /**
             <div>
             Gets the values.
             </div>
    
    
            @return {T[]}
            */
            Collection.prototype.getValues = function () {
                if (arguments.length == 0) {
                    return this.arrayFromList(this.__values);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.last = function () {
                if (arguments.length == 1) {
                    var predicate = arguments[0];
                    var local = this.lastOrDefault(predicate);
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain any matching values.");
                    }
                    return local;
                }
                else if (arguments.length == 0) {
                    var local = this.lastOrDefault();
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain any values.");
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.lastOrDefault = function () {
                if (arguments.length == 1) {
                    var predicate = arguments[0];
                    for (var i = (fm.icelink.ArrayExtensions.getCount(this.__values) - 1); (i > -1); i--) {
                        var p = this.__values[i];
                        if (!((fm.icelink.Global.equals(predicate, null)) ? false : !predicate(p))) {
                            return p;
                        }
                    }
                    return null;
                }
                else if (arguments.length == 0) {
                    return this.lastOrDefault(null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-remove'>&nbsp;</span>**/
            /**
             <div>
             Removes a value.
             </div>
    
            @param {T} value The value.
            @return {boolean}
            */
            Collection.prototype.remove = function (value) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(value, null))) {
                        if (fm.icelink.ArrayExtensions.remove(this.__values, value)) {
                            this.removeSuccess(value);
                            return true;
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-removeAll'>&nbsp;</span>**/
            /**
             <div>
             Removes all values.
             </div>
    
    
            @return {void}
            */
            Collection.prototype.removeAll = function () {
                if (arguments.length == 0) {
                    var list = this.__values;
                    this.__values = new Array();
                    for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
                        var local = list_2[_i];
                        this.removeSuccess(local);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.removeFirst = function () {
                if (arguments.length == 1) {
                    var condition = arguments[0];
                    for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__values)); i++) {
                        var p = this.__values[i];
                        if (condition(p)) {
                            return p;
                        }
                    }
                    return null;
                }
                else if (arguments.length == 0) {
                    if ((fm.icelink.ArrayExtensions.getCount(this.__values) > 0)) {
                        var local = this.__values[0];
                        this.remove(local);
                        return local;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.removeLast = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.ArrayExtensions.getCount(this.__values) > 0)) {
                        var local = this.__values[(fm.icelink.ArrayExtensions.getCount(this.__values) - 1)];
                        this.remove(local);
                        return local;
                    }
                    return null;
                }
                else if (arguments.length == 1) {
                    var condition = arguments[0];
                    for (var i = (fm.icelink.ArrayExtensions.getCount(this.__values) - 1); (i >= 0); i++) {
                        var p = this.__values[i];
                        if (condition(p)) {
                            return p;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-removeMany'>&nbsp;</span>**/
            /**
             <div>
             Removes some values.
             </div>
    
            @param {T[]} values The values.
            @return {boolean}
            */
            Collection.prototype.removeMany = function (values) {
                if (arguments.length == 1) {
                    if (((!fm.icelink.Global.equals(values, null)) && (values.length > 0))) {
                        var flag = false;
                        for (var _i = 0, values_3 = values; _i < values_3.length; _i++) {
                            var local = values_3[_i];
                            if (fm.icelink.ArrayExtensions.remove(this.__values, local)) {
                                flag = true;
                                this.removeSuccess(local);
                            }
                        }
                        return flag;
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-removeSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is removed from the collection.
             </div>
    
            @param {T} value The value.
            @return {void}
            */
            Collection.prototype.removeSuccess = function (value) {
                if (arguments.length == 1) {
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-replace'>&nbsp;</span>**/
            /**
             <div>
             Replaces the collection with a new set of values.
             </div>
    
            @param {T[]} values The values.
            @return {void}
            */
            Collection.prototype.replace = function (values) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.clear(this.__values);
                    if ((!fm.icelink.Global.equals(values, null))) {
                        fm.icelink.ArrayExtensions.addRange(this.__values, values);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-setValue'>&nbsp;</span>**/
            /**
             <div>
             Sets the value.
             </div>
    
    
            @param {T} value
            @return {void}
            */
            Collection.prototype.setValue = function (value) {
                if (arguments.length == 1) {
                    this.__values = new Array();
                    if ((!fm.icelink.Global.equals(value, null))) {
                        fm.icelink.ArrayExtensions.add(this.__values, value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-setValues'>&nbsp;</span>**/
            /**
             <div>
             Sets the values.
             </div>
    
    
            @param {T[]} value
            @return {void}
            */
            Collection.prototype.setValues = function (value) {
                if (arguments.length == 1) {
                    fm.icelink.ArrayExtensions.clear(this.__values);
                    if ((!fm.icelink.Global.equals(value, null))) {
                        fm.icelink.ArrayExtensions.addRange(this.__values, value);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.single = function () {
                if (arguments.length == 1) {
                    var predicate = arguments[0];
                    var local = this.singleOrDefault(predicate);
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain a single matching value.");
                    }
                    return local;
                }
                else if (arguments.length == 0) {
                    var local = this.singleOrDefault();
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception("The collection does not contain a single value.");
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Collection.prototype.singleOrDefault = function () {
                if (arguments.length == 0) {
                    return this.singleOrDefault(null);
                }
                else if (arguments.length == 1) {
                    var predicate = arguments[0];
                    if ((fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(this.__values), 1))) {
                        var p = this.__values[0];
                        if (!((fm.icelink.Global.equals(predicate, null)) ? false : !predicate(p))) {
                            return p;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-valueAt'>&nbsp;</span>**/
            /**
             <div>
             Gets the value at the specified index.
             Throws an exception if a value does
             not exist at that index.
             </div>
    
            @param {number} index The index.
            @return {T}
            */
            Collection.prototype.valueAt = function (index) {
                if (arguments.length == 1) {
                    var local = this.valueAtOrDefault(index);
                    if ((fm.icelink.Global.equals(local, null))) {
                        throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Value does not exist at index {0}.", fm.icelink.IntExtensions.toString(index)));
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-valueAtOrDefault'>&nbsp;</span>**/
            /**
             <div>
             Gets the value at the specified index.
             Returns a default value if a value does
             not exist at that index.
             </div>
    
            @param {number} index The index.
            @return {T}
            */
            Collection.prototype.valueAtOrDefault = function (index) {
                if (arguments.length == 1) {
                    if ((index < fm.icelink.ArrayExtensions.getCount(this.__values))) {
                        for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__values)); i++) {
                            if ((fm.icelink.Global.equals(i, index))) {
                                return this.__values[i];
                            }
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Collection-where'>&nbsp;</span>**/
            /**
             <div>
             Creates a new collection with values
             that match the specified predicate.
             </div>
    
            @param {fm.icelink.IFunction2<T,number,boolean>} predicate The predicate.
            @return {TCollection}
            */
            Collection.prototype.where = function (predicate) {
                if (arguments.length == 1) {
                    var local = this.createCollection();
                    for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(this.__values)); i++) {
                        var local2 = this.__values[i];
                        if (!((fm.icelink.Global.equals(predicate, null)) ? false : !predicate(local2, i))) {
                            local.add(local2);
                        }
                    }
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Collection;
        }());
        icelink.Collection = Collection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A media configuration.
         </div>
    
        */
        var MediaConfig = /** @class */ (function () {
            /**<span id='method-fm.icelink.MediaConfig-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.mediaConfig` class.
             </div>
    
            @param {number} clockRate The clock rate.
            @return {}
            */
            function MediaConfig(clockRate) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var clockRate_1 = __arguments[0];
                    //super();
                    this.fmicelinkMediaConfigInit();
                    this.setClockRate(clockRate_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MediaConfig.prototype.getTypeString = function () {
                return '[fm.icelink.MediaConfig]';
            };
            MediaConfig.prototype.fmicelinkMediaConfigInit = function () {
                this._clockRate = 0;
            };
            /**<span id='method-fm.icelink.MediaConfig-getClockRate'>&nbsp;</span>**/
            /**
             <div>
             Gets the clock rate.
             </div>
    
    
            @return {number}
            */
            MediaConfig.prototype.getClockRate = function () {
                if (arguments.length == 0) {
                    return this._clockRate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaConfig-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified configuration is equivalent.
             </div>
    
            @param {TConfig} config The configuration.
            @return {boolean}
            */
            MediaConfig.prototype.isEquivalent = function (config) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(config, null))) {
                        return false;
                    }
                    return (fm.icelink.Global.equals(this.getClockRate(), config.getClockRate()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaConfig.prototype.setClockRate = function (value) {
                if (arguments.length == 1) {
                    this._clockRate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaConfig;
        }());
        icelink.MediaConfig = MediaConfig;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaConfig.ts" />

/// <reference path="MediaConfig.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An audio configuration.
         </div>
    
        */
        var AudioConfig = /** @class */ (function (_super) {
            __extends(AudioConfig, _super);
            /**<span id='method-fm.icelink.AudioConfig-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.audioConfig` class.
             </div>
    
            @param {number} clockRate The clock rate.
            @param {number} channelCount The channel count.
            @return {}
            */
            function AudioConfig(clockRate, channelCount) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var clockRate_2 = __arguments[0];
                    var channelCount_1 = __arguments[1];
                    _this = _super.call(this, clockRate_2) || this;
                    _this.fmicelinkAudioConfigInit();
                    _this.setChannelCount(channelCount_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            AudioConfig.prototype.getTypeString = function () {
                return '[fm.icelink.AudioConfig]' + ',' + _super.prototype.getTypeString.call(this);
            };
            AudioConfig.prototype.fmicelinkAudioConfigInit = function () {
                this._channelCount = 0;
            };
            /**<span id='method-fm.icelink.AudioConfig-getChannelCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the channel count.
             </div>
    
    
            @return {number}
            */
            AudioConfig.prototype.getChannelCount = function () {
                if (arguments.length == 0) {
                    return this._channelCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioConfig-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified configuration is equivalent.
             </div>
    
            @param {fm.icelink.AudioConfig} config The configuration.
            @return {boolean}
            */
            AudioConfig.prototype.isEquivalent = function (config) {
                if (arguments.length == 1) {
                    if (!_super.prototype.isEquivalent.call(this, config)) {
                        return false;
                    }
                    return (fm.icelink.Global.equals(this.getChannelCount(), config.getChannelCount()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            AudioConfig.prototype.setChannelCount = function (value) {
                if (arguments.length == 1) {
                    this._channelCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioConfig-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
    
            @return {string}
            */
            AudioConfig.prototype.toString = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.format("Clock Rate: {0}, Channel Count: {1}", fm.icelink.IntExtensions.toString(_super.prototype.getClockRate.call(this)), fm.icelink.IntExtensions.toString(this.getChannelCount()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return AudioConfig;
        }(fm.icelink.MediaConfig));
        icelink.AudioConfig = AudioConfig;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A media format.
         </div>
    
        */
        var MediaFormat = /** @class */ (function () {
            function MediaFormat() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkMediaFormatInit();
                    this.setRegisteredPayloadType(-1);
                    this.setStaticPayloadType(-1);
                }
                else if (__arguments.length == 2) {
                    var name_8 = __arguments[0];
                    var clockRate = __arguments[1];
                    //super();
                    this.fmicelinkMediaFormatInit();
                    this.setName(name_8);
                    this.setClockRate(clockRate);
                    this.setRegisteredPayloadType(-1);
                    this.setStaticPayloadType(-1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            MediaFormat.prototype.getTypeString = function () {
                return '[fm.icelink.MediaFormat]';
            };
            MediaFormat.prototype.fmicelinkMediaFormatInit = function () {
                this._clockRate = 0;
                this._isEncrypted = false;
                this._isInjected = false;
                this._isPacketized = false;
                this._registeredPayloadType = 0;
                this._staticPayloadType = 0;
            };
            /**<span id='method-fm.icelink.MediaFormat-getRedName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the RED media format.
             </div>
    
    
            @return {string}
            */
            MediaFormat.getRedName = function () {
                if (arguments.length == 0) {
                    return "red";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getUlpFecName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the ULPFEC media format.
             </div>
    
    
            @return {string}
            */
            MediaFormat.getUlpFecName = function () {
                if (arguments.length == 0) {
                    return "ulpfec";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this instance.
             </div>
    
    
            @return {TFormat}
            */
            MediaFormat.prototype.clone = function () {
                if (arguments.length == 0) {
                    var local = this.createInstance();
                    local.setName(this.getName());
                    local.setClockRate(this.getClockRate());
                    local.setIsPacketized(this.getIsPacketized());
                    local.setIsEncrypted(this.getIsEncrypted());
                    local.setIsInjected(this.getIsInjected());
                    local.setRegisteredPayloadType(this.getRegisteredPayloadType());
                    local.setStaticPayloadType(this.getStaticPayloadType());
                    return local;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getClockRate'>&nbsp;</span>**/
            /**
             <div>
             Gets the clock rate.
             </div>
    
    
            @return {number}
            */
            MediaFormat.prototype.getClockRate = function () {
                if (arguments.length == 0) {
                    return this._clockRate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getFullName'>&nbsp;</span>**/
            /**
             <div>
             Gets the full name, including clock rate and encoding parameters.
             </div>
    
    
            @return {string}
            */
            MediaFormat.prototype.getFullName = function () {
                if (arguments.length == 0) {
                    if ((fm.icelink.Global.equals(this.getName(), null))) {
                        throw new fm.icelink.Exception("Name cannot be null.");
                    }
                    var parameters = this.getParameters();
                    if (fm.icelink.StringExtensions.isNullOrEmpty(parameters)) {
                        return fm.icelink.StringExtensions.format("{0}/{1}", this.getName(), fm.icelink.IntExtensions.toString(this.getClockRate()));
                    }
                    return fm.icelink.StringExtensions.format("{0}/{1}/{2}", this.getName(), fm.icelink.IntExtensions.toString(this.getClockRate()), parameters);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getIsEncrypted'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating that the data is encrypted.
             </div>
    
    
            @return {boolean}
            */
            MediaFormat.prototype.getIsEncrypted = function () {
                if (arguments.length == 0) {
                    return this._isEncrypted;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getIsInjected'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating that the data is injected
             into the primary media stream (e.g. DTMF).
             </div>
    
    
            @return {boolean}
            */
            MediaFormat.prototype.getIsInjected = function () {
                if (arguments.length == 0) {
                    return this._isInjected;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getIsPacketized'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating that the data is packetized
             for network transmission.
             </div>
    
    
            @return {boolean}
            */
            MediaFormat.prototype.getIsPacketized = function () {
                if (arguments.length == 0) {
                    return this._isPacketized;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name.
             </div>
    
    
            @return {string}
            */
            MediaFormat.prototype.getName = function () {
                if (arguments.length == 0) {
                    return this._name;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaFormat.prototype.getRegisteredPayloadType = function () {
                if (arguments.length == 0) {
                    return this._registeredPayloadType;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-getStaticPayloadType'>&nbsp;</span>**/
            /**
             <div>
             Gets the static payload type, if this format
             has a static payload type registered with IANA.
             </div>
    
    
            @return {number}
            */
            MediaFormat.prototype.getStaticPayloadType = function () {
                if (arguments.length == 0) {
                    return this._staticPayloadType;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified format is equivalent.
             </div>
    
            @param {TFormat} format The format.
            @param {boolean} ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
            @return {boolean}
            */
            MediaFormat.prototype.isEquivalent = function (format, ignoreIsPacketized) {
                if (arguments.length == 2) {
                    if (((!fm.icelink.Global.equals(format, null)) && (fm.icelink.StringExtensions.isEqual(format.getName(), this.getName(), fm.icelink.StringComparison.OrdinalIgnoreCase) && (fm.icelink.Global.equals(format.getClockRate(), this.getClockRate()))))) {
                        if (ignoreIsPacketized) {
                            return true;
                        }
                        if ((fm.icelink.Global.equals(format.getIsPacketized(), this.getIsPacketized()))) {
                            return true;
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setClockRate'>&nbsp;</span>**/
            /**
             <div>
             Sets the clock rate.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaFormat.prototype.setClockRate = function (value) {
                if (arguments.length == 1) {
                    this._clockRate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setIsEncrypted'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating that the data is encrypted.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            MediaFormat.prototype.setIsEncrypted = function (value) {
                if (arguments.length == 1) {
                    this._isEncrypted = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setIsInjected'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating that the data is injected
             into the primary media stream (e.g. DTMF).
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            MediaFormat.prototype.setIsInjected = function (value) {
                if (arguments.length == 1) {
                    this._isInjected = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setIsPacketized'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating that the data is packetized
             for network transmission.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            MediaFormat.prototype.setIsPacketized = function (value) {
                if (arguments.length == 1) {
                    this._isPacketized = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setName'>&nbsp;</span>**/
            /**
             <div>
             Sets the name.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            MediaFormat.prototype.setName = function (value) {
                if (arguments.length == 1) {
                    this._name = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaFormat.prototype.setRegisteredPayloadType = function (value) {
                if (arguments.length == 1) {
                    this._registeredPayloadType = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-setStaticPayloadType'>&nbsp;</span>**/
            /**
             <div>
             Sets the static payload type, if this format
             has a static payload type registered with IANA.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaFormat.prototype.setStaticPayloadType = function (value) {
                if (arguments.length == 1) {
                    this._staticPayloadType = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaFormat-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
    
            @return {string}
            */
            MediaFormat.prototype.toString = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.concat(this.getFullName(), (this.getIsPacketized() ? " (packetized)" : " (not packetized)"));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaFormat;
        }());
        icelink.MediaFormat = MediaFormat;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaFormat.ts" />

/// <reference path="MediaFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An audio format.
         </div>
    
        */
        var AudioFormat = /** @class */ (function (_super) {
            __extends(AudioFormat, _super);
            function AudioFormat() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var name_9 = __arguments[0];
                    var clockRate = __arguments[1];
                    var channelCount = __arguments[2];
                    _this = _super.call(this, name_9, clockRate) || this;
                    _this.fmicelinkAudioFormatInit();
                    _this.setChannelCount(channelCount);
                }
                else if (__arguments.length == 2) {
                    var name_10 = __arguments[0];
                    var config = __arguments[1];
                    // chained constructor: AudioFormat.call(this, name, config.getClockRate(), config.getChannelCount());
                    __arguments = new Array(3);
                    __arguments[0] = name_10;
                    __arguments[1] = config.getClockRate();
                    __arguments[2] = config.getChannelCount();
                    {
                        var name_11 = __arguments[0];
                        var clockRate = __arguments[1];
                        var channelCount = __arguments[2];
                        _this = _super.call(this, name_11, clockRate) || this;
                        _this.fmicelinkAudioFormatInit();
                        _this.setChannelCount(channelCount);
                    }
                }
                else if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkAudioFormatInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            AudioFormat.prototype.getTypeString = function () {
                return '[fm.icelink.AudioFormat]' + ',' + _super.prototype.getTypeString.call(this);
            };
            AudioFormat.prototype.fmicelinkAudioFormatInit = function () {
                this._channelCount = 0;
                this._littleEndian = false;
            };
            /**<span id='method-fm.icelink.AudioFormat-getDtmfName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the DTMF audio format ("telephone-event").
             </div>
    
    
            @return {string}
            */
            AudioFormat.getDtmfName = function () {
                if (arguments.length == 0) {
                    return "telephone-event";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getOpusName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the Opus audio format ("opus").
             </div>
    
    
            @return {string}
            */
            AudioFormat.getOpusName = function () {
                if (arguments.length == 0) {
                    return "opus";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getPcmaName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the PCMA audio format ("PCMA").
             </div>
    
    
            @return {string}
            */
            AudioFormat.getPcmaName = function () {
                if (arguments.length == 0) {
                    return "PCMA";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getPcmName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the PCM audio format ("PCM").
             </div>
    
    
            @return {string}
            */
            AudioFormat.getPcmName = function () {
                if (arguments.length == 0) {
                    return "PCM";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getPcmuName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the PCMU audio format ("PCMU").
             </div>
    
    
            @return {string}
            */
            AudioFormat.getPcmuName = function () {
                if (arguments.length == 0) {
                    return "PCMU";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this instance.
             </div>
    
    
            @return {fm.icelink.AudioFormat}
            */
            AudioFormat.prototype.clone = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.clone.call(this);
                    format.setChannelCount(this.getChannelCount());
                    format.setLittleEndian(this.getLittleEndian());
                    return format;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-createInstance'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance.
             </div>
    
    
            @return {fm.icelink.AudioFormat}
            */
            AudioFormat.prototype.createInstance = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.AudioFormat();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getChannelCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the channel count.
             </div>
    
    
            @return {number}
            */
            AudioFormat.prototype.getChannelCount = function () {
                if (arguments.length == 0) {
                    return this._channelCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getConfig'>&nbsp;</span>**/
            /**
             <div>
             Gets the clock rate and channel count as a configuration.
             </div>
    
    
            @return {fm.icelink.AudioConfig}
            */
            AudioFormat.prototype.getConfig = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.AudioConfig(_super.prototype.getClockRate.call(this), this.getChannelCount());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getIsDtmf'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is DTMF.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getIsDtmf = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.AudioFormat.getDtmfName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getIsOpus'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is Opus.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getIsOpus = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.AudioFormat.getOpusName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getIsPcm'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is PCM.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getIsPcm = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.AudioFormat.getPcmName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getIsPcma'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is PCMA.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getIsPcma = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.AudioFormat.getPcmaName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getIsPcmu'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is PCMU.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getIsPcmu = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.AudioFormat.getPcmuName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getLittleEndian'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the format uses little endian byte order.
             </div>
    
    
            @return {boolean}
            */
            AudioFormat.prototype.getLittleEndian = function () {
                if (arguments.length == 0) {
                    return this._littleEndian;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-getParameters'>&nbsp;</span>**/
            /**
             <div>
             Gets the parameters.
             </div>
    
    
            @return {string}
            */
            AudioFormat.prototype.getParameters = function () {
                if (arguments.length == 0) {
                    var channelCount = this.getChannelCount();
                    if ((fm.icelink.Global.equals(channelCount, 1))) {
                        return null;
                    }
                    return fm.icelink.IntExtensions.toString(channelCount);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified format is equivalent.
             </div>
    
            @param {fm.icelink.AudioFormat} format The format.
            @param {boolean} ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
            @return {boolean}
            */
            AudioFormat.prototype.isEquivalent = function (format, ignoreIsPacketized) {
                if (arguments.length == 2) {
                    return (_super.prototype.isEquivalent.call(this, format, ignoreIsPacketized) && (fm.icelink.Global.equals(this.getChannelCount(), format.getChannelCount())));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-setChannelCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the channel count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            AudioFormat.prototype.setChannelCount = function (value) {
                if (arguments.length == 1) {
                    this._channelCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.AudioFormat-setLittleEndian'>&nbsp;</span>**/
            /**
             <div>
             Sets whether the format uses little endian byte order.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            AudioFormat.prototype.setLittleEndian = function (value) {
                if (arguments.length == 1) {
                    this._littleEndian = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return AudioFormat;
        }(fm.icelink.MediaFormat));
        icelink.AudioFormat = AudioFormat;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media sink base properties/methods.
         </div>
    
        */
        var MediaSinkBase = /** @class */ (function (_super) {
            __extends(MediaSinkBase, _super);
            function MediaSinkBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaSinkBase.prototype.getTypeString = function () {
                return '[fm.icelink.MediaSinkBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.MediaSinkBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            MediaSinkBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSinkBase-getTag'>&nbsp;</span>**/
            /**
             <div>
             Gets an optional tag to identify this instance.
             </div>
    
    
            @return {string}
            */
            MediaSinkBase.prototype.getTag = function () {
                if (arguments.length == 0) {
                    return this._tag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSinkBase-setTag'>&nbsp;</span>**/
            /**
             <div>
             Sets an optional tag to identify this instance.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            MediaSinkBase.prototype.setTag = function (value) {
                if (arguments.length == 1) {
                    this._tag = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaSinkBase;
        }(fm.icelink.Dynamic));
        icelink.MediaSinkBase = MediaSinkBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Dynamic.ts" />

/// <reference path="Dynamic.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media source base properties/methods.
         </div>
    
        */
        var MediaSourceBase = /** @class */ (function (_super) {
            __extends(MediaSourceBase, _super);
            function MediaSourceBase() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__id = fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaSourceBase.prototype.getTypeString = function () {
                return '[fm.icelink.MediaSourceBase]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.MediaSourceBase-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            MediaSourceBase.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this.__id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSourceBase-getTag'>&nbsp;</span>**/
            /**
             <div>
             Gets an optional tag to identify this instance.
             </div>
    
    
            @return {string}
            */
            MediaSourceBase.prototype.getTag = function () {
                if (arguments.length == 0) {
                    return this._tag;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSourceBase-setTag'>&nbsp;</span>**/
            /**
             <div>
             Sets an optional tag to identify this instance.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            MediaSourceBase.prototype.setTag = function (value) {
                if (arguments.length == 1) {
                    this._tag = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaSourceBase;
        }(fm.icelink.Dynamic));
        icelink.MediaSourceBase = MediaSourceBase;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A candidate.
         </div>
    
        */
        var Candidate = /** @class */ (function () {
            function Candidate() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkCandidateInit();
                    this.__turnTransportProtocol = fm.icelink.ProtocolType.Unknown;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Candidate.prototype.getTypeString = function () {
                return '[fm.icelink.Candidate]';
            };
            Candidate.prototype.fmicelinkCandidateInit = function () {
                this._dispatched = false;
                this._sdpMediaIndex = 0;
            };
            /**<span id='method-fm.icelink.Candidate-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} candidateJson The JSON to deserialize.
            @return {fm.icelink.Candidate}
             The deserialized candidate.
     
            */
            Candidate.fromJson = function (candidateJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(candidateJson, function () {
                        return new fm.icelink.Candidate();
                    }, function (candidate, name, valueJson) {
                        var str2 = name;
                        if ((!fm.icelink.Global.equals(str2, null))) {
                            if (!(fm.icelink.Global.equals(str2, "sdpCandidateAttribute"))) {
                                if ((fm.icelink.Global.equals(str2, "sdpMediaIndex"))) {
                                    candidate.setSdpMediaIndex(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                }
                            }
                            else {
                                var s = fm.icelink.JsonSerializer.deserializeString(valueJson);
                                if ((!fm.icelink.Global.equals(s, null))) {
                                    if (!fm.icelink.StringExtensions.startsWith(s, "a=")) {
                                        s = fm.icelink.StringExtensions.concat("a=", s);
                                    }
                                    candidate.setSdpCandidateAttribute(fm.icelink.sdp.Attribute.parse(s));
                                }
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.Candidate} candidate The candidate to serialize.
            @return {string}
             The serialized JSON.
     
            */
            Candidate.toJson = function (candidate) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(candidate, function (c, jsonObject) {
                        var sdpCandidateAttribute = candidate.getSdpCandidateAttribute();
                        if ((!fm.icelink.Global.equals(sdpCandidateAttribute, null))) {
                            var str = sdpCandidateAttribute.toString();
                            if (!fm.icelink.StringExtensions.startsWith(str, "a=")) {
                                str = fm.icelink.StringExtensions.concat("a=", str);
                            }
                            jsonObject["sdpCandidateAttribute"] = fm.icelink.JsonSerializer.serializeString(str);
                        }
                        jsonObject["sdpMediaIndex"] = fm.icelink.JsonSerializer.serializeInteger(candidate.getSdpMediaIndex());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-getDispatched'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this candidate has been
             already been dispatched as a part of a session description.
             </div>
    
    
            @return {boolean}
            */
            Candidate.prototype.getDispatched = function () {
                if (arguments.length == 0) {
                    return this._dispatched;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-getSdpCandidateAttribute'>&nbsp;</span>**/
            /**
             <div>
             Gets the SDP candidate attribute.
             </div>
    
    
            @return {fm.icelink.sdp.ice.CandidateAttribute}
            */
            Candidate.prototype.getSdpCandidateAttribute = function () {
                if (arguments.length == 0) {
                    return this._sdpCandidateAttribute;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-getSdpMediaIndex'>&nbsp;</span>**/
            /**
             <div>
             Gets the media index.
             </div>
    
    
            @return {number}
            */
            Candidate.prototype.getSdpMediaIndex = function () {
                if (arguments.length == 0) {
                    return this._sdpMediaIndex;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-getTurnTransportProtocol'>&nbsp;</span>**/
            /**
             <div>
             Gets the protocol used by this candidate when communicating with the TURN (relay) server.
             </div>
    
    
            @return {fm.icelink.ProtocolType}
            */
            Candidate.prototype.getTurnTransportProtocol = function () {
                if (arguments.length == 0) {
                    return this.__turnTransportProtocol;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-setDispatched'>&nbsp;</span>**/
            /**
             <div>
             Sets a value indicating whether this candidate has been
             already been dispatched as a part of a session description.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            Candidate.prototype.setDispatched = function (value) {
                if (arguments.length == 1) {
                    this._dispatched = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-setSdpCandidateAttribute'>&nbsp;</span>**/
            /**
             <div>
             Sets the SDP candidate attribute.
             </div>
    
    
            @param {fm.icelink.sdp.ice.CandidateAttribute} value
            @return {void}
            */
            Candidate.prototype.setSdpCandidateAttribute = function (value) {
                if (arguments.length == 1) {
                    this._sdpCandidateAttribute = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-setSdpMediaIndex'>&nbsp;</span>**/
            /**
             <div>
             Sets the media index.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            Candidate.prototype.setSdpMediaIndex = function (value) {
                if (arguments.length == 1) {
                    this._sdpMediaIndex = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-setTurnTransportProtocol'>&nbsp;</span>**/
            /**
             <div>
             Sets the protocol used by this candidate when communicating with the TURN (relay) server.
             </div>
    
    
            @param {fm.icelink.ProtocolType} value
            @return {void}
            */
            Candidate.prototype.setTurnTransportProtocol = function (value) {
                if (arguments.length == 1) {
                    this.__turnTransportProtocol = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Candidate-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
    
            @return {string}
            */
            Candidate.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Candidate.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Candidate;
        }());
        icelink.Candidate = Candidate;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var CandidatePairStateWrapper = /** @class */ (function () {
            function CandidatePairStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_16 = __arguments[0];
                    //super();
                    this._value = value_16;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CandidatePairStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.CandidatePairStateWrapper]';
            };
            CandidatePairStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.CandidatePairState.New)
                        return 'New';
                    if (this._value == fm.icelink.CandidatePairState.Waiting)
                        return 'Waiting';
                    if (this._value == fm.icelink.CandidatePairState.InProgress)
                        return 'InProgress';
                    if (this._value == fm.icelink.CandidatePairState.Succeeded)
                        return 'Succeeded';
                    if (this._value == fm.icelink.CandidatePairState.Failed)
                        return 'Failed';
                    if (this._value == fm.icelink.CandidatePairState.Closed)
                        return 'Closed';
                    if (this._value == fm.icelink.CandidatePairState.ConnectivityLost)
                        return 'ConnectivityLost';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CandidatePairStateWrapper;
        }());
        icelink.CandidatePairStateWrapper = CandidatePairStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var CandidateTypeWrapper = /** @class */ (function () {
            function CandidateTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_17 = __arguments[0];
                    //super();
                    this._value = value_17;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CandidateTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.CandidateTypeWrapper]';
            };
            CandidateTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.CandidateType.Host)
                        return 'Host';
                    if (this._value == fm.icelink.CandidateType.ServerReflexive)
                        return 'ServerReflexive';
                    if (this._value == fm.icelink.CandidateType.Relayed)
                        return 'Relayed';
                    if (this._value == fm.icelink.CandidateType.PeerReflexive)
                        return 'PeerReflexive';
                    if (this._value == fm.icelink.CandidateType.Unknown)
                        return 'Unknown';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CandidateTypeWrapper;
        }());
        icelink.CandidateTypeWrapper = CandidateTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var CodecTypeWrapper = /** @class */ (function () {
            function CodecTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_18 = __arguments[0];
                    //super();
                    this._value = value_18;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            CodecTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.CodecTypeWrapper]';
            };
            CodecTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.CodecType.Encode)
                        return 'Encode';
                    if (this._value == fm.icelink.CodecType.Decode)
                        return 'Decode';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CodecTypeWrapper;
        }());
        icelink.CodecTypeWrapper = CodecTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A color.
         </div>
    
        */
        var Color = /** @class */ (function () {
            /**<span id='method-fm.icelink.Color-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.color` class.
             </div>
    
            @param {number} r The red value (0-255).
            @param {number} g The green value (0-255).
            @param {number} b The blue value (0-255).
            @return {}
            */
            function Color(r, g, b) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var r_1 = __arguments[0];
                    var g_1 = __arguments[1];
                    var b_1 = __arguments[2];
                    //super();
                    this.fmicelinkColorInit();
                    this.setR(fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(255, r_1)));
                    this.setG(fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(255, g_1)));
                    this.setB(fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(255, b_1)));
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Color.prototype.getTypeString = function () {
                return '[fm.icelink.Color]';
            };
            Color.prototype.fmicelinkColorInit = function () {
                this._b = 0;
                this._g = 0;
                this._r = 0;
            };
            /**<span id='method-fm.icelink.Color-fromHsb'>&nbsp;</span>**/
            /**
             <div>
             Creates a `fm.icelink.color` using hue, saturation, and brightness.
             </div>
    
            @param {number} hue The hue value (0-359).
            @param {number} saturation The saturation value (0.0-1.0).
            @param {number} brightness The brightness value (0.0-1.0).
            @return {fm.icelink.Color}
            */
            Color.fromHsb = function (hue, saturation, brightness) {
                if (arguments.length == 3) {
                    hue = fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(359, hue));
                    saturation = fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(1, saturation));
                    brightness = fm.icelink.MathAssistant.max(0, fm.icelink.MathAssistant.min(1, brightness));
                    if ((fm.icelink.Global.equals(saturation, 0))) {
                        var r = ((brightness * 255) + 0.5);
                        return new fm.icelink.Color(r, r, r);
                    }
                    var num2 = ((hue - fm.icelink.MathAssistant.floor(hue)) * 6);
                    var num3 = (num2 - fm.icelink.MathAssistant.floor(num2));
                    var num4 = (brightness * (1 - saturation));
                    var num5 = (brightness * (1 - (saturation * num3)));
                    var num6 = (brightness * (1 - (saturation * (1 - num3))));
                    var _var0 = num2;
                    if (_var0 == 0) {
                        do {
                            return new fm.icelink.Color(((brightness * 255) + 0.5), ((num6 * 255) + 0.5), ((num4 * 255) + 0.5));
                        } while (false);
                    }
                    else if (_var0 == 1) {
                        do {
                            return new fm.icelink.Color(((num5 * 255) + 0.5), ((brightness * 255) + 0.5), ((num4 * 255) + 0.5));
                        } while (false);
                    }
                    else if (_var0 == 2) {
                        do {
                            return new fm.icelink.Color(((num4 * 255) + 0.5), ((brightness * 255) + 0.5), ((num6 * 255) + 0.5));
                        } while (false);
                    }
                    else if (_var0 == 3) {
                        do {
                            return new fm.icelink.Color(((num4 * 255) + 0.5), ((num5 * 255) + 0.5), ((brightness * 255) + 0.5));
                        } while (false);
                    }
                    else if (_var0 == 4) {
                        do {
                            return new fm.icelink.Color(((num6 * 255) + 0.5), ((num4 * 255) + 0.5), ((brightness * 255) + 0.5));
                        } while (false);
                    }
                    return new fm.icelink.Color(((brightness * 255) + 0.5), ((num4 * 255) + 0.5), ((num5 * 255) + 0.5));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getBlack'>&nbsp;</span>**/
            /**
             <div>
             Gets a black color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getBlack = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 0, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getBlue'>&nbsp;</span>**/
            /**
             <div>
             Gets a blue color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getBlue = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 0, 255);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getCyan'>&nbsp;</span>**/
            /**
             <div>
             Gets a cyan color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getCyan = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 255, 255);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getDarkBlue'>&nbsp;</span>**/
            /**
             <div>
             Gets a dark-blue color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getDarkBlue = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 0, 127);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getDarkGreen'>&nbsp;</span>**/
            /**
             <div>
             Gets a dark-green color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getDarkGreen = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 127, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getDarkRed'>&nbsp;</span>**/
            /**
             <div>
             Gets a dark-red color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getDarkRed = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(127, 0, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getGray'>&nbsp;</span>**/
            /**
             <div>
             Gets a gray color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getGray = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(127, 127, 127);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getGreen'>&nbsp;</span>**/
            /**
             <div>
             Gets a green color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getGreen = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 255, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getMagenta'>&nbsp;</span>**/
            /**
             <div>
             Gets a magenta color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getMagenta = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(255, 0, 255);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getOlive'>&nbsp;</span>**/
            /**
             <div>
             Gets an olive color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getOlive = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(127, 127, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getPurple'>&nbsp;</span>**/
            /**
             <div>
             Gets a purple color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getPurple = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(127, 0, 127);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getRed'>&nbsp;</span>**/
            /**
             <div>
             Gets a red color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getRed = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(255, 0, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getTeal'>&nbsp;</span>**/
            /**
             <div>
             Gets a teal color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getTeal = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(0, 127, 127);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getWhite'>&nbsp;</span>**/
            /**
             <div>
             Gets a white color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getWhite = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(255, 255, 255);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getYellow'>&nbsp;</span>**/
            /**
             <div>
             Gets a yellow color.
             </div>
    
    
            @return {fm.icelink.Color}
            */
            Color.getYellow = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.Color(255, 255, 0);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getB'>&nbsp;</span>**/
            /**
             <div>
             Gets the blue value (0-255).
             </div>
    
    
            @return {number}
            */
            Color.prototype.getB = function () {
                if (arguments.length == 0) {
                    return this._b;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getG'>&nbsp;</span>**/
            /**
             <div>
             Gets the green value (0-255).
             </div>
    
    
            @return {number}
            */
            Color.prototype.getG = function () {
                if (arguments.length == 0) {
                    return this._g;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Color-getR'>&nbsp;</span>**/
            /**
             <div>
             Gets the red value (0-255).
             </div>
    
    
            @return {number}
            */
            Color.prototype.getR = function () {
                if (arguments.length == 0) {
                    return this._r;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Color.prototype.setB = function (value) {
                if (arguments.length == 1) {
                    this._b = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Color.prototype.setG = function (value) {
                if (arguments.length == 1) {
                    this._g = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Color.prototype.setR = function (value) {
                if (arguments.length == 1) {
                    this._r = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Color;
        }());
        icelink.Color = Color;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Collection.ts" />

/// <reference path="Collection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of connections.
         </div>
    
        */
        var ConnectionCollection = /** @class */ (function (_super) {
            __extends(ConnectionCollection, _super);
            function ConnectionCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__lookupByExternalId = {};
                    _this.__lookupByInternalId = {};
                    _this.__lookupLock = new Object();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            ConnectionCollection.prototype.getTypeString = function () {
                return '[fm.icelink.ConnectionCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.ConnectionCollection-addSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is added to the collection.
             </div>
    
            @param {fm.icelink.Connection} value The value.
            @return {void}
            */
            ConnectionCollection.prototype.addSuccess = function (value) {
                if (arguments.length == 1) {
                    _super.prototype.addSuccess.call(this, value);
                    this.__lookupByInternalId[value.getId()] = value;
                    var externalId = value.getExternalId();
                    if ((!fm.icelink.Global.equals(externalId, null))) {
                        this.__lookupByExternalId[externalId] = value;
                    }
                    value.removeOnExternalIdChange(this.processExternalIdChange.bind(this));
                    value.addOnExternalIdChange(this.processExternalIdChange.bind(this));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-arrayFromList'>&nbsp;</span>**/
            /**
             <div>
             Creates an array from a list.
             </div>
    
            @param {Array<fm.icelink.Connection>} list The list.
            @return {fm.icelink.Connection[]}
            */
            ConnectionCollection.prototype.arrayFromList = function (list) {
                if (arguments.length == 1) {
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-createCollection'>&nbsp;</span>**/
            /**
             <div>
             Creates a collection.
             </div>
    
    
            @return {fm.icelink.ConnectionCollection}
            */
            ConnectionCollection.prototype.createCollection = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.ConnectionCollection();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-getByExternalId'>&nbsp;</span>**/
            /**
             <div>
             Gets a connection by extenral connection ID.
             </div>
    
            @param {string} id The external connection identifier.
            @return {fm.icelink.Connection} The connection, or null if the connection does not exist.
            */
            ConnectionCollection.prototype.getByExternalId = function (id) {
                if (arguments.length == 1) {
                    var connection = null;
                    var _var0 = new fm.icelink.Holder(connection);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__lookupByExternalId, id, _var0);
                    connection = _var0.getValue();
                    if (_var1) {
                        return connection;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-getById'>&nbsp;</span>**/
            /**
             <div>
             Gets a connection by internal connection ID.
             </div>
    
            @param {string} id The internal connection identifier.
            @return {fm.icelink.Connection} The connection, or null if the connection does not exist.
            */
            ConnectionCollection.prototype.getById = function (id) {
                if (arguments.length == 1) {
                    var connection = null;
                    var _var0 = new fm.icelink.Holder(connection);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__lookupByInternalId, id, _var0);
                    connection = _var0.getValue();
                    if (_var1) {
                        return connection;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            ConnectionCollection.prototype.processExternalIdChange = function (internalId, oldExternalId) {
                if (arguments.length == 2) {
                    var connection = null;
                    var _var0 = new fm.icelink.Holder(connection);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__lookupByInternalId, internalId, _var0);
                    connection = _var0.getValue();
                    if (_var1) {
                        var externalId = connection.getExternalId();
                        if ((!fm.icelink.Global.equals(oldExternalId, null))) {
                            fm.icelink.HashExtensions.remove(this.__lookupByExternalId, oldExternalId);
                        }
                        this.__lookupByExternalId[externalId] = connection;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-removeSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is removed from the collection.
             </div>
    
            @param {fm.icelink.Connection} value The value.
            @return {void}
            */
            ConnectionCollection.prototype.removeSuccess = function (value) {
                if (arguments.length == 1) {
                    _super.prototype.removeSuccess.call(this, value);
                    fm.icelink.HashExtensions.remove(this.__lookupByInternalId, value.getId());
                    var externalId = value.getExternalId();
                    if ((!fm.icelink.Global.equals(externalId, null))) {
                        fm.icelink.HashExtensions.remove(this.__lookupByExternalId, externalId);
                    }
                    value.removeOnExternalIdChange(this.processExternalIdChange.bind(this));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-tryGetByExternalId'>&nbsp;</span>**/
            /**
             <div>
             Tries to get a connection by external connection ID.
             </div>
    
            @param {string} id The internal Connection identifier.
            @param {fm.icelink.Holder<fm.icelink.Connection>} connection The connection.
            @return {boolean} The connection, or null if the connection does not exist.
            */
            ConnectionCollection.prototype.tryGetByExternalId = function (id, connection) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.HashExtensions.tryGetValue(this.__lookupByExternalId, id, connection);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionCollection-tryGetById'>&nbsp;</span>**/
            /**
             <div>
             Tries to get a connection by internal connection ID.
             </div>
    
            @param {string} id The internal Connection identifier.
            @param {fm.icelink.Holder<fm.icelink.Connection>} connection The connection.
            @return {boolean} The connection, or null if the connection does not exist.
            */
            ConnectionCollection.prototype.tryGetById = function (id, connection) {
                if (arguments.length == 2) {
                    var _var0 = fm.icelink.HashExtensions.tryGetValue(this.__lookupByInternalId, id, connection);
                    return _var0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ConnectionCollection;
        }(fm.icelink.Collection));
        icelink.ConnectionCollection = ConnectionCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="StateMachine.ts" />

/// <reference path="StateMachine.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A state machine for data channel states.
         </div>
    
        */
        var DataChannelStateMachine = /** @class */ (function (_super) {
            __extends(DataChannelStateMachine, _super);
            /**<span id='method-fm.icelink.DataChannelStateMachine-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.dataChannelStateMachine` class.
             </div>
    
    
            @return {}
            */
            function DataChannelStateMachine() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this, fm.icelink.DataChannelState.New) || this;
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.New, fm.icelink.DataChannelState.Connecting);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.New, fm.icelink.DataChannelState.Failed);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.New, fm.icelink.DataChannelState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Connecting, fm.icelink.DataChannelState.Connected);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Connecting, fm.icelink.DataChannelState.Failed);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Connecting, fm.icelink.DataChannelState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Connected, fm.icelink.DataChannelState.Failed);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Connected, fm.icelink.DataChannelState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Closing, fm.icelink.DataChannelState.Failed);
                    _super.prototype.addTransition.call(_this, fm.icelink.DataChannelState.Closing, fm.icelink.DataChannelState.Closed);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            DataChannelStateMachine.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannelStateMachine]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.DataChannelStateMachine-stateToValue'>&nbsp;</span>**/
            /**
             <div>
             Converts a state to an integer value.
             </div>
    
            @param {fm.icelink.DataChannelState} state The state.
            @return {number}
            */
            DataChannelStateMachine.prototype.stateToValue = function (state) {
                if (arguments.length == 1) {
                    return state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStateMachine-valueToState'>&nbsp;</span>**/
            /**
             <div>
             Converts an integer value to a state.
             </div>
    
            @param {number} value The integer value.
            @return {fm.icelink.DataChannelState}
            */
            DataChannelStateMachine.prototype.valueToState = function (value) {
                if (arguments.length == 1) {
                    return value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataChannelStateMachine;
        }(fm.icelink.StateMachine));
        icelink.DataChannelStateMachine = DataChannelStateMachine;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="StateMachine.ts" />

/// <reference path="StateMachine.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A state machine for stream states.
         </div>
    
        */
        var StreamStateMachine = /** @class */ (function (_super) {
            __extends(StreamStateMachine, _super);
            /**<span id='method-fm.icelink.StreamStateMachine-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.streamStateMachine` class.
             </div>
    
    
            @return {}
            */
            function StreamStateMachine() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this, fm.icelink.StreamState.New) || this;
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.New, fm.icelink.StreamState.Initializing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.New, fm.icelink.StreamState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.New, fm.icelink.StreamState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Initializing, fm.icelink.StreamState.Connecting);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Initializing, fm.icelink.StreamState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Initializing, fm.icelink.StreamState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Connecting, fm.icelink.StreamState.Connected);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Connecting, fm.icelink.StreamState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Connecting, fm.icelink.StreamState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Connected, fm.icelink.StreamState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Connected, fm.icelink.StreamState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Closing, fm.icelink.StreamState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Closing, fm.icelink.StreamState.Closed);
                    _super.prototype.addTransition.call(_this, fm.icelink.StreamState.Failing, fm.icelink.StreamState.Failed);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            StreamStateMachine.prototype.getTypeString = function () {
                return '[fm.icelink.StreamStateMachine]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.StreamStateMachine-stateToValue'>&nbsp;</span>**/
            /**
             <div>
             Converts a state to an integer value.
             </div>
    
            @param {fm.icelink.StreamState} state The state.
            @return {number}
            */
            StreamStateMachine.prototype.stateToValue = function (state) {
                if (arguments.length == 1) {
                    return state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStateMachine-valueToState'>&nbsp;</span>**/
            /**
             <div>
             Converts an integer value to a state.
             </div>
    
            @param {number} value The integer value.
            @return {fm.icelink.StreamState}
            */
            StreamStateMachine.prototype.valueToState = function (value) {
                if (arguments.length == 1) {
                    return value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamStateMachine;
        }(fm.icelink.StateMachine));
        icelink.StreamStateMachine = StreamStateMachine;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="StateMachine.ts" />

/// <reference path="StateMachine.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A state machine for connection states.
         </div>
    
        */
        var ConnectionStateMachine = /** @class */ (function (_super) {
            __extends(ConnectionStateMachine, _super);
            /**<span id='method-fm.icelink.ConnectionStateMachine-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.connectionStateMachine` class.
             </div>
    
    
            @return {}
            */
            function ConnectionStateMachine() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this, fm.icelink.ConnectionState.New) || this;
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.New, fm.icelink.ConnectionState.Initializing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.New, fm.icelink.ConnectionState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.New, fm.icelink.ConnectionState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Initializing, fm.icelink.ConnectionState.Connecting);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Initializing, fm.icelink.ConnectionState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Initializing, fm.icelink.ConnectionState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Connecting, fm.icelink.ConnectionState.Connected);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Connecting, fm.icelink.ConnectionState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Connecting, fm.icelink.ConnectionState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Connected, fm.icelink.ConnectionState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Connected, fm.icelink.ConnectionState.Closing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Closing, fm.icelink.ConnectionState.Failing);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Closing, fm.icelink.ConnectionState.Closed);
                    _super.prototype.addTransition.call(_this, fm.icelink.ConnectionState.Failing, fm.icelink.ConnectionState.Failed);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            ConnectionStateMachine.prototype.getTypeString = function () {
                return '[fm.icelink.ConnectionStateMachine]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.ConnectionStateMachine-stateToValue'>&nbsp;</span>**/
            /**
             <div>
             Converts a state to an integer value.
             </div>
    
            @param {fm.icelink.ConnectionState} state The state.
            @return {number}
            */
            ConnectionStateMachine.prototype.stateToValue = function (state) {
                if (arguments.length == 1) {
                    return state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStateMachine-valueToState'>&nbsp;</span>**/
            /**
             <div>
             Converts an integer value to a state.
             </div>
    
            @param {number} value The integer value.
            @return {fm.icelink.ConnectionState}
            */
            ConnectionStateMachine.prototype.valueToState = function (value) {
                if (arguments.length == 1) {
                    return value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ConnectionStateMachine;
        }(fm.icelink.StateMachine));
        icelink.ConnectionStateMachine = ConnectionStateMachine;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ConnectionStateWrapper = /** @class */ (function () {
            function ConnectionStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_19 = __arguments[0];
                    //super();
                    this._value = value_19;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ConnectionStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.ConnectionStateWrapper]';
            };
            ConnectionStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.ConnectionState.New)
                        return 'New';
                    if (this._value == fm.icelink.ConnectionState.Initializing)
                        return 'Initializing';
                    if (this._value == fm.icelink.ConnectionState.Connecting)
                        return 'Connecting';
                    if (this._value == fm.icelink.ConnectionState.Connected)
                        return 'Connected';
                    if (this._value == fm.icelink.ConnectionState.Failing)
                        return 'Failing';
                    if (this._value == fm.icelink.ConnectionState.Failed)
                        return 'Failed';
                    if (this._value == fm.icelink.ConnectionState.Closing)
                        return 'Closing';
                    if (this._value == fm.icelink.ConnectionState.Closed)
                        return 'Closed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ConnectionStateWrapper;
        }());
        icelink.ConnectionStateWrapper = ConnectionStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Collection.ts" />

/// <reference path="Collection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of data channels.
         </div>
    
        */
        var DataChannelCollection = /** @class */ (function (_super) {
            __extends(DataChannelCollection, _super);
            function DataChannelCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            DataChannelCollection.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannelCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.DataChannelCollection-arrayFromList'>&nbsp;</span>**/
            /**
             <div>
             Creates an array from a list.
             </div>
    
            @param {Array<fm.icelink.DataChannel>} list The list.
            @return {fm.icelink.DataChannel[]}
            */
            DataChannelCollection.prototype.arrayFromList = function (list) {
                if (arguments.length == 1) {
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelCollection-createCollection'>&nbsp;</span>**/
            /**
             <div>
             Creates a collection.
             </div>
    
    
            @return {fm.icelink.DataChannelCollection}
            */
            DataChannelCollection.prototype.createCollection = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.DataChannelCollection();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataChannelCollection;
        }(fm.icelink.Collection));
        icelink.DataChannelCollection = DataChannelCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Arguments for the data channel receive event.
         </div>
    
        */
        var DataChannelReceiveArgs = /** @class */ (function () {
            function DataChannelReceiveArgs() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DataChannelReceiveArgs.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannelReceiveArgs]';
            };
            /**<span id='method-fm.icelink.DataChannelReceiveArgs-getDataBytes'>&nbsp;</span>**/
            /**
             <div>
             Gets the data buffer.
             </div>
    
    
            @return {fm.icelink.DataBuffer}
            */
            DataChannelReceiveArgs.prototype.getDataBytes = function () {
                if (arguments.length == 0) {
                    return this._dataBytes;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelReceiveArgs-getDataString'>&nbsp;</span>**/
            /**
             <div>
             Gets the data string.
             </div>
    
    
            @return {string}
            */
            DataChannelReceiveArgs.prototype.getDataString = function () {
                if (arguments.length == 0) {
                    return this._dataString;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelReceiveArgs-setDataBytes'>&nbsp;</span>**/
            /**
             <div>
             Sets the data buffer.
             </div>
    
    
            @param {fm.icelink.DataBuffer} value
            @return {void}
            */
            DataChannelReceiveArgs.prototype.setDataBytes = function (value) {
                if (arguments.length == 1) {
                    this._dataBytes = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelReceiveArgs-setDataString'>&nbsp;</span>**/
            /**
             <div>
             Sets the data string.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            DataChannelReceiveArgs.prototype.setDataString = function (value) {
                if (arguments.length == 1) {
                    this._dataString = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataChannelReceiveArgs;
        }());
        icelink.DataChannelReceiveArgs = DataChannelReceiveArgs;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var DataChannelStateWrapper = /** @class */ (function () {
            function DataChannelStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_20 = __arguments[0];
                    //super();
                    this._value = value_20;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            DataChannelStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannelStateWrapper]';
            };
            DataChannelStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.DataChannelState.New)
                        return 'New';
                    if (this._value == fm.icelink.DataChannelState.Connecting)
                        return 'Connecting';
                    if (this._value == fm.icelink.DataChannelState.Connected)
                        return 'Connected';
                    if (this._value == fm.icelink.DataChannelState.Closing)
                        return 'Closing';
                    if (this._value == fm.icelink.DataChannelState.Closed)
                        return 'Closed';
                    if (this._value == fm.icelink.DataChannelState.Failed)
                        return 'Failed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataChannelStateWrapper;
        }());
        icelink.DataChannelStateWrapper = DataChannelStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var EncryptionModeWrapper = /** @class */ (function () {
            function EncryptionModeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_21 = __arguments[0];
                    //super();
                    this._value = value_21;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            EncryptionModeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.EncryptionModeWrapper]';
            };
            EncryptionModeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.EncryptionMode.Null)
                        return 'Null';
                    if (this._value == fm.icelink.EncryptionMode.Aes128Strong)
                        return 'Aes128Strong';
                    if (this._value == fm.icelink.EncryptionMode.Aes128Weak)
                        return 'Aes128Weak';
                    if (this._value == fm.icelink.EncryptionMode.NullStrong)
                        return 'NullStrong';
                    if (this._value == fm.icelink.EncryptionMode.NullWeak)
                        return 'NullWeak';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return EncryptionModeWrapper;
        }());
        icelink.EncryptionModeWrapper = EncryptionModeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var EncryptionPolicyWrapper = /** @class */ (function () {
            function EncryptionPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_22 = __arguments[0];
                    //super();
                    this._value = value_22;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            EncryptionPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.EncryptionPolicyWrapper]';
            };
            EncryptionPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.EncryptionPolicy.Required)
                        return 'Required';
                    if (this._value == fm.icelink.EncryptionPolicy.Negotiated)
                        return 'Negotiated';
                    if (this._value == fm.icelink.EncryptionPolicy.Disabled)
                        return 'Disabled';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return EncryptionPolicyWrapper;
        }());
        icelink.EncryptionPolicyWrapper = EncryptionPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaFormat.ts" />

/// <reference path="MediaFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A video format.
         </div>
    
        */
        var VideoFormat = /** @class */ (function (_super) {
            __extends(VideoFormat, _super);
            function VideoFormat() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var name_12 = __arguments[0];
                    var clockRate = __arguments[1];
                    _this = _super.call(this, name_12, clockRate) || this;
                }
                else if (__arguments.length == 1) {
                    var name_13 = __arguments[0];
                    // chained constructor: VideoFormat.call(this, name, 90000);
                    __arguments = new Array(2);
                    __arguments[0] = name_13;
                    __arguments[1] = 90000;
                    {
                        var name_14 = __arguments[0];
                        var clockRate = __arguments[1];
                        _this = _super.call(this, name_14, clockRate) || this;
                    }
                }
                else if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            VideoFormat.prototype.getTypeString = function () {
                return '[fm.icelink.VideoFormat]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.VideoFormat-formatNameToFourCC'>&nbsp;</span>**/
            /**
             <div>
             Converts a format name to its FourCC value.
             </div>
    
            @param {string} formatName The format name.
            @return {number} The FourCC value, or 0 if the format name is not recognized.
            */
            VideoFormat.formatNameToFourCC = function (formatName) {
                if (arguments.length == 1) {
                    if (fm.icelink.HashExtensions.containsKey(fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup, formatName)) {
                        return fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[formatName];
                    }
                    return 0;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} videoFormatJson The video format JSON.
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.fromJson = function (videoFormatJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(videoFormatJson, function () {
                        return new fm.icelink.VideoFormat();
                    }, function (videoFormat, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "name"))) {
                                if ((fm.icelink.Global.equals(str, "clockRate"))) {
                                    videoFormat.setClockRate(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str, "isPacketized"))) {
                                        videoFormat.setIsPacketized(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str, "isEncrypted"))) {
                                            videoFormat.setIsEncrypted(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                                        }
                                        else {
                                            if ((fm.icelink.Global.equals(str, "registeredPayloadType"))) {
                                                videoFormat.setRegisteredPayloadType(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                            }
                                            else {
                                                if ((fm.icelink.Global.equals(str, "staticPayloadType"))) {
                                                    videoFormat.setStaticPayloadType(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                videoFormat.setName(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getAbgr'>&nbsp;</span>**/
            /**
             <div>
             Gets an ABGR video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getAbgr = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getAbgrName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getAbgrName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the ABGR video format ("ABGR").
             Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getAbgrName = function () {
                if (arguments.length == 0) {
                    return "ABGR";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getArgb'>&nbsp;</span>**/
            /**
             <div>
             Gets an ARGB video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getArgb = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getArgbName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getArgbName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the ARGB video format ("ARGB").
             Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getArgbName = function () {
                if (arguments.length == 0) {
                    return "ARGB";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getBgr'>&nbsp;</span>**/
            /**
             <div>
             Gets a BGR video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getBgr = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getBgrName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getBgra'>&nbsp;</span>**/
            /**
             <div>
             Gets an BGRA video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getBgra = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getBgraName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getBgraName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the BGRA video format ("BGRA").
             Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getBgraName = function () {
                if (arguments.length == 0) {
                    return "BGRA";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getBgrName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the BGR video format ("BGR").
             Indicates that each pixel occupies 24 bits (8 bits for blue, then8 bits for green, then 8 bits for red).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getBgrName = function () {
                if (arguments.length == 0) {
                    return "BGR";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getH264'>&nbsp;</span>**/
            /**
             <div>
             Gets an H.264 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getH264 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.h264.Format();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getH264Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the H.264 video format ("H264").
             </div>
    
    
            @return {string}
            */
            VideoFormat.getH264Name = function () {
                if (arguments.length == 0) {
                    return "H264";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getI420'>&nbsp;</span>**/
            /**
             <div>
             Gets an I420 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getI420 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getI420Name());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getI420Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the I420 video format ("I420").
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by U plane and then V plane.
             </div>
    
    
            @return {string}
            */
            VideoFormat.getI420Name = function () {
                if (arguments.length == 0) {
                    return "I420";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getNv12'>&nbsp;</span>**/
            /**
             <div>
             Gets an NV12 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getNv12 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getNv12Name());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getNv12Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the NV12 video format ("NV12").
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by interleaved U/V plane.
             </div>
    
    
            @return {string}
            */
            VideoFormat.getNv12Name = function () {
                if (arguments.length == 0) {
                    return "NV12";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getNv21'>&nbsp;</span>**/
            /**
             <div>
             Gets an NV21 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getNv21 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getNv21Name());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getNv21Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the NV21 video format ("NV21").
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by interleaved V/U plane.
             </div>
    
    
            @return {string}
            */
            VideoFormat.getNv21Name = function () {
                if (arguments.length == 0) {
                    return "NV21";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getRgb'>&nbsp;</span>**/
            /**
             <div>
             Gets an RGB video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getRgb = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getRgbName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getRgba'>&nbsp;</span>**/
            /**
             <div>
             Gets an RGBA video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getRgba = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getRgbaName());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getRgbaName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the RGBA video format ("RGBA").
             Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getRgbaName = function () {
                if (arguments.length == 0) {
                    return "RGBA";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getRgbName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the RGB video format ("RGB").
             Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).
             </div>
    
    
            @return {string}
            */
            VideoFormat.getRgbName = function () {
                if (arguments.length == 0) {
                    return "RGB";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getVp8'>&nbsp;</span>**/
            /**
             <div>
             Gets a VP8 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getVp8 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.vp8.Format();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getVp8Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the VP8 video format ("VP8").
             </div>
    
    
            @return {string}
            */
            VideoFormat.getVp8Name = function () {
                if (arguments.length == 0) {
                    return "VP8";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getVp9'>&nbsp;</span>**/
            /**
             <div>
             Gets a VP9 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getVp9 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.vp9.Format();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getVp9Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the VP9 video format ("VP9").
             </div>
    
    
            @return {string}
            */
            VideoFormat.getVp9Name = function () {
                if (arguments.length == 0) {
                    return "VP9";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getYv12'>&nbsp;</span>**/
            /**
             <div>
             Gets a YV12 video format.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.getYv12 = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat(fm.icelink.VideoFormat.getYv12Name());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getYv12Name'>&nbsp;</span>**/
            /**
             <div>
             Gets the name of the YV12 video format ("YV12").
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by V plane and then U plane.
             </div>
    
    
            @return {string}
            */
            VideoFormat.getYv12Name = function () {
                if (arguments.length == 0) {
                    return "YV12";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            VideoFormat.toFourCC = function () {
                if (arguments.length == 1) {
                    var fourcc = arguments[0];
                    return fm.icelink.VideoFormat.toFourCC(fourcc.charCodeAt(0), fourcc.charCodeAt(1), fourcc.charCodeAt(2), fourcc.charCodeAt(3));
                }
                else if (arguments.length == 4) {
                    var a = arguments[0];
                    var b = arguments[1];
                    var c = arguments[2];
                    var d = arguments[3];
                    return (((a | fm.icelink.BitAssistant.leftShiftInteger(b, 8)) | fm.icelink.BitAssistant.leftShiftInteger(c, 16)) | fm.icelink.BitAssistant.leftShiftInteger(d, 24));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.VideoFormat} videoFormat The video format.
            @return {string}
            */
            VideoFormat.toJson = function (videoFormat) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(videoFormat, function (obj, jsonObject) {
                        jsonObject["name"] = fm.icelink.JsonSerializer.serializeString(videoFormat.getName());
                        jsonObject["clockRate"] = fm.icelink.JsonSerializer.serializeInteger(videoFormat.getClockRate());
                        jsonObject["isPacketized"] = fm.icelink.JsonSerializer.serializeBoolean(videoFormat.getIsPacketized());
                        jsonObject["isEncrypted"] = fm.icelink.JsonSerializer.serializeBoolean(videoFormat.getIsEncrypted());
                        jsonObject["registeredPayloadType"] = fm.icelink.JsonSerializer.serializeInteger(videoFormat.getRegisteredPayloadType());
                        jsonObject["staticPayloadType"] = fm.icelink.JsonSerializer.serializeInteger(videoFormat.getStaticPayloadType());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this instance.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.prototype.clone = function () {
                if (arguments.length == 0) {
                    return _super.prototype.clone.call(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-createInstance'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance.
             </div>
    
    
            @return {fm.icelink.VideoFormat}
            */
            VideoFormat.prototype.createInstance = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoFormat();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-fourCCToFormatName'>&nbsp;</span>**/
            /**
             <div>
             Converts a FourCC value to its format name.
             </div>
    
            @param {number} fourcc The FourCC value.
            @return {string} The format name, or an empty string if the FourCC value is not recognized.
            */
            VideoFormat.prototype.fourCCToFormatName = function (fourcc) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(fm.icelink.VideoFormat.fm_icelink_VideoFormat__reverseFourCCLookup, null))) {
                        var dictionary = {};
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup); _i < _a.length; _i++) {
                            var str = _a[_i];
                            dictionary[fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[str]] = str;
                        }
                        fm.icelink.VideoFormat.fm_icelink_VideoFormat__reverseFourCCLookup = dictionary;
                    }
                    var str2 = null;
                    var _var0 = new fm.icelink.Holder(str2);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(fm.icelink.VideoFormat.fm_icelink_VideoFormat__reverseFourCCLookup, fourcc, _var0);
                    str2 = _var0.getValue();
                    if (_var1) {
                        return str2;
                    }
                    return "";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getFourCC'>&nbsp;</span>**/
            /**
             <div>
             Gets the FourCC value for this format.
             </div>
    
    
            @return {number}
            */
            VideoFormat.prototype.getFourCC = function () {
                if (arguments.length == 0) {
                    return fm.icelink.VideoFormat.formatNameToFourCC(_super.prototype.getName.call(this));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsAbgr'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is ABGR.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsAbgr = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getAbgrName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsArgb'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is ARGB.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsArgb = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getArgbName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsBgr'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is BGR.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsBgr = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getBgrName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsBgra'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is BGRA.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsBgra = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getBgraName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsH264'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is H.264.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsH264 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getH264Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsI420'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is I420.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsI420 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getI420Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsNv12'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is NV12.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsNv12 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getNv12Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsNv21'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is NV21.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsNv21 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getNv21Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsRaw'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is RGB, BGR,
             I420, YV12, NV12, NV21, RGBA, BGRA, ARGB, or ABGR.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsRaw = function () {
                if (arguments.length == 0) {
                    return ((this.getIsYuvType() || this.getIsRgbType()) || this.getIsRgbaType());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsRgb'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is RGB.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsRgb = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getRgbName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsRgba'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is RGBA.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsRgba = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getRgbaName(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsRgbaType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is
             RGBA, BGRA, ARGB, or ABGR.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsRgbaType = function () {
                if (arguments.length == 0) {
                    return (((this.getIsRgba() || this.getIsBgra()) || this.getIsArgb()) || this.getIsAbgr());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsRgbType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is RGB or BGR.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsRgbType = function () {
                if (arguments.length == 0) {
                    return (this.getIsRgb() || this.getIsBgr());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsVp8'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is VP8.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsVp8 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getVp8Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsVp9'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is VP9.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsVp9 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getVp9Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsYuvType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is
             I420, YV12, NV12, or NV21.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsYuvType = function () {
                if (arguments.length == 0) {
                    return (((this.getIsI420() || this.getIsYv12()) || this.getIsNv12()) || this.getIsNv21());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getIsYv12'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this format is YV12.
             </div>
    
    
            @return {boolean}
            */
            VideoFormat.prototype.getIsYv12 = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.isEqual(_super.prototype.getName.call(this), fm.icelink.VideoFormat.getYv12Name(), fm.icelink.StringComparison.OrdinalIgnoreCase);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-getParameters'>&nbsp;</span>**/
            /**
             <div>
             Gets the parameters.
             </div>
    
    
            @return {string}
            */
            VideoFormat.prototype.getParameters = function () {
                if (arguments.length == 0) {
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-setFourCC'>&nbsp;</span>**/
            /**
             <div>
             Sets the FourCC value for this format.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            VideoFormat.prototype.setFourCC = function (value) {
                if (arguments.length == 1) {
                    _super.prototype.setName.call(this, this.fourCCToFormatName(value));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoFormat-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
            */
            VideoFormat.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.VideoFormat.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /** @internal */
            VideoFormat.fmicelinkVideoFormatInitialize = function () {
                if (!fm.icelink.VideoFormat.__fmicelinkVideoFormatInitialized) {
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup = {};
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__reverseFourCCLookup = null;
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getRgbName()] = fm.icelink.VideoFormat.toFourCC(114, 97, 119, 32);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getBgrName()] = fm.icelink.VideoFormat.toFourCC(50, 52, 66, 71);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getNv12Name()] = fm.icelink.VideoFormat.toFourCC(78, 86, 49, 50);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getNv21Name()] = fm.icelink.VideoFormat.toFourCC(78, 86, 50, 49);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getI420Name()] = fm.icelink.VideoFormat.toFourCC(73, 52, 50, 48);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getYv12Name()] = fm.icelink.VideoFormat.toFourCC(89, 86, 49, 50);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getArgbName()] = fm.icelink.VideoFormat.toFourCC(65, 82, 71, 66);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getAbgrName()] = fm.icelink.VideoFormat.toFourCC(65, 66, 71, 82);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getRgbaName()] = fm.icelink.VideoFormat.toFourCC(82, 71, 66, 65);
                    fm.icelink.VideoFormat.fm_icelink_VideoFormat__fourCCLookup[fm.icelink.VideoFormat.getBgraName()] = fm.icelink.VideoFormat.toFourCC(66, 71, 82, 65);
                }
                fm.icelink.VideoFormat.__fmicelinkVideoFormatInitialized = true;
            };
            /** @internal */
            VideoFormat.__fmicelinkVideoFormatInitialized = false;
            return VideoFormat;
        }(fm.icelink.MediaFormat));
        icelink.VideoFormat = VideoFormat;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../VideoFormat.ts" />

/// <reference path="../VideoFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var h264;
        (function (h264) {
            /**
             <div>
             An H.264 format.
             </div>
        
            */
            var Format = /** @class */ (function (_super) {
                __extends(Format, _super);
                function Format() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var clockRate = __arguments[0];
                        _this = _super.call(this, fm.icelink.VideoFormat.getH264Name(), clockRate) || this;
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this, fm.icelink.VideoFormat.getH264Name()) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                Format.prototype.getTypeString = function () {
                    return '[fm.icelink.h264.Format]' + ',' + _super.prototype.getTypeString.call(this);
                };
                return Format;
            }(fm.icelink.VideoFormat));
            h264.Format = Format;
        })(h264 = icelink.h264 || (icelink.h264 = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var IceConnectionStateWrapper = /** @class */ (function () {
            function IceConnectionStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_23 = __arguments[0];
                    //super();
                    this._value = value_23;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            IceConnectionStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.IceConnectionStateWrapper]';
            };
            IceConnectionStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.IceConnectionState.New)
                        return 'New';
                    if (this._value == fm.icelink.IceConnectionState.Checking)
                        return 'Checking';
                    if (this._value == fm.icelink.IceConnectionState.Connected)
                        return 'Connected';
                    if (this._value == fm.icelink.IceConnectionState.Completed)
                        return 'Completed';
                    if (this._value == fm.icelink.IceConnectionState.Failed)
                        return 'Failed';
                    if (this._value == fm.icelink.IceConnectionState.Disconnected)
                        return 'Disconnected';
                    if (this._value == fm.icelink.IceConnectionState.Closed)
                        return 'Closed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IceConnectionStateWrapper;
        }());
        icelink.IceConnectionStateWrapper = IceConnectionStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var IceGatheringStateWrapper = /** @class */ (function () {
            function IceGatheringStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_24 = __arguments[0];
                    //super();
                    this._value = value_24;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            IceGatheringStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.IceGatheringStateWrapper]';
            };
            IceGatheringStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.IceGatheringState.New)
                        return 'New';
                    if (this._value == fm.icelink.IceGatheringState.Gathering)
                        return 'Gathering';
                    if (this._value == fm.icelink.IceGatheringState.Complete)
                        return 'Complete';
                    if (this._value == fm.icelink.IceGatheringState.Closing)
                        return 'Closing';
                    if (this._value == fm.icelink.IceGatheringState.Closed)
                        return 'Closed';
                    if (this._value == fm.icelink.IceGatheringState.Failed)
                        return 'Failed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IceGatheringStateWrapper;
        }());
        icelink.IceGatheringStateWrapper = IceGatheringStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var IceGatherPolicyWrapper = /** @class */ (function () {
            function IceGatherPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_25 = __arguments[0];
                    //super();
                    this._value = value_25;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            IceGatherPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.IceGatherPolicyWrapper]';
            };
            IceGatherPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.IceGatherPolicy.All)
                        return 'All';
                    if (this._value == fm.icelink.IceGatherPolicy.NoHost)
                        return 'NoHost';
                    if (this._value == fm.icelink.IceGatherPolicy.Relay)
                        return 'Relay';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IceGatherPolicyWrapper;
        }());
        icelink.IceGatherPolicyWrapper = IceGatherPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An ICE server.
         </div>
    
        */
        var IceServer = /** @class */ (function () {
            function IceServer() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var url = __arguments[0];
                    //super();
                    if ((fm.icelink.Global.equals(url, null))) {
                        throw new fm.icelink.Exception("URL cannot be null.");
                    }
                    if ((fm.icelink.StringExtensions.startsWith(url, "turn:") || fm.icelink.StringExtensions.startsWith(url, "turns:"))) {
                        throw new fm.icelink.Exception("TURN servers require a username and password.");
                    }
                    if (!(fm.icelink.StringExtensions.startsWith(url, "stun:") || fm.icelink.StringExtensions.startsWith(url, "stuns:"))) {
                        url = fm.icelink.StringExtensions.format("stun:{0}", url);
                    }
                    if (!fm.icelink.StringExtensions.contains(url, "?transport=")) {
                        url = fm.icelink.StringExtensions.format("{0}?transport=udp", url);
                    }
                    this.setUrl(url);
                }
                else if (__arguments.length == 3) {
                    var url = __arguments[0];
                    var username = __arguments[1];
                    var password = __arguments[2];
                    //super();
                    if ((fm.icelink.Global.equals(url, null))) {
                        throw new fm.icelink.Exception("URL cannot be null.");
                    }
                    if ((fm.icelink.Global.equals(username, null))) {
                        throw new fm.icelink.Exception("Username cannot be null.");
                    }
                    if ((fm.icelink.Global.equals(password, null))) {
                        throw new fm.icelink.Exception("Password cannot be null.");
                    }
                    if ((fm.icelink.StringExtensions.startsWith(url, "stun:") || fm.icelink.StringExtensions.startsWith(url, "stuns:"))) {
                        throw new fm.icelink.Exception("STUN servers do not have a username or password.");
                    }
                    if (!(fm.icelink.StringExtensions.startsWith(url, "turn:") || fm.icelink.StringExtensions.startsWith(url, "turns:"))) {
                        url = fm.icelink.StringExtensions.format("turn:{0}", url);
                    }
                    this.setUrl(url);
                    this.setUsername(username);
                    this.setPassword(password);
                }
                else if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            IceServer.prototype.getTypeString = function () {
                return '[fm.icelink.IceServer]';
            };
            /**<span id='method-fm.icelink.IceServer-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} iceServerJson The JSON to deserialize.
            @return {fm.icelink.IceServer} The deserialized ICE server.
            */
            IceServer.fromJson = function (iceServerJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(iceServerJson, function () {
                        return new fm.icelink.IceServer();
                    }, function (iceServer, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "url"))) {
                                if ((fm.icelink.Global.equals(str, "username"))) {
                                    iceServer.setUsername(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str, "password"))) {
                                        iceServer.setPassword(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                    }
                                }
                            }
                            else {
                                iceServer.setUrl(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an array of instances from JSON.
             </div>
    
            @param {string} iceServersJson The JSON to deserialize.
            @return {fm.icelink.IceServer[]} The deserialized ICE server array.
            */
            IceServer.fromJsonArray = function (iceServersJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(iceServersJson, fm.icelink.IceServer.fromJson.bind(fm.icelink.IceServer));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getDefaultPort'>&nbsp;</span>**/
            /**
             <div>
             Gets the default port.
             </div>
    
    
            @return {number}
            */
            IceServer.getDefaultPort = function () {
                if (arguments.length == 0) {
                    return 3478;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.parseAddress = function (address, host, port) {
                if (arguments.length == 3) {
                    var strArray = void 0;
                    host.setValue(null);
                    port.setValue(3478);
                    if ((fm.icelink.Global.equals(address, null))) {
                        return false;
                    }
                    address = fm.icelink.StringExtensions.split(address, [63])[0];
                    if ((((fm.icelink.StringExtensions.startsWith(address, "stun:") || fm.icelink.StringExtensions.startsWith(address, "stuns:")) || fm.icelink.StringExtensions.startsWith(address, "turn:")) || fm.icelink.StringExtensions.startsWith(address, "turns:"))) {
                        address = address.substring((fm.icelink.StringExtensions.indexOf(address, ":") + 1));
                    }
                    if (fm.icelink.StringExtensions.startsWith(address, "[")) {
                        address = fm.icelink.StringExtensions.substring(address, 1, (address.length - 1));
                        strArray = fm.icelink.StringExtensions.split(address, [93]);
                    }
                    else {
                        strArray = fm.icelink.StringExtensions.split(address, [58]);
                    }
                    if ((strArray.length > 0)) {
                        host.setValue(strArray[0]);
                    }
                    if ((strArray.length > 1)) {
                        port.setValue(fm.icelink.IceServer.parsePort(strArray[1]));
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.parsePort = function (portString) {
                if (arguments.length == 1) {
                    var intResult = 0;
                    var _var0 = new fm.icelink.Holder(intResult);
                    var _var1 = fm.icelink.ParseAssistant.tryParseIntegerValue(portString, _var0);
                    intResult = _var0.getValue();
                    if (_var1) {
                        return intResult;
                    }
                    return 3478;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.IceServer} iceServer The ICE server.
            @return {string}
             The serialized JSON.
     
            */
            IceServer.toJson = function (iceServer) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(iceServer, function (i, jsonObject) {
                        if ((!fm.icelink.Global.equals(iceServer.getUrl(), null))) {
                            jsonObject["url"] = fm.icelink.JsonSerializer.serializeString(iceServer.getUrl());
                        }
                        if ((!fm.icelink.Global.equals(iceServer.getUsername(), null))) {
                            jsonObject["username"] = fm.icelink.JsonSerializer.serializeString(iceServer.getUsername());
                        }
                        if ((!fm.icelink.Global.equals(iceServer.getPassword(), null))) {
                            jsonObject["password"] = fm.icelink.JsonSerializer.serializeString(iceServer.getPassword());
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of instances to JSON.
             </div>
    
            @param {fm.icelink.IceServer[]} iceServers The ICE servers.
            @return {string}
             The serialized JSON.
     
            */
            IceServer.toJsonArray = function (iceServers) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(iceServers, fm.icelink.IceServer.toJson.bind(fm.icelink.IceServer));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getHost'>&nbsp;</span>**/
            /**
             <div>
             Gets the host.
             </div>
    
    
            @return {string}
            */
            IceServer.prototype.getHost = function () {
                if (arguments.length == 0) {
                    var host = null;
                    var port = 0;
                    var _var0 = new fm.icelink.Holder(host);
                    var _var1 = new fm.icelink.Holder(port);
                    var _var2 = fm.icelink.IceServer.parseAddress(this.getUrl(), _var0, _var1);
                    host = _var0.getValue();
                    port = _var1.getValue();
                    return host;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.getIPAddress = function () {
                if (arguments.length == 0) {
                    if ((((fm.icelink.Global.equals(this.__ipAddress, null)) && (!fm.icelink.Global.equals(this.__ipAddresses, null))) && (this.__ipAddresses.length > 0))) {
                        this.__ipAddress = this.__ipAddresses[0];
                    }
                    return this.__ipAddress;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.getIPAddresses = function () {
                if (arguments.length == 0) {
                    if (((fm.icelink.Global.equals(this.__ipAddresses, null)) && (!fm.icelink.Global.equals(this.__ipAddress, null)))) {
                        this.__ipAddresses = [this.__ipAddress];
                    }
                    return this.__ipAddresses;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getIsSecure'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this represents a secure STUN or TURN server.
             </div>
    
    
            @return {boolean}
            */
            IceServer.prototype.getIsSecure = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.StringExtensions.startsWith(this.getUrl(), "stuns:") || fm.icelink.StringExtensions.startsWith(this.getUrl(), "turns:"));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getIsStun'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this represents a STUN server.
             </div>
    
    
            @return {boolean}
            */
            IceServer.prototype.getIsStun = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.StringExtensions.startsWith(this.getUrl(), "stun:") || fm.icelink.StringExtensions.startsWith(this.getUrl(), "stuns:"));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getIsTcp'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this represents a TCP server.
             </div>
    
    
            @return {boolean}
            */
            IceServer.prototype.getIsTcp = function () {
                if (arguments.length == 0) {
                    return !fm.icelink.StringExtensions.endsWith(this.getUrl(), "?transport=udp");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getIsTurn'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this represents a TURN server.
             </div>
    
    
            @return {boolean}
            */
            IceServer.prototype.getIsTurn = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.StringExtensions.startsWith(this.getUrl(), "turn:") || fm.icelink.StringExtensions.startsWith(this.getUrl(), "turns:"));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getIsUdp'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this represents a UDP server.
             </div>
    
    
            @return {boolean}
            */
            IceServer.prototype.getIsUdp = function () {
                if (arguments.length == 0) {
                    return !fm.icelink.StringExtensions.endsWith(this.getUrl(), "?transport=tcp");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getPassword'>&nbsp;</span>**/
            /**
             <div>
             Gets the password.
             </div>
    
    
            @return {string}
            */
            IceServer.prototype.getPassword = function () {
                if (arguments.length == 0) {
                    return this._password;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getPort'>&nbsp;</span>**/
            /**
             <div>
             Gets the port.
             </div>
    
    
            @return {number}
            */
            IceServer.prototype.getPort = function () {
                if (arguments.length == 0) {
                    var host = null;
                    var port = 0;
                    var _var0 = new fm.icelink.Holder(host);
                    var _var1 = new fm.icelink.Holder(port);
                    var _var2 = fm.icelink.IceServer.parseAddress(this.getUrl(), _var0, _var1);
                    host = _var0.getValue();
                    port = _var1.getValue();
                    return port;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getUrl'>&nbsp;</span>**/
            /**
             <div>
             Gets the URL.
             </div>
    
    
            @return {string}
            */
            IceServer.prototype.getUrl = function () {
                if (arguments.length == 0) {
                    return this._url;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-getUsername'>&nbsp;</span>**/
            /**
             <div>
             Gets the username.
             </div>
    
    
            @return {string}
            */
            IceServer.prototype.getUsername = function () {
                if (arguments.length == 0) {
                    return this._username;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.setIPAddress = function (value) {
                if (arguments.length == 1) {
                    this.__ipAddress = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.setIPAddresses = function (value) {
                if (arguments.length == 1) {
                    this.__ipAddresses = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.setPassword = function (value) {
                if (arguments.length == 1) {
                    this._password = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.setUrl = function (value) {
                if (arguments.length == 1) {
                    this._url = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            IceServer.prototype.setUsername = function (value) {
                if (arguments.length == 1) {
                    this._username = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
             The serialized JSON.
     
            */
            IceServer.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.IceServer.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IceServer;
        }());
        icelink.IceServer = IceServer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Collection.ts" />

/// <reference path="Collection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         An ICE server collection.
         </div>
    
        */
        var IceServerCollection = /** @class */ (function (_super) {
            __extends(IceServerCollection, _super);
            function IceServerCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            IceServerCollection.prototype.getTypeString = function () {
                return '[fm.icelink.IceServerCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.IceServerCollection-arrayFromList'>&nbsp;</span>**/
            /**
             <div>
             Creates an array from a list.
             </div>
    
            @param {Array<fm.icelink.IceServer>} list The list.
            @return {fm.icelink.IceServer[]}
            */
            IceServerCollection.prototype.arrayFromList = function (list) {
                if (arguments.length == 1) {
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.IceServerCollection-createCollection'>&nbsp;</span>**/
            /**
             <div>
             Creates a collection.
             </div>
    
    
            @return {fm.icelink.IceServerCollection}
            */
            IceServerCollection.prototype.createCollection = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.IceServerCollection();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return IceServerCollection;
        }(fm.icelink.Collection));
        icelink.IceServerCollection = IceServerCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A layout definition, including local
         and remote frame definitions.
         </div>
    
        */
        var Layout = /** @class */ (function () {
            function Layout() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkLayoutInit();
                    this.__localFrame = new fm.icelink.LayoutFrame(0, 0, 0, 0);
                    this.__remoteFrames = new Array(0);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Layout.prototype.getTypeString = function () {
                return '[fm.icelink.Layout]';
            };
            Layout.prototype.fmicelinkLayoutInit = function () {
                this._height = 0;
                this._width = 0;
            };
            /**<span id='method-fm.icelink.Layout-getAllFrames'>&nbsp;</span>**/
            /**
             <div>
             Gets all frames (local and remote).
             </div>
    
    
            @return {fm.icelink.LayoutFrame[]}
            */
            Layout.prototype.getAllFrames = function () {
                if (arguments.length == 0) {
                    var list = new Array();
                    fm.icelink.ArrayExtensions.add(list, this.getLocalFrame());
                    fm.icelink.ArrayExtensions.addRange(list, this.getRemoteFrames());
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-getHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the layout height.
             </div>
    
    
            @return {number}
            */
            Layout.prototype.getHeight = function () {
                if (arguments.length == 0) {
                    return this._height;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-getLocalFrame'>&nbsp;</span>**/
            /**
             <div>
             Gets the local frame.
             </div>
    
    
            @return {fm.icelink.LayoutFrame}
            */
            Layout.prototype.getLocalFrame = function () {
                if (arguments.length == 0) {
                    return this.__localFrame;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-getOrigin'>&nbsp;</span>**/
            /**
             <div>
             Gets the layout origin.
             </div>
    
    
            @return {fm.icelink.LayoutOrigin}
            */
            Layout.prototype.getOrigin = function () {
                if (arguments.length == 0) {
                    return this._origin;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-getRemoteFrames'>&nbsp;</span>**/
            /**
             <div>
             Gets the remote frames.
             </div>
    
    
            @return {fm.icelink.LayoutFrame[]}
            */
            Layout.prototype.getRemoteFrames = function () {
                if (arguments.length == 0) {
                    return this.__remoteFrames;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-getWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the layout width.
             </div>
    
    
            @return {number}
            */
            Layout.prototype.getWidth = function () {
                if (arguments.length == 0) {
                    return this._width;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-setHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the layout height.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            Layout.prototype.setHeight = function (value) {
                if (arguments.length == 1) {
                    this._height = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-setLocalFrame'>&nbsp;</span>**/
            /**
             <div>
             Sets the local frame.
             </div>
    
    
            @param {fm.icelink.LayoutFrame} value
            @return {void}
            */
            Layout.prototype.setLocalFrame = function (value) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(value, null))) {
                        this.__localFrame = new fm.icelink.LayoutFrame(0, 0, 0, 0);
                    }
                    else {
                        this.__localFrame = value;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-setOrigin'>&nbsp;</span>**/
            /**
             <div>
             Sets the layout origin.
             </div>
    
    
            @param {fm.icelink.LayoutOrigin} value
            @return {void}
            */
            Layout.prototype.setOrigin = function (value) {
                if (arguments.length == 1) {
                    this._origin = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-setRemoteFrames'>&nbsp;</span>**/
            /**
             <div>
             Sets the remote frames.
             </div>
    
    
            @param {fm.icelink.LayoutFrame[]} value
            @return {void}
            */
            Layout.prototype.setRemoteFrames = function (value) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(value, null))) {
                        this.__remoteFrames = new Array(0);
                    }
                    else {
                        this.__remoteFrames = value;
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-setWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the layout width.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            Layout.prototype.setWidth = function (value) {
                if (arguments.length == 1) {
                    this._width = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-swapFrames'>&nbsp;</span>**/
            /**
             <div>
             Swaps the properties of two frames.
             </div>
    
            @param {fm.icelink.LayoutFrame} frame1 The first frame.
            @param {fm.icelink.LayoutFrame} frame2 The second frame.
            @return {void}
            */
            Layout.prototype.swapFrames = function (frame1, frame2) {
                if (arguments.length == 2) {
                    var x = frame1.getX();
                    var y = frame1.getY();
                    var width = frame1.getWidth();
                    var height = frame1.getHeight();
                    frame1.setX(frame2.getX());
                    frame1.setY(frame2.getY());
                    frame1.setWidth(frame2.getWidth());
                    frame1.setHeight(frame2.getHeight());
                    frame2.setX(x);
                    frame2.setY(y);
                    frame2.setWidth(width);
                    frame2.setHeight(height);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-swapLocalFrame'>&nbsp;</span>**/
            /**
             <div>
             Swaps the local frame with a remote frame.
             </div>
    
            @param {number} remoteFrameIndex The index of the remote frame.
            @return {void}
            */
            Layout.prototype.swapLocalFrame = function (remoteFrameIndex) {
                if (arguments.length == 1) {
                    var localFrame = this.getLocalFrame();
                    var remoteFrames = this.getRemoteFrames();
                    if (((!fm.icelink.Global.equals(localFrame, null)) && (remoteFrameIndex < remoteFrames.length))) {
                        this.swapFrames(localFrame, remoteFrames[remoteFrameIndex]);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Layout-swapRemoteFrames'>&nbsp;</span>**/
            /**
             <div>
             Swaps two remote frames.
             </div>
    
            @param {number} remoteFrameIndex1 The index of the first remote frame.
            @param {number} remoteFrameIndex2 The index of the second remote frame.
            @return {void}
            */
            Layout.prototype.swapRemoteFrames = function (remoteFrameIndex1, remoteFrameIndex2) {
                if (arguments.length == 2) {
                    var remoteFrames = this.getRemoteFrames();
                    if (((remoteFrameIndex1 < remoteFrames.length) && (remoteFrameIndex2 < remoteFrames.length))) {
                        this.swapFrames(remoteFrames[remoteFrameIndex1], remoteFrames[remoteFrameIndex2]);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Layout;
        }());
        icelink.Layout = Layout;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LayoutAlignmentWrapper = /** @class */ (function () {
            function LayoutAlignmentWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_26 = __arguments[0];
                    //super();
                    this._value = value_26;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutAlignmentWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutAlignmentWrapper]';
            };
            LayoutAlignmentWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LayoutAlignment.TopLeft)
                        return 'TopLeft';
                    if (this._value == fm.icelink.LayoutAlignment.Top)
                        return 'Top';
                    if (this._value == fm.icelink.LayoutAlignment.TopRight)
                        return 'TopRight';
                    if (this._value == fm.icelink.LayoutAlignment.Left)
                        return 'Left';
                    if (this._value == fm.icelink.LayoutAlignment.Center)
                        return 'Center';
                    if (this._value == fm.icelink.LayoutAlignment.Right)
                        return 'Right';
                    if (this._value == fm.icelink.LayoutAlignment.BottomLeft)
                        return 'BottomLeft';
                    if (this._value == fm.icelink.LayoutAlignment.Bottom)
                        return 'Bottom';
                    if (this._value == fm.icelink.LayoutAlignment.BottomRight)
                        return 'BottomRight';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutAlignmentWrapper;
        }());
        icelink.LayoutAlignmentWrapper = LayoutAlignmentWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LayoutDirectionWrapper = /** @class */ (function () {
            function LayoutDirectionWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_27 = __arguments[0];
                    //super();
                    this._value = value_27;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutDirectionWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutDirectionWrapper]';
            };
            LayoutDirectionWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LayoutDirection.Horizontal)
                        return 'Horizontal';
                    if (this._value == fm.icelink.LayoutDirection.Vertical)
                        return 'Vertical';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutDirectionWrapper;
        }());
        icelink.LayoutDirectionWrapper = LayoutDirectionWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A layout frame definition, including X/Y coordinates and width/height values.
         </div>
    
        */
        var LayoutFrame = /** @class */ (function () {
            function LayoutFrame() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 4) {
                    var x = __arguments[0];
                    var y = __arguments[1];
                    var width = __arguments[2];
                    var height = __arguments[3];
                    //super();
                    this.fmicelinkLayoutFrameInit();
                    this.setX(x);
                    this.setY(y);
                    this.setWidth(width);
                    this.setHeight(height);
                }
                else if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkLayoutFrameInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutFrame.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutFrame]';
            };
            LayoutFrame.prototype.fmicelinkLayoutFrameInit = function () {
                this._height = 0;
                this._width = 0;
                this._x = 0;
                this._y = 0;
            };
            /**<span id='method-fm.icelink.LayoutFrame-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes a layout frame from JSON.
             </div>
    
            @param {string} layoutFrameJson The layout frame JSON.
            @return {fm.icelink.LayoutFrame}
            */
            LayoutFrame.fromJson = function (layoutFrameJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(layoutFrameJson, function () {
                        return new fm.icelink.LayoutFrame();
                    }, function (rectangle, key, valueJson) {
                        var str = key;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "x"))) {
                                if ((fm.icelink.Global.equals(str, "y"))) {
                                    rectangle.setY(fm.icelink.ParseAssistant.parseIntegerValue(valueJson));
                                }
                                else {
                                    if (((fm.icelink.Global.equals(str, "w")) || (fm.icelink.Global.equals(str, "width")))) {
                                        rectangle.setWidth(fm.icelink.ParseAssistant.parseIntegerValue(valueJson));
                                    }
                                    else {
                                        if (((fm.icelink.Global.equals(str, "h")) || (fm.icelink.Global.equals(str, "height")))) {
                                            rectangle.setHeight(fm.icelink.ParseAssistant.parseIntegerValue(valueJson));
                                        }
                                    }
                                }
                            }
                            else {
                                rectangle.setX(fm.icelink.ParseAssistant.parseIntegerValue(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-getScaledFrame'>&nbsp;</span>**/
            /**
             <div>
             Gets a scaled frame.
             </div>
    
            @param {fm.icelink.LayoutScale} scale The scaling algorithm to use.
            @param {number} outerWidth The width of the outer container.
            @param {number} outerHeight The height of the outer container.
            @param {number} innerWidth The width of the inner element.
            @param {number} innerHeight The height of the inner element.
            @return {fm.icelink.LayoutFrame}
            */
            LayoutFrame.getScaledFrame = function (scale, outerWidth, outerHeight, innerWidth, innerHeight) {
                if (arguments.length == 5) {
                    var x = 0;
                    var y = 0;
                    var width = outerWidth;
                    var height = outerHeight;
                    if (((((fm.icelink.Global.equals(outerWidth, 0)) || (fm.icelink.Global.equals(outerHeight, 0))) || (fm.icelink.Global.equals(innerWidth, 0))) || (fm.icelink.Global.equals(innerHeight, 0)))) {
                        if (((fm.icelink.Global.equals(outerWidth, 0)) || (fm.icelink.Global.equals(innerWidth, 0)))) {
                            width = 0;
                            x = icelink.MathAssistant.floor(outerWidth / 2);
                        }
                        if (((fm.icelink.Global.equals(outerHeight, 0)) || (fm.icelink.Global.equals(innerHeight, 0)))) {
                            height = 0;
                            y = icelink.MathAssistant.floor(outerHeight / 2);
                        }
                    }
                    else {
                        var num5 = void 0;
                        var num6 = void 0;
                        if ((fm.icelink.Global.equals(scale, fm.icelink.LayoutScale.Contain))) {
                            num5 = (outerWidth / outerHeight);
                            num6 = (innerWidth / innerHeight);
                            if ((num5 > num6)) {
                                width = (outerHeight * num6);
                                x = icelink.MathAssistant.floor((outerWidth - width) / 2);
                            }
                            else {
                                if ((num5 < num6)) {
                                    height = (outerWidth / num6);
                                    y = icelink.MathAssistant.floor((outerHeight - height) / 2);
                                }
                            }
                        }
                        else {
                            if ((fm.icelink.Global.equals(scale, fm.icelink.LayoutScale.Cover))) {
                                num5 = (outerWidth / outerHeight);
                                num6 = (innerWidth / innerHeight);
                                if ((num5 < num6)) {
                                    width = (outerHeight * num6);
                                    x = icelink.MathAssistant.floor((outerWidth - width) / 2);
                                }
                                else {
                                    if ((num5 > num6)) {
                                        height = (outerWidth / num6);
                                        y = icelink.MathAssistant.floor((outerHeight - height) / 2);
                                    }
                                }
                            }
                        }
                    }
                    return new fm.icelink.LayoutFrame(x, y, width, height);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes a layout frame to JSON.
             </div>
    
            @param {fm.icelink.LayoutFrame} layoutFrame The layout frame.
            @return {string}
            */
            LayoutFrame.toJson = function (layoutFrame) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(layoutFrame, function (r, jsonObject) {
                        jsonObject["x"] = fm.icelink.IntExtensions.toString(r.getX());
                        jsonObject["y"] = fm.icelink.IntExtensions.toString(r.getY());
                        jsonObject["width"] = fm.icelink.IntExtensions.toString(r.getWidth());
                        jsonObject["height"] = fm.icelink.IntExtensions.toString(r.getHeight());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-getHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height value.
             </div>
    
    
            @return {number}
            */
            LayoutFrame.prototype.getHeight = function () {
                if (arguments.length == 0) {
                    return this._height;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-getWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width value.
             </div>
    
    
            @return {number}
            */
            LayoutFrame.prototype.getWidth = function () {
                if (arguments.length == 0) {
                    return this._width;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-getX'>&nbsp;</span>**/
            /**
             <div>
             Gets the X coordinate.
             </div>
    
    
            @return {number}
            */
            LayoutFrame.prototype.getX = function () {
                if (arguments.length == 0) {
                    return this._x;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-getY'>&nbsp;</span>**/
            /**
             <div>
             Gets the Y coordinate.
             </div>
    
    
            @return {number}
            */
            LayoutFrame.prototype.getY = function () {
                if (arguments.length == 0) {
                    return this._y;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified layout frame is equivalent.
             </div>
    
            @param {fm.icelink.LayoutFrame} layoutFrame The layout frame.
            @return {boolean}
            */
            LayoutFrame.prototype.isEquivalent = function (layoutFrame) {
                if (arguments.length == 1) {
                    return ((((fm.icelink.Global.equals(layoutFrame.getX(), this.getX())) && (fm.icelink.Global.equals(layoutFrame.getY(), this.getY()))) && (fm.icelink.Global.equals(layoutFrame.getWidth(), this.getWidth()))) && (fm.icelink.Global.equals(layoutFrame.getHeight(), this.getHeight())));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-setHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the height value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutFrame.prototype.setHeight = function (value) {
                if (arguments.length == 1) {
                    this._height = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-setWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the width value.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutFrame.prototype.setWidth = function (value) {
                if (arguments.length == 1) {
                    this._width = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-setX'>&nbsp;</span>**/
            /**
             <div>
             Sets the X coordinate.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutFrame.prototype.setX = function (value) {
                if (arguments.length == 1) {
                    this._x = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-setY'>&nbsp;</span>**/
            /**
             <div>
             Sets the Y coordinate.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutFrame.prototype.setY = function (value) {
                if (arguments.length == 1) {
                    this._y = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutFrame-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
    
            @return {string}
            */
            LayoutFrame.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.LayoutFrame.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutFrame;
        }());
        icelink.LayoutFrame = LayoutFrame;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LayoutModeWrapper = /** @class */ (function () {
            function LayoutModeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_28 = __arguments[0];
                    //super();
                    this._value = value_28;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutModeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutModeWrapper]';
            };
            LayoutModeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LayoutMode.FloatLocal)
                        return 'FloatLocal';
                    if (this._value == fm.icelink.LayoutMode.FloatRemote)
                        return 'FloatRemote';
                    if (this._value == fm.icelink.LayoutMode.Block)
                        return 'Block';
                    if (this._value == fm.icelink.LayoutMode.Inline)
                        return 'Inline';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutModeWrapper;
        }());
        icelink.LayoutModeWrapper = LayoutModeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LayoutOriginWrapper = /** @class */ (function () {
            function LayoutOriginWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_29 = __arguments[0];
                    //super();
                    this._value = value_29;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutOriginWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutOriginWrapper]';
            };
            LayoutOriginWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LayoutOrigin.TopLeft)
                        return 'TopLeft';
                    if (this._value == fm.icelink.LayoutOrigin.TopRight)
                        return 'TopRight';
                    if (this._value == fm.icelink.LayoutOrigin.BottomRight)
                        return 'BottomRight';
                    if (this._value == fm.icelink.LayoutOrigin.BottomLeft)
                        return 'BottomLeft';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutOriginWrapper;
        }());
        icelink.LayoutOriginWrapper = LayoutOriginWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LayoutScaleWrapper = /** @class */ (function () {
            function LayoutScaleWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_30 = __arguments[0];
                    //super();
                    this._value = value_30;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutScaleWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutScaleWrapper]';
            };
            LayoutScaleWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LayoutScale.Contain)
                        return 'Contain';
                    if (this._value == fm.icelink.LayoutScale.Cover)
                        return 'Cover';
                    if (this._value == fm.icelink.LayoutScale.Stretch)
                        return 'Stretch';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutScaleWrapper;
        }());
        icelink.LayoutScaleWrapper = LayoutScaleWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Defines the results of a layout calculation.
         </div>
    
        */
        var LayoutTable = /** @class */ (function () {
            /**<span id='method-fm.icelink.LayoutTable-constructor'>&nbsp;</span>**/
            /**
             <div>
             Initializes a new instance of the `fm.icelink.layoutTable` class.
             </div>
    
            @param {number} columnCount The column count.
            @param {number} rowCount The row count.
            @param {number} cellWidth The width of each cell.
            @param {number} cellHeight The height of each cell.
            @return {}
            */
            function LayoutTable(columnCount, rowCount, cellWidth, cellHeight) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 4) {
                    var columnCount_1 = __arguments[0];
                    var rowCount_1 = __arguments[1];
                    var cellWidth_1 = __arguments[2];
                    var cellHeight_1 = __arguments[3];
                    //super();
                    this.fmicelinkLayoutTableInit();
                    this.setColumnCount(columnCount_1);
                    this.setRowCount(rowCount_1);
                    this.setCellWidth(cellWidth_1);
                    this.setCellHeight(cellHeight_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LayoutTable.prototype.getTypeString = function () {
                return '[fm.icelink.LayoutTable]';
            };
            LayoutTable.prototype.fmicelinkLayoutTableInit = function () {
                this._cellHeight = 0;
                this._cellWidth = 0;
                this._columnCount = 0;
                this._rowCount = 0;
            };
            /**<span id='method-fm.icelink.LayoutTable-getCellHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height of each cell.
             </div>
    
    
            @return {number}
            */
            LayoutTable.prototype.getCellHeight = function () {
                if (arguments.length == 0) {
                    return this._cellHeight;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-getCellWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width of each cell.
             </div>
    
    
            @return {number}
            */
            LayoutTable.prototype.getCellWidth = function () {
                if (arguments.length == 0) {
                    return this._cellWidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-getColumnCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the column count.
             </div>
    
    
            @return {number}
            */
            LayoutTable.prototype.getColumnCount = function () {
                if (arguments.length == 0) {
                    return this._columnCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-getRowCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the row count.
             </div>
    
    
            @return {number}
            */
            LayoutTable.prototype.getRowCount = function () {
                if (arguments.length == 0) {
                    return this._rowCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-setCellHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the height of each cell.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutTable.prototype.setCellHeight = function (value) {
                if (arguments.length == 1) {
                    this._cellHeight = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-setCellWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the width of each cell.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutTable.prototype.setCellWidth = function (value) {
                if (arguments.length == 1) {
                    this._cellWidth = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-setColumnCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the column count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutTable.prototype.setColumnCount = function (value) {
                if (arguments.length == 1) {
                    this._columnCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.LayoutTable-setRowCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the row count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            LayoutTable.prototype.setRowCount = function (value) {
                if (arguments.length == 1) {
                    this._rowCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LayoutTable;
        }());
        icelink.LayoutTable = LayoutTable;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var LocalMediaStateWrapper = /** @class */ (function () {
            function LocalMediaStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_31 = __arguments[0];
                    //super();
                    this._value = value_31;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            LocalMediaStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.LocalMediaStateWrapper]';
            };
            LocalMediaStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.LocalMediaState.New)
                        return 'New';
                    if (this._value == fm.icelink.LocalMediaState.Starting)
                        return 'Starting';
                    if (this._value == fm.icelink.LocalMediaState.Started)
                        return 'Started';
                    if (this._value == fm.icelink.LocalMediaState.Stopping)
                        return 'Stopping';
                    if (this._value == fm.icelink.LocalMediaState.Stopped)
                        return 'Stopped';
                    if (this._value == fm.icelink.LocalMediaState.Destroying)
                        return 'Destroying';
                    if (this._value == fm.icelink.LocalMediaState.Destroyed)
                        return 'Destroyed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return LocalMediaStateWrapper;
        }());
        icelink.LocalMediaStateWrapper = LocalMediaStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaBuffer.ts" />

/// <reference path="MediaBuffer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A video buffer.
         </div>
    
        */
        var VideoBuffer = /** @class */ (function (_super) {
            __extends(VideoBuffer, _super);
            function VideoBuffer() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkVideoBufferInit();
                    _this.__orientation = 0;
                }
                else if (__arguments.length == 4 && (icelink.Util.isNullOrUndefined(arguments[2]) || icelink.Util.isObjectType(arguments[2], '[fm.icelink.DataBuffer]'))) {
                    var width = __arguments[0];
                    var height = __arguments[1];
                    var dataBuffer = __arguments[2];
                    var format = __arguments[3];
                    _this = _super.call(this, dataBuffer, format) || this;
                    _this.fmicelinkVideoBufferInit();
                    _this.__orientation = 0;
                    _this.setWidth(width);
                    _this.setHeight(height);
                    _this.setStrides(_this.getDefaultStrides(width, format));
                }
                else if (__arguments.length == 4 && (icelink.Util.isNullOrUndefined(arguments[2]) || (icelink.Util.isArray(arguments[2]) && (arguments[2].length == 0 || (icelink.Util.isNullOrUndefined(arguments[2][0]) || icelink.Util.isObjectType(arguments[2][0], '[fm.icelink.DataBuffer]')))))) {
                    var width = __arguments[0];
                    var height = __arguments[1];
                    var dataBuffers = __arguments[2];
                    var format = __arguments[3];
                    _this = _super.call(this, dataBuffers, format) || this;
                    _this.fmicelinkVideoBufferInit();
                    _this.__orientation = 0;
                    _this.setWidth(width);
                    _this.setHeight(height);
                    _this.setStrides(_this.getDefaultStrides(width, format));
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            VideoBuffer.prototype.getTypeString = function () {
                return '[fm.icelink.VideoBuffer]' + ',' + _super.prototype.getTypeString.call(this);
            };
            VideoBuffer.prototype.fmicelinkVideoBufferInit = function () {
                this.__height = 0;
                this.__isMuted = false;
                this.__orientation = 0;
                this.__width = 0;
            };
            /**
            @internal
    
            */
            VideoBuffer.calculateByteCount = function (format, width, height) {
                if (arguments.length == 3) {
                    if (format.getIsYuvType()) {
                        return ((width * height) * 1.5);
                    }
                    if (format.getIsRgbType()) {
                        return ((width * height) * 3);
                    }
                    if (format.getIsRgbaType()) {
                        return ((width * height) * 4);
                    }
                    return -1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createBlack'>&nbsp;</span>**/
            /**
             <div>
             Creates a black (0, 0, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createBlack = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 0, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createBlue'>&nbsp;</span>**/
            /**
             <div>
             Creates a blue (0, 0, 255) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createBlue = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 0, 255, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            VideoBuffer.createCustom = function () {
                if (arguments.length == 6) {
                    var width = arguments[0];
                    var height = arguments[1];
                    var red = arguments[2];
                    var green = arguments[3];
                    var blue = arguments[4];
                    var formatName = arguments[5];
                    var count = fm.icelink.VideoBuffer.getMinimumBufferLength(width, height, formatName);
                    if ((!fm.icelink.Global.equals(count, -1))) {
                        return fm.icelink.VideoBuffer.createCustom(width, height, red, green, blue, formatName, fm.icelink.DataBuffer.allocate(count));
                    }
                    fm.icelink.Log.error(fm.icelink.StringExtensions.format("Could not create custom video buffer. Format '{0}' is not supported.", formatName));
                    return null;
                }
                else if (arguments.length == 7) {
                    var width = arguments[0];
                    var height = arguments[1];
                    var red = arguments[2];
                    var green = arguments[3];
                    var blue = arguments[4];
                    var formatName = arguments[5];
                    var buffer = arguments[6];
                    var num = fm.icelink.VideoBuffer.getMinimumBufferLength(width, height, formatName);
                    if ((!fm.icelink.Global.equals(num, -1))) {
                        var num3 = void 0;
                        var num4 = void 0;
                        if ((buffer.getLength() < num)) {
                            throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Buffer too small. Minimum buffer length is {0} but buffer length is {1}.", fm.icelink.IntExtensions.toString(num), fm.icelink.IntExtensions.toString(buffer.getLength())));
                        }
                        var flag = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getBgrName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag2 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getRgbName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag3 = (flag || flag2);
                        var flag4 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getBgraName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag5 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getRgbaName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag6 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getAbgrName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag7 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getArgbName(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag8 = (((flag4 || flag5) || flag6) || flag7);
                        var flag9 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getI420Name(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag10 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getYv12Name(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag11 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getNv12Name(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag12 = fm.icelink.StringExtensions.isEqual(fm.icelink.VideoFormat.getNv21Name(), formatName, fm.icelink.StringComparison.OrdinalIgnoreCase);
                        var flag13 = (((flag9 || flag10) || flag11) || flag12);
                        var num2 = (width * height);
                        if (flag3) {
                            if (((fm.icelink.Global.equals(red, green)) && (fm.icelink.Global.equals(red, blue)))) {
                                buffer.set(fm.icelink.BitAssistant.castByte(red));
                            }
                            else {
                                num3 = 0;
                                if (flag) {
                                    for (num4 = 0; (num4 < num2); num4++) {
                                        buffer.write8(blue, num3++);
                                        buffer.write8(green, num3++);
                                        buffer.write8(red, num3++);
                                    }
                                }
                                else {
                                    num4 = 0;
                                    while ((num4 < num2)) {
                                        buffer.write8(red, num3++);
                                        buffer.write8(green, num3++);
                                        buffer.write8(blue, num3++);
                                        num4++;
                                    }
                                }
                            }
                            return new fm.icelink.VideoBuffer(width, height, buffer, new fm.icelink.VideoFormat(formatName));
                        }
                        if (flag8) {
                            num3 = 0;
                            var num5 = 255;
                            if (flag4) {
                                for (num4 = 0; (num4 < num2); num4++) {
                                    buffer.write8(blue, num3++);
                                    buffer.write8(green, num3++);
                                    buffer.write8(red, num3++);
                                    buffer.write8(num5, num3++);
                                }
                            }
                            else {
                                if (flag5) {
                                    for (num4 = 0; (num4 < num2); num4++) {
                                        buffer.write8(red, num3++);
                                        buffer.write8(green, num3++);
                                        buffer.write8(blue, num3++);
                                        buffer.write8(num5, num3++);
                                    }
                                }
                                else {
                                    if (flag6) {
                                        for (num4 = 0; (num4 < num2); num4++) {
                                            buffer.write8(num5, num3++);
                                            buffer.write8(blue, num3++);
                                            buffer.write8(green, num3++);
                                            buffer.write8(red, num3++);
                                        }
                                    }
                                    else {
                                        if (flag7) {
                                            for (num4 = 0; (num4 < num2); num4++) {
                                                buffer.write8(num5, num3++);
                                                buffer.write8(red, num3++);
                                                buffer.write8(green, num3++);
                                                buffer.write8(blue, num3++);
                                            }
                                        }
                                    }
                                }
                            }
                            return new fm.icelink.VideoBuffer(width, height, buffer, new fm.icelink.VideoFormat(formatName));
                        }
                        if (flag13) {
                            var num6 = (((0.299 * red) + (0.587 * green)) + (0.110004 * blue));
                            var num7 = ((((-0.168736 * red) - (0.331264 * green)) + (0.5 * blue)) + 128);
                            var num8 = ((((0.5 * red) - (0.418688 * green)) - (0.081312 * blue)) + 128);
                            var length_33 = num2;
                            buffer.set(fm.icelink.BitAssistant.castByte(num6), 0, length_33);
                            if ((flag9 || flag10)) {
                                var num10 = icelink.MathAssistant.floor(num2 / 4);
                                var num11 = icelink.MathAssistant.floor(num2 / 4);
                                var offset = length_33;
                                var num13 = (length_33 + num10);
                                if (flag10) {
                                    num13 = length_33;
                                    offset = (length_33 + num11);
                                }
                                buffer.set(fm.icelink.BitAssistant.castByte(num7), offset, num10);
                                buffer.set(fm.icelink.BitAssistant.castByte(num8), num13, num11);
                            }
                            else {
                                var num14 = icelink.MathAssistant.floor(num2 / 2);
                                var num15 = length_33;
                                var num16 = 0;
                                var num17 = 1;
                                if (flag12) {
                                    num16 = 1;
                                    num17 = 0;
                                }
                                for (num4 = num15; (num4 < (num15 + num14)); num4 = (num4 + 2)) {
                                    buffer.write8((num15 + num16), num7);
                                    buffer.write8((num15 + num17), num8);
                                }
                            }
                            return new fm.icelink.VideoBuffer(width, height, buffer, new fm.icelink.VideoFormat(formatName));
                        }
                    }
                    fm.icelink.Log.error(fm.icelink.StringExtensions.format("Could not create custom video buffer. Format '{0}' is not supported.", formatName));
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createCyan'>&nbsp;</span>**/
            /**
             <div>
             Creates a cyan (0, 255, 255) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createCyan = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 255, 255, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createDarkBlue'>&nbsp;</span>**/
            /**
             <div>
             Creates a dark blue (0, 0, 128) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createDarkBlue = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 0, 128, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createDarkGreen'>&nbsp;</span>**/
            /**
             <div>
             Creates a dark green (0, 128, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createDarkGreen = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 128, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createDarkRed'>&nbsp;</span>**/
            /**
             <div>
             Creates a dark red (128, 0, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createDarkRed = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 128, 0, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createGray'>&nbsp;</span>**/
            /**
             <div>
             Creates a gray (255, 255, 255) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createGray = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 128, 128, 128, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createGreen'>&nbsp;</span>**/
            /**
             <div>
             Creates a green (0, 255, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createGreen = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 255, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createMagenta'>&nbsp;</span>**/
            /**
             <div>
             Creates a magenta (255, 0, 255) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createMagenta = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 255, 0, 255, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createOlive'>&nbsp;</span>**/
            /**
             <div>
             Creates an olive (128, 128, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createOlive = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 128, 128, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createPurple'>&nbsp;</span>**/
            /**
             <div>
             Creates a purple (128, 0, 128) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createPurple = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 128, 0, 128, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createRed'>&nbsp;</span>**/
            /**
             <div>
             Creates a red (255, 0, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createRed = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 255, 0, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createTeal'>&nbsp;</span>**/
            /**
             <div>
             Creates a teal (0, 128, 128) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createTeal = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 0, 128, 128, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createWhite'>&nbsp;</span>**/
            /**
             <div>
             Creates a white (255, 255, 255) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createWhite = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 255, 255, 255, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createYellow'>&nbsp;</span>**/
            /**
             <div>
             Creates a yellow (255, 255, 0) video buffer with the specified width/height.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.createYellow = function (width, height, formatName) {
                if (arguments.length == 3) {
                    return fm.icelink.VideoBuffer.createCustom(width, height, 255, 255, 0, formatName);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} videoBufferJson The video buffer JSON.
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.fromJson = function (videoBufferJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(videoBufferJson, function () {
                        return new fm.icelink.VideoBuffer();
                    }, function (videoBuffer, name, valueJson) {
                        var _var0 = name;
                        if (_var0 == "width") {
                            do {
                                videoBuffer.setWidth(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "height") {
                            do {
                                videoBuffer.setHeight(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "strides") {
                            do {
                                videoBuffer.setStrides(fm.icelink.JsonSerializer.deserializeIntegerArray(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "orientation") {
                            do {
                                videoBuffer.setOrientation(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "isMuted") {
                            do {
                                videoBuffer.setIsMuted(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "dataBuffers") {
                            do {
                                videoBuffer.setDataBuffers(fm.icelink.DataBuffer.fromJsonArray(valueJson));
                                break;
                            } while (false);
                        }
                        else if (_var0 == "format") {
                            do {
                                videoBuffer.setFormat(fm.icelink.VideoFormat.fromJson(valueJson));
                                break;
                            } while (false);
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an array of instances from JSON.
             </div>
    
            @param {string} videoBuffersJson The video buffers JSON.
            @return {fm.icelink.VideoBuffer[]}
            */
            VideoBuffer.fromJsonArray = function (videoBuffersJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(videoBuffersJson, fm.icelink.VideoBuffer.fromJson.bind(fm.icelink.VideoBuffer));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getMinimumBufferLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the minimum data buffer length for a given width, height, and format.
             </div>
    
            @param {number} width The width.
            @param {number} height The height.
            @param {string} formatName Name of the format.
            @return {number}
            */
            VideoBuffer.getMinimumBufferLength = function (width, height, formatName) {
                if (arguments.length == 3) {
                    var num = (width * height);
                    if (((fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getBgrName())) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getRgbName())))) {
                        return (num * 3);
                    }
                    if (((((fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getBgraName())) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getRgbaName()))) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getAbgrName()))) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getArgbName())))) {
                        return (num * 4);
                    }
                    if (((((fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getNv12Name())) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getNv21Name()))) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getI420Name()))) || (fm.icelink.Global.equals(formatName, fm.icelink.VideoFormat.getYv12Name())))) {
                        return (num * 1.5);
                    }
                    fm.icelink.Log.error(fm.icelink.StringExtensions.format("Could not get minimum buffer length. Format '{0}' is not supported.", formatName));
                    return -1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.VideoBuffer} videoBuffer The video buffer.
            @return {string}
            */
            VideoBuffer.toJson = function (videoBuffer) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(videoBuffer, function (obj, jsonObject) {
                        jsonObject["width"] = fm.icelink.JsonSerializer.serializeInteger(videoBuffer.getWidth());
                        jsonObject["height"] = fm.icelink.JsonSerializer.serializeInteger(videoBuffer.getHeight());
                        jsonObject["strides"] = fm.icelink.JsonSerializer.serializeIntegerArray(videoBuffer.getStrides());
                        jsonObject["orientation"] = fm.icelink.JsonSerializer.serializeInteger(videoBuffer.getOrientation());
                        jsonObject["isMuted"] = fm.icelink.JsonSerializer.serializeBoolean(videoBuffer.getIsMuted());
                        jsonObject["dataBuffers"] = fm.icelink.DataBuffer.toJsonArray(videoBuffer.getDataBuffers());
                        jsonObject["format"] = fm.icelink.VideoFormat.toJson(videoBuffer.getFormat());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of instances to JSON.
             </div>
    
            @param {fm.icelink.VideoBuffer[]} videoBuffers The video buffers.
            @return {string}
            */
            VideoBuffer.toJsonArray = function (videoBuffers) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(videoBuffers, fm.icelink.VideoBuffer.toJson.bind(fm.icelink.VideoBuffer));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this instance.
             </div>
    
    
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.prototype.clone = function () {
                if (arguments.length == 0) {
                    var buffer = _super.prototype.clone.call(this);
                    buffer.setStrides(this.getStrides());
                    buffer.setWidth(this.getWidth());
                    buffer.setHeight(this.getHeight());
                    buffer.setOrientation(this.getOrientation());
                    buffer.__isMuted = this.__isMuted;
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            VideoBuffer.prototype.convert = function () {
                if (arguments.length == 2) {
                    var format = arguments[0];
                    var dataBuffer = arguments[1];
                    if (!(_super.prototype.getFormat.call(this).getIsRaw() && format.getIsRaw())) {
                        throw new fm.icelink.Exception("Cannot convert to or from encoded formats.");
                    }
                    if ((fm.icelink.Global.equals(dataBuffer, null))) {
                        dataBuffer = fm.icelink.DataBuffer.allocate(fm.icelink.VideoBuffer.calculateByteCount(format, this.getWidth(), this.getHeight()));
                    }
                    var rValues = null;
                    var gValues = null;
                    var bValues = null;
                    var aValues = null;
                    var _var0 = new fm.icelink.Holder(rValues);
                    var _var1 = new fm.icelink.Holder(gValues);
                    var _var2 = new fm.icelink.Holder(bValues);
                    var _var3 = new fm.icelink.Holder(aValues);
                    this.read(_var0, _var1, _var2, _var3);
                    rValues = _var0.getValue();
                    gValues = _var1.getValue();
                    bValues = _var2.getValue();
                    aValues = _var3.getValue();
                    var buffer = new fm.icelink.VideoBuffer(this.getWidth(), this.getHeight(), dataBuffer, format);
                    buffer.write(rValues, gValues, bValues, aValues);
                    return buffer;
                }
                else if (arguments.length == 1) {
                    var format = arguments[0];
                    if (((fm.icelink.Global.equals(format, null)) || _super.prototype.getFormat.call(this).isEquivalent(format, false))) {
                        return this.clone();
                    }
                    return this.convert(format, null);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-createInstance'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance.
             </div>
    
    
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.prototype.createInstance = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.VideoBuffer();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoBuffer.prototype.getDefaultStrides = function (width, format) {
                if (arguments.length == 2) {
                    if (format.getIsRgbType()) {
                        return [(width * 3)];
                    }
                    if (format.getIsRgbaType()) {
                        return [(width * 4)];
                    }
                    if ((format.getIsI420() || format.getIsYv12())) {
                        if ((fm.icelink.Global.equals(_super.prototype.getDataBuffers.call(this).length, 1))) {
                            return [width];
                        }
                        return [width, icelink.MathAssistant.floor(width / 2), icelink.MathAssistant.floor(width / 2)];
                    }
                    if ((format.getIsNv12() || format.getIsNv21())) {
                        if ((fm.icelink.Global.equals(_super.prototype.getDataBuffers.call(this).length, 1))) {
                            return [width];
                        }
                        return [width, width];
                    }
                    if (((((!fm.icelink.Global.equals(format.getName(), fm.icelink.VideoFormat.getVp8Name())) && (!fm.icelink.Global.equals(format.getName(), fm.icelink.VideoFormat.getVp9Name()))) && ((!fm.icelink.Global.equals(format.getName(), fm.icelink.VideoFormat.getH264Name())) && (!fm.icelink.Global.equals(format.getName(), fm.icelink.MediaFormat.getRedName())))) && (!fm.icelink.Global.equals(format.getName(), fm.icelink.MediaFormat.getUlpFecName())))) {
                        throw new fm.icelink.Exception(fm.icelink.StringExtensions.concat("Unsupported video format '", format.getName(), "'."));
                    }
                    return new Array(1);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height.
             </div>
    
    
            @return {number}
            */
            VideoBuffer.prototype.getHeight = function () {
                if (arguments.length == 0) {
                    return this.__height;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsAbgr'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has ABGR video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsAbgr = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsAbgr());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsArgb'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has ARGB video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsArgb = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsArgb());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsBgr'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has BGR video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsBgr = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsBgr());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsBgra'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has BGRA video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsBgra = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsBgra());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsH264'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has H.264 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsH264 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsH264());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsI420'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has I420 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsI420 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsI420());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsMuted'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this instance has been muted.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsMuted = function () {
                if (arguments.length == 0) {
                    return this.__isMuted;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsNv12'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has NV12 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsNv12 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsNv12());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsNv21'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has NV21 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsNv21 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsNv21());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsRaw'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has raw video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsRaw = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsRaw());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsRgb'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has RGB video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsRgb = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsRgb());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsRgba'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has RGBA video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsRgba = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsRgba());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsRgbaType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has raw RGBA, BGRA, ARGB, or ABGR video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsRgbaType = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsRgbaType());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsRgbType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has raw RGB or BGR video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsRgbType = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsRgbType());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsVp8'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has VP8 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsVp8 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsVp8());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsVp9'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has VP9 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsVp9 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsVp9());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsYuvType'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has raw I420, YV12, NV12, or NV21 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsYuvType = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsYuvType());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getIsYv12'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this buffer has YV12 video.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.getIsYv12 = function () {
                if (arguments.length == 0) {
                    var format = _super.prototype.getFormat.call(this);
                    return ((!fm.icelink.Global.equals(format, null)) && format.getIsYv12());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getOrientation'>&nbsp;</span>**/
            /**
             <div>
             Gets the orientation.
             </div>
    
    
            @return {number}
            */
            VideoBuffer.prototype.getOrientation = function () {
                if (arguments.length == 0) {
                    return this.__orientation;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getStride'>&nbsp;</span>**/
            /**
             <div>
             Gets the stride.
             </div>
    
    
            @return {number}
            */
            VideoBuffer.prototype.getStride = function () {
                if (arguments.length == 0) {
                    var strides = this.getStrides();
                    if ((fm.icelink.Global.equals(strides, null))) {
                        return 0;
                    }
                    return strides[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getStrides'>&nbsp;</span>**/
            /**
             <div>
             Gets the strides.
             </div>
    
    
            @return {number[]}
            */
            VideoBuffer.prototype.getStrides = function () {
                if (arguments.length == 0) {
                    return this._strides;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-getWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width.
             </div>
    
    
            @return {number}
            */
            VideoBuffer.prototype.getWidth = function () {
                if (arguments.length == 0) {
                    return this.__width;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-mute'>&nbsp;</span>**/
            /**
             <div>
             Mutes this instance. This is a one-way operation that clears
             the underlying data buffer.
             </div>
    
    
            @return {boolean}
            */
            VideoBuffer.prototype.mute = function () {
                if (arguments.length == 0) {
                    if (!this.__isMuted) {
                        if (_super.prototype.getFormat.call(this).getIsRgbType()) {
                            _super.prototype.getDataBuffer.call(this).set(0);
                        }
                        else {
                            var dataBuffer = void 0;
                            var num3 = void 0;
                            if (_super.prototype.getFormat.call(this).getIsRgbaType()) {
                                dataBuffer = _super.prototype.getDataBuffer.call(this);
                                var num = 1;
                                var num2 = 0;
                                if ((_super.prototype.getFormat.call(this).getIsBgra() || _super.prototype.getFormat.call(this).getIsRgba())) {
                                    num = 0;
                                    num2 = 3;
                                }
                                for (num3 = 0; (num3 < dataBuffer.getLength()); num3 = (num3 + 4)) {
                                    dataBuffer.set(0, (num3 + num), 3);
                                    dataBuffer.set(fm.icelink.BitAssistant.castByte(255), (num3 + num2), 1);
                                }
                            }
                            else {
                                if (_super.prototype.getFormat.call(this).getIsYuvType()) {
                                    var dataBuffers = _super.prototype.getDataBuffers.call(this);
                                    if ((fm.icelink.Global.equals(dataBuffers.length, 1))) {
                                        var length_34 = (this.getWidth() * this.getHeight());
                                        dataBuffer = dataBuffers[0];
                                        dataBuffer.set(0, 0, length_34);
                                        dataBuffer.set(fm.icelink.BitAssistant.castByte(128), length_34);
                                    }
                                    else {
                                        dataBuffers[0].set(0);
                                        for (num3 = 1; (num3 < dataBuffers.length); num3++) {
                                            dataBuffers[num3].set(fm.icelink.BitAssistant.castByte(128));
                                        }
                                    }
                                }
                                else {
                                    return false;
                                }
                            }
                        }
                        this.__isMuted = true;
                    }
                    return true;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoBuffer.prototype.read = function (rValues, gValues, bValues, aValues) {
                if (arguments.length == 4) {
                    var num2 = void 0;
                    var num3 = void 0;
                    var num4 = void 0;
                    var dataBuffer = void 0;
                    var stride = void 0;
                    var num6 = void 0;
                    var num7 = void 0;
                    var num = (this.getWidth() * this.getHeight());
                    rValues.setValue(new Array(num));
                    gValues.setValue(new Array(num));
                    bValues.setValue(new Array(num));
                    aValues.setValue(new Array(num));
                    if (_super.prototype.getFormat.call(this).getIsRgbaType()) {
                        num2 = 0;
                        num3 = (this.getWidth() * 4);
                        num4 = 0;
                        dataBuffer = _super.prototype.getDataBuffer.call(this);
                        stride = this.getStride();
                        if ((fm.icelink.Global.equals(stride, 0))) {
                            stride = num3;
                        }
                        if (_super.prototype.getFormat.call(this).getIsRgba()) {
                            for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                num7 = 0;
                                while ((num7 < this.getWidth())) {
                                    rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                    gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                    bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                    aValues.getValue()[num2] = dataBuffer.read8(num4++);
                                    num2++;
                                    num7++;
                                }
                                num4 = (num4 + (stride - num3));
                            }
                        }
                        else {
                            if (_super.prototype.getFormat.call(this).getIsBgra()) {
                                for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                    num7 = 0;
                                    while ((num7 < this.getWidth())) {
                                        bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        aValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        num2++;
                                        num7++;
                                    }
                                    num4 = (num4 + (stride - num3));
                                }
                            }
                            else {
                                if (_super.prototype.getFormat.call(this).getIsArgb()) {
                                    for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                        num7 = 0;
                                        while ((num7 < this.getWidth())) {
                                            aValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            num2++;
                                            num7++;
                                        }
                                        num4 = (num4 + (stride - num3));
                                    }
                                }
                                else {
                                    if (_super.prototype.getFormat.call(this).getIsAbgr()) {
                                        for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                            num7 = 0;
                                            while ((num7 < this.getWidth())) {
                                                aValues.getValue()[num2] = dataBuffer.read8(num4++);
                                                bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                                gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                                rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                                num2++;
                                                num7++;
                                            }
                                            num4 = (num4 + (stride - num3));
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (_super.prototype.getFormat.call(this).getIsRgbType()) {
                            num2 = 0;
                            num3 = (this.getWidth() * 3);
                            num4 = 0;
                            dataBuffer = _super.prototype.getDataBuffer.call(this);
                            stride = this.getStride();
                            if ((fm.icelink.Global.equals(stride, 0))) {
                                stride = num3;
                            }
                            if (_super.prototype.getFormat.call(this).getIsRgb()) {
                                for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                    num7 = 0;
                                    while ((num7 < this.getWidth())) {
                                        rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                        aValues.getValue()[num2] = 255;
                                        num2++;
                                        num7++;
                                    }
                                    num4 = (num4 + (stride - num3));
                                }
                            }
                            else {
                                if (_super.prototype.getFormat.call(this).getIsBgr()) {
                                    for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                        num7 = 0;
                                        while ((num7 < this.getWidth())) {
                                            bValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            gValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            rValues.getValue()[num2] = dataBuffer.read8(num4++);
                                            aValues.getValue()[num2] = 255;
                                            num2++;
                                            num7++;
                                        }
                                        num4 = (num4 + (stride - num3));
                                    }
                                }
                            }
                        }
                        else {
                            if (_super.prototype.getFormat.call(this).getIsYuvType()) {
                                var numArray = new Array(num);
                                var numArray2 = new Array(icelink.MathAssistant.floor(num / 4));
                                var numArray3 = new Array(icelink.MathAssistant.floor(num / 4));
                                var num8 = 0;
                                var num9 = 0;
                                var num10 = 0;
                                var width = this.getWidth();
                                var num12 = 0;
                                var buffer2 = _super.prototype.getDataBuffers.call(this)[0];
                                var num13 = this.getStrides()[0];
                                if ((fm.icelink.Global.equals(num13, 0))) {
                                    num13 = width;
                                }
                                for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                    num7 = 0;
                                    while ((num7 < this.getWidth())) {
                                        numArray[num8++] = buffer2.read8(num12++);
                                        num7++;
                                    }
                                    num12 = (num12 + (num13 - width));
                                }
                                var flag = (fm.icelink.Global.equals(_super.prototype.getDataBuffers.call(this).length, 1));
                                if ((_super.prototype.getFormat.call(this).getIsI420() || _super.prototype.getFormat.call(this).getIsYv12())) {
                                    var buffer3 = void 0;
                                    var buffer4 = void 0;
                                    var num18 = void 0;
                                    var num19 = void 0;
                                    var num14 = icelink.MathAssistant.floor(this.getWidth() / 2);
                                    var num15 = icelink.MathAssistant.floor(this.getWidth() / 2);
                                    var num16 = 0;
                                    var num17 = 0;
                                    if (flag) {
                                        buffer3 = _super.prototype.getDataBuffers.call(this)[0];
                                        buffer4 = _super.prototype.getDataBuffers.call(this)[0];
                                        num18 = (this.getStrides()[0] / 2);
                                        num19 = (this.getStrides()[0] / 2);
                                    }
                                    else {
                                        buffer3 = _super.prototype.getDataBuffers.call(this)[1];
                                        buffer4 = _super.prototype.getDataBuffers.call(this)[2];
                                        num18 = this.getStrides()[1];
                                        num19 = this.getStrides()[2];
                                    }
                                    if ((fm.icelink.Global.equals(num18, 0))) {
                                        num18 = num14;
                                    }
                                    if ((fm.icelink.Global.equals(num19, 0))) {
                                        num19 = num15;
                                    }
                                    if (flag) {
                                        if (_super.prototype.getFormat.call(this).getIsI420()) {
                                            num16 = (num13 * this.getHeight());
                                            num17 = (num16 + icelink.MathAssistant.floor((num18 * this.getHeight()) / 2));
                                        }
                                        else {
                                            num17 = (num13 * this.getHeight());
                                            num16 = (num17 + icelink.MathAssistant.floor((num19 * this.getHeight()) / 2));
                                        }
                                    }
                                    num6 = 0;
                                    while ((num6 < icelink.MathAssistant.floor(this.getHeight() / 2))) {
                                        num7 = 0;
                                        while ((num7 < icelink.MathAssistant.floor(this.getWidth() / 2))) {
                                            numArray2[num9++] = buffer3.read8(num16++);
                                            numArray3[num10++] = buffer4.read8(num17++);
                                            num7++;
                                        }
                                        num16 = (num16 + (num18 - num14));
                                        num17 = (num17 + (num19 - num15));
                                        num6++;
                                    }
                                }
                                else {
                                    if ((_super.prototype.getFormat.call(this).getIsNv12() || _super.prototype.getFormat.call(this).getIsNv21())) {
                                        var buffer5 = void 0;
                                        var num22 = void 0;
                                        var num20 = this.getWidth();
                                        var num21 = 0;
                                        if (flag) {
                                            buffer5 = _super.prototype.getDataBuffers.call(this)[0];
                                            num22 = this.getStrides()[0];
                                        }
                                        else {
                                            buffer5 = _super.prototype.getDataBuffers.call(this)[1];
                                            num22 = this.getStrides()[1];
                                        }
                                        if ((fm.icelink.Global.equals(num22, 0))) {
                                            num22 = num20;
                                        }
                                        if (flag) {
                                            num21 = (num13 * this.getHeight());
                                        }
                                        if (_super.prototype.getFormat.call(this).getIsNv12()) {
                                            for (num6 = 0; (num6 < icelink.MathAssistant.floor(this.getHeight() / 2)); num6++) {
                                                num7 = 0;
                                                while ((num7 < icelink.MathAssistant.floor(this.getWidth() / 2))) {
                                                    numArray2[num9++] = buffer5.read8(num21++);
                                                    numArray3[num10++] = buffer5.read8(num21++);
                                                    num7++;
                                                }
                                                num21 = (num21 + (num22 - num20));
                                            }
                                        }
                                        else {
                                            num6 = 0;
                                            while ((num6 < icelink.MathAssistant.floor(this.getHeight() / 2))) {
                                                num7 = 0;
                                                while ((num7 < icelink.MathAssistant.floor(this.getWidth() / 2))) {
                                                    numArray3[num10++] = buffer5.read8(num21++);
                                                    numArray2[num9++] = buffer5.read8(num21++);
                                                    num7++;
                                                }
                                                num21 = (num21 + (num22 - num20));
                                                num6++;
                                            }
                                        }
                                    }
                                }
                                var num23 = 0;
                                var index = 0;
                                var num25 = 0;
                                num2 = 0;
                                for (num6 = 0; (num6 < this.getHeight()); num6++) {
                                    for (num7 = 0; (num7 < this.getWidth()); num7++) {
                                        var num26 = numArray[num23++];
                                        var num27 = numArray2[index];
                                        var num28 = numArray3[num25];
                                        if ((fm.icelink.Global.equals((num7 % 2), 1))) {
                                            index++;
                                            num25++;
                                        }
                                        var num29 = fm.icelink.MathAssistant.min(255, fm.icelink.MathAssistant.max(0, ((1.164 * (num26 - 16)) + (2.018 * (num27 - 128)))));
                                        var num30 = fm.icelink.MathAssistant.min(255, fm.icelink.MathAssistant.max(0, (((1.164 * (num26 - 16)) - (0.813 * (num28 - 128))) - (0.391 * (num27 - 128)))));
                                        var num31 = fm.icelink.MathAssistant.min(255, fm.icelink.MathAssistant.max(0, ((1.164 * (num26 - 16)) + (1.596 * (num28 - 128)))));
                                        rValues.getValue()[num2] = fm.icelink.BitAssistant.castInteger(fm.icelink.BitAssistant.castByte(num31));
                                        gValues.getValue()[num2] = fm.icelink.BitAssistant.castInteger(fm.icelink.BitAssistant.castByte(num30));
                                        bValues.getValue()[num2] = fm.icelink.BitAssistant.castInteger(fm.icelink.BitAssistant.castByte(num29));
                                        aValues.getValue()[num2] = 255;
                                        num2++;
                                    }
                                    if ((fm.icelink.Global.equals((num6 % 2), 0))) {
                                        index = (index - icelink.MathAssistant.floor(this.getWidth() / 2));
                                        num25 = (num25 - icelink.MathAssistant.floor(this.getWidth() / 2));
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-setHeight'>&nbsp;</span>**/
            /**
             <div>
             Sets the height.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            VideoBuffer.prototype.setHeight = function (value) {
                if (arguments.length == 1) {
                    if (((!fm.icelink.Global.equals(value, -1)) && ((value % 2) > 0))) {
                        value--;
                    }
                    this.__height = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoBuffer.prototype.setIsMuted = function (value) {
                if (arguments.length == 1) {
                    this.__isMuted = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-setOrientation'>&nbsp;</span>**/
            /**
             <div>
             Sets the orientation.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            VideoBuffer.prototype.setOrientation = function (value) {
                if (arguments.length == 1) {
                    if (((((!fm.icelink.Global.equals(value, 0)) && (!fm.icelink.Global.equals(value, 90))) && (!fm.icelink.Global.equals(value, 180))) && (!fm.icelink.Global.equals(value, 270)))) {
                        throw new fm.icelink.Exception("Video orientation can only be 0, 90, 180 or 270.");
                    }
                    this.__orientation = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-setStride'>&nbsp;</span>**/
            /**
             <div>
             Sets the stride.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            VideoBuffer.prototype.setStride = function (value) {
                if (arguments.length == 1) {
                    this.setStrides([value]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-setStrides'>&nbsp;</span>**/
            /**
             <div>
             Sets the strides.
             </div>
    
    
            @param {number[]} value
            @return {void}
            */
            VideoBuffer.prototype.setStrides = function (value) {
                if (arguments.length == 1) {
                    this._strides = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-setWidth'>&nbsp;</span>**/
            /**
             <div>
             Sets the width.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            VideoBuffer.prototype.setWidth = function (value) {
                if (arguments.length == 1) {
                    if (((!fm.icelink.Global.equals(value, -1)) && ((value % 2) > 0))) {
                        value--;
                    }
                    this.__width = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
            */
            VideoBuffer.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.VideoBuffer.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoBuffer-toPlanar'>&nbsp;</span>**/
            /**
             <div>
             Converts a planar representation of this
             packed buffer, if in YUV-packed format.
             Otherwise, returns the current buffer.
             </div>
    
            @return {fm.icelink.VideoBuffer}
            */
            VideoBuffer.prototype.toPlanar = function () {
                if (arguments.length == 0) {
                    var num2 = void 0;
                    var num5 = void 0;
                    var num8 = void 0;
                    if (!(this.getIsYuvType() && (_super.prototype.getDataBuffers.call(this).length <= 1))) {
                        return this;
                    }
                    var buffer = this.clone();
                    var dataBuffer = buffer.getDataBuffer();
                    var stride = buffer.getStride();
                    if ((buffer.getIsI420() || buffer.getIsYv12())) {
                        var num9 = void 0;
                        var num10 = void 0;
                        num2 = stride;
                        var num3 = icelink.MathAssistant.floor(stride / 2);
                        var num4 = icelink.MathAssistant.floor(stride / 2);
                        num5 = (stride * buffer.getHeight());
                        var num6 = icelink.MathAssistant.floor(num5 / 4);
                        var num7 = icelink.MathAssistant.floor(num5 / 4);
                        num8 = 0;
                        if (buffer.getIsI420()) {
                            num9 = num5;
                            num10 = (num5 + num6);
                            buffer.setDataBuffers([dataBuffer.subset(num8, num5), dataBuffer.subset(num9, num6), dataBuffer.subset(num10, num7)]);
                            buffer.setStrides([num2, num3, num4]);
                        }
                        else {
                            num10 = num5;
                            num9 = (num5 + num7);
                            buffer.setDataBuffers([dataBuffer.subset(num8, num5), dataBuffer.subset(num10, num7), dataBuffer.subset(num9, num6)]);
                            buffer.setStrides([num2, num4, num3]);
                        }
                        return buffer;
                    }
                    num2 = stride;
                    var num11 = stride;
                    num5 = (stride * buffer.getHeight());
                    var length_35 = icelink.MathAssistant.floor(num5 / 2);
                    num8 = 0;
                    var offset = num5;
                    buffer.setDataBuffers([dataBuffer.subset(num8, num5), dataBuffer.subset(offset, length_35)]);
                    buffer.setStrides([num2, num11]);
                    return buffer;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoBuffer.prototype.write = function (rValues, gValues, bValues, aValues) {
                if (arguments.length == 4) {
                    var num2 = void 0;
                    var num3 = void 0;
                    var num = (this.getWidth() * this.getHeight());
                    if (_super.prototype.getFormat.call(this).getIsRgbaType()) {
                        num2 = 0;
                        if (_super.prototype.getFormat.call(this).getIsRgba()) {
                            for (num3 = 0; (num3 < num); num3++) {
                                _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                _super.prototype.getDataBuffer.call(this).write8(aValues[num3], num2++);
                            }
                        }
                        else {
                            if (_super.prototype.getFormat.call(this).getIsBgra()) {
                                for (num3 = 0; (num3 < num); num3++) {
                                    _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                    _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                    _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                    _super.prototype.getDataBuffer.call(this).write8(aValues[num3], num2++);
                                }
                            }
                            else {
                                if (_super.prototype.getFormat.call(this).getIsArgb()) {
                                    for (num3 = 0; (num3 < num); num3++) {
                                        _super.prototype.getDataBuffer.call(this).write8(aValues[num3], num2++);
                                        _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                        _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                        _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                    }
                                }
                                else {
                                    if (_super.prototype.getFormat.call(this).getIsAbgr()) {
                                        for (num3 = 0; (num3 < num); num3++) {
                                            _super.prototype.getDataBuffer.call(this).write8(aValues[num3], num2++);
                                            _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                            _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                            _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (_super.prototype.getFormat.call(this).getIsRgbType()) {
                            num2 = 0;
                            if (_super.prototype.getFormat.call(this).getIsRgb()) {
                                for (num3 = 0; (num3 < num); num3++) {
                                    _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                    _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                    _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                }
                            }
                            else {
                                if (_super.prototype.getFormat.call(this).getIsBgr()) {
                                    for (num3 = 0; (num3 < num); num3++) {
                                        _super.prototype.getDataBuffer.call(this).write8(bValues[num3], num2++);
                                        _super.prototype.getDataBuffer.call(this).write8(gValues[num3], num2++);
                                        _super.prototype.getDataBuffer.call(this).write8(rValues[num3], num2++);
                                    }
                                }
                            }
                        }
                        else {
                            if (_super.prototype.getFormat.call(this).getIsYuvType()) {
                                var num4 = 0;
                                var offset = 0;
                                var num6 = 0;
                                var num7 = 0;
                                var num8 = 0;
                                if (_super.prototype.getFormat.call(this).getIsI420()) {
                                    offset = num;
                                    num6 = (num + icelink.MathAssistant.floor(num / 4));
                                    num7 = 1;
                                    num8 = 1;
                                }
                                else {
                                    if (_super.prototype.getFormat.call(this).getIsYv12()) {
                                        offset = (num + icelink.MathAssistant.floor(num / 4));
                                        num6 = num;
                                        num7 = 1;
                                        num8 = 1;
                                    }
                                    else {
                                        if (_super.prototype.getFormat.call(this).getIsNv12()) {
                                            offset = num;
                                            num6 = (num + 1);
                                            num7 = 2;
                                            num8 = 2;
                                        }
                                        else {
                                            if (_super.prototype.getFormat.call(this).getIsNv21()) {
                                                offset = (num + 1);
                                                num6 = num;
                                                num7 = 2;
                                                num8 = 2;
                                            }
                                        }
                                    }
                                }
                                num3 = 0;
                                for (var i = 0; (i < this.getHeight()); i++) {
                                    var flag = (fm.icelink.Global.equals((i % 2), 0));
                                    for (var j = 0; (j < this.getWidth()); j++) {
                                        var flag2 = (fm.icelink.Global.equals((j % 2), 0));
                                        var num11 = fm.icelink.BitAssistant.castByte(((((0.2569 * rValues[num3]) + (0.5044 * gValues[num3])) + (0.0979 * bValues[num3])) + 16));
                                        _super.prototype.getDataBuffer.call(this).write8(num11, num4++);
                                        if ((flag && flag2)) {
                                            var num12 = fm.icelink.BitAssistant.castByte(((((-0.1483 * rValues[num3]) - (0.2911 * gValues[num3])) + (0.4394 * bValues[num3])) + 128));
                                            var num13 = fm.icelink.BitAssistant.castByte(((((0.4394 * rValues[num3]) - (0.3679 * gValues[num3])) - (0.0715 * bValues[num3])) + 128));
                                            _super.prototype.getDataBuffer.call(this).write8(num12, offset);
                                            _super.prototype.getDataBuffer.call(this).write8(num13, num6);
                                            offset = (offset + num7);
                                            num6 = (num6 + num8);
                                        }
                                        num3++;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return VideoBuffer;
        }(fm.icelink.MediaBuffer));
        icelink.VideoBuffer = VideoBuffer;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Promise.ts" />

/// <reference path="Promise.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var RemoteCandidatePromise = /** @class */ (function (_super) {
            __extends(RemoteCandidatePromise, _super);
            function RemoteCandidatePromise(remoteCandidate) {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var remoteCandidate_1 = __arguments[0];
                    _this = _super.call(this) || this;
                    _this.setRemoteCandidate(remoteCandidate_1);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            RemoteCandidatePromise.prototype.getTypeString = function () {
                return '[fm.icelink.RemoteCandidatePromise]' + ',' + _super.prototype.getTypeString.call(this);
            };
            RemoteCandidatePromise.prototype.getRemoteCandidate = function () {
                if (arguments.length == 0) {
                    return this._remoteCandidate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            RemoteCandidatePromise.prototype.setRemoteCandidate = function (value) {
                if (arguments.length == 1) {
                    this._remoteCandidate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return RemoteCandidatePromise;
        }(fm.icelink.Promise));
        icelink.RemoteCandidatePromise = RemoteCandidatePromise;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Collection.ts" />

/// <reference path="Collection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of remote medias.
         </div>
    
        */
        var RemoteMediaCollection = /** @class */ (function (_super) {
            __extends(RemoteMediaCollection, _super);
            function RemoteMediaCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.__lookup = {};
                    _this.__lookupLock = new Object();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            RemoteMediaCollection.prototype.getTypeString = function () {
                return '[fm.icelink.RemoteMediaCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.RemoteMediaCollection-addSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is added to the collection.
             </div>
    
            @param {fm.icelink.RemoteMedia} value The value.
            @return {void}
            */
            RemoteMediaCollection.prototype.addSuccess = function (value) {
                if (arguments.length == 1) {
                    _super.prototype.addSuccess.call(this, value);
                    this.__lookup[value.getId()] = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RemoteMediaCollection-arrayFromList'>&nbsp;</span>**/
            /**
             <div>
             Creates an array from a list.
             </div>
    
            @param {Array<fm.icelink.RemoteMedia>} list The list.
            @return {fm.icelink.RemoteMedia[]}
            */
            RemoteMediaCollection.prototype.arrayFromList = function (list) {
                if (arguments.length == 1) {
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RemoteMediaCollection-createCollection'>&nbsp;</span>**/
            /**
             <div>
             Creates a collection.
             </div>
    
    
            @return {fm.icelink.RemoteMediaCollection}
            */
            RemoteMediaCollection.prototype.createCollection = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.RemoteMediaCollection();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RemoteMediaCollection-getById'>&nbsp;</span>**/
            /**
             <div>
             Gets a media by ID.
             </div>
    
            @param {string} id The identifier.
            @return {fm.icelink.RemoteMedia}
            */
            RemoteMediaCollection.prototype.getById = function (id) {
                if (arguments.length == 1) {
                    var media = null;
                    var _var0 = new fm.icelink.Holder(media);
                    var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__lookup, id, _var0);
                    media = _var0.getValue();
                    if (_var1) {
                        return media;
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RemoteMediaCollection-removeSuccess'>&nbsp;</span>**/
            /**
             <div>
             Invoked when an element is removed from the collection.
             </div>
    
            @param {fm.icelink.RemoteMedia} value The value.
            @return {void}
            */
            RemoteMediaCollection.prototype.removeSuccess = function (value) {
                if (arguments.length == 1) {
                    _super.prototype.removeSuccess.call(this, value);
                    fm.icelink.HashExtensions.remove(this.__lookup, value.getId());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return RemoteMediaCollection;
        }(fm.icelink.Collection));
        icelink.RemoteMediaCollection = RemoteMediaCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="RemoteMediaCollection.ts" />

/// <reference path="RemoteMediaCollection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A collection of remote medias.
         </div>
    
        */
        var MediaCollection = /** @class */ (function (_super) {
            __extends(MediaCollection, _super);
            function MediaCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaCollection.prototype.getTypeString = function () {
                return '[fm.icelink.MediaCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            return MediaCollection;
        }(fm.icelink.RemoteMediaCollection));
        icelink.MediaCollection = MediaCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var NackPolicyWrapper = /** @class */ (function () {
            function NackPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_32 = __arguments[0];
                    //super();
                    this._value = value_32;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            NackPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.NackPolicyWrapper]';
            };
            NackPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.NackPolicy.Disabled)
                        return 'Disabled';
                    if (this._value == fm.icelink.NackPolicy.Negotiated)
                        return 'Negotiated';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return NackPolicyWrapper;
        }());
        icelink.NackPolicyWrapper = NackPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var ProtocolTypeWrapper = /** @class */ (function () {
            function ProtocolTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_33 = __arguments[0];
                    //super();
                    this._value = value_33;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            ProtocolTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.ProtocolTypeWrapper]';
            };
            ProtocolTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.ProtocolType.Udp)
                        return 'Udp';
                    if (this._value == fm.icelink.ProtocolType.Tcp)
                        return 'Tcp';
                    if (this._value == fm.icelink.ProtocolType.Tls)
                        return 'Tls';
                    if (this._value == fm.icelink.ProtocolType.Unknown)
                        return 'Unknown';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ProtocolTypeWrapper;
        }());
        icelink.ProtocolTypeWrapper = ProtocolTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var RedFecPolicyWrapper = /** @class */ (function () {
            function RedFecPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_34 = __arguments[0];
                    //super();
                    this._value = value_34;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            RedFecPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.RedFecPolicyWrapper]';
            };
            RedFecPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.RedFecPolicy.Disabled)
                        return 'Disabled';
                    if (this._value == fm.icelink.RedFecPolicy.Negotiated)
                        return 'Negotiated';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return RedFecPolicyWrapper;
        }());
        icelink.RedFecPolicyWrapper = RedFecPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var RembPolicyWrapper = /** @class */ (function () {
            function RembPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_35 = __arguments[0];
                    //super();
                    this._value = value_35;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            RembPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.RembPolicyWrapper]';
            };
            RembPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.RembPolicy.Disabled)
                        return 'Disabled';
                    if (this._value == fm.icelink.RembPolicy.Negotiated)
                        return 'Negotiated';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return RembPolicyWrapper;
        }());
        icelink.RembPolicyWrapper = RembPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         The header of an Rtp packet.
         </div>
    
        */
        var RtpPacketHeader = /** @class */ (function () {
            /**<span id='method-fm.icelink.RtpPacketHeader-constructor'>&nbsp;</span>**/
            /**
             <div>
             Creates a new instance of the Packet Header.
             </div>
    
    
            @return {}
            */
            function RtpPacketHeader() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkRtpPacketHeaderInit();
                    this.setVersion(2);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            RtpPacketHeader.prototype.getTypeString = function () {
                return '[fm.icelink.RtpPacketHeader]';
            };
            RtpPacketHeader.prototype.fmicelinkRtpPacketHeaderInit = function () {
                this._contributingSourceCount = 0;
                this._extension = false;
                this._marker = false;
                this._padding = false;
                this._paddingLength = 0;
                this._payloadType = 0;
                this._sequenceNumber = 0;
                this._synchronizationSource = 0;
                this._timestamp = 0;
                this._version = 0;
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getFixedHeaderLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the length of the fixed header.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.getFixedHeaderLength = function () {
                if (arguments.length == 0) {
                    return 12;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-calculateHeaderLength'>&nbsp;</span>**/
            /**
             <div>
             Calculates the length of the header. At least 12 bytes.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.calculateHeaderLength = function () {
                if (arguments.length == 0) {
                    var num = (fm.icelink.RtpPacketHeader.getFixedHeaderLength() + (this.getContributingSourceCount() * 4));
                    if (this.getExtension()) {
                        num = (num + ((this.getHeaderExtension().getLength() * 4) + 4));
                    }
                    return num;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones this RtpPacketHeader instance.
             </div>
    
    
            @return {fm.icelink.RtpPacketHeader}
            */
            RtpPacketHeader.prototype.clone = function () {
                if (arguments.length == 0) {
                    var header = new fm.icelink.RtpPacketHeader();
                    header.setVersion(this.getVersion());
                    header.setMarker(this.getMarker());
                    header.setPadding(this.getPadding());
                    header.setExtension(this.getExtension());
                    header.setContributingSourceCount(this.getContributingSourceCount());
                    header.setPayloadType(this.getPayloadType());
                    header.setSequenceNumber(this.getSequenceNumber());
                    header.setTimestamp(this.getTimestamp());
                    header.setSynchronizationSource(this.getSynchronizationSource());
                    header.setContributingSources(this.getContributingSources());
                    return header;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getContributingSourceCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of contributing sources added to this rtp packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getContributingSourceCount = function () {
                if (arguments.length == 0) {
                    return this._contributingSourceCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getContributingSources'>&nbsp;</span>**/
            /**
             <div>
             Gets the contributing sources in this rtp packet.
             </div>
    
    
            @return {number[]}
            */
            RtpPacketHeader.prototype.getContributingSources = function () {
                if (arguments.length == 0) {
                    return this._contributingSources;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getExtension'>&nbsp;</span>**/
            /**
             <div>
             Gets if there is an extension added to this rtp packet.
             </div>
    
    
            @return {boolean}
            */
            RtpPacketHeader.prototype.getExtension = function () {
                if (arguments.length == 0) {
                    return this._extension;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getHeaderExtension'>&nbsp;</span>**/
            /**
             <div>
             Gets the header extension.
             </div>
    
    
            @return {fm.icelink.IRtpHeaderExtension}
            */
            RtpPacketHeader.prototype.getHeaderExtension = function () {
                if (arguments.length == 0) {
                    return this._headerExtension;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getMarker'>&nbsp;</span>**/
            /**
             <div>
             Gets if the marker bit is set.
             </div>
    
    
            @return {boolean}
            */
            RtpPacketHeader.prototype.getMarker = function () {
                if (arguments.length == 0) {
                    return this._marker;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getPadding'>&nbsp;</span>**/
            /**
             <div>
             Gets if this rtp packet has padding.
             </div>
    
    
            @return {boolean}
            */
            RtpPacketHeader.prototype.getPadding = function () {
                if (arguments.length == 0) {
                    return this._padding;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getPaddingLength'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes of padding of the decoded rtp packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getPaddingLength = function () {
                if (arguments.length == 0) {
                    return this._paddingLength;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getPayloadType'>&nbsp;</span>**/
            /**
             <div>
             Gets the payload type of this rtp packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getPayloadType = function () {
                if (arguments.length == 0) {
                    return this._payloadType;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Gets the sequence number of the packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getSequenceNumber = function () {
                if (arguments.length == 0) {
                    return this._sequenceNumber;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Gets the synchronization source source of the packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getSynchronizationSource = function () {
                if (arguments.length == 0) {
                    return this._synchronizationSource;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Gets the timestamp of the packet.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getTimestamp = function () {
                if (arguments.length == 0) {
                    return this._timestamp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-getVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the version of the rtp packet. Should be 2.
             </div>
    
    
            @return {number}
            */
            RtpPacketHeader.prototype.getVersion = function () {
                if (arguments.length == 0) {
                    return this._version;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setContributingSourceCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the number of contributing sources added to this rtp packet.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setContributingSourceCount = function (value) {
                if (arguments.length == 1) {
                    this._contributingSourceCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setContributingSources'>&nbsp;</span>**/
            /**
             <div>
             Sets the contributing sources in this rtp packet.
             </div>
    
    
            @param {number[]} value
            @return {void}
            */
            RtpPacketHeader.prototype.setContributingSources = function (value) {
                if (arguments.length == 1) {
                    this._contributingSources = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            RtpPacketHeader.prototype.setExtension = function (value) {
                if (arguments.length == 1) {
                    this._extension = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setHeaderExtension'>&nbsp;</span>**/
            /**
             <div>
             Sets the header extension.
             </div>
    
    
            @param {fm.icelink.IRtpHeaderExtension} value
            @return {void}
            */
            RtpPacketHeader.prototype.setHeaderExtension = function (value) {
                if (arguments.length == 1) {
                    this._headerExtension = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setMarker'>&nbsp;</span>**/
            /**
             <div>
             Sets if the marker bit is set.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            RtpPacketHeader.prototype.setMarker = function (value) {
                if (arguments.length == 1) {
                    this._marker = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setPadding'>&nbsp;</span>**/
            /**
             <div>
             Sets if this rtp packet has padding.
             </div>
    
    
            @param {boolean} value
            @return {void}
            */
            RtpPacketHeader.prototype.setPadding = function (value) {
                if (arguments.length == 1) {
                    this._padding = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            RtpPacketHeader.prototype.setPaddingLength = function (value) {
                if (arguments.length == 1) {
                    this._paddingLength = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setPayloadType'>&nbsp;</span>**/
            /**
             <div>
             Sets the payload type of this rtp packet.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setPayloadType = function (value) {
                if (arguments.length == 1) {
                    this._payloadType = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setSequenceNumber'>&nbsp;</span>**/
            /**
             <div>
             Sets the sequence number of the packet.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setSequenceNumber = function (value) {
                if (arguments.length == 1) {
                    this._sequenceNumber = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Sets the synchronization source source of the packet.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setSynchronizationSource = function (value) {
                if (arguments.length == 1) {
                    this._synchronizationSource = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Sets the timestamp of the packet.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setTimestamp = function (value) {
                if (arguments.length == 1) {
                    this._timestamp = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-setVersion'>&nbsp;</span>**/
            /**
             <div>
             Sets the version of the rtp packet. Should be 2.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            RtpPacketHeader.prototype.setVersion = function (value) {
                if (arguments.length == 1) {
                    this._version = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.RtpPacketHeader-writeTo'>&nbsp;</span>**/
            /**
             <div>
             Writes this Rtp packet to a DataBuffer starting at the offset.
             </div>
    
            @param {fm.icelink.DataBuffer} buffer
            @param {number} offset
            @return {void}
            */
            RtpPacketHeader.prototype.writeTo = function (buffer, offset) {
                if (arguments.length == 2) {
                    buffer.write2(this.getVersion(), offset, 0);
                    buffer.write1(this.getPadding(), offset, 2);
                    buffer.write1(this.getExtension(), offset, 3);
                    buffer.write4(this.getContributingSourceCount(), offset, 4);
                    buffer.write1(this.getMarker(), (offset + 1), 0);
                    buffer.write7(this.getPayloadType(), (offset + 1), 1);
                    buffer.write16(this.getSequenceNumber(), (offset + 2));
                    buffer.write32(this.getTimestamp(), (offset + 4));
                    buffer.write32(this.getSynchronizationSource(), (offset + 8));
                    if ((this.getContributingSourceCount() > 0)) {
                        if (((fm.icelink.Global.equals(this.getContributingSources(), null)) || (!fm.icelink.Global.equals(this.getContributingSourceCount(), this.getContributingSources().length)))) {
                            throw new fm.icelink.Exception("Contributing sources count has a non-zero value but the contributing sources array is null or contains an invalid count.");
                        }
                        for (var i = 0; (i < this.getContributingSourceCount()); i++) {
                            buffer.write32(this.getContributingSources()[i], ((offset + 12) + (i * 4)));
                        }
                    }
                    if (this.getExtension()) {
                        var num2 = (fm.icelink.RtpPacketHeader.getFixedHeaderLength() + (this.getContributingSourceCount() * 4));
                        buffer.getData()[(buffer.getIndex() + num2)] = this.getHeaderExtension().getId()[0];
                        buffer.getData()[((buffer.getIndex() + num2) + 1)] = this.getHeaderExtension().getId()[1];
                        buffer.write16(this.getHeaderExtension().getLength(), ((offset + num2) + 2));
                        this.getHeaderExtension().fillBuffer(buffer, ((offset + num2) + 4));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return RtpPacketHeader;
        }());
        icelink.RtpPacketHeader = RtpPacketHeader;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var rtp;
        (function (rtp) {
            /**
            @internal
            */
            var RawHeaderExtension = /** @class */ (function () {
                function RawHeaderExtension(id, buffer) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var id_1 = __arguments[0];
                        var buffer_2 = __arguments[1];
                        //super();
                        this.__id = id_1;
                        this.__buffer = buffer_2;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                RawHeaderExtension.prototype.getTypeString = function () {
                    return '[fm.icelink.rtp.RawHeaderExtension]';
                };
                RawHeaderExtension.prototype.fillBuffer = function (buffer, offset) {
                    if (arguments.length == 2) {
                        buffer.write(this.__buffer, offset);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                RawHeaderExtension.prototype.free = function () {
                    if (arguments.length == 0) {
                        if (this.__buffer.getIsPooled()) {
                            this.__buffer.free();
                        }
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                RawHeaderExtension.prototype.getId = function () {
                    if (arguments.length == 0) {
                        return this.__id;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                RawHeaderExtension.prototype.getLength = function () {
                    if (arguments.length == 0) {
                        return icelink.MathAssistant.floor(this.__buffer.getLength() / 4);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return RawHeaderExtension;
            }());
            rtp.RawHeaderExtension = RawHeaderExtension;
        })(rtp = icelink.rtp || (icelink.rtp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var SdesPolicyWrapper = /** @class */ (function () {
            function SdesPolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_36 = __arguments[0];
                    //super();
                    this._value = value_36;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SdesPolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.SdesPolicyWrapper]';
            };
            SdesPolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.SdesPolicy.Negotiated)
                        return 'Negotiated';
                    if (this._value == fm.icelink.SdesPolicy.Disabled)
                        return 'Disabled';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SdesPolicyWrapper;
        }());
        icelink.SdesPolicyWrapper = SdesPolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP address types.
             </div>
        
            */
            var AddressType = /** @class */ (function () {
                function AddressType() {
                }
                AddressType.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.AddressType]';
                };
                /**<span id='method-fm.icelink.sdp.AddressType-getAddressTypeForAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP address type for the specified IP address.
                 </div>
        
                @param {string} ipAddress The IP address.
                @return {string}
                */
                AddressType.getAddressTypeForAddress = function (ipAddress) {
                    if (arguments.length == 1) {
                        var _var0 = fm.icelink.LocalNetwork.getAddressType(ipAddress);
                        if (_var0 == fm.icelink.AddressType.IPv4) {
                            do {
                                return fm.icelink.sdp.AddressType.getIP4();
                            } while (false);
                        }
                        else if (_var0 == fm.icelink.AddressType.IPv6) {
                            do {
                                return fm.icelink.sdp.AddressType.getIP6();
                            } while (false);
                        }
                        throw new fm.icelink.Exception("Only IPv4 and IPv6 addresses are supported by SDP.");
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.AddressType-getIP4'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP address type meaning "IP version 4".
                 </div>
        
        
                @return {string}
                */
                AddressType.getIP4 = function () {
                    if (arguments.length == 0) {
                        return "IP4";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.AddressType-getIP6'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP address type meaning "IP version 6".
                 </div>
        
        
                @return {string}
                */
                AddressType.getIP6 = function () {
                    if (arguments.length == 0) {
                        return "IP6";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return AddressType;
            }());
            sdp.AddressType = AddressType;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
            @internal
            */
            var AttributeCollection = /** @class */ (function () {
                function AttributeCollection() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                        this.__attributes = {};
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                AttributeCollection.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.AttributeCollection]';
                };
                AttributeCollection.prototype.addAttribute = function (attribute) {
                    if (arguments.length == 1) {
                        var key = new fm.icelink.sdp.AttributeTypeWrapper(attribute.getAttributeType()).toString();
                        var list = null;
                        var _var0 = new fm.icelink.Holder(list);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__attributes, key, _var0);
                        list = _var0.getValue();
                        if (!_var1) {
                            list = new Array();
                            fm.icelink.ArrayExtensions.add(list, attribute);
                            fm.icelink.HashExtensions.add(this.__attributes, key, list);
                        }
                        else {
                            fm.icelink.ArrayExtensions.add(list, attribute);
                        }
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeCollection.prototype.remove = function () {
                    if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObjectType(arguments[0], '[fm.icelink.sdp.Attribute]'))) {
                        var attribute = arguments[0];
                        var flag = false;
                        var list = null;
                        var _var0 = new fm.icelink.Holder(list);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(attribute.getAttributeType()).toString(), _var0);
                        list = _var0.getValue();
                        if (_var1) {
                            if ((fm.icelink.Global.equals(list, null))) {
                                return flag;
                            }
                            flag = fm.icelink.ArrayExtensions.remove(list, attribute);
                            if ((fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(list), 0))) {
                                fm.icelink.HashExtensions.remove(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(attribute.getAttributeType()).toString());
                            }
                        }
                        return flag;
                    }
                    else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isNumber(arguments[0]))) {
                        var attributeType = arguments[0];
                        return fm.icelink.HashExtensions.remove(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(attributeType).toString());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeCollection.prototype.replaceAttribute = function (attribute) {
                    if (arguments.length == 1) {
                        var attributeType = attribute.getAttributeType();
                        fm.icelink.HashExtensions.remove(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(attributeType).toString());
                        var list = new Array();
                        fm.icelink.ArrayExtensions.add(list, attribute);
                        fm.icelink.HashExtensions.add(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(attributeType).toString(), list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeCollection.prototype.toArray = function () {
                    if (arguments.length == 0) {
                        var list = new Array();
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getValues(this.__attributes); _i < _a.length; _i++) {
                            var list2 = _a[_i];
                            fm.icelink.ArrayExtensions.addRange(list, list2);
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeCollection.prototype.tryGetAttribute = function (type, attribute) {
                    if (arguments.length == 2) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.tryGetAttributes(type, _var0);
                        attributes = _var0.getValue();
                        if (_var1) {
                            if ((attributes.length > 0)) {
                                attribute.setValue(attributes[0]);
                                return true;
                            }
                            attribute.setValue(null);
                            return false;
                        }
                        attribute.setValue(null);
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeCollection.prototype.tryGetAttributes = function (type, attributes) {
                    if (arguments.length == 2) {
                        var list = null;
                        var _var0 = new fm.icelink.Holder(list);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__attributes, new fm.icelink.sdp.AttributeTypeWrapper(type).toString(), _var0);
                        list = _var0.getValue();
                        if (_var1) {
                            var count = fm.icelink.ArrayExtensions.getCount(list);
                            attributes.setValue(new Array(count));
                            for (var i = 0; (i < count); i++) {
                                attributes.getValue()[i] = list[i];
                            }
                            return true;
                        }
                        attributes.setValue(new Array(0));
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return AttributeCollection;
            }());
            sdp.AttributeCollection = AttributeCollection;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var AttributeTypeWrapper = /** @class */ (function () {
                function AttributeTypeWrapper(value) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var value_37 = __arguments[0];
                        //super();
                        this._value = value_37;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                AttributeTypeWrapper.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.AttributeTypeWrapper]';
                };
                AttributeTypeWrapper.prototype.toString = function () {
                    if (arguments.length == 0) {
                        if (this._value == fm.icelink.sdp.AttributeType.UnknownAttribute)
                            return 'UnknownAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.DirectionAttribute)
                            return 'DirectionAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.CategoryAttribute)
                            return 'CategoryAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.CharacterSetAttribute)
                            return 'CharacterSetAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.ConferenceTypeAttribute)
                            return 'ConferenceTypeAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.CryptoAttribute)
                            return 'CryptoAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.FormatParametersAttribute)
                            return 'FormatParametersAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.FrameRateAttribute)
                            return 'FrameRateAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.KeywordsAttribute)
                            return 'KeywordsAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.LanguageAttribute)
                            return 'LanguageAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.MaxPacketTimeAttribute)
                            return 'MaxPacketTimeAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.OrientationAttribute)
                            return 'OrientationAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.PacketTimeAttribute)
                            return 'PacketTimeAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.QualityAttribute)
                            return 'QualityAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.SdpLanguageAttribute)
                            return 'SdpLanguageAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.SetupAttribute)
                            return 'SetupAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.ToolAttribute)
                            return 'ToolAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.MediaStreamIdSemanticAttribute)
                            return 'MediaStreamIdSemanticAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.MediaStreamIdAttribute)
                            return 'MediaStreamIdAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceCandidateAttribute)
                            return 'IceCandidateAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceFingerprintAttribute)
                            return 'IceFingerprintAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceLiteAttribute)
                            return 'IceLiteAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceMismatchAttribute)
                            return 'IceMismatchAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceOptionsAttribute)
                            return 'IceOptionsAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IcePasswordAttribute)
                            return 'IcePasswordAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceUfragAttribute)
                            return 'IceUfragAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.IceRemoteCandidatesAttribute)
                            return 'IceRemoteCandidatesAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtpMapAttribute)
                            return 'RtpMapAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtpSsrcAttribute)
                            return 'RtpSsrcAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtpExtMapAttribute)
                            return 'RtpExtMapAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtcpAttribute)
                            return 'RtcpAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute)
                            return 'RtcpFeedbackAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.RtcpMuxAttribute)
                            return 'RtcpMuxAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.SctpPortAttribute)
                            return 'SctpPortAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.SctpMapAttribute)
                            return 'SctpMapAttribute';
                        if (this._value == fm.icelink.sdp.AttributeType.SctpMaxMessageSizeAttribute)
                            return 'SctpMaxMessageSizeAttribute';
                        return '';
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return AttributeTypeWrapper;
            }());
            sdp.AttributeTypeWrapper = AttributeTypeWrapper;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
            @internal
            */
            var AttributeRegistration = /** @class */ (function () {
                function AttributeRegistration(name, sessionLevel, mediaLevel, creationDelegate) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 4) {
                        var name_15 = __arguments[0];
                        var sessionLevel_1 = __arguments[1];
                        var mediaLevel_1 = __arguments[2];
                        var creationDelegate_1 = __arguments[3];
                        //super();
                        this.fmicelinksdpAttributeRegistrationInit();
                        this.setName(name_15);
                        this.setSessionLevel(sessionLevel_1);
                        this.setMediaLevel(mediaLevel_1);
                        this.setCreationDelegate(creationDelegate_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                AttributeRegistration.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.AttributeRegistration]';
                };
                AttributeRegistration.prototype.fmicelinksdpAttributeRegistrationInit = function () {
                    this._mediaLevel = false;
                    this._sessionLevel = false;
                };
                AttributeRegistration.prototype.getCreationDelegate = function () {
                    if (arguments.length == 0) {
                        return this._creationDelegate;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.getMediaLevel = function () {
                    if (arguments.length == 0) {
                        return this._mediaLevel;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.getName = function () {
                    if (arguments.length == 0) {
                        return this._name;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.getSessionLevel = function () {
                    if (arguments.length == 0) {
                        return this._sessionLevel;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.setCreationDelegate = function (value) {
                    if (arguments.length == 1) {
                        this._creationDelegate = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.setMediaLevel = function (value) {
                    if (arguments.length == 1) {
                        this._mediaLevel = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.setName = function (value) {
                    if (arguments.length == 1) {
                        this._name = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                AttributeRegistration.prototype.setSessionLevel = function (value) {
                    if (arguments.length == 1) {
                        this._sessionLevel = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return AttributeRegistration;
            }());
            sdp.AttributeRegistration = AttributeRegistration;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
            @internal
            */
            var AttributeCreationArgs = /** @class */ (function () {
                function AttributeCreationArgs(value) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var value_38 = __arguments[0];
                        //super();
                        if ((!fm.icelink.Global.equals(value_38, null))) {
                            value_38 = fm.icelink.StringExtensions.trim(value_38);
                        }
                        this.setValue(value_38);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                AttributeCreationArgs.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.AttributeCreationArgs]';
                };
                AttributeCreationArgs.prototype.getValue = function () {
                    if (arguments.length == 0) {
                        return this._value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                AttributeCreationArgs.prototype.setValue = function (value) {
                    if (arguments.length == 1) {
                        this._value = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return AttributeCreationArgs;
            }());
            sdp.AttributeCreationArgs = AttributeCreationArgs;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP attribute.
             </div>
        
            */
            var Attribute = /** @class */ (function () {
                function Attribute() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Attribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Attribute]';
                };
                /**<span id='method-fm.icelink.sdp.Attribute-createAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an attribute.
                 </div>
        
                @param {string} name The name.
                @param {string} value The value.
                @return {fm.icelink.sdp.Attribute}
                */
                Attribute.createAttribute = function (name, value) {
                    if (arguments.length == 2) {
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes); _i < _a.length; _i++) {
                            var str = _a[_i];
                            var registration = fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes[str];
                            if ((fm.icelink.Global.equals(registration.getName(), name))) {
                                return registration.getCreationDelegate()(new fm.icelink.sdp.AttributeCreationArgs(value));
                            }
                        }
                        return new fm.icelink.sdp.UnknownAttribute(name, value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPCandidateAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.CandidateAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPCategoryAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.CategoryAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPCharacterSetAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.CharacterSetAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPConferenceTypeAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ConferenceTypeAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPCryptoAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.CryptoAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPExtMapAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtp.ExtMapAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPFingerprintAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.FingerprintAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPFormatParametersAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.FormatParametersAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPFrameRateAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.FrameRateAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPIceLiteAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.LiteAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPIceMismatchAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.MismatchAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPIceOptionsAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.OptionsAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPIcePasswordAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.PasswordAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPIceUfragAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.UfragAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPInactiveAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.InactiveAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPKeywordsAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.KeywordsAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPLanguageAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.LanguageAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPMaxPacketTimeAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.MaxPacketTimeAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPMediaStreamIdAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.MediaStreamIdAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPMediaStreamIdSemanticAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.MediaStreamIdSemanticAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPOrientationAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.OrientationAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPPacketTimeAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.PacketTimeAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPQualityAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.QualityAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPReceiveOnlyAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ReceiveOnlyAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPRemoteCandidatesAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ice.RemoteCandidatesAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPRtcpAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtcp.Attribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPRtcpFeedbackAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtcp.FeedbackAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPRtcpMuxAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtcp.MuxAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPRtpMapAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtp.MapAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSctpMapAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.sctp.MapAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSctpMaxMessageSizeAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.sctp.MaxMessageSizeAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSdpLanguageAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.SdpLanguageAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSendOnlyAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.SendOnlyAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSendReceiveAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.SendReceiveAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSetupAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.SetupAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPSSRCAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.rtp.SsrcAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.createSDPToolAttribute = function (e) {
                    if (arguments.length == 1) {
                        return fm.icelink.sdp.ToolAttribute.fromAttributeValue(e.getValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-getTypeName'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the name of the attribute type.
                 </div>
        
                @param {fm.icelink.Type} type The attribute type.
                @return {string}
                */
                Attribute.getTypeName = function (type) {
                    if (arguments.length == 1) {
                        var registration = null;
                        var _var0 = new fm.icelink.Holder(registration);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes, type.getFullName(), _var0);
                        registration = _var0.getValue();
                        if (_var1) {
                            return registration.getName();
                        }
                        var baseType = type.getBaseType();
                        if ((!fm.icelink.Global.equals(baseType, null))) {
                            return fm.icelink.sdp.Attribute.getTypeName(baseType);
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-isMediaLevel'>&nbsp;</span>**/
                /**
                 <div>
                 Determines whether the type applies to media streams.
                 </div>
        
                @param {fm.icelink.Type} type The type.
                @return {boolean}
                */
                Attribute.isMediaLevel = function (type) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(type.getFullName(), fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__unknownAttributeTypeName))) {
                            return true;
                        }
                        var registration = null;
                        var _var0 = new fm.icelink.Holder(registration);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes, type.getFullName(), _var0);
                        registration = _var0.getValue();
                        if (_var1) {
                            return registration.getMediaLevel();
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-isSessionLevel'>&nbsp;</span>**/
                /**
                 <div>
                 Determines whether the type applies to sessions.
                 </div>
        
                @param {fm.icelink.Type} type The type.
                @return {boolean}
                */
                Attribute.isSessionLevel = function (type) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(type.getFullName(), fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__unknownAttributeTypeName))) {
                            return true;
                        }
                        var registration = null;
                        var _var0 = new fm.icelink.Holder(registration);
                        var _var1 = fm.icelink.HashExtensions.tryGetValue(fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes, type.getFullName(), _var0);
                        registration = _var0.getValue();
                        if (_var1) {
                            return registration.getSessionLevel();
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.connectionData` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Attribute}
                */
                Attribute.parse = function (s) {
                    if (arguments.length == 1) {
                        var str = void 0;
                        var str2 = void 0;
                        s = s.substring(2);
                        var index = fm.icelink.StringExtensions.indexOf(s, ":");
                        if ((fm.icelink.Global.equals(index, -1))) {
                            str = s;
                            str2 = null;
                        }
                        else {
                            str = fm.icelink.StringExtensions.substring(s, 0, index);
                            str2 = s.substring((index + 1));
                        }
                        return fm.icelink.sdp.Attribute.createAttribute(str, str2);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.registerAttribute = function (type, name, sessionLevel, mediaLevel, creationDelegate) {
                    if (arguments.length == 5) {
                        fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes[type.getFullName()] = new fm.icelink.sdp.AttributeRegistration(name, sessionLevel, mediaLevel, creationDelegate);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Attribute.unregisterAttribute = function (type) {
                    if (arguments.length == 1) {
                        return fm.icelink.HashExtensions.remove(fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes, type.getFullName());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-getAttributeType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets this Attribute's Type.
                 </div>
        
        
                @return {fm.icelink.sdp.AttributeType}
                */
                Attribute.prototype.getAttributeType = function () {
                    if (arguments.length == 0) {
                        return this._attributeType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-setAttributeType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets this Attribute's Type.
                 </div>
        
        
                @param {fm.icelink.sdp.AttributeType} value
                @return {void}
                */
                Attribute.prototype.setAttributeType = function (value) {
                    if (arguments.length == 1) {
                        this._attributeType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Attribute-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Attribute.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("a=");
                        var type = new icelink.Type(this.getTypeString());
                        if ((fm.icelink.Global.equals(type.getFullName(), fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__unknownAttributeTypeName))) {
                            builder.append(this.getName());
                        }
                        else {
                            builder.append(fm.icelink.sdp.Attribute.getTypeName(type));
                        }
                        var attributeValue = this.getAttributeValue();
                        if ((!fm.icelink.Global.equals(attributeValue, null))) {
                            builder.append(":");
                            builder.append(attributeValue);
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /** @internal */
                Attribute.fmicelinksdpAttributeInitialize = function () {
                    if (!fm.icelink.sdp.Attribute.__fmicelinksdpAttributeInitialized) {
                        fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributes = {};
                        fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__registeredAttributesLock = new Object();
                        fm.icelink.sdp.Attribute.fm_icelink_sdp_Attribute__unknownAttributeTypeName = new icelink.Type('[fm.icelink.sdp.UnknownAttribute]').getFullName();
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.CategoryAttribute]'), "cat", true, false, fm.icelink.sdp.Attribute.createSDPCategoryAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.CharacterSetAttribute]'), "charset", true, false, fm.icelink.sdp.Attribute.createSDPCharacterSetAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ConferenceTypeAttribute]'), "type", true, false, fm.icelink.sdp.Attribute.createSDPConferenceTypeAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.CryptoAttribute]'), "crypto", true, true, fm.icelink.sdp.Attribute.createSDPCryptoAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.FormatParametersAttribute]'), "fmtp", false, true, fm.icelink.sdp.Attribute.createSDPFormatParametersAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.FrameRateAttribute]'), "framerate", false, true, fm.icelink.sdp.Attribute.createSDPFrameRateAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.InactiveAttribute]'), "inactive", true, true, fm.icelink.sdp.Attribute.createSDPInactiveAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.KeywordsAttribute]'), "keywds", true, false, fm.icelink.sdp.Attribute.createSDPKeywordsAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.LanguageAttribute]'), "lang", true, true, fm.icelink.sdp.Attribute.createSDPLanguageAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.MaxPacketTimeAttribute]'), "maxptime", false, true, fm.icelink.sdp.Attribute.createSDPMaxPacketTimeAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.OrientationAttribute]'), "orient", false, true, fm.icelink.sdp.Attribute.createSDPOrientationAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.PacketTimeAttribute]'), "ptime", false, true, fm.icelink.sdp.Attribute.createSDPPacketTimeAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.QualityAttribute]'), "quality", false, true, fm.icelink.sdp.Attribute.createSDPQualityAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ReceiveOnlyAttribute]'), "recvonly", true, true, fm.icelink.sdp.Attribute.createSDPReceiveOnlyAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.SdpLanguageAttribute]'), "sdplang", true, true, fm.icelink.sdp.Attribute.createSDPSdpLanguageAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.SendOnlyAttribute]'), "sendonly", true, true, fm.icelink.sdp.Attribute.createSDPSendOnlyAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.SendReceiveAttribute]'), "sendrecv", true, true, fm.icelink.sdp.Attribute.createSDPSendReceiveAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.SetupAttribute]'), "setup", true, true, fm.icelink.sdp.Attribute.createSDPSetupAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ToolAttribute]'), "tool", true, false, fm.icelink.sdp.Attribute.createSDPToolAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.MediaStreamIdSemanticAttribute]'), "msid-semantic", true, true, fm.icelink.sdp.Attribute.createSDPMediaStreamIdSemanticAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.MediaStreamIdAttribute]'), "mid", true, true, fm.icelink.sdp.Attribute.createSDPMediaStreamIdAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.CandidateAttribute]'), "candidate", false, true, fm.icelink.sdp.Attribute.createSDPCandidateAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.FingerprintAttribute]'), "fingerprint", true, true, fm.icelink.sdp.Attribute.createSDPFingerprintAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.LiteAttribute]'), "ice-lite", true, false, fm.icelink.sdp.Attribute.createSDPIceLiteAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.MismatchAttribute]'), "ice-mismatch", true, false, fm.icelink.sdp.Attribute.createSDPIceMismatchAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.OptionsAttribute]'), "ice-options", true, true, fm.icelink.sdp.Attribute.createSDPIceOptionsAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.PasswordAttribute]'), "ice-pwd", true, true, fm.icelink.sdp.Attribute.createSDPIcePasswordAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.UfragAttribute]'), "ice-ufrag", true, true, fm.icelink.sdp.Attribute.createSDPIceUfragAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.ice.RemoteCandidatesAttribute]'), "remote-candidates", false, true, fm.icelink.sdp.Attribute.createSDPRemoteCandidatesAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtp.MapAttribute]'), "rtpmap", false, true, fm.icelink.sdp.Attribute.createSDPRtpMapAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtp.SsrcAttribute]'), "ssrc", false, true, fm.icelink.sdp.Attribute.createSDPSSRCAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtp.ExtMapAttribute]'), "extmap", true, true, fm.icelink.sdp.Attribute.createSDPExtMapAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtcp.Attribute]'), "rtcp", false, true, fm.icelink.sdp.Attribute.createSDPRtcpAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtcp.FeedbackAttribute]'), "rtcp-fb", false, true, fm.icelink.sdp.Attribute.createSDPRtcpFeedbackAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.rtcp.MuxAttribute]'), "rtcp-mux", false, true, fm.icelink.sdp.Attribute.createSDPRtcpMuxAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.sctp.MapAttribute]'), "sctpmap", false, true, fm.icelink.sdp.Attribute.createSDPSctpMapAttribute.bind(fm.icelink.sdp.Attribute));
                        fm.icelink.sdp.Attribute.registerAttribute(new icelink.Type('[fm.icelink.sdp.sctp.MaxMessageSizeAttribute]'), "max-message-size", false, true, fm.icelink.sdp.Attribute.createSDPSctpMaxMessageSizeAttribute.bind(fm.icelink.sdp.Attribute));
                    }
                    fm.icelink.sdp.Attribute.__fmicelinksdpAttributeInitialized = true;
                };
                /** @internal */
                Attribute.__fmicelinksdpAttributeInitialized = false;
                return Attribute;
            }());
            sdp.Attribute = Attribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP bandwidth element.
             </div>
        
            */
            var Bandwidth = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.Bandwidth-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.bandwidth` class.
                 </div>
        
                @param {string} bandwidthType The type of bandwidth. See `fm.icelink.sdp.bandwidth.bandwidthType` for possible values.
                @param {number} value The bandwidth, typically in kilobits per second.
                @return {}
                */
                function Bandwidth(bandwidthType, value) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var bandwidthType_1 = __arguments[0];
                        var value_39 = __arguments[1];
                        //super();
                        this.fmicelinksdpBandwidthInit();
                        this.setBandwidthType(bandwidthType_1);
                        this.setValue(value_39);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Bandwidth.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Bandwidth]';
                };
                Bandwidth.prototype.fmicelinksdpBandwidthInit = function () {
                    this._value = 0;
                };
                /**<span id='method-fm.icelink.sdp.Bandwidth-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.bandwidth` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Bandwidth}
                */
                Bandwidth.parse = function (s) {
                    if (arguments.length == 1) {
                        s = s.substring(2);
                        var strArray = fm.icelink.StringExtensions.split(s, [58]);
                        var bandwidthType = strArray[0];
                        return new fm.icelink.sdp.Bandwidth(bandwidthType, fm.icelink.ParseAssistant.parseLongValue(strArray[1]));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Bandwidth-getBandwidthType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of bandwidth. See `fm.icelink.sdp.bandwidth.bandwidthType` for possible values.
                 </div>
        
        
                @return {string}
                */
                Bandwidth.prototype.getBandwidthType = function () {
                    if (arguments.length == 0) {
                        return this._bandwidthType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Bandwidth-getValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the bandwidth, typically in kilobits per second.
                 </div>
        
        
                @return {number}
                */
                Bandwidth.prototype.getValue = function () {
                    if (arguments.length == 0) {
                        return this._value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Bandwidth.prototype.setBandwidthType = function (value) {
                    if (arguments.length == 1) {
                        this._bandwidthType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Bandwidth.prototype.setValue = function (value) {
                    if (arguments.length == 1) {
                        this._value = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Bandwidth-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Bandwidth.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("b=");
                        builder.append(this.getBandwidthType());
                        builder.append(":");
                        builder.append(fm.icelink.IntExtensions.toString(this.getValue()));
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Bandwidth;
            }());
            sdp.Bandwidth = Bandwidth;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP bandwidth types.
             </div>
        
            */
            var BandwidthType = /** @class */ (function () {
                function BandwidthType() {
                }
                BandwidthType.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.BandwidthType]';
                };
                /**<span id='method-fm.icelink.sdp.BandwidthType-getApplicationSpecific'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP bandwidth type meaning "Application Specific".
                 </div>
        
        
                @return {string}
                */
                BandwidthType.getApplicationSpecific = function () {
                    if (arguments.length == 0) {
                        return "AS";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.BandwidthType-getConferenceTotal'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP bandwidth type meaning "Conference Total".
                 </div>
        
        
                @return {string}
                */
                BandwidthType.getConferenceTotal = function () {
                    if (arguments.length == 0) {
                        return "CT";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.BandwidthType-getRtcpReceivers'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP bandwidth type meaning "RTCP Receivers".
                 </div>
        
        
                @return {string}
                */
                BandwidthType.getRtcpReceivers = function () {
                    if (arguments.length == 0) {
                        return "RR";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.BandwidthType-getRtcpSenders'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP bandwidth type meaning "RTCP Senders".
                 </div>
        
        
                @return {string}
                */
                BandwidthType.getRtcpSenders = function () {
                    if (arguments.length == 0) {
                        return "RS";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.BandwidthType-getTransportIndependentApplicationSpecificMaximum'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
                 </div>
        
        
                @return {string}
                */
                BandwidthType.getTransportIndependentApplicationSpecificMaximum = function () {
                    if (arguments.length == 0) {
                        return "TIAS";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return BandwidthType;
            }());
            sdp.BandwidthType = BandwidthType;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP encryption key element.
             </div>
        
            */
            var EncryptionKey = /** @class */ (function () {
                function EncryptionKey() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                EncryptionKey.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.EncryptionKey]';
                };
                /**<span id='method-fm.icelink.sdp.EncryptionKey-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.encryptionKey` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.EncryptionKey}
                */
                EncryptionKey.parse = function (s) {
                    if (arguments.length == 1) {
                        var str = void 0;
                        var str2 = void 0;
                        s = s.substring(2);
                        var index = fm.icelink.StringExtensions.indexOf(s, ":");
                        if ((fm.icelink.Global.equals(index, -1))) {
                            str = s;
                            str2 = null;
                        }
                        else {
                            str = fm.icelink.StringExtensions.substring(s, 0, index);
                            str2 = s.substring((index + 1));
                        }
                        var _var0 = str;
                        if (_var0 == "clear") {
                            do {
                                return new fm.icelink.sdp.ClearEncryptionKey(str2);
                            } while (false);
                        }
                        else if (_var0 == "base64") {
                            do {
                                return new fm.icelink.sdp.Base64EncryptionKey(str2);
                            } while (false);
                        }
                        else if (_var0 == "uri") {
                            do {
                                try {
                                    return new fm.icelink.sdp.UriEncryptionKey(new fm.icelink.Uri(str2));
                                }
                                catch (exception1) {
                                    return null;
                                }
                                finally {
                                }
                            } while (false);
                        }
                        else if (_var0 == "prompt") {
                            do {
                                return new fm.icelink.sdp.PromptEncryptionKey();
                            } while (false);
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.EncryptionKey-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                EncryptionKey.prototype.toString = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.StringExtensions.concat("k=", this.getMethodAndValue());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return EncryptionKey;
            }());
            sdp.EncryptionKey = EncryptionKey;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/EncryptionKey.ts" />

/// <reference path="../sdp/EncryptionKey.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP encryption key with a method of "base64".
             </div>
        
            */
            var Base64EncryptionKey = /** @class */ (function (_super) {
                __extends(Base64EncryptionKey, _super);
                /**<span id='method-fm.icelink.sdp.Base64EncryptionKey-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.base64EncryptionKey` class.
                 </div>
        
                @param {string} encodedEncryptionKey The base64-encoded encryption key.
                @return {}
                */
                function Base64EncryptionKey(encodedEncryptionKey) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var encodedEncryptionKey_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        if ((fm.icelink.Global.equals(encodedEncryptionKey_1, null))) {
                            throw new fm.icelink.Exception("encodedEncryptionKey cannot be null.");
                        }
                        _this.setEncodedEncryptionKey(encodedEncryptionKey_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                Base64EncryptionKey.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Base64EncryptionKey]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.Base64EncryptionKey-getEncodedEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the base64-encoded encryption key.
                 </div>
        
        
                @return {string}
                */
                Base64EncryptionKey.prototype.getEncodedEncryptionKey = function () {
                    if (arguments.length == 0) {
                        return this._encodedEncryptionKey;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Base64EncryptionKey.prototype.getMethodAndValue = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("base64:");
                        builder.append(this.getEncodedEncryptionKey());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Base64EncryptionKey.prototype.setEncodedEncryptionKey = function (value) {
                    if (arguments.length == 1) {
                        this._encodedEncryptionKey = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Base64EncryptionKey;
            }(fm.icelink.sdp.EncryptionKey));
            sdp.Base64EncryptionKey = Base64EncryptionKey;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This attribute gives the dot-separated hierarchical category of
             the session.  This is to enable a receiver to filter unwanted
             sessions by category.  There is no central registry of
             categories.  It is a session-level attribute, and it is not
             dependent on charset.
             </div>
        
            */
            var CategoryAttribute = /** @class */ (function (_super) {
                __extends(CategoryAttribute, _super);
                /**<span id='method-fm.icelink.sdp.CategoryAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.categoryAttribute` class.
                 </div>
        
                @param {string} category The dot-separated hierarchical category of the session.
                @return {}
                */
                function CategoryAttribute(category) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var category_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.CategoryAttribute);
                        if ((fm.icelink.Global.equals(category_1, null))) {
                            throw new fm.icelink.Exception("category cannot be null.");
                        }
                        _this.setCategory(category_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                CategoryAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CategoryAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.CategoryAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.categoryAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.CategoryAttribute}
                */
                CategoryAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.CategoryAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CategoryAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                CategoryAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getCategory();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CategoryAttribute-getCategory'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the dot-separated hierarchical category of the session.
                 </div>
        
        
                @return {string}
                */
                CategoryAttribute.prototype.getCategory = function () {
                    if (arguments.length == 0) {
                        return this._category;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                CategoryAttribute.prototype.setCategory = function (value) {
                    if (arguments.length == 1) {
                        this._category = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CategoryAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.CategoryAttribute = CategoryAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies the character set to be used to display the
             session name and information data.  By default, the ISO-10646
             character set in UTF-8 encoding is used.  If a more compact
             representation is required, other character sets may be used.
             For example, the ISO 8859-1 is specified with the following SDP
             attribute:
         
             a=charset:ISO-8859-1
             </div>
        
            */
            var CharacterSetAttribute = /** @class */ (function (_super) {
                __extends(CharacterSetAttribute, _super);
                /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.characterSetAttribute` class.
                 </div>
        
                @param {string} characterSet The character set to be used to display the session name and information data.
                @return {}
                */
                function CharacterSetAttribute(characterSet) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var characterSet_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        if ((fm.icelink.Global.equals(characterSet_1, null))) {
                            throw new fm.icelink.Exception("characterSet cannot be null.");
                        }
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.CharacterSetAttribute);
                        _this.setCharacterSet(characterSet_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                CharacterSetAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CharacterSetAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.characterSetAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.CharacterSetAttribute}
                */
                CharacterSetAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.CharacterSetAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                CharacterSetAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getCharacterSet();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-getCharacterSet'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the character set to be used to display the session name and information data.
                 </div>
        
        
                @return {string}
                */
                CharacterSetAttribute.prototype.getCharacterSet = function () {
                    if (arguments.length == 0) {
                        return this._characterSet;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                CharacterSetAttribute.prototype.setCharacterSet = function (value) {
                    if (arguments.length == 1) {
                        this._characterSet = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CharacterSetAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.CharacterSetAttribute = CharacterSetAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/EncryptionKey.ts" />

/// <reference path="../sdp/EncryptionKey.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP encryption key with a method of "clear".
             </div>
        
            */
            var ClearEncryptionKey = /** @class */ (function (_super) {
                __extends(ClearEncryptionKey, _super);
                /**<span id='method-fm.icelink.sdp.ClearEncryptionKey-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.clearEncryptionKey` class.
                 </div>
        
                @param {string} encryptionKey The untransformed encryption key.
                @return {}
                */
                function ClearEncryptionKey(encryptionKey) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var encryptionKey_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        if ((fm.icelink.Global.equals(encryptionKey_1, null))) {
                            throw new fm.icelink.Exception("encryptionKey cannot be null.");
                        }
                        _this.setEncryptionKey(encryptionKey_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                ClearEncryptionKey.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ClearEncryptionKey]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.ClearEncryptionKey-getEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the untransformed encryption key.
                 </div>
        
        
                @return {string}
                */
                ClearEncryptionKey.prototype.getEncryptionKey = function () {
                    if (arguments.length == 0) {
                        return this._encryptionKey;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                ClearEncryptionKey.prototype.getMethodAndValue = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("clear:");
                        builder.append(this.getEncryptionKey());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                ClearEncryptionKey.prototype.setEncryptionKey = function (value) {
                    if (arguments.length == 1) {
                        this._encryptionKey = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ClearEncryptionKey;
            }(fm.icelink.sdp.EncryptionKey));
            sdp.ClearEncryptionKey = ClearEncryptionKey;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP conference types.
             </div>
        
            */
            var ConferenceType = /** @class */ (function () {
                function ConferenceType() {
                }
                ConferenceType.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ConferenceType]';
                };
                /**<span id='method-fm.icelink.sdp.ConferenceType-getBroadcast'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
                 </div>
        
        
                @return {string}
                */
                ConferenceType.getBroadcast = function () {
                    if (arguments.length == 0) {
                        return "broadcast";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceType-getH332'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP conference type meaning "H332", which should imply receive-only and
                 indicate that this loosely coupled session is part of an H.332 session.
                 </div>
        
        
                @return {string}
                */
                ConferenceType.getH332 = function () {
                    if (arguments.length == 0) {
                        return "H332";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceType-getMeeting'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP conference type meaning "Meeting", which should imply send-receive.
                 </div>
        
        
                @return {string}
                */
                ConferenceType.getMeeting = function () {
                    if (arguments.length == 0) {
                        return "meeting";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceType-getModerated'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP conference type meaning "Moderated", which should indicate the use of
                 a floor control tool and that the media tools are started so as to mute
                 new sites joining the conference.
                 </div>
        
        
                @return {string}
                */
                ConferenceType.getModerated = function () {
                    if (arguments.length == 0) {
                        return "moderated";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceType-getTest'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP conference type meaning "Test", which should imply that unless
                 explicitly requested otherwise, receivers can safely avoid displaying
                 this session description to users.
                 </div>
        
        
                @return {string}
                */
                ConferenceType.getTest = function () {
                    if (arguments.length == 0) {
                        return "test";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ConferenceType;
            }());
            sdp.ConferenceType = ConferenceType;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies the type of the conference.  Suggested values
             are "broadcast", "meeting", "moderated", "test", and "H332".
             "recvonly" should be the default for "type:broadcast" sessions,
             "type:meeting" should imply "sendrecv", and "type:moderated"
             should indicate the use of a floor control tool and that the
             media tools are started so as to mute new sites joining the
             conference.
             </div>
        
            */
            var ConferenceTypeAttribute = /** @class */ (function (_super) {
                __extends(ConferenceTypeAttribute, _super);
                /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.conferenceTypeAttribute` class.
                 </div>
        
                @param {string} conferenceType The type of the conference. See `fm.icelink.sdp.conferenceTypeAttribute.conferenceType` for possible values.
                @return {}
                */
                function ConferenceTypeAttribute(conferenceType) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var conferenceType_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.ConferenceTypeAttribute);
                        if ((fm.icelink.Global.equals(conferenceType_1, null))) {
                            throw new fm.icelink.Exception("conferenceType cannot be null.");
                        }
                        _this.setConferenceType(conferenceType_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                ConferenceTypeAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ConferenceTypeAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.conferenceTypeAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.ConferenceTypeAttribute}
                */
                ConferenceTypeAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.ConferenceTypeAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                ConferenceTypeAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getConferenceType();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-getConferenceType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of the conference. See `fm.icelink.sdp.conferenceTypeAttribute.conferenceType` for possible values.
                 </div>
        
        
                @return {string}
                */
                ConferenceTypeAttribute.prototype.getConferenceType = function () {
                    if (arguments.length == 0) {
                        return this._conferenceType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                ConferenceTypeAttribute.prototype.setConferenceType = function (value) {
                    if (arguments.length == 1) {
                        this._conferenceType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ConferenceTypeAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.ConferenceTypeAttribute = ConferenceTypeAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP connection data element.
             </div>
        
            */
            var ConnectionData = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.ConnectionData-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.connectionData` class.
                 </div>
        
                @param {string} connectionAddress The connection address.
                @return {}
                */
                function ConnectionData(connectionAddress) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var connectionAddress_1 = __arguments[0];
                        //super();
                        if ((fm.icelink.Global.equals(connectionAddress_1, null))) {
                            throw new fm.icelink.Exception("connectionAddress cannot be null.");
                        }
                        this.update(connectionAddress_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                ConnectionData.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ConnectionData]';
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.connectionData` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.ConnectionData}
                */
                ConnectionData.parse = function (s) {
                    if (arguments.length == 1) {
                        s = s.substring(2);
                        var strArray = fm.icelink.StringExtensions.split(s, [32]);
                        var connectionAddress = strArray[2];
                        var data = new fm.icelink.sdp.ConnectionData(connectionAddress);
                        data.setNetworkType(strArray[0]);
                        data.setAddressType(strArray[1]);
                        return data;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-getAddressType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of the address. See `fm.icelink.sdp.connectionData.addressType` for possible values.
                 </div>
        
        
                @return {string}
                */
                ConnectionData.prototype.getAddressType = function () {
                    if (arguments.length == 0) {
                        return this._addressType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-getConnectionAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the connection address.
                 </div>
        
        
                @return {string}
                */
                ConnectionData.prototype.getConnectionAddress = function () {
                    if (arguments.length == 0) {
                        return this._connectionAddress;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-getNetworkType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of network. See `fm.icelink.sdp.connectionData.networkType` for possible values.
                 </div>
        
        
                @return {string}
                */
                ConnectionData.prototype.getNetworkType = function () {
                    if (arguments.length == 0) {
                        return this._networkType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-setAddressType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the type of the address. See `fm.icelink.sdp.connectionData.addressType` for possible values.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                ConnectionData.prototype.setAddressType = function (value) {
                    if (arguments.length == 1) {
                        this._addressType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-setConnectionAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the connection address.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                ConnectionData.prototype.setConnectionAddress = function (value) {
                    if (arguments.length == 1) {
                        this._connectionAddress = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-setNetworkType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the type of network. See `fm.icelink.sdp.connectionData.networkType` for possible values.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                ConnectionData.prototype.setNetworkType = function (value) {
                    if (arguments.length == 1) {
                        this._networkType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                ConnectionData.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("c=");
                        builder.append(this.getNetworkType());
                        builder.append(" ");
                        builder.append(this.getAddressType());
                        builder.append(" ");
                        builder.append(this.getConnectionAddress());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ConnectionData-update'>&nbsp;</span>**/
                /**
                 <div>
                 Updates the connection address.
                 </div>
        
                @param {string} connectionAddress The connection address.
                @return {void}
                */
                ConnectionData.prototype.update = function (connectionAddress) {
                    if (arguments.length == 1) {
                        this.setNetworkType(fm.icelink.sdp.NetworkType.getInternet());
                        this.setAddressType(fm.icelink.sdp.AddressType.getAddressTypeForAddress(connectionAddress));
                        this.setConnectionAddress(connectionAddress);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ConnectionData;
            }());
            sdp.ConnectionData = ConnectionData;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives the maximum amount of media that can be encapsulated
             in each packet, expressed as time in milliseconds.  The time
             SHALL be calculated as the sum of the time the media present in
             the packet represents.  For frame-based codecs, the time SHOULD
             be an integer multiple of the frame size.  This attribute is
             probably only meaningful for audio data, but may be used with
             other media types if it makes sense.  It is a media-level
             attribute, and it is not dependent on charset.  Note that this
             attribute was introduced after RFC 2327, and non-updated
             implementations will ignore this attribute.
             </div>
        
            */
            var CryptoAttribute = /** @class */ (function (_super) {
                __extends(CryptoAttribute, _super);
                function CryptoAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var tag = __arguments[0];
                        var cryptoSuite = __arguments[1];
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpCryptoAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.CryptoAttribute);
                        _this.setTag(tag);
                        _this.setCryptoSuite(cryptoSuite);
                        _this.setKeyParams({});
                        _this.setSessionParams(new Array());
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpCryptoAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.CryptoAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                CryptoAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CryptoAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                CryptoAttribute.prototype.fmicelinksdpCryptoAttributeInit = function () {
                    this._tag = 0;
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.cryptoAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.CryptoAttribute}
                */
                CryptoAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var strArray = void 0;
                        var strArray2 = void 0;
                        var index = fm.icelink.StringExtensions.indexOf(value, " ");
                        var num2 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                        value = value.substring((index + 1));
                        index = fm.icelink.StringExtensions.indexOf(value, " ");
                        var str = fm.icelink.StringExtensions.substring(value, 0, index);
                        value = value.substring((index + 1));
                        var dictionary = {};
                        var list = new Array();
                        index = fm.icelink.StringExtensions.indexOf(value, " ");
                        if ((fm.icelink.Global.equals(index, -1))) {
                            strArray = fm.icelink.StringExtensions.split(value, [59]);
                            for (var _i = 0, strArray_1 = strArray; _i < strArray_1.length; _i++) {
                                var str2 = strArray_1[_i];
                                strArray2 = fm.icelink.StringExtensions.split(str2, [58]);
                                if ((fm.icelink.Global.equals(strArray2.length, 2))) {
                                    dictionary[strArray2[0]] = strArray2[1];
                                }
                            }
                        }
                        else {
                            strArray = fm.icelink.StringExtensions.split(fm.icelink.StringExtensions.substring(value, 0, index), [59]);
                            for (var _a = 0, strArray_2 = strArray; _a < strArray_2.length; _a++) {
                                var str2 = strArray_2[_a];
                                strArray2 = fm.icelink.StringExtensions.split(str2, [58]);
                                if ((fm.icelink.Global.equals(strArray2.length, 2))) {
                                    dictionary[strArray2[0]] = strArray2[1];
                                }
                            }
                            value = value.substring((index + 1));
                            var strArray3 = fm.icelink.StringExtensions.split(value, [32]);
                            for (var _b = 0, strArray3_1 = strArray3; _b < strArray3_1.length; _b++) {
                                var str3 = strArray3_1[_b];
                                fm.icelink.ArrayExtensions.add(list, str3);
                            }
                        }
                        var attribute = new fm.icelink.sdp.CryptoAttribute();
                        attribute.setTag(num2);
                        attribute.setCryptoSuite(str);
                        attribute.setKeyParams(dictionary);
                        attribute.setSessionParams(list);
                        return attribute;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                CryptoAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.IntExtensions.toString(this.getTag()));
                        builder.append(" ");
                        builder.append(this.getCryptoSuite());
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(this.getKeyParams()); _i < _a.length; _i++) {
                            var str = _a[_i];
                            builder.append(" ");
                            builder.append(str);
                            builder.append(":");
                            builder.append(this.getKeyParams()[str]);
                        }
                        for (var _b = 0, _c = this.getSessionParams(); _b < _c.length; _b++) {
                            var str2 = _c[_b];
                            builder.append(" ");
                            builder.append(str2);
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getCryptoSuite'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the crypto suite. See `fm.icelink.sdp.cryptoAttribute.cryptoSuite` for possible values.
                 </div>
        
        
                @return {string}
                */
                CryptoAttribute.prototype.getCryptoSuite = function () {
                    if (arguments.length == 0) {
                        return this._cryptoSuite;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getKey'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the key from the "inline" key parameter.
                 </div>
        
        
                @return {fm.icelink.DataBuffer}
                */
                CryptoAttribute.prototype.getKey = function () {
                    if (arguments.length == 0) {
                        if (((!fm.icelink.Global.equals(this.getCryptoSuite(), fm.icelink.sdp.CryptoSuite.getAesCM128HmacSha180())) && !(fm.icelink.Global.equals(this.getCryptoSuite(), fm.icelink.sdp.CryptoSuite.getAesCm128HmacSha132())))) {
                            throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Unrecognized crypto-suite: {0}.", this.getCryptoSuite()));
                        }
                        var array = fm.icelink.Base64.decode(this.getKeyParams()[fm.icelink.sdp.CryptoKeyMethod.getInline()]);
                        if ((!fm.icelink.Global.equals(array.length, 30))) {
                            throw new fm.icelink.Exception("Unexpected key/salt length.");
                        }
                        return fm.icelink.DataBuffer.wrap(fm.icelink.BitAssistant.subArray(array, 0, 16));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getKeyParams'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the key parameters.
                 </div>
        
        
                @return {fm.icelink.Hash<string,string>}
                */
                CryptoAttribute.prototype.getKeyParams = function () {
                    if (arguments.length == 0) {
                        return this._keyParams;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getSalt'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the salt from the "inline" key parameter.
                 </div>
        
        
                @return {fm.icelink.DataBuffer}
                */
                CryptoAttribute.prototype.getSalt = function () {
                    if (arguments.length == 0) {
                        if (((!fm.icelink.Global.equals(this.getCryptoSuite(), fm.icelink.sdp.CryptoSuite.getAesCM128HmacSha180())) && !(fm.icelink.Global.equals(this.getCryptoSuite(), fm.icelink.sdp.CryptoSuite.getAesCm128HmacSha132())))) {
                            throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Unrecognized crypto-suite: {0}.", this.getCryptoSuite()));
                        }
                        var array = fm.icelink.Base64.decode(this.getKeyParams()[fm.icelink.sdp.CryptoKeyMethod.getInline()]);
                        if ((!fm.icelink.Global.equals(array.length, 30))) {
                            throw new fm.icelink.Exception("Unexpected key/salt length.");
                        }
                        return fm.icelink.DataBuffer.wrap(fm.icelink.BitAssistant.subArray(array, 16, 14));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getSessionParams'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the session parameters.
                 </div>
        
        
                @return {Array<string>}
                */
                CryptoAttribute.prototype.getSessionParams = function () {
                    if (arguments.length == 0) {
                        return this._sessionParams;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-getTag'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the tag.
                 </div>
        
        
                @return {number}
                */
                CryptoAttribute.prototype.getTag = function () {
                    if (arguments.length == 0) {
                        return this._tag;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                CryptoAttribute.prototype.setCryptoSuite = function (value) {
                    if (arguments.length == 1) {
                        this._cryptoSuite = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                CryptoAttribute.prototype.setKeyParams = function (value) {
                    if (arguments.length == 1) {
                        this._keyParams = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-setKeySalt'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the key and salt for the "inline" key parameter.
                 </div>
        
                @param {Uint8Array} key The key.
                @param {Uint8Array} salt The salt.
                @return {fm.icelink.sdp.CryptoAttribute}
                */
                CryptoAttribute.prototype.setKeySalt = function (key, salt) {
                    if (arguments.length == 2) {
                        var num = void 0;
                        var b = new Uint8Array((key.length + salt.length));
                        for (num = 0; (num < key.length); num++) {
                            b[num] = key[num];
                        }
                        for (num = 0; (num < salt.length); num++) {
                            b[(key.length + num)] = salt[num];
                        }
                        this.getKeyParams()[fm.icelink.sdp.CryptoKeyMethod.getInline()] = fm.icelink.Base64.encode(b);
                        return this;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                CryptoAttribute.prototype.setSessionParams = function (value) {
                    if (arguments.length == 1) {
                        this._sessionParams = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoAttribute-setTag'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the tag.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                CryptoAttribute.prototype.setTag = function (value) {
                    if (arguments.length == 1) {
                        this._tag = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CryptoAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.CryptoAttribute = CryptoAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP crypto key methods.
             </div>
        
            */
            var CryptoKeyMethod = /** @class */ (function () {
                function CryptoKeyMethod() {
                }
                CryptoKeyMethod.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CryptoKeyMethod]';
                };
                /**<span id='method-fm.icelink.sdp.CryptoKeyMethod-getInline'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto key method meaning "inline".
                 </div>
        
        
                @return {string}
                */
                CryptoKeyMethod.getInline = function () {
                    if (arguments.length == 0) {
                        return "inline";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CryptoKeyMethod;
            }());
            sdp.CryptoKeyMethod = CryptoKeyMethod;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP crypto session parameters.
             </div>
        
            */
            var CryptoSessionParam = /** @class */ (function () {
                function CryptoSessionParam() {
                }
                CryptoSessionParam.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CryptoSessionParam]';
                };
                /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnauthenticatedSRTP'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
                 </div>
        
        
                @return {string}
                */
                CryptoSessionParam.getUnauthenticatedSRTP = function () {
                    if (arguments.length == 0) {
                        return "UNAUTHENTICATED_SRTP";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnencryptedSRTCP'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
                 </div>
        
        
                @return {string}
                */
                CryptoSessionParam.getUnencryptedSRTCP = function () {
                    if (arguments.length == 0) {
                        return "UNENCRYPTED_SRTCP";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnencryptedSRTP'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto session parameter meaning "unencrypted SRTP".
                 </div>
        
        
                @return {string}
                */
                CryptoSessionParam.getUnencryptedSRTP = function () {
                    if (arguments.length == 0) {
                        return "UNENCRYPTED_SRTP";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CryptoSessionParam;
            }());
            sdp.CryptoSessionParam = CryptoSessionParam;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP crypto suites.
             </div>
        
            */
            var CryptoSuite = /** @class */ (function () {
                function CryptoSuite() {
                }
                CryptoSuite.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.CryptoSuite]';
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getAesCm128HmacSha132'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
                 </div>
        
        
                @return {string}
                */
                CryptoSuite.getAesCm128HmacSha132 = function () {
                    if (arguments.length == 0) {
                        return "AES_CM_128_HMAC_SHA1_32";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getAesCM128HmacSha180'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
                 </div>
        
        
                @return {string}
                */
                CryptoSuite.getAesCM128HmacSha180 = function () {
                    if (arguments.length == 0) {
                        return "AES_CM_128_HMAC_SHA1_80";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getCryptoSuite'>&nbsp;</span>**/
                /**
                 <div>
                 Converts an EncryptionMode enum to a crypto-suite string.
                 </div>
        
                @param {fm.icelink.EncryptionMode} encryptionMode The EncryptionMode enum.
                @return {string} The crypto-suite string.
                */
                CryptoSuite.getCryptoSuite = function (encryptionMode) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(encryptionMode, fm.icelink.EncryptionMode.Aes128Strong))) {
                            return fm.icelink.sdp.CryptoSuite.getAesCM128HmacSha180();
                        }
                        if ((fm.icelink.Global.equals(encryptionMode, fm.icelink.EncryptionMode.Aes128Weak))) {
                            return fm.icelink.sdp.CryptoSuite.getAesCm128HmacSha132();
                        }
                        if ((fm.icelink.Global.equals(encryptionMode, fm.icelink.EncryptionMode.NullStrong))) {
                            return fm.icelink.sdp.CryptoSuite.getNullHmacSha180();
                        }
                        if ((fm.icelink.Global.equals(encryptionMode, fm.icelink.EncryptionMode.NullWeak))) {
                            return fm.icelink.sdp.CryptoSuite.getNullHmacSha132();
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getEncryptionMode'>&nbsp;</span>**/
                /**
                 <div>
                 Converts a crypto-suite string to an EncryptionMode enum.
                 </div>
        
                @param {string} cryptoSuite The crypto-suite string.
                @return {fm.icelink.EncryptionMode} The EncryptionMode enum.
                */
                CryptoSuite.getEncryptionMode = function (cryptoSuite) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(cryptoSuite, fm.icelink.sdp.CryptoSuite.getAesCM128HmacSha180()))) {
                            return fm.icelink.EncryptionMode.Aes128Strong;
                        }
                        if ((fm.icelink.Global.equals(cryptoSuite, fm.icelink.sdp.CryptoSuite.getAesCm128HmacSha132()))) {
                            return fm.icelink.EncryptionMode.Aes128Weak;
                        }
                        if ((fm.icelink.Global.equals(cryptoSuite, fm.icelink.sdp.CryptoSuite.getNullHmacSha180()))) {
                            return fm.icelink.EncryptionMode.NullStrong;
                        }
                        if ((fm.icelink.Global.equals(cryptoSuite, fm.icelink.sdp.CryptoSuite.getNullHmacSha132()))) {
                            return fm.icelink.EncryptionMode.NullWeak;
                        }
                        return fm.icelink.EncryptionMode.Null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getNullHmacSha132'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
                 </div>
        
        
                @return {string}
                */
                CryptoSuite.getNullHmacSha132 = function () {
                    if (arguments.length == 0) {
                        return "NULL_HMAC_SHA1_32";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.CryptoSuite-getNullHmacSha180'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
                 </div>
        
        
                @return {string}
                */
                CryptoSuite.getNullHmacSha180 = function () {
                    if (arguments.length == 0) {
                        return "NULL_HMAC_SHA1_80";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return CryptoSuite;
            }());
            sdp.CryptoSuite = CryptoSuite;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies the mode in which tools should be started.
             </div>
        
            */
            var DirectionAttribute = /** @class */ (function (_super) {
                __extends(DirectionAttribute, _super);
                function DirectionAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                DirectionAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.DirectionAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.DirectionAttribute-generateDirectionAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Creates a DirectionAttribute for a required direction.
                 </div>
        
                @param {fm.icelink.StreamDirection} direction Direction.
                @return {fm.icelink.sdp.DirectionAttribute}
                */
                DirectionAttribute.generateDirectionAttribute = function (direction) {
                    if (arguments.length == 1) {
                        if (((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Inactive)) || (fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Unset)))) {
                            if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Unset))) {
                                fm.icelink.Log.debug("Attempted to create Sdp Direction attribute with unset direction. Creating Inactive direction attribute instead.");
                            }
                            return new fm.icelink.sdp.InactiveAttribute();
                        }
                        if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendOnly))) {
                            return new fm.icelink.sdp.SendOnlyAttribute();
                        }
                        if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.ReceiveOnly))) {
                            return new fm.icelink.sdp.ReceiveOnlyAttribute();
                        }
                        if ((!fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendReceive))) {
                            throw new fm.icelink.Exception("Unexpected Sdp.StreamDirection");
                        }
                        return new fm.icelink.sdp.SendReceiveAttribute();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return DirectionAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.DirectionAttribute = DirectionAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This attribute allows parameters that are specific to a
             particular format to be conveyed in a way that SDP does not
             have to understand them.  The format must be one of the formats
             specified for the media.  Format-specific parameters may be any
             set of parameters required to be conveyed by SDP and given
             unchanged to the media tool that will use this format.  At most
             one instance of this attribute is allowed for each format.
             </div>
        
            */
            var FormatParametersAttribute = /** @class */ (function (_super) {
                __extends(FormatParametersAttribute, _super);
                function FormatParametersAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var format = __arguments[0];
                        // chained constructor: FormatParametersAttribute.call(this, format, null);
                        __arguments = new Array(2);
                        __arguments[0] = format;
                        __arguments[1] = null;
                        {
                            var format_2 = __arguments[0];
                            var formatSpecificParameters = __arguments[1];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpFormatParametersAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.FormatParametersAttribute);
                            _this.setFormat(format_2);
                            _this.setFormatSpecificParameters(formatSpecificParameters);
                        }
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpFormatParametersAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.FormatParametersAttribute);
                    }
                    else if (__arguments.length == 2) {
                        var format = __arguments[0];
                        var formatSpecificParameters = __arguments[1];
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpFormatParametersAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.FormatParametersAttribute);
                        _this.setFormat(format);
                        _this.setFormatSpecificParameters(formatSpecificParameters);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                FormatParametersAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.FormatParametersAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                FormatParametersAttribute.prototype.fmicelinksdpFormatParametersAttributeInit = function () {
                    this._format = 0;
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.formatParametersAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.FormatParametersAttribute}
                */
                FormatParametersAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var index = fm.icelink.StringExtensions.indexOf(value, " ");
                        var num2 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                        var str = value.substring((index + 1));
                        var attribute = new fm.icelink.sdp.FormatParametersAttribute();
                        attribute.setFormat(num2);
                        attribute.setFormatSpecificParameters(str);
                        return attribute;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-deserializeFormatSpecificParameters'>&nbsp;</span>**/
                /**
                 <div>
                 Creates a dictionary map from the format specific parameters.
                 </div>
        
        
                @return {fm.icelink.Hash<string,string>}
                */
                FormatParametersAttribute.prototype.deserializeFormatSpecificParameters = function () {
                    if (arguments.length == 0) {
                        var dictionary = {};
                        var formatSpecificParameters = this.getFormatSpecificParameters();
                        if ((!fm.icelink.Global.equals(formatSpecificParameters, null))) {
                            var strArray = fm.icelink.StringExtensions.split(formatSpecificParameters, [59]);
                            for (var _i = 0, strArray_3 = strArray; _i < strArray_3.length; _i++) {
                                var str2 = strArray_3[_i];
                                var strArray2 = fm.icelink.StringExtensions.split(fm.icelink.StringExtensions.trim(str2), [61]);
                                if ((fm.icelink.Global.equals(strArray2.length, 1))) {
                                    dictionary[strArray2[0]] = null;
                                }
                                else {
                                    dictionary[strArray2[0]] = strArray2[1];
                                }
                            }
                        }
                        return dictionary;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                FormatParametersAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.IntExtensions.toString(this.getFormat()));
                        builder.append(" ");
                        builder.append(this.getFormatSpecificParameters());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormat'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the format.
                 </div>
        
        
                @return {number}
                */
                FormatParametersAttribute.prototype.getFormat = function () {
                    if (arguments.length == 0) {
                        return this._format;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormatSpecificParameter'>&nbsp;</span>**/
                /**
                 <div>
                 Gets a format specific parameter.
                 </div>
        
                @param {string} key The key.
                @return {string}
                */
                FormatParametersAttribute.prototype.getFormatSpecificParameter = function (key) {
                    if (arguments.length == 1) {
                        return this.deserializeFormatSpecificParameters()[key];
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormatSpecificParameters'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the format-specific parameters.
                 </div>
        
        
                @return {string}
                */
                FormatParametersAttribute.prototype.getFormatSpecificParameters = function () {
                    if (arguments.length == 0) {
                        return this._formatSpecificParameters;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-serializeFormatSpecificParameters'>&nbsp;</span>**/
                /**
                 <div>
                 Updates the format specific parameters based on a dictionary map.
                 </div>
        
                @param {fm.icelink.Hash<string,string>} map The map.
                @return {void}
                */
                FormatParametersAttribute.prototype.serializeFormatSpecificParameters = function (map) {
                    if (arguments.length == 1) {
                        var list = new Array();
                        for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(map); _i < _a.length; _i++) {
                            var str = _a[_i];
                            if ((fm.icelink.Global.equals(map[str], null))) {
                                fm.icelink.ArrayExtensions.add(list, str);
                            }
                            else {
                                fm.icelink.ArrayExtensions.add(list, fm.icelink.StringExtensions.join("=", [str, map[str]]));
                            }
                        }
                        this.setFormatSpecificParameters(fm.icelink.StringExtensions.join(";", fm.icelink.ArrayExtensions.toArray(list)));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                FormatParametersAttribute.prototype.setFormat = function (value) {
                    if (arguments.length == 1) {
                        this._format = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-setFormatSpecificParameter'>&nbsp;</span>**/
                /**
                 <div>
                 Sets a format specific parameter.
                 </div>
        
                @param {string} key The key.
                @param {string} value The value.
                @return {void}
                */
                FormatParametersAttribute.prototype.setFormatSpecificParameter = function (key, value) {
                    if (arguments.length == 2) {
                        var map = this.deserializeFormatSpecificParameters();
                        map[key] = value;
                        this.serializeFormatSpecificParameters(map);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                FormatParametersAttribute.prototype.setFormatSpecificParameters = function (value) {
                    if (arguments.length == 1) {
                        this._formatSpecificParameters = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-tryGetFormatSpecificParameter'>&nbsp;</span>**/
                /**
                 <div>
                 Tries to get a format specific parameter.
                 </div>
        
                @param {string} key The key.
                @param {fm.icelink.Holder<string>} value The value.
                @return {boolean}
                */
                FormatParametersAttribute.prototype.tryGetFormatSpecificParameter = function (key, value) {
                    if (arguments.length == 2) {
                        var dictionary = this.deserializeFormatSpecificParameters();
                        value.setValue(null);
                        var _var0 = fm.icelink.HashExtensions.tryGetValue(dictionary, key, value);
                        return _var0;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-unsetFormatSpecificParameter'>&nbsp;</span>**/
                /**
                 <div>
                 Unsets a format specific parameter.
                 </div>
        
                @param {string} key The key.
                @return {boolean}
                */
                FormatParametersAttribute.prototype.unsetFormatSpecificParameter = function (key) {
                    if (arguments.length == 1) {
                        var map = this.deserializeFormatSpecificParameters();
                        if (fm.icelink.HashExtensions.remove(map, key)) {
                            this.serializeFormatSpecificParameters(map);
                            return true;
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return FormatParametersAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.FormatParametersAttribute = FormatParametersAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives the maximum video frame rate in frames/sec.  It is
             intended as a recommendation for the encoding of video data.
             Decimal representations of fractional values using the notation
             "integer.fraction" are allowed.  It is a media-level
             attribute, defined only for video media, and it is not
             dependent on charset.
             </div>
        
            */
            var FrameRateAttribute = /** @class */ (function (_super) {
                __extends(FrameRateAttribute, _super);
                /**<span id='method-fm.icelink.sdp.FrameRateAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.frameRateAttribute` class.
                 </div>
        
                @param {string} frameRate The maximum video frame rate in frames/second.
                @return {}
                */
                function FrameRateAttribute(frameRate) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var frameRate_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.FrameRateAttribute);
                        if ((fm.icelink.Global.equals(frameRate_1, null))) {
                            throw new fm.icelink.Exception("frameRate cannot be null.");
                        }
                        _this.setFrameRate(frameRate_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                FrameRateAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.FrameRateAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.FrameRateAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.frameRateAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.FrameRateAttribute}
                */
                FrameRateAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.FrameRateAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FrameRateAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                FrameRateAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getFrameRate();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.FrameRateAttribute-getFrameRate'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the maximum video frame rate in frames/second.
                 </div>
        
        
                @return {string}
                */
                FrameRateAttribute.prototype.getFrameRate = function () {
                    if (arguments.length == 0) {
                        return this._frameRate;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                FrameRateAttribute.prototype.setFrameRate = function (value) {
                    if (arguments.length == 1) {
                        this._frameRate = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return FrameRateAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.FrameRateAttribute = FrameRateAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The candidate attribute is a media-level attribute only.  It contains
                 a transport address for a candidate that can be used for connectivity
                 checks.
                 </div>
            
                */
                var CandidateAttribute = /** @class */ (function (_super) {
                    __extends(CandidateAttribute, _super);
                    function CandidateAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpiceCandidateAttributeInit();
                            _this.__foundation = fm.icelink.StringExtensions.empty;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceCandidateAttribute);
                        }
                        else if (__arguments.length == 6) {
                            var foundation = __arguments[0];
                            var priority = __arguments[1];
                            var connectionAddress = __arguments[2];
                            var port = __arguments[3];
                            var candidateType = __arguments[4];
                            var componentId = __arguments[5];
                            // chained constructor: CandidateAttribute.call(this, foundation, priority, connectionAddress, port, candidateType, null, 0, "udp", componentId);
                            __arguments = new Array(9);
                            __arguments[0] = foundation;
                            __arguments[1] = priority;
                            __arguments[2] = connectionAddress;
                            __arguments[3] = port;
                            __arguments[4] = candidateType;
                            __arguments[5] = null;
                            __arguments[6] = 0;
                            __arguments[7] = "udp";
                            __arguments[8] = componentId;
                            {
                                var foundation_1 = __arguments[0];
                                var priority_1 = __arguments[1];
                                var connectionAddress_2 = __arguments[2];
                                var port_1 = __arguments[3];
                                var candidateType_1 = __arguments[4];
                                var relatedAddress = __arguments[5];
                                var relatedPort = __arguments[6];
                                var protocol = __arguments[7];
                                var componentId_1 = __arguments[8];
                                _this = _super.call(this) || this;
                                _this.fmicelinksdpiceCandidateAttributeInit();
                                _this.__foundation = fm.icelink.StringExtensions.empty;
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceCandidateAttribute);
                                _this.setFoundation(foundation_1);
                                _this.setProtocol(protocol);
                                _this.setPriority(priority_1);
                                _this.setConnectionAddress(connectionAddress_2);
                                _this.setPort(port_1);
                                _this.setCandidateType(candidateType_1);
                                _this.setRelatedAddress(relatedAddress);
                                _this.setRelatedPort(relatedPort);
                                _this.setComponentId(componentId_1);
                                _this.setExtensions({});
                            }
                        }
                        else if (__arguments.length == 9) {
                            var foundation = __arguments[0];
                            var priority = __arguments[1];
                            var connectionAddress = __arguments[2];
                            var port = __arguments[3];
                            var candidateType = __arguments[4];
                            var relatedAddress = __arguments[5];
                            var relatedPort = __arguments[6];
                            var protocol = __arguments[7];
                            var componentId = __arguments[8];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpiceCandidateAttributeInit();
                            _this.__foundation = fm.icelink.StringExtensions.empty;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceCandidateAttribute);
                            _this.setFoundation(foundation);
                            _this.setProtocol(protocol);
                            _this.setPriority(priority);
                            _this.setConnectionAddress(connectionAddress);
                            _this.setPort(port);
                            _this.setCandidateType(candidateType);
                            _this.setRelatedAddress(relatedAddress);
                            _this.setRelatedPort(relatedPort);
                            _this.setComponentId(componentId);
                            _this.setExtensions({});
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    CandidateAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.CandidateAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    CandidateAttribute.prototype.fmicelinksdpiceCandidateAttributeInit = function () {
                        this._componentId = 0;
                        this._port = 0;
                        this._priority = 0;
                        this._relatedPort = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.candidateAttribute` class.
                     </div>
            
                    @param {string} value The attribute as a string.
                    @return {fm.icelink.sdp.ice.CandidateAttribute}
                    */
                    CandidateAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var str = fm.icelink.StringExtensions.substring(value, 0, index);
                            value = value.substring((index + 1));
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num2 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var str2 = fm.icelink.StringExtensions.toLower(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num3 = fm.icelink.ParseAssistant.parseLongValue(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var str3 = fm.icelink.StringExtensions.substring(value, 0, index);
                            value = value.substring((index + 1));
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num4 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            var dictionary = {};
                            var strArray = fm.icelink.StringExtensions.split(value, [32]);
                            var length_36 = strArray.length;
                            var str4 = null;
                            var str5 = null;
                            var num6 = 0;
                            if ((fm.icelink.Global.equals((length_36 % 2), 1))) {
                                length_36--;
                            }
                            for (var i = 0; (i < length_36); i = (i + 2)) {
                                var str6 = strArray[i];
                                var s = strArray[(i + 1)];
                                if ((fm.icelink.Global.equals(str6, "typ"))) {
                                    str4 = s;
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str6, "raddr"))) {
                                        str5 = s;
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str6, "rport"))) {
                                            num6 = fm.icelink.ParseAssistant.parseIntegerValue(s);
                                        }
                                        else {
                                            dictionary[str6] = s;
                                        }
                                    }
                                }
                            }
                            var attribute = new fm.icelink.sdp.ice.CandidateAttribute();
                            attribute.setFoundation(str);
                            attribute.setComponentId(num2);
                            attribute.setProtocol(str2);
                            attribute.setPriority(num3);
                            attribute.setConnectionAddress(str3);
                            attribute.setPort(num4);
                            attribute.setExtensions(dictionary);
                            attribute.setCandidateType(str4);
                            attribute.setRelatedAddress(str5);
                            attribute.setRelatedPort(num6);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(this.getFoundation());
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(this.getComponentId()));
                            builder.append(" ");
                            builder.append(this.getProtocol());
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(this.getPriority()));
                            builder.append(" ");
                            builder.append(this.getConnectionAddress());
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(this.getPort()));
                            builder.append(" ");
                            builder.append("typ");
                            builder.append(" ");
                            builder.append(this.getCandidateType());
                            if (((!fm.icelink.Global.equals(this.getCandidateType(), fm.icelink.sdp.ice.CandidateType.getHost())) && (!fm.icelink.Global.equals(this.getRelatedAddress(), null)))) {
                                builder.append(" ");
                                builder.append("raddr");
                                builder.append(" ");
                                builder.append(this.getRelatedAddress());
                                builder.append(" ");
                                builder.append("rport");
                                builder.append(" ");
                                builder.append(fm.icelink.IntExtensions.toString(this.getRelatedPort()));
                            }
                            for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(this.getExtensions()); _i < _a.length; _i++) {
                                var str = _a[_i];
                                builder.append(" ");
                                builder.append(str);
                                builder.append(" ");
                                builder.append(this.getExtensions()[str]);
                            }
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getCandidateType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getCandidateType = function () {
                        if (arguments.length == 0) {
                            return this.__candidateType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getComponentId'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the ID of the component for which this is a candidate.
                     </div>
            
            
                    @return {number}
                    */
                    CandidateAttribute.prototype.getComponentId = function () {
                        if (arguments.length == 0) {
                            return this._componentId;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getConnectionAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the IP address of the candidate.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getConnectionAddress = function () {
                        if (arguments.length == 0) {
                            return this.__connectionAddress;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getExtensions'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the extensions.
                     </div>
            
            
                    @return {fm.icelink.Hash<string,string>}
                    */
                    CandidateAttribute.prototype.getExtensions = function () {
                        if (arguments.length == 0) {
                            return this._extensions;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getFoundation'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the candidate's foundation.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getFoundation = function () {
                        if (arguments.length == 0) {
                            return this.__foundation;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the port of the candidate.
                     </div>
            
            
                    @return {number}
                    */
                    CandidateAttribute.prototype.getPort = function () {
                        if (arguments.length == 0) {
                            return this._port;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getPriority'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the priority of the candidate.
                     </div>
            
            
                    @return {number}
                    */
                    CandidateAttribute.prototype.getPriority = function () {
                        if (arguments.length == 0) {
                            return this._priority;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol of this candidate.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getProtocol = function () {
                        if (arguments.length == 0) {
                            return this._protocol;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getRelatedAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the IP address related to the candidate.
                     </div>
            
            
                    @return {string}
                    */
                    CandidateAttribute.prototype.getRelatedAddress = function () {
                        if (arguments.length == 0) {
                            return this._relatedAddress;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getRelatedPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the port related to the candidate.
                     </div>
            
            
                    @return {number}
                    */
                    CandidateAttribute.prototype.getRelatedPort = function () {
                        if (arguments.length == 0) {
                            return this._relatedPort;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setCandidateType'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setCandidateType = function (value) {
                        if (arguments.length == 1) {
                            if ((fm.icelink.Global.equals(value, null))) {
                                throw new fm.icelink.Exception("Candidate type cannot be null.");
                            }
                            this.__candidateType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setComponentId'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the ID of the component for which this is a candidate.
                     </div>
            
            
                    @param {number} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setComponentId = function (value) {
                        if (arguments.length == 1) {
                            this._componentId = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setConnectionAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the IP address of the candidate.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setConnectionAddress = function (value) {
                        if (arguments.length == 1) {
                            if ((fm.icelink.Global.equals(value, null))) {
                                throw new fm.icelink.Exception("Connection address cannot be null.");
                            }
                            this.__connectionAddress = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    CandidateAttribute.prototype.setExtensions = function (value) {
                        if (arguments.length == 1) {
                            this._extensions = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setFoundation'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the candidate's foundation.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setFoundation = function (value) {
                        if (arguments.length == 1) {
                            if ((fm.icelink.Global.equals(value, null))) {
                                throw new fm.icelink.Exception("Foundation cannot be null.");
                            }
                            this.__foundation = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the port of the candidate.
                     </div>
            
            
                    @param {number} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setPort = function (value) {
                        if (arguments.length == 1) {
                            this._port = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setPriority'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the priority of the candidate.
                     </div>
            
            
                    @param {number} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setPriority = function (value) {
                        if (arguments.length == 1) {
                            this._priority = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the protocol of this candidate.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setProtocol = function (value) {
                        if (arguments.length == 1) {
                            this._protocol = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setRelatedAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the IP address related to the candidate.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setRelatedAddress = function (value) {
                        if (arguments.length == 1) {
                            this._relatedAddress = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setRelatedPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the port related to the candidate.
                     </div>
            
            
                    @param {number} value
                    @return {void}
                    */
                    CandidateAttribute.prototype.setRelatedPort = function (value) {
                        if (arguments.length == 1) {
                            this._relatedPort = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return CandidateAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.CandidateAttribute = CandidateAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 Defines valid SDP candidate types.
                 </div>
            
                */
                var CandidateType = /** @class */ (function () {
                    function CandidateType() {
                    }
                    CandidateType.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.CandidateType]';
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateType-getHost'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP candidate type meaning "Host".
                     </div>
            
            
                    @return {string}
                    */
                    CandidateType.getHost = function () {
                        if (arguments.length == 0) {
                            return "host";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateType-getPeerReflexive'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP candidate type meaning "Peer Reflexive".
                     </div>
            
            
                    @return {string}
                    */
                    CandidateType.getPeerReflexive = function () {
                        if (arguments.length == 0) {
                            return "prflx";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateType-getRelayed'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP candidate type meaning "Relayed".
                     </div>
            
            
                    @return {string}
                    */
                    CandidateType.getRelayed = function () {
                        if (arguments.length == 0) {
                            return "relay";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.CandidateType-getServerReflexive'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP candidate type meaning "Server Reflexive".
                     </div>
            
            
                    @return {string}
                    */
                    CandidateType.getServerReflexive = function () {
                        if (arguments.length == 0) {
                            return "srflx";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return CandidateType;
                }());
                ice.CandidateType = CandidateType;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The SDP session attribute "fingerprint" provides an encryption
                 certificate fingerprint to a remote peer for use with DTLS.
                 </div>
            
                */
                var FingerprintAttribute = /** @class */ (function (_super) {
                    __extends(FingerprintAttribute, _super);
                    function FingerprintAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 2) {
                            var hashFunction = __arguments[0];
                            var fingerprint = __arguments[1];
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceFingerprintAttribute);
                            _this.setHashFunction(hashFunction);
                            if ((fm.icelink.StringExtensions.indexOf(fingerprint, ":") < 0)) {
                                var list = new Array();
                                for (var i = 0; (i < fingerprint.length); i = (i + 2)) {
                                    fm.icelink.ArrayExtensions.add(list, fm.icelink.StringExtensions.substring(fingerprint, i, 2));
                                }
                                fingerprint = fm.icelink.StringExtensions.join(":", fm.icelink.ArrayExtensions.toArray(list));
                            }
                            _this.setFingerprint(fm.icelink.StringExtensions.toUpper(fingerprint));
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceFingerprintAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    FingerprintAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.FingerprintAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.fingerprintAttribute` class.
                     </div>
            
                    @param {string} value The attribute as a string.
                    @return {fm.icelink.sdp.ice.FingerprintAttribute}
                    */
                    FingerprintAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var str = fm.icelink.StringExtensions.substring(value, 0, index);
                            value = value.substring((index + 1));
                            var str2 = value;
                            var attribute = new fm.icelink.sdp.ice.FingerprintAttribute();
                            attribute.setHashFunction(str);
                            attribute.setFingerprint(str2);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    FingerprintAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(this.getHashFunction());
                            builder.append(" ");
                            builder.append(this.getFingerprint());
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getFingerprint'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the fingerprint.
                     </div>
            
            
                    @return {string}
                    */
                    FingerprintAttribute.prototype.getFingerprint = function () {
                        if (arguments.length == 0) {
                            return this._fingerprint;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getHashFunction'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the hash function (i.e. sha-256).
                     </div>
            
            
                    @return {string}
                    */
                    FingerprintAttribute.prototype.getHashFunction = function () {
                        if (arguments.length == 0) {
                            return this._hashFunction;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    FingerprintAttribute.prototype.setFingerprint = function (value) {
                        if (arguments.length == 1) {
                            this._fingerprint = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    FingerprintAttribute.prototype.setHashFunction = function (value) {
                        if (arguments.length == 1) {
                            this._hashFunction = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return FingerprintAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.FingerprintAttribute = FingerprintAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 "ice-lite" is a session-level attribute only, and indicates that an
                 agent is a lite implementation.
                 </div>
            
                */
                var LiteAttribute = /** @class */ (function (_super) {
                    __extends(LiteAttribute, _super);
                    /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.liteAttribute` class.
                     </div>
            
            
                    @return {}
                    */
                    function LiteAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceLiteAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    LiteAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.LiteAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.liteAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.LiteAttribute}
                    */
                    LiteAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.ice.LiteAttribute();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    LiteAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            return null;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return LiteAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.LiteAttribute = LiteAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 "ice-mismatch" is a media-level
                 attribute only, and when present in an answer, indicates that the
                 offer arrived with a default destination for a media component that
                 didn't have a corresponding candidate attribute.
                 </div>
            
                */
                var MismatchAttribute = /** @class */ (function (_super) {
                    __extends(MismatchAttribute, _super);
                    /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.mismatchAttribute` class.
                     </div>
            
            
                    @return {}
                    */
                    function MismatchAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceMismatchAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    MismatchAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.MismatchAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.mismatchAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.MismatchAttribute}
                    */
                    MismatchAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.ice.MismatchAttribute();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    MismatchAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            return null;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return MismatchAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.MismatchAttribute = MismatchAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                var OptionTagTypeWrapper = /** @class */ (function () {
                    function OptionTagTypeWrapper(value) {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var value_40 = __arguments[0];
                            //super();
                            this._value = value_40;
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    OptionTagTypeWrapper.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.OptionTagTypeWrapper]';
                    };
                    OptionTagTypeWrapper.prototype.toString = function () {
                        if (arguments.length == 0) {
                            if (this._value == fm.icelink.sdp.ice.OptionTagType.Unknown)
                                return 'Unknown';
                            if (this._value == fm.icelink.sdp.ice.OptionTagType.Trickle)
                                return 'Trickle';
                            return '';
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return OptionTagTypeWrapper;
                }());
                ice.OptionTagTypeWrapper = OptionTagTypeWrapper;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 A tag for an `fm.icelink.sdp.ice.optionsAttribute`.
                 </div>
            
                */
                var OptionTag = /** @class */ (function () {
                    function OptionTag() {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            //super();
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    OptionTag.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.OptionTag]';
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionTag-getTrickle'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "trickle" option string.
                     </div>
            
            
                    @return {string}
                    */
                    OptionTag.getTrickle = function () {
                        if (arguments.length == 0) {
                            return "trickle";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionTag-parse'>&nbsp;</span>**/
                    /**
                     <div>
                     Generates a tag object from a string.
                     </div>
            
                    @param {string} tagString The tag string.
                    @return {fm.icelink.sdp.ice.OptionTag}
                    */
                    OptionTag.parse = function (tagString) {
                        if (arguments.length == 1) {
                            if ((fm.icelink.Global.equals(tagString, fm.icelink.sdp.ice.OptionTag.getTrickle()))) {
                                return new fm.icelink.sdp.ice.TrickleIceOptionTag();
                            }
                            return new fm.icelink.sdp.ice.UnknownIceOptionTag(tagString);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionTag-getType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the type of this tag.
                     </div>
            
            
                    @return {fm.icelink.sdp.ice.OptionTagType}
                    */
                    OptionTag.prototype.getType = function () {
                        if (arguments.length == 0) {
                            return this._type;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionTag-setType'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the type of this tag.
                     </div>
            
            
                    @param {fm.icelink.sdp.ice.OptionTagType} value
                    @return {void}
                    */
                    OptionTag.prototype.setType = function (value) {
                        if (arguments.length == 1) {
                            this._type = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return OptionTag;
                }());
                ice.OptionTag = OptionTag;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/ice/OptionTag.ts" />

/// <reference path="../../sdp/ice/OptionTag.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 An unknown tag for an `fm.icelink.sdp.ice.optionsAttribute`</div>
            
                */
                var UnknownIceOptionTag = /** @class */ (function (_super) {
                    __extends(UnknownIceOptionTag, _super);
                    /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.unknownIceOptionTag` class.
                     </div>
            
            
                    @param {string} tagString
                    @return {}
                    */
                    function UnknownIceOptionTag(tagString) {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var tagString_1 = __arguments[0];
                            _this = _super.call(this) || this;
                            _super.prototype.setType.call(_this, fm.icelink.sdp.ice.OptionTagType.Unknown);
                            _this.setTagString(tagString_1);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    UnknownIceOptionTag.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.UnknownIceOptionTag]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-getTagString'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the tag string.
                     </div>
            
            
                    @return {string}
                    */
                    UnknownIceOptionTag.prototype.getTagString = function () {
                        if (arguments.length == 0) {
                            return this._tagString;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    UnknownIceOptionTag.prototype.setTagString = function (value) {
                        if (arguments.length == 1) {
                            this._tagString = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-toString'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the string representation of this tag.
                     </div>
            
            
                    @return {string}
                    */
                    UnknownIceOptionTag.prototype.toString = function () {
                        if (arguments.length == 0) {
                            return this.getTagString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return UnknownIceOptionTag;
                }(fm.icelink.sdp.ice.OptionTag));
                ice.UnknownIceOptionTag = UnknownIceOptionTag;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/ice/OptionTag.ts" />

/// <reference path="../../sdp/ice/OptionTag.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 A trickle-ice tag for an `fm.icelink.sdp.ice.optionsAttribute`</div>
            
                */
                var TrickleIceOptionTag = /** @class */ (function (_super) {
                    __extends(TrickleIceOptionTag, _super);
                    /**<span id='method-fm.icelink.sdp.ice.TrickleIceOptionTag-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.trickleIceOptionTag` class.
                     </div>
            
            
                    @return {}
                    */
                    function TrickleIceOptionTag() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setType.call(_this, fm.icelink.sdp.ice.OptionTagType.Trickle);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    TrickleIceOptionTag.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.TrickleIceOptionTag]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.TrickleIceOptionTag-toString'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the string representation of this tag
                     </div>
            
            
                    @return {string}
                    */
                    TrickleIceOptionTag.prototype.toString = function () {
                        if (arguments.length == 0) {
                            return fm.icelink.sdp.ice.OptionTag.getTrickle();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return TrickleIceOptionTag;
                }(fm.icelink.sdp.ice.OptionTag));
                ice.TrickleIceOptionTag = TrickleIceOptionTag;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The "ice-options" attribute is a session-level attribute.  It
                 contains a series of tokens that identify the options supported by
                 the agent.
                 </div>
            
                */
                var OptionsAttribute = /** @class */ (function (_super) {
                    __extends(OptionsAttribute, _super);
                    function OptionsAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var tags = __arguments[0];
                            _this = _super.call(this) || this;
                            if ((fm.icelink.Global.equals(tags, null))) {
                                tags = new Array();
                            }
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceOptionsAttribute);
                            _this.setTags(tags);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.setTags(new Array());
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceOptionsAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    OptionsAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.OptionsAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.optionsAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.OptionsAttribute}
                    */
                    OptionsAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var strArray = fm.icelink.StringExtensions.split(value, [32]);
                            var list = new Array();
                            for (var _i = 0, strArray_4 = strArray; _i < strArray_4.length; _i++) {
                                var str = strArray_4[_i];
                                var item = fm.icelink.sdp.ice.OptionTag.parse(str);
                                if ((!fm.icelink.Global.equals(item, null))) {
                                    fm.icelink.ArrayExtensions.add(list, item);
                                }
                            }
                            var attribute = new fm.icelink.sdp.ice.OptionsAttribute();
                            attribute.setTags(list);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    OptionsAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            if ((fm.icelink.Global.equals(this.getTags(), null))) {
                                return "";
                            }
                            var count = fm.icelink.ArrayExtensions.getCount(this.getTags());
                            var strArray = new Array(count);
                            for (var i = 0; (i < count); i++) {
                                strArray[i] = this.getTags()[i].toString();
                            }
                            return fm.icelink.StringExtensions.join(" ", strArray);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getTags'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the tokens that identify options supported by the agent.
                     </div>
            
            
                    @return {Array<fm.icelink.sdp.ice.OptionTag>}
                    */
                    OptionsAttribute.prototype.getTags = function () {
                        if (arguments.length == 0) {
                            return this._tags;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getTrickleOptionSet'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating whether trickle-ice is supported.
                     </div>
            
            
                    @return {boolean}
                    */
                    OptionsAttribute.prototype.getTrickleOptionSet = function () {
                        if (arguments.length == 0) {
                            for (var _i = 0, _a = this.getTags(); _i < _a.length; _i++) {
                                var tag = _a[_i];
                                if ((fm.icelink.Global.equals(tag.getType(), fm.icelink.sdp.ice.OptionTagType.Trickle))) {
                                    return true;
                                }
                            }
                            return false;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    OptionsAttribute.prototype.setTags = function (value) {
                        if (arguments.length == 1) {
                            this._tags = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-setTrickleOptionSet'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets a value indicating whether trickle-ice is supported.
                     </div>
            
            
                    @param {boolean} value
                    @return {void}
                    */
                    OptionsAttribute.prototype.setTrickleOptionSet = function (value) {
                        if (arguments.length == 1) {
                            if (value) {
                                for (var _i = 0, _a = this.getTags(); _i < _a.length; _i++) {
                                    var tag = _a[_i];
                                    if ((fm.icelink.Global.equals(tag.getType(), fm.icelink.sdp.ice.OptionTagType.Trickle))) {
                                        return;
                                    }
                                }
                                fm.icelink.ArrayExtensions.add(this.getTags(), new fm.icelink.sdp.ice.TrickleIceOptionTag());
                            }
                            else {
                                var item = null;
                                for (var _b = 0, _c = this.getTags(); _b < _c.length; _b++) {
                                    var tag = _c[_b];
                                    if ((fm.icelink.Global.equals(tag.getType(), fm.icelink.sdp.ice.OptionTagType.Trickle))) {
                                        item = tag;
                                    }
                                }
                                fm.icelink.ArrayExtensions.remove(this.getTags(), item);
                            }
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return OptionsAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.OptionsAttribute = OptionsAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The "ice-pwd" attribute conveys the password used by
                 ICE for message integrity.
                 </div>
            
                */
                var PasswordAttribute = /** @class */ (function (_super) {
                    __extends(PasswordAttribute, _super);
                    function PasswordAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            // chained constructor: PasswordAttribute.call(this, fm.icelink.sdp.ice.PasswordAttribute.generatePassword());
                            __arguments = new Array(1);
                            __arguments[0] = fm.icelink.sdp.ice.PasswordAttribute.generatePassword();
                            {
                                var password = __arguments[0];
                                _this = _super.call(this) || this;
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IcePasswordAttribute);
                                if (((password.length < 22) || (password.length > 256))) {
                                    throw new fm.icelink.Exception("password must be at least 22 characters long up to 256 characters.");
                                }
                                _this.setPassword(password);
                            }
                        }
                        else if (__arguments.length == 1) {
                            var password = __arguments[0];
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IcePasswordAttribute);
                            if (((password.length < 22) || (password.length > 256))) {
                                throw new fm.icelink.Exception("password must be at least 22 characters long up to 256 characters.");
                            }
                            _this.setPassword(password);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    PasswordAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.PasswordAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.passwordAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.PasswordAttribute}
                    */
                    PasswordAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.ice.PasswordAttribute(value);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-generatePassword'>&nbsp;</span>**/
                    /**
                     <div>
                     Generates a random password.
                     </div>
            
            
                    @return {string}
                    */
                    PasswordAttribute.generatePassword = function () {
                        if (arguments.length == 0) {
                            return fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    PasswordAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            return this.getPassword();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-getPassword'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the password used by ICE for message integrity.
                     </div>
            
            
                    @return {string}
                    */
                    PasswordAttribute.prototype.getPassword = function () {
                        if (arguments.length == 0) {
                            return this._password;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    PasswordAttribute.prototype.setPassword = function (value) {
                        if (arguments.length == 1) {
                            this._password = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return PasswordAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.PasswordAttribute = PasswordAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 An SDP remote candidate element.
                 </div>
            
                */
                var RemoteCandidate = /** @class */ (function () {
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.remoteCandidate` class.
                     </div>
            
                    @param {number} componentId The ID of the component for which this is a remote candidate.
                    @param {string} connectionAddress The IP address of the remote candidate.
                    @param {number} port The port of the remote candidate.
                    @return {}
                    */
                    function RemoteCandidate(componentId, connectionAddress, port) {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 3) {
                            var componentId_2 = __arguments[0];
                            var connectionAddress_3 = __arguments[1];
                            var port_2 = __arguments[2];
                            //super();
                            this.fmicelinksdpiceRemoteCandidateInit();
                            if ((fm.icelink.Global.equals(connectionAddress_3, null))) {
                                throw new fm.icelink.Exception("connectionAddress cannot be null.");
                            }
                            this.setComponentId(componentId_2);
                            this.setConnectionAddress(connectionAddress_3);
                            this.setPort(port_2);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    RemoteCandidate.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.RemoteCandidate]';
                    };
                    RemoteCandidate.prototype.fmicelinksdpiceRemoteCandidateInit = function () {
                        this._componentId = 0;
                        this._port = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-parse'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates an `fm.icelink.sdp.ice.remoteCandidate` instance from a string.
                     </div>
            
                    @param {string} s The string to parse.
                    @return {fm.icelink.sdp.ice.RemoteCandidate}
                    */
                    RemoteCandidate.parse = function (s) {
                        if (arguments.length == 1) {
                            var strArray = fm.icelink.StringExtensions.split(s, [32]);
                            var componentId = fm.icelink.ParseAssistant.parseIntegerValue(strArray[0]);
                            var connectionAddress = strArray[1];
                            return new fm.icelink.sdp.ice.RemoteCandidate(componentId, connectionAddress, fm.icelink.ParseAssistant.parseIntegerValue(strArray[2]));
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getComponentId'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the ID of the component for which this is a remote candidate.
                     </div>
            
            
                    @return {number}
                    */
                    RemoteCandidate.prototype.getComponentId = function () {
                        if (arguments.length == 0) {
                            return this._componentId;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getConnectionAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the IP address of the remote candidate.
                     </div>
            
            
                    @return {string}
                    */
                    RemoteCandidate.prototype.getConnectionAddress = function () {
                        if (arguments.length == 0) {
                            return this._connectionAddress;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the port of the remote candidate.
                     </div>
            
            
                    @return {number}
                    */
                    RemoteCandidate.prototype.getPort = function () {
                        if (arguments.length == 0) {
                            return this._port;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    RemoteCandidate.prototype.setComponentId = function (value) {
                        if (arguments.length == 1) {
                            this._componentId = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    RemoteCandidate.prototype.setConnectionAddress = function (value) {
                        if (arguments.length == 1) {
                            this._connectionAddress = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    RemoteCandidate.prototype.setPort = function (value) {
                        if (arguments.length == 1) {
                            this._port = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-toString'>&nbsp;</span>**/
                    /**
                     <div>
                     Converts this instance to a string.
                     </div>
            
            
                    @return {string}
                    */
                    RemoteCandidate.prototype.toString = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getComponentId()));
                            builder.append(" ");
                            builder.append(this.getConnectionAddress());
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(this.getPort()));
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return RemoteCandidate;
                }());
                ice.RemoteCandidate = RemoteCandidate;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The attribute contains a connection-address and port for each
                 component.  The ordering of components is irrelevant.  However, a
                 value MUST be present for each component of a media stream.  This
                 attribute MUST be included in an offer by a controlling agent for a
                 media stream that is Completed, and MUST NOT be included in any other
                 case.
                 </div>
            
                */
                var RemoteCandidatesAttribute = /** @class */ (function (_super) {
                    __extends(RemoteCandidatesAttribute, _super);
                    function RemoteCandidatesAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var candidates = __arguments[0];
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceRemoteCandidatesAttribute);
                            if ((fm.icelink.Global.equals(candidates, null))) {
                                throw new fm.icelink.Exception("candidates cannot be null.");
                            }
                            _this.setCandidates(candidates);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceRemoteCandidatesAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    RemoteCandidatesAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.RemoteCandidatesAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.remoteCandidatesAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.RemoteCandidatesAttribute}
                    */
                    RemoteCandidatesAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var array = fm.icelink.StringExtensions.split(value, [32]);
                            var list = new Array();
                            for (var i = 0; (i < array.length); i = (i + 3)) {
                                fm.icelink.ArrayExtensions.add(list, fm.icelink.sdp.ice.RemoteCandidate.parse(fm.icelink.StringExtensions.join(" ", fm.icelink.StringAssistant.subArray(array, i, 3))));
                            }
                            var attribute = new fm.icelink.sdp.ice.RemoteCandidatesAttribute();
                            attribute.setCandidates(fm.icelink.ArrayExtensions.toArray(list));
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    RemoteCandidatesAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var strArray = new Array(this.getCandidates().length);
                            for (var i = 0; (i < this.getCandidates().length); i++) {
                                strArray[i] = this.getCandidates()[i].toString();
                            }
                            return fm.icelink.StringExtensions.join(" ", strArray);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-getCandidates'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the array of remote candidates.
                     </div>
            
            
                    @return {fm.icelink.sdp.ice.RemoteCandidate[]}
                    */
                    RemoteCandidatesAttribute.prototype.getCandidates = function () {
                        if (arguments.length == 0) {
                            return this._candidates;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    RemoteCandidatesAttribute.prototype.setCandidates = function (value) {
                        if (arguments.length == 1) {
                            this._candidates = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return RemoteCandidatesAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.RemoteCandidatesAttribute = RemoteCandidatesAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 Defines valid SDP transport protocols.
                 </div>
            
                */
                var TransportProtocol = /** @class */ (function () {
                    function TransportProtocol() {
                    }
                    TransportProtocol.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.TransportProtocol]';
                    };
                    /**<span id='method-fm.icelink.sdp.ice.TransportProtocol-getTcp'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP transport protocol meaning "tcp".
                     </div>
            
            
                    @return {string}
                    */
                    TransportProtocol.getTcp = function () {
                        if (arguments.length == 0) {
                            return "tcp";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.TransportProtocol-getUdp'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SDP transport protocol meaning "udp".
                     </div>
            
            
                    @return {string}
                    */
                    TransportProtocol.getUdp = function () {
                        if (arguments.length == 0) {
                            return "udp";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return TransportProtocol;
                }());
                ice.TransportProtocol = TransportProtocol;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var ice;
            (function (ice) {
                /**
                 <div>
                 The "ice-ufrag" attribute conveys the username fragment
                 used by ICE for message integrity.
                 </div>
            
                */
                var UfragAttribute = /** @class */ (function (_super) {
                    __extends(UfragAttribute, _super);
                    function UfragAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            // chained constructor: UfragAttribute.call(this, fm.icelink.sdp.ice.UfragAttribute.generateUfrag());
                            __arguments = new Array(1);
                            __arguments[0] = fm.icelink.sdp.ice.UfragAttribute.generateUfrag();
                            {
                                var ufrag = __arguments[0];
                                _this = _super.call(this) || this;
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceUfragAttribute);
                                if (((ufrag.length < 4) || (ufrag.length > 256))) {
                                    throw new fm.icelink.Exception("ufrag must be at least 4 characters long up to 256 characters.");
                                }
                                _this.setUfrag(ufrag);
                            }
                        }
                        else if (__arguments.length == 1) {
                            var ufrag = __arguments[0];
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.IceUfragAttribute);
                            if (((ufrag.length < 4) || (ufrag.length > 256))) {
                                throw new fm.icelink.Exception("ufrag must be at least 4 characters long up to 256 characters.");
                            }
                            _this.setUfrag(ufrag);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    UfragAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.ice.UfragAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.ice.ufragAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.ice.UfragAttribute}
                    */
                    UfragAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.ice.UfragAttribute(value);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-generateUfrag'>&nbsp;</span>**/
                    /**
                     <div>
                     Generates a username fragment.
                     </div>
            
            
                    @return {string}
                    */
                    UfragAttribute.generateUfrag = function () {
                        if (arguments.length == 0) {
                            return fm.icelink.StringExtensions.substring(fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", ""), 0, 8);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    UfragAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            return this.getUfrag();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-getUfrag'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the username fragment used by ICE for message integrity.
                     </div>
            
            
                    @return {string}
                    */
                    UfragAttribute.prototype.getUfrag = function () {
                        if (arguments.length == 0) {
                            return this._ufrag;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    UfragAttribute.prototype.setUfrag = function (value) {
                        if (arguments.length == 1) {
                            this._ufrag = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return UfragAttribute;
                }(fm.icelink.sdp.Attribute));
                ice.UfragAttribute = UfragAttribute;
            })(ice = sdp.ice || (sdp.ice = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/DirectionAttribute.ts" />

/// <reference path="../sdp/DirectionAttribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies that the tools should be started in inactive
             mode.  This is necessary for interactive conferences where
             users can put other users on hold.  No media is sent over an
             inactive media stream.  Note that an RTP-based system SHOULD
             still send RTCP, even if started inactive.  It can be either a
             session or media-level attribute, and it is not dependent on
             charset.
             </div>
        
            */
            var InactiveAttribute = /** @class */ (function (_super) {
                __extends(InactiveAttribute, _super);
                /**<span id='method-fm.icelink.sdp.InactiveAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.inactiveAttribute` class.
                 </div>
        
        
                @return {}
                */
                function InactiveAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.DirectionAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                InactiveAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.InactiveAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.InactiveAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.inactiveAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.InactiveAttribute}
                */
                InactiveAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.InactiveAttribute();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.InactiveAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                InactiveAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.InactiveAttribute-getStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stream direction.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                InactiveAttribute.prototype.getStreamDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.StreamDirection.Inactive;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return InactiveAttribute;
            }(fm.icelink.sdp.DirectionAttribute));
            sdp.InactiveAttribute = InactiveAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Like the cat attribute, this is to assist identifying wanted
             sessions at the receiver.  This allows a receiver to select
             interesting session based on keywords describing the purpose of
             the session; there is no central registry of keywords.  It is a
             session-level attribute.  It is a charset-dependent attribute,
             meaning that its value should be interpreted in the charset
             specified for the session description if one is specified, or
             by default in ISO 10646/UTF-8.
             </div>
        
            */
            var KeywordsAttribute = /** @class */ (function (_super) {
                __extends(KeywordsAttribute, _super);
                /**<span id='method-fm.icelink.sdp.KeywordsAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.keywordsAttribute` class.
                 </div>
        
                @param {string} keywords The keywords describing the purpose of the session.
                @return {}
                */
                function KeywordsAttribute(keywords) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var keywords_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.KeywordsAttribute);
                        if ((fm.icelink.Global.equals(keywords_1, null))) {
                            throw new fm.icelink.Exception("keywords cannot be null.");
                        }
                        _this.setKeywords(keywords_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                KeywordsAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.KeywordsAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.KeywordsAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.keywordsAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.KeywordsAttribute}
                */
                KeywordsAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.KeywordsAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.KeywordsAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                KeywordsAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getKeywords();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.KeywordsAttribute-getKeywords'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the keywords describing the purpose of the session.
                 </div>
        
        
                @return {string}
                */
                KeywordsAttribute.prototype.getKeywords = function () {
                    if (arguments.length == 0) {
                        return this._keywords;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                KeywordsAttribute.prototype.setKeywords = function (value) {
                    if (arguments.length == 1) {
                        this._keywords = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return KeywordsAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.KeywordsAttribute = KeywordsAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This can be a session-level attribute or a media-level
             attribute.  As a session-level attribute, it specifies the
             default language for the session being described.  As a media-
             level attribute, it specifies the language for that media,
             overriding any session-level language specified.  Multiple lang
             attributes can be provided either at session or media level if
             the session description or media use multiple languages, in
             which case the order of the attributes indicates the order of
             importance of the various languages in the session or media
             from most important to least important.
             </div>
        
            */
            var LanguageAttribute = /** @class */ (function (_super) {
                __extends(LanguageAttribute, _super);
                /**<span id='method-fm.icelink.sdp.LanguageAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.languageAttribute` class.
                 </div>
        
                @param {string} languageTag The default language for the session being described
                 (if used as a session-level attribute) or the language for a media
                 stream (if used as a media-level attribute).
                @return {}
                */
                function LanguageAttribute(languageTag) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var languageTag_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.LanguageAttribute);
                        if ((fm.icelink.Global.equals(languageTag_1, null))) {
                            throw new fm.icelink.Exception("languageTag cannot be null.");
                        }
                        _this.setLanguageTag(languageTag_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                LanguageAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.LanguageAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.LanguageAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.languageAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.LanguageAttribute}
                */
                LanguageAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.LanguageAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.LanguageAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                LanguageAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getLanguageTag();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.LanguageAttribute-getLanguageTag'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the default language for the session being described
                 (if used as a session-level attribute) or the language for a media
                 stream (if used as a media-level attribute).
                 </div>
        
        
                @return {string}
                */
                LanguageAttribute.prototype.getLanguageTag = function () {
                    if (arguments.length == 0) {
                        return this._languageTag;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                LanguageAttribute.prototype.setLanguageTag = function (value) {
                    if (arguments.length == 1) {
                        this._languageTag = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return LanguageAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.LanguageAttribute = LanguageAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives the maximum amount of media that can be encapsulated
             in each packet, expressed as time in milliseconds.  The time
             SHALL be calculated as the sum of the time the media present in
             the packet represents.  For frame-based codecs, the time SHOULD
             be an integer multiple of the frame size.  This attribute is
             probably only meaningful for audio data, but may be used with
             other media types if it makes sense.  It is a media-level
             attribute, and it is not dependent on charset.  Note that this
             attribute was introduced after RFC 2327, and non-updated
             implementations will ignore this attribute.
             </div>
        
            */
            var MaxPacketTimeAttribute = /** @class */ (function (_super) {
                __extends(MaxPacketTimeAttribute, _super);
                function MaxPacketTimeAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var maxPacketTime = __arguments[0];
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpMaxPacketTimeAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.MaxPacketTimeAttribute);
                        _this.setMaxPacketTime(maxPacketTime);
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpMaxPacketTimeAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.MaxPacketTimeAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                MaxPacketTimeAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MaxPacketTimeAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                MaxPacketTimeAttribute.prototype.fmicelinksdpMaxPacketTimeAttributeInit = function () {
                    this._maxPacketTime = 0;
                };
                /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.maxPacketTimeAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.MaxPacketTimeAttribute}
                */
                MaxPacketTimeAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var attribute = new fm.icelink.sdp.MaxPacketTimeAttribute();
                        attribute.setMaxPacketTime(fm.icelink.ParseAssistant.parseIntegerValue(value));
                        return attribute;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                MaxPacketTimeAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.IntExtensions.toString(this.getMaxPacketTime());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-getMaxPacketTime'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the maximum amount of media that can be encapsulated,
                 in each packet, expressed as time in milliseconds.
                 </div>
        
        
                @return {number}
                */
                MaxPacketTimeAttribute.prototype.getMaxPacketTime = function () {
                    if (arguments.length == 0) {
                        return this._maxPacketTime;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MaxPacketTimeAttribute.prototype.setMaxPacketTime = function (value) {
                    if (arguments.length == 1) {
                        this._maxPacketTime = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MaxPacketTimeAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.MaxPacketTimeAttribute = MaxPacketTimeAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP media element.
             </div>
        
            */
            var Media = /** @class */ (function () {
                function Media() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 3) {
                        var mediaType = __arguments[0];
                        var transportPort = __arguments[1];
                        var transportProtocol = __arguments[2];
                        // chained constructor: Media.call(this, mediaType, transportPort, transportProtocol, null);
                        __arguments = new Array(4);
                        __arguments[0] = mediaType;
                        __arguments[1] = transportPort;
                        __arguments[2] = transportProtocol;
                        __arguments[3] = null;
                        {
                            var mediaType_1 = __arguments[0];
                            var transportPort_1 = __arguments[1];
                            var transportProtocol_1 = __arguments[2];
                            var formatDescription = __arguments[3];
                            //super();
                            this.fmicelinksdpMediaInit();
                            if ((fm.icelink.Global.equals(mediaType_1, null))) {
                                throw new fm.icelink.Exception("mediaType cannot be null.");
                            }
                            if ((fm.icelink.Global.equals(transportProtocol_1, null))) {
                                throw new fm.icelink.Exception("transportProtocol cannot be null.");
                            }
                            this.setMediaType(mediaType_1);
                            this.setTransportPort(transportPort_1);
                            this.setNumberOfPorts(fm.icelink.sdp.Media.fm_icelink_sdp_Media__defaultNumberOfPorts);
                            this.setTransportProtocol(transportProtocol_1);
                            this.setFormatDescription(formatDescription);
                        }
                    }
                    else if (__arguments.length == 0) {
                        //super();
                        this.fmicelinksdpMediaInit();
                    }
                    else if (__arguments.length == 4) {
                        var mediaType = __arguments[0];
                        var transportPort = __arguments[1];
                        var transportProtocol = __arguments[2];
                        var formatDescription = __arguments[3];
                        //super();
                        this.fmicelinksdpMediaInit();
                        if ((fm.icelink.Global.equals(mediaType, null))) {
                            throw new fm.icelink.Exception("mediaType cannot be null.");
                        }
                        if ((fm.icelink.Global.equals(transportProtocol, null))) {
                            throw new fm.icelink.Exception("transportProtocol cannot be null.");
                        }
                        this.setMediaType(mediaType);
                        this.setTransportPort(transportPort);
                        this.setNumberOfPorts(fm.icelink.sdp.Media.fm_icelink_sdp_Media__defaultNumberOfPorts);
                        this.setTransportProtocol(transportProtocol);
                        this.setFormatDescription(formatDescription);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Media.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Media]';
                };
                Media.prototype.fmicelinksdpMediaInit = function () {
                    this._numberOfPorts = 0;
                    this._transportPort = 0;
                };
                /**<span id='method-fm.icelink.sdp.Media-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.media` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Media}
                */
                Media.parse = function (s) {
                    if (arguments.length == 1) {
                        var media = void 0;
                        s = s.substring(2);
                        var array = fm.icelink.StringExtensions.split(s, [32]);
                        var mediaType = array[0];
                        var strArray2 = fm.icelink.StringExtensions.split(array[1], [47]);
                        var transportPort = fm.icelink.ParseAssistant.parseIntegerValue(strArray2[0]);
                        var transportProtocol = array[2];
                        var formatDescription = fm.icelink.StringExtensions.join(" ", fm.icelink.StringAssistant.subArray(array, 3));
                        if ((fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.UdpMedia.getUdpTransportProtocol()))) {
                            media = new fm.icelink.sdp.UdpMedia(mediaType, transportPort, formatDescription);
                        }
                        else {
                            if ((((((fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getRtpAvpTransportProtocol())) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getRtpSavpTransportProtocol()))) || ((fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getRtpAvpfTransportProtocol())) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getRtpSavpfTransportProtocol())))) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpTransportProtocol()))) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpfTransportProtocol())))) {
                                var rtpPayloadTypeNumbers = new Array(0);
                                if (!fm.icelink.StringExtensions.isNullOrEmpty(formatDescription)) {
                                    var strArray3 = fm.icelink.StringExtensions.split(formatDescription, [32]);
                                    rtpPayloadTypeNumbers = new Array(strArray3.length);
                                    for (var i = 0; (i < rtpPayloadTypeNumbers.length); i++) {
                                        rtpPayloadTypeNumbers[i] = fm.icelink.ParseAssistant.parseIntegerValue(strArray3[i]);
                                    }
                                }
                                media = new fm.icelink.sdp.rtp.Media(mediaType, transportPort, transportProtocol, rtpPayloadTypeNumbers);
                            }
                            else {
                                if (((((fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.sctp.Media.getDtlsSctpTransportProtocol())) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.sctp.Media.getSctpDtlsTransportProtocol()))) || ((fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.sctp.Media.getSctpTransportProtocol())) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.sctp.Media.getTcpDtlsSctpTransportProtocol())))) || (fm.icelink.Global.equals(transportProtocol, fm.icelink.sdp.sctp.Media.getUdpDtlsSctpTransportProtocol())))) {
                                    media = new fm.icelink.sdp.sctp.Media(mediaType, transportPort, transportProtocol, formatDescription);
                                }
                                else {
                                    media = new fm.icelink.sdp.Media(mediaType, transportPort, transportProtocol, formatDescription);
                                }
                            }
                        }
                        if ((fm.icelink.Global.equals(strArray2.length, 2))) {
                            media.setNumberOfPorts(fm.icelink.ParseAssistant.parseShortValue(strArray2[1]));
                        }
                        return media;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-getFormatDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the format description.
                 </div>
        
        
                @return {string}
                */
                Media.prototype.getFormatDescription = function () {
                    if (arguments.length == 0) {
                        return this._formatDescription;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-getMediaType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the media type. See `fm.icelink.sdp.media.mediaType` for possible values.
                 </div>
        
        
                @return {string}
                */
                Media.prototype.getMediaType = function () {
                    if (arguments.length == 0) {
                        return this._mediaType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-getNumberOfPorts'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the number of ports.
                 </div>
        
        
                @return {number}
                */
                Media.prototype.getNumberOfPorts = function () {
                    if (arguments.length == 0) {
                        return this._numberOfPorts;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-getTransportPort'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the transport port.
                 </div>
        
        
                @return {number}
                */
                Media.prototype.getTransportPort = function () {
                    if (arguments.length == 0) {
                        return this._transportPort;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-getTransportProtocol'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the transport protocol.
                 </div>
        
        
                @return {string}
                */
                Media.prototype.getTransportProtocol = function () {
                    if (arguments.length == 0) {
                        return this._transportProtocol;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-setFormatDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the format description.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Media.prototype.setFormatDescription = function (value) {
                    if (arguments.length == 1) {
                        this._formatDescription = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-setMediaType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the media type. See `fm.icelink.sdp.media.mediaType` for possible values.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Media.prototype.setMediaType = function (value) {
                    if (arguments.length == 1) {
                        this._mediaType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-setNumberOfPorts'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the number of ports.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Media.prototype.setNumberOfPorts = function (value) {
                    if (arguments.length == 1) {
                        this._numberOfPorts = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-setTransportPort'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the transport port.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Media.prototype.setTransportPort = function (value) {
                    if (arguments.length == 1) {
                        this._transportPort = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-setTransportProtocol'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the transport protocol.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Media.prototype.setTransportProtocol = function (value) {
                    if (arguments.length == 1) {
                        this._transportProtocol = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Media-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Media.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("m=");
                        builder.append(this.getMediaType());
                        builder.append(" ");
                        builder.append(fm.icelink.IntExtensions.toString(this.getTransportPort()));
                        if ((this.getNumberOfPorts() > 1)) {
                            builder.append("/");
                            builder.append(fm.icelink.IntExtensions.toString(this.getNumberOfPorts()));
                        }
                        builder.append(" ");
                        builder.append(this.getTransportProtocol());
                        if ((!fm.icelink.Global.equals(this.getFormatDescription(), null))) {
                            builder.append(" ");
                            builder.append(this.getFormatDescription());
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /** @internal */
                Media.fmicelinksdpMediaInitialize = function () {
                    if (!fm.icelink.sdp.Media.__fmicelinksdpMediaInitialized) {
                        Media.fm_icelink_sdp_Media__defaultNumberOfPorts = 0;
                        fm.icelink.sdp.Media.fm_icelink_sdp_Media__defaultNumberOfPorts = 1;
                    }
                    fm.icelink.sdp.Media.__fmicelinksdpMediaInitialized = true;
                };
                /** @internal */
                Media.__fmicelinksdpMediaInitialized = false;
                return Media;
            }());
            sdp.Media = Media;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP media description element.
             </div>
        
            */
            var MediaDescription = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.MediaDescription-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.mediaDescription` class.
                 </div>
        
                @param {fm.icelink.sdp.Media} media The media name and transport address.
                @return {}
                */
                function MediaDescription(media) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var media_1 = __arguments[0];
                        //super();
                        this.__bandwidths = new Array();
                        this.__mediaAttributes = new fm.icelink.sdp.AttributeCollection();
                        this.__orphanedAttributes = new Array();
                        if ((fm.icelink.Global.equals(media_1, null))) {
                            throw new fm.icelink.Exception("media cannot be null.");
                        }
                        this.setMedia(media_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                MediaDescription.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MediaDescription]';
                };
                /**
                @internal
        
                */
                MediaDescription.getCryptoAttributesFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attributeArray = null;
                        var _var0 = new fm.icelink.Holder(attributeArray);
                        var _var1 = attributes.tryGetAttributes(fm.icelink.sdp.AttributeType.CryptoAttribute, _var0);
                        attributeArray = _var0.getValue();
                        if (_var1) {
                            var attributeArray2 = new Array(attributeArray.length);
                            var index = 0;
                            for (var _i = 0, attributeArray_1 = attributeArray; _i < attributeArray_1.length; _i++) {
                                var attribute = attributeArray_1[_i];
                                attributeArray2[index] = attribute;
                                index++;
                            }
                            return attributeArray2;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getFingerprintAttributeFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.IceFingerprintAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getIceOptionAttributesFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attributeArray = null;
                        var _var0 = new fm.icelink.Holder(attributeArray);
                        var _var1 = attributes.tryGetAttributes(fm.icelink.sdp.AttributeType.IceOptionsAttribute, _var0);
                        attributeArray = _var0.getValue();
                        if (_var1) {
                            return attributeArray;
                        }
                        return new Array(0);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getIcePasswordAttributeFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.IcePasswordAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getIceUfragAttributeFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.IceUfragAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getQualityAttributeFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.QualityAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getRtcpMultiplexingSupportFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.RtcpMuxAttribute, _var0);
                        attribute = _var0.getValue();
                        var _var2 = new fm.icelink.Holder(attribute);
                        var _var3 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.RtcpAttribute, _var2);
                        attribute = _var2.getValue();
                        return (_var1 || !_var3);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getRtpExtMapAttributesFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attributeArray = null;
                        var _var0 = new fm.icelink.Holder(attributeArray);
                        var _var1 = attributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpExtMapAttribute, _var0);
                        attributeArray = _var0.getValue();
                        if (_var1) {
                            return attributeArray;
                        }
                        return new Array(0);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getSetupAttributeFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.SetupAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getStreamDirectionFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = attributes.tryGetAttribute(fm.icelink.sdp.AttributeType.DirectionAttribute, _var0);
                        attribute = _var0.getValue();
                        if (((!fm.icelink.Global.equals(attributes, null)) && _var1)) {
                            return attribute.getStreamDirection();
                        }
                        return fm.icelink.StreamDirection.Unset;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.getSupportsIceFromCollection = function (attributes) {
                    if (arguments.length == 1) {
                        return ((!fm.icelink.Global.equals(fm.icelink.sdp.MediaDescription.getIceUfragAttributeFromCollection(attributes), null)) && (!fm.icelink.Global.equals(fm.icelink.sdp.MediaDescription.getIcePasswordAttributeFromCollection(attributes), null)));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.mediaDescription` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.MediaDescription}
                */
                MediaDescription.parse = function (s) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.sdp.Utility.splitAndClean(s);
                        if ((!fm.icelink.Global.equals(strArray[0].charCodeAt(0), 109))) {
                            return null;
                        }
                        var description = new fm.icelink.sdp.MediaDescription(fm.icelink.sdp.Media.parse(strArray[0]));
                        var dictionary = {};
                        var dictionary2 = {};
                        var dictionary3 = {};
                        for (var i = 1; (i < strArray.length); i++) {
                            var str = strArray[i];
                            if ((fm.icelink.Global.equals(str.charCodeAt(0), 97))) {
                                var str2 = void 0;
                                var attribute = fm.icelink.sdp.Attribute.parse(str);
                                if (((!fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute)) && (!fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.FormatParametersAttribute)))) {
                                    description.addMediaAttribute(attribute);
                                    if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtpMapAttribute))) {
                                        var attribute2 = attribute;
                                        str2 = fm.icelink.IntExtensions.toString(attribute2.getPayloadType());
                                        dictionary2[str2] = attribute2;
                                        var attribute3 = null;
                                        var list = null;
                                        var _var0 = new fm.icelink.Holder(attribute3);
                                        var _var1 = fm.icelink.HashExtensions.tryGetValue(dictionary, str2, _var0);
                                        attribute3 = _var0.getValue();
                                        if (_var1) {
                                            attribute2.setRelatedFormatParametersAttribute(attribute3);
                                        }
                                        var _var2 = new fm.icelink.Holder(list);
                                        var _var3 = fm.icelink.HashExtensions.tryGetValue(dictionary3, str2, _var2);
                                        list = _var2.getValue();
                                        if (_var3) {
                                            attribute2.resetRtcpFeedbackAttributes(fm.icelink.ArrayExtensions.toArray(list));
                                        }
                                    }
                                }
                                else {
                                    var attribute5 = void 0;
                                    if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute))) {
                                        var item = attribute;
                                        str2 = fm.icelink.IntExtensions.toString(item.getPayloadType());
                                        var list2 = null;
                                        var _var4 = new fm.icelink.Holder(list2);
                                        var _var5 = fm.icelink.HashExtensions.tryGetValue(dictionary3, str2, _var4);
                                        list2 = _var4.getValue();
                                        if (!_var5) {
                                            list2 = new Array();
                                        }
                                        fm.icelink.ArrayExtensions.add(list2, item);
                                        dictionary3[str2] = list2;
                                        if ((fm.icelink.Global.equals(str2, "-1"))) {
                                            for (var _i = 0, _a = fm.icelink.HashExtensions.getKeys(dictionary2); _i < _a.length; _i++) {
                                                var str3 = _a[_i];
                                                dictionary2[str3].addRelatedRtcpFeedbackAttribute(item);
                                            }
                                        }
                                        else {
                                            attribute5 = null;
                                            var _var6 = new fm.icelink.Holder(attribute5);
                                            var _var7 = fm.icelink.HashExtensions.tryGetValue(dictionary2, str2, _var6);
                                            attribute5 = _var6.getValue();
                                            if (_var7) {
                                                attribute5.resetRtcpFeedbackAttributes(fm.icelink.ArrayExtensions.toArray(list2));
                                            }
                                        }
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.FormatParametersAttribute))) {
                                            var attribute6 = attribute;
                                            str2 = fm.icelink.IntExtensions.toString(attribute6.getFormat());
                                            dictionary[str2] = attribute6;
                                            attribute5 = null;
                                            var _var8 = new fm.icelink.Holder(attribute5);
                                            var _var9 = fm.icelink.HashExtensions.tryGetValue(dictionary2, str2, _var8);
                                            attribute5 = _var8.getValue();
                                            if (_var9) {
                                                attribute5.setRelatedFormatParametersAttribute(attribute6);
                                            }
                                        }
                                    }
                                }
                            }
                            if ((fm.icelink.Global.equals(str.charCodeAt(0), 105))) {
                                description.setMediaTitle(str.substring(2));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str.charCodeAt(0), 99))) {
                                    description.setConnectionData(fm.icelink.sdp.ConnectionData.parse(str));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str.charCodeAt(0), 98))) {
                                        description.addBandwidth(fm.icelink.sdp.Bandwidth.parse(str));
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str.charCodeAt(0), 107))) {
                                            description.setEncryptionKey(fm.icelink.sdp.EncryptionKey.parse(str));
                                        }
                                    }
                                }
                            }
                        }
                        return description;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-addBandwidth'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a proposed bandwidth.
                 </div>
        
                @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to add.
                @return {void}
                */
                MediaDescription.prototype.addBandwidth = function (bandwidth) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__bandwidths, bandwidth);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-addMediaAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a media-level attribute.
                 </div>
        
                @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
                @return {void}
                */
                MediaDescription.prototype.addMediaAttribute = function (attribute) {
                    if (arguments.length == 1) {
                        var attribute3 = void 0;
                        var type = new icelink.Type(attribute.getTypeString());
                        var flag = fm.icelink.sdp.Attribute.isMediaLevel(type);
                        var flag2 = fm.icelink.sdp.Attribute.isSessionLevel(type);
                        if (!(flag || flag2)) {
                            throw new fm.icelink.Exception("Attribute is not registered.");
                        }
                        if (!(!flag2 || flag)) {
                            throw new fm.icelink.Exception("Attribute is session-only.");
                        }
                        if (((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute)) || (fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.FormatParametersAttribute)))) {
                            var payloadType = -1;
                            var attribute2 = null;
                            attribute3 = null;
                            if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute))) {
                                attribute2 = attribute;
                                payloadType = attribute2.getPayloadType();
                            }
                            else {
                                attribute3 = attribute;
                                payloadType = attribute3.getFormat();
                            }
                            var flag3 = false;
                            if ((payloadType > -1)) {
                                var rtpMapAttributes = this.getRtpMapAttributes();
                                for (var _i = 0, rtpMapAttributes_1 = rtpMapAttributes; _i < rtpMapAttributes_1.length; _i++) {
                                    var attribute4 = rtpMapAttributes_1[_i];
                                    var attribute5 = attribute4;
                                    if ((fm.icelink.Global.equals(payloadType, attribute5.getPayloadType()))) {
                                        flag3 = true;
                                        if ((!fm.icelink.Global.equals(attribute2, null))) {
                                            attribute5.addRelatedRtcpFeedbackAttribute(attribute2);
                                        }
                                        if ((!fm.icelink.Global.equals(attribute3, null))) {
                                            attribute5.setRelatedFormatParametersAttribute(attribute3);
                                        }
                                    }
                                }
                            }
                            if (!flag3) {
                                fm.icelink.ArrayExtensions.add(this.__orphanedAttributes, attribute);
                            }
                        }
                        else {
                            this.__mediaAttributes.addAttribute(attribute);
                        }
                        if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtpMapAttribute))) {
                            var attribute6 = attribute;
                            var num2 = attribute6.getPayloadType();
                            var attributeArray2 = fm.icelink.ArrayExtensions.toArray(this.__orphanedAttributes);
                            for (var _a = 0, attributeArray2_1 = attributeArray2; _a < attributeArray2_1.length; _a++) {
                                var attribute7 = attributeArray2_1[_a];
                                if ((fm.icelink.Global.equals(attribute7.getAttributeType(), fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute))) {
                                    var attribute8 = attribute7;
                                    if ((fm.icelink.Global.equals(attribute8.getPayloadType(), num2))) {
                                        attribute6.addRelatedRtcpFeedbackAttribute(attribute8);
                                        fm.icelink.ArrayExtensions.remove(this.__orphanedAttributes, attribute7);
                                    }
                                }
                                else {
                                    if ((fm.icelink.Global.equals(attribute7.getAttributeType(), fm.icelink.sdp.AttributeType.FormatParametersAttribute))) {
                                        attribute3 = attribute7;
                                        if ((fm.icelink.Global.equals(attribute3.getFormat(), num2))) {
                                            attribute6.setRelatedFormatParametersAttribute(attribute3);
                                            fm.icelink.ArrayExtensions.remove(this.__orphanedAttributes, attribute7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getBandwidths'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of proposed bandwidths to be used by the media.
                 </div>
        
        
                @return {fm.icelink.sdp.Bandwidth[]}
                */
                MediaDescription.prototype.getBandwidths = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__bandwidths);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getCandidateAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Ice Candidate attributes associated with this media description.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                MediaDescription.prototype.getCandidateAttributes = function () {
                    if (arguments.length == 0) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.IceCandidateAttribute, _var0);
                        attributes = _var0.getValue();
                        if (_var1) {
                            return attributes;
                        }
                        return new Array(0);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getCcmFirFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP "ccm fir" feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getCcmFirFeedbackAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        return this.getRtcpFeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getCcm(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getFir());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getConnectionData'>&nbsp;</span>**/
                /**
                 <div>
                 Gets media-level connection data.
                 </div>
        
        
                @return {fm.icelink.sdp.ConnectionData}
                */
                MediaDescription.prototype.getConnectionData = function () {
                    if (arguments.length == 0) {
                        return this._connectionData;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getCryptoAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Gets CryptoAttributes associated with this MediaDescription.
                 </div>
        
        
                @return {fm.icelink.sdp.CryptoAttribute[]}
                */
                MediaDescription.prototype.getCryptoAttributes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getCryptoAttributesFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the media-level encryption key.
                 </div>
        
        
                @return {fm.icelink.sdp.EncryptionKey}
                */
                MediaDescription.prototype.getEncryptionKey = function () {
                    if (arguments.length == 0) {
                        return this._encryptionKey;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getFingerprintAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the Fingerprint Attribute from this MediaDescription
                 </div>
        
        
                @return {fm.icelink.sdp.ice.FingerprintAttribute}
                */
                MediaDescription.prototype.getFingerprintAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getFingerprintAttributeFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getFormatParametersAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the format parameters attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.FormatParametersAttribute}
                */
                MediaDescription.prototype.getFormatParametersAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpMapAttribute, _var0);
                        attributes = _var0.getValue();
                        if ((_var1 && (!fm.icelink.Global.equals(attributes, null)))) {
                            for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                                var attribute = attributes_1[_i];
                                var attribute2 = attribute;
                                if ((fm.icelink.Global.equals(attribute2.getPayloadType(), payloadType))) {
                                    return attribute2.getRelatedFormatParametersAttribute();
                                }
                            }
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIceOptionAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Ice Options attributes associated with this media description.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                MediaDescription.prototype.getIceOptionAttributes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIceOptionAttributesFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIcePasswordAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the IcePasswordAttribute associated with this MediaDescription
                 </div>
        
        
                @return {fm.icelink.sdp.ice.PasswordAttribute}
                */
                MediaDescription.prototype.getIcePasswordAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIcePasswordAttributeFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIceUfragAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the IceUfragAttribute associated with this MediaDescription
                 </div>
        
        
                @return {fm.icelink.sdp.ice.UfragAttribute}
                */
                MediaDescription.prototype.getIceUfragAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIceUfragAttributeFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIsApplication'>&nbsp;</span>**/
                /**
                 <div>
                 Gets whether this media description represents an application stream
                 (media type == "application").
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getIsApplication = function () {
                    if (arguments.length == 0) {
                        return this.isMediaType(fm.icelink.sdp.MediaType.getApplication());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIsAudio'>&nbsp;</span>**/
                /**
                 <div>
                 Gets whether this media description represents an audio stream
                 (media type == "audio").
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getIsAudio = function () {
                    if (arguments.length == 0) {
                        return this.isMediaType(fm.icelink.sdp.MediaType.getAudio());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIsMessage'>&nbsp;</span>**/
                /**
                 <div>
                 Gets whether this media description represents a message stream
                 (media type == "message").
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getIsMessage = function () {
                    if (arguments.length == 0) {
                        return this.isMediaType(fm.icelink.sdp.MediaType.getMessage());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIsText'>&nbsp;</span>**/
                /**
                 <div>
                 Gets whether this media description represents a text stream
                 (media type == "text").
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getIsText = function () {
                    if (arguments.length == 0) {
                        return this.isMediaType(fm.icelink.sdp.MediaType.getText());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getIsVideo'>&nbsp;</span>**/
                /**
                 <div>
                 Gets whether this media description represents a video stream
                 (media type == "video").
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getIsVideo = function () {
                    if (arguments.length == 0) {
                        return this.isMediaType(fm.icelink.sdp.MediaType.getVideo());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getMaxPacketTimeAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains the maximum packet time attribute.
                 </div>
        
        
                @return {fm.icelink.sdp.MaxPacketTimeAttribute}
                */
                MediaDescription.prototype.getMaxPacketTimeAttribute = function () {
                    if (arguments.length == 0) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = this.__mediaAttributes.tryGetAttribute(fm.icelink.sdp.AttributeType.MaxPacketTimeAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getMedia'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the media name and transport address.
                 </div>
        
        
                @return {fm.icelink.sdp.Media}
                */
                MediaDescription.prototype.getMedia = function () {
                    if (arguments.length == 0) {
                        return this._media;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getMediaAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of media-level attributes.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                MediaDescription.prototype.getMediaAttributes = function () {
                    if (arguments.length == 0) {
                        var list = new Array();
                        for (var _i = 0, _a = this.__mediaAttributes.toArray(); _i < _a.length; _i++) {
                            var attribute = _a[_i];
                            fm.icelink.ArrayExtensions.add(list, attribute);
                            if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtpMapAttribute))) {
                                var attribute2 = attribute;
                                var relatedRtcpFeedbackAttributes = attribute2.getRelatedRtcpFeedbackAttributes();
                                if ((!fm.icelink.Global.equals(relatedRtcpFeedbackAttributes, null))) {
                                    for (var _b = 0, relatedRtcpFeedbackAttributes_1 = relatedRtcpFeedbackAttributes; _b < relatedRtcpFeedbackAttributes_1.length; _b++) {
                                        var attribute3 = relatedRtcpFeedbackAttributes_1[_b];
                                        fm.icelink.ArrayExtensions.add(list, attribute3);
                                    }
                                }
                                var relatedFormatParametersAttribute = attribute2.getRelatedFormatParametersAttribute();
                                if ((!fm.icelink.Global.equals(relatedFormatParametersAttribute, null))) {
                                    fm.icelink.ArrayExtensions.add(list, relatedFormatParametersAttribute);
                                }
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getMediaTitle'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the media title.
                 </div>
        
        
                @return {string}
                */
                MediaDescription.prototype.getMediaTitle = function () {
                    if (arguments.length == 0) {
                        return this._mediaTitle;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getNackFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP "nack" feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getNackFeedbackAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        return this.getRtcpFeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), null);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getNackPliFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP "nack pli" feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getNackPliFeedbackAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        return this.getRtcpFeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getPli());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getNackRpsiFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP "nack rpsi" feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getNackRpsiFeedbackAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        return this.getRtcpFeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getRpsi());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getNackSliFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP "nack sli" feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getNackSliFeedbackAttribute = function (payloadType) {
                    if (arguments.length == 1) {
                        return this.getRtcpFeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getSli());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getPacketTimeAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains the packet time attribute.
                 </div>
        
        
                @return {fm.icelink.sdp.PacketTimeAttribute}
                */
                MediaDescription.prototype.getPacketTimeAttribute = function () {
                    if (arguments.length == 0) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = this.__mediaAttributes.tryGetAttribute(fm.icelink.sdp.AttributeType.PacketTimeAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getQualityAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the QualityAttribute associated with this MediaDescription.
                 </div>
        
        
                @return {fm.icelink.sdp.QualityAttribute}
                */
                MediaDescription.prototype.getQualityAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getQualityAttributeFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets Rtcp Attributes associated with this media description.
                 </div>
        
        
                @return {fm.icelink.sdp.rtcp.Attribute}
                */
                MediaDescription.prototype.getRtcpAttribute = function () {
                    if (arguments.length == 0) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = this.__mediaAttributes.tryGetAttribute(fm.icelink.sdp.AttributeType.RtcpAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpFeedbackAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the RTCP feedback attribute for the given payload type.
                 </div>
        
                @param {number} payloadType The payload type.
                @param {string} type The type.
                @param {string} subType The sub-type.
                @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                */
                MediaDescription.prototype.getRtcpFeedbackAttribute = function (payloadType, type, subType) {
                    if (arguments.length == 3) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpMapAttribute, _var0);
                        attributes = _var0.getValue();
                        if (_var1) {
                            for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {
                                var attribute = attributes_2[_i];
                                var attribute2 = attribute;
                                if ((fm.icelink.Global.equals(attribute2.getPayloadType(), payloadType))) {
                                    return attribute2.getRelatedRtcpFeedbackAttribute(payloadType, type, subType);
                                }
                            }
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpMultiplexingSupported'>&nbsp;</span>**/
                /**
                 <div>
                 Gets a value indicating support for RTCP Multiplexing.
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getRtcpMultiplexingSupported = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getRtcpMultiplexingSupportFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpExtMapAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains the RTP ext-map attributes.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                MediaDescription.prototype.getRtpExtMapAttributes = function () {
                    if (arguments.length == 0) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpExtMapAttribute, _var0);
                        attributes = _var0.getValue();
                        return ((fm.icelink.Global.equals(attributes, null)) ? new Array(0) : attributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                MediaDescription.prototype.getRtpMapAttribute = function () {
                    if (arguments.length == 4) {
                        var formatName = arguments[0];
                        var clockRate = arguments[1];
                        var formatParameters = arguments[2];
                        var rtpMapAttributeIndex = arguments[3];
                        rtpMapAttributeIndex.setValue(-1);
                        var rtpMapAttributes = this.getRtpMapAttributes();
                        var attribute = null;
                        for (var i = 0; (i < rtpMapAttributes.length); i++) {
                            attribute = rtpMapAttributes[i];
                            if ((((fm.icelink.Global.equals(attribute.getFormatName(), formatName)) && (fm.icelink.Global.equals(attribute.getClockRate(), clockRate))) && (fm.icelink.Global.equals(attribute.getFormatParameters(), formatParameters)))) {
                                rtpMapAttributeIndex.setValue(i);
                                return attribute;
                            }
                        }
                        return null;
                    }
                    else if (arguments.length == 3) {
                        var formatName = arguments[0];
                        var clockRate = arguments[1];
                        var formatParameters = arguments[2];
                        var rtpMapAttributeIndex = -1;
                        var _var0 = new fm.icelink.Holder(rtpMapAttributeIndex);
                        var _var1 = this.getRtpMapAttribute(formatName, clockRate, formatParameters, _var0);
                        rtpMapAttributeIndex = _var0.getValue();
                        return _var1;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                MediaDescription.prototype.getRtpMapAttributes = function () {
                    if (arguments.length == 0) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpMapAttribute, _var0);
                        attributes = _var0.getValue();
                        return ((fm.icelink.Global.equals(attributes, null)) ? new Array(0) : attributes);
                    }
                    else if (arguments.length == 4) {
                        var formatName = arguments[0];
                        var clockRate = arguments[1];
                        var formatParameters = arguments[2];
                        var rtpMapAttributeIndices = arguments[3];
                        var num = void 0;
                        var rtpMapAttributes = this.getRtpMapAttributes();
                        var item = null;
                        var list = new Array();
                        var list2 = new Array();
                        for (num = 0; (num < rtpMapAttributes.length); num++) {
                            item = rtpMapAttributes[num];
                            if ((((fm.icelink.Global.equals(item.getFormatName(), formatName)) && (fm.icelink.Global.equals(item.getClockRate(), clockRate))) && (fm.icelink.Global.equals(item.getFormatParameters(), formatParameters)))) {
                                fm.icelink.ArrayExtensions.add(list, item);
                                fm.icelink.ArrayExtensions.add(list2, num);
                            }
                        }
                        if ((fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(list2), 0))) {
                            rtpMapAttributeIndices.setValue(new Array(0));
                            return new Array(0);
                        }
                        rtpMapAttributeIndices.setValue(new Array(fm.icelink.ArrayExtensions.getCount(list2)));
                        for (num = 0; (num < fm.icelink.ArrayExtensions.getCount(list2)); num++) {
                            rtpMapAttributeIndices.getValue()[num] = list2[num];
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else if (arguments.length == 3) {
                        var formatName = arguments[0];
                        var clockRate = arguments[1];
                        var formatParameters = arguments[2];
                        var rtpMapAttributeIndices = new Array(0);
                        var _var0 = new fm.icelink.Holder(rtpMapAttributeIndices);
                        var _var1 = this.getRtpMapAttributes(formatName, clockRate, formatParameters, _var0);
                        rtpMapAttributeIndices = _var0.getValue();
                        return _var1;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getSctpMapAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the Sctp Map Attribute, if it is present in the Media Description.
                 </div>
        
        
                @return {fm.icelink.sdp.sctp.MapAttribute}
                */
                MediaDescription.prototype.getSctpMapAttribute = function () {
                    if (arguments.length == 0) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = this.__mediaAttributes.tryGetAttribute(fm.icelink.sdp.AttributeType.SctpMapAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getSctpMaxMessageSizeAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.
                 </div>
        
        
                @return {fm.icelink.sdp.sctp.MaxMessageSizeAttribute}
                */
                MediaDescription.prototype.getSctpMaxMessageSizeAttribute = function () {
                    if (arguments.length == 0) {
                        var attribute = null;
                        var _var0 = new fm.icelink.Holder(attribute);
                        var _var1 = this.__mediaAttributes.tryGetAttribute(fm.icelink.sdp.AttributeType.SctpMaxMessageSizeAttribute, _var0);
                        attribute = _var0.getValue();
                        if (_var1) {
                            return attribute;
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getSetupAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SetupAttribute associated with this MediaDescription.
                 </div>
        
        
                @return {fm.icelink.sdp.SetupAttribute}
                */
                MediaDescription.prototype.getSetupAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getSetupAttributeFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getSsrcAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains the SSRC attribute matching a given synchronization source, name, and value.
                 </div>
        
                @param {number} ssrc The synchronization source.
                @param {string} name The attribute name.
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.rtp.SsrcAttribute}
                */
                MediaDescription.prototype.getSsrcAttribute = function (ssrc, name, value) {
                    if (arguments.length == 3) {
                        for (var _i = 0, _a = this.getSsrcAttributes(ssrc, name); _i < _a.length; _i++) {
                            var attribute = _a[_i];
                            if ((fm.icelink.Global.equals(attribute.getValue(), value))) {
                                return attribute;
                            }
                        }
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                MediaDescription.prototype.getSsrcAttributes = function () {
                    if (arguments.length == 0) {
                        var attributes = null;
                        var _var0 = new fm.icelink.Holder(attributes);
                        var _var1 = this.__mediaAttributes.tryGetAttributes(fm.icelink.sdp.AttributeType.RtpSsrcAttribute, _var0);
                        attributes = _var0.getValue();
                        var list = new Array();
                        for (var _i = 0, attributes_3 = attributes; _i < attributes_3.length; _i++) {
                            var attribute = attributes_3[_i];
                            fm.icelink.ArrayExtensions.add(list, attribute);
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else if (arguments.length == 1) {
                        var ssrc = arguments[0];
                        var list = new Array();
                        for (var _a = 0, _b = this.getSsrcAttributes(); _a < _b.length; _a++) {
                            var attribute = _b[_a];
                            if ((fm.icelink.Global.equals(attribute.getSynchronizationSource(), ssrc))) {
                                fm.icelink.ArrayExtensions.add(list, attribute);
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else if (arguments.length == 2) {
                        var ssrc = arguments[0];
                        var name_16 = arguments[1];
                        var list = new Array();
                        for (var _c = 0, _d = this.getSsrcAttributes(ssrc); _c < _d.length; _c++) {
                            var attribute = _d[_c];
                            if ((fm.icelink.Global.equals(attribute.getName(), name_16))) {
                                fm.icelink.ArrayExtensions.add(list, attribute);
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                MediaDescription.prototype.getStreamDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getStreamDirectionFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-getSupportsRtcpMultiplexing'>&nbsp;</span>**/
                /**
                 <div>
                 Gets a value stating whether this media description indicates RTCP Multiplexing support
                 </div>
        
        
                @return {boolean}
                */
                MediaDescription.prototype.getSupportsRtcpMultiplexing = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getRtcpMultiplexingSupportFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-insertCcmFirAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Inserts a CCM-FIR attribute for the given format
                 if it doesn't already exist.
                 </div>
        
                @param {string} formatName Format name.
                @param {number} clockRate Clock rate.
                @param {string} formatParameters Format parameters.
                @return {boolean}
                */
                MediaDescription.prototype.insertCcmFirAttribute = function (formatName, clockRate, formatParameters) {
                    if (arguments.length == 3) {
                        var attributeArray = this.getRtpMapAttributes(formatName, clockRate, formatParameters);
                        var attribute = ((attributeArray.length > 0) ? attributeArray[0] : null);
                        if ((!fm.icelink.Global.equals(attribute, null))) {
                            var attribute2 = fm.icelink.sdp.rtcp.FeedbackAttribute.ccmFirAttribute(attribute.getPayloadType());
                            attribute.addRelatedRtcpFeedbackAttribute(attribute2);
                            return true;
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-insertMediaAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 DEPRECATED: Use AddMediaAttribute instead.
                 Inserts a media-level attribute at the given index.
                 </div>
        
                @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
                @param {number} index The index.
                @return {void}
                */
                MediaDescription.prototype.insertMediaAttribute = function (attribute, index) {
                    if (arguments.length == 2) {
                        this.addMediaAttribute(attribute);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-insertNackPliAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Inserts a NACK-PLI attribute for the given format
                 if it doesn't already exist.
                 </div>
        
                @param {string} formatName Format name.
                @param {number} clockRate Clock rate.
                @param {string} formatParameters Format parameters.
                @return {boolean}
                */
                MediaDescription.prototype.insertNackPliAttribute = function (formatName, clockRate, formatParameters) {
                    if (arguments.length == 3) {
                        var attributeArray = this.getRtpMapAttributes(formatName, clockRate, formatParameters);
                        var attribute = ((attributeArray.length > 0) ? attributeArray[0] : null);
                        if ((!fm.icelink.Global.equals(attribute, null))) {
                            var attribute2 = fm.icelink.sdp.rtcp.FeedbackAttribute.nackPliAttribute(attribute.getPayloadType());
                            attribute.addRelatedRtcpFeedbackAttribute(attribute2);
                            return true;
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-insertRembAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Inserts a REMB attribute for the given format if it doesn't already exist.
                 </div>
        
                @param {string} formatName Format name.
                @param {number} clockRate Clock rate.
                @param {string} formatParameters Format parameters.
                @return {boolean}
                */
                MediaDescription.prototype.insertRembAttribute = function (formatName, clockRate, formatParameters) {
                    if (arguments.length == 3) {
                        var attributeArray = this.getRtpMapAttributes(formatName, clockRate, formatParameters);
                        var attribute = ((attributeArray.length > 0) ? attributeArray[0] : null);
                        if ((!fm.icelink.Global.equals(attribute, null))) {
                            var attribute2 = fm.icelink.sdp.rtcp.FeedbackAttribute.rembAttribute(attribute.getPayloadType());
                            attribute.addRelatedRtcpFeedbackAttribute(attribute2);
                            return true;
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.prototype.isMediaType = function (mediaType) {
                    if (arguments.length == 1) {
                        var media = this.getMedia();
                        return ((!fm.icelink.Global.equals(media, null)) && (fm.icelink.Global.equals(media.getMediaType(), mediaType)));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-removeBandwidth'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a proposed bandwidth.
                 </div>
        
                @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to remove.
                @return {boolean}
                */
                MediaDescription.prototype.removeBandwidth = function (bandwidth) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__bandwidths, bandwidth);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-removeMediaAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a media-level attribute.
                 </div>
        
                @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to remove.
                @return {boolean}
                */
                MediaDescription.prototype.removeMediaAttribute = function (attribute) {
                    if (arguments.length == 1) {
                        var rtpMapAttributes = void 0;
                        var attribute4 = void 0;
                        var flag = void 0;
                        var _var0 = attribute.getAttributeType();
                        if (_var0 == fm.icelink.sdp.AttributeType.FormatParametersAttribute) {
                            do {
                                var attribute2 = attribute;
                                rtpMapAttributes = this.getRtpMapAttributes();
                                for (var _i = 0, rtpMapAttributes_2 = rtpMapAttributes; _i < rtpMapAttributes_2.length; _i++) {
                                    var attribute3 = rtpMapAttributes_2[_i];
                                    attribute4 = attribute3;
                                    if ((!fm.icelink.Global.equals(attribute4.getRelatedFormatParametersAttribute(), null))) {
                                        flag = (fm.icelink.Global.equals(attribute4.getRelatedFormatParametersAttribute().getFormat(), attribute2.getFormat()));
                                        if (flag) {
                                            attribute4.setRelatedFormatParametersAttribute(null);
                                            return flag;
                                        }
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else if (_var0 == fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute) {
                            do {
                                var attribute5 = attribute;
                                rtpMapAttributes = this.getRtpMapAttributes();
                                for (var _a = 0, rtpMapAttributes_3 = rtpMapAttributes; _a < rtpMapAttributes_3.length; _a++) {
                                    var attribute3 = rtpMapAttributes_3[_a];
                                    attribute4 = attribute3;
                                    if ((!fm.icelink.Global.equals(attribute4.getRelatedRtcpFeedbackAttributes(), null))) {
                                        flag = attribute4.removeRelatedRtcpFeedbackAttribute(attribute5);
                                        if (flag) {
                                            return flag;
                                        }
                                    }
                                }
                                break;
                            } while (false);
                        }
                        else {
                            do {
                                return this.__mediaAttributes.remove(attribute);
                            } while (false);
                        }
                        return false;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setConnectionData'>&nbsp;</span>**/
                /**
                 <div>
                 Sets media-level connection data.
                 </div>
        
        
                @param {fm.icelink.sdp.ConnectionData} value
                @return {void}
                */
                MediaDescription.prototype.setConnectionData = function (value) {
                    if (arguments.length == 1) {
                        this._connectionData = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the media-level encryption key.
                 </div>
        
        
                @param {fm.icelink.sdp.EncryptionKey} value
                @return {void}
                */
                MediaDescription.prototype.setEncryptionKey = function (value) {
                    if (arguments.length == 1) {
                        this._encryptionKey = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaDescription.prototype.setMedia = function (value) {
                    if (arguments.length == 1) {
                        this._media = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setMediaTitle'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the media title.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                MediaDescription.prototype.setMediaTitle = function (value) {
                    if (arguments.length == 1) {
                        this._mediaTitle = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setQualityAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the QualityAttribute associated with this MediaDescription.
                 </div>
        
        
                @param {fm.icelink.sdp.QualityAttribute} value
                @return {void}
                */
                MediaDescription.prototype.setQualityAttribute = function (value) {
                    if (arguments.length == 1) {
                        this.__mediaAttributes.replaceAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setRtcpAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Sets Rtcp Attributes associated with this media description.
                 </div>
        
        
                @param {fm.icelink.sdp.rtcp.Attribute} value
                @return {void}
                */
                MediaDescription.prototype.setRtcpAttribute = function (value) {
                    if (arguments.length == 1) {
                        this.__mediaAttributes.replaceAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setSetupAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the SetupAttribute associated with this MediaDescription.
                 </div>
        
        
                @param {fm.icelink.sdp.SetupAttribute} value
                @return {void}
                */
                MediaDescription.prototype.setSetupAttribute = function (value) {
                    if (arguments.length == 1) {
                        this.__mediaAttributes.replaceAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-setStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
                 </div>
        
        
                @param {fm.icelink.StreamDirection} value
                @return {void}
                */
                MediaDescription.prototype.setStreamDirection = function (value) {
                    if (arguments.length == 1) {
                        var attribute = fm.icelink.sdp.DirectionAttribute.generateDirectionAttribute(value);
                        this.__mediaAttributes.replaceAttribute(attribute);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-supportsIce'>&nbsp;</span>**/
                /**
                 <div>
                 Gets a value indicating whether this SDP MediaDescription suggests support for ICE.
                 </div>
        
                @return {boolean}
                */
                MediaDescription.prototype.supportsIce = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getSupportsIceFromCollection(this.__mediaAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                MediaDescription.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.StringExtensions.concat(this.getMedia().toString(), "\r\n"));
                        if ((!fm.icelink.Global.equals(this.getMediaTitle(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat("i=", this.getMediaTitle(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getConnectionData(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat(this.getConnectionData().toString(), "\r\n"));
                        }
                        for (var _i = 0, _a = this.getBandwidths(); _i < _a.length; _i++) {
                            var bandwidth = _a[_i];
                            builder.append(fm.icelink.StringExtensions.concat(bandwidth.toString(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getEncryptionKey(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat(this.getEncryptionKey().toString(), "\r\n"));
                        }
                        for (var _b = 0, _c = this.__mediaAttributes.toArray(); _b < _c.length; _b++) {
                            var attribute = _c[_b];
                            builder.append(fm.icelink.StringExtensions.concat(attribute.toString(), "\r\n"));
                            if ((fm.icelink.Global.equals(attribute.getAttributeType(), fm.icelink.sdp.AttributeType.RtpMapAttribute))) {
                                var attribute2 = attribute;
                                var relatedRtcpFeedbackAttributes = attribute2.getRelatedRtcpFeedbackAttributes();
                                if ((!fm.icelink.Global.equals(relatedRtcpFeedbackAttributes, null))) {
                                    for (var _d = 0, relatedRtcpFeedbackAttributes_2 = relatedRtcpFeedbackAttributes; _d < relatedRtcpFeedbackAttributes_2.length; _d++) {
                                        var attribute3 = relatedRtcpFeedbackAttributes_2[_d];
                                        builder.append(fm.icelink.StringExtensions.concat(attribute3.toString(), "\r\n"));
                                    }
                                }
                                var relatedFormatParametersAttribute = attribute2.getRelatedFormatParametersAttribute();
                                if ((!fm.icelink.Global.equals(relatedFormatParametersAttribute, null))) {
                                    builder.append(fm.icelink.StringExtensions.concat(relatedFormatParametersAttribute.toString(), "\r\n"));
                                }
                            }
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaDescription-updateQualityAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Updates SDP Quality Attribute associated with this media description if one is present. Otherwise,
                 creates a new one and inserts it into this media description.
                 </div>
        
                @param {number} quality
                @return {void}
                */
                MediaDescription.prototype.updateQualityAttributeValue = function (quality) {
                    if (arguments.length == 1) {
                        this.__mediaAttributes.replaceAttribute(new fm.icelink.sdp.QualityAttribute(quality));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MediaDescription;
            }());
            sdp.MediaDescription = MediaDescription;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             https://tools.ietf.org/html/rfc5888#page-4
             "Media stream identification" media attribute, which is used for identifying media streams within a session description.
             Its formatting in SDP [RFC4566] is described by
             the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
         
             mid-attribute      = "a=mid:" identification-tag
             identification-tag = token
             ; token is defined in RFC 4566
             The identification-tag MUST be unique within an SDP session description.
             </div>
        
            */
            var MediaStreamIdAttribute = /** @class */ (function (_super) {
                __extends(MediaStreamIdAttribute, _super);
                /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdAttribute` class.
                 </div>
        
                @param {string} id The identifier.
                @return {}
                */
                function MediaStreamIdAttribute(id) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var id_2 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.MediaStreamIdAttribute);
                        _this.setIdentificationTag(id_2);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                MediaStreamIdAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MediaStreamIdAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.MediaStreamIdAttribute}
                */
                MediaStreamIdAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.MediaStreamIdAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                MediaStreamIdAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getIdentificationTag();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-getIdentificationTag'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the identification tag.
                 </div>
        
        
                @return {string}
                */
                MediaStreamIdAttribute.prototype.getIdentificationTag = function () {
                    if (arguments.length == 0) {
                        return this._identificationTag;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaStreamIdAttribute.prototype.setIdentificationTag = function (value) {
                    if (arguments.length == 1) {
                        this._identificationTag = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MediaStreamIdAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.MediaStreamIdAttribute = MediaStreamIdAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var MediaStreamIdSemanticTokenWrapper = /** @class */ (function () {
                function MediaStreamIdSemanticTokenWrapper(value) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var value_41 = __arguments[0];
                        //super();
                        this._value = value_41;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                MediaStreamIdSemanticTokenWrapper.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MediaStreamIdSemanticTokenWrapper]';
                };
                MediaStreamIdSemanticTokenWrapper.prototype.toString = function () {
                    if (arguments.length == 0) {
                        if (this._value == fm.icelink.sdp.MediaStreamIdSemanticToken.Wms)
                            return 'Wms';
                        return '';
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MediaStreamIdSemanticTokenWrapper;
            }());
            sdp.MediaStreamIdSemanticTokenWrapper = MediaStreamIdSemanticTokenWrapper;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
             Used here for compatibility with Google Chrome and Mozilla Firefox.
         
             A session-level attribute is defined for signalling the semantics
             associated with an msid grouping.This allows msid groupings with
             different semantics to coexist.
         
             This OPTIONAL attribute gives the group identifier and its group
             semantic; it carries the same meaning as the ssrc-group-attr of RFC
             5576 section 4.2, but uses the identifier of the group rather than a
             list of SSRC values.
         
             This attribute MUST be present if "a=msid" is used.
         
             An empty list of identifiers is an indication that the sender
             supports the indicated semantic, but has no msid groupings of the
             given type in the present SDP.
         
             An identifier of "*" is an indication that all "a=msid" lines in the
             SDP have this specific semantic.  If "*" is not used, each msid-id in
             the SDP MUST appear in one and only one "msid-semantic" line.
             The name of the attribute is "msid-semantic".
             The value of the attribute is given by the following ABNF:
         
             msid-semantic-value = msid - semantic msid-list
             msid-semantic = token ; see RFC 4566
             msid-list = *(" " msid-id) / " *"
         
             The semantic field holds values from the IANA registriy "Semantics
             for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
         
             An example msid-semantic might look like this, if a semantic LS was
             registered by IANA for the same purpose as the existing LS grouping
             semantic:
         
             a= msid-semantic:LS xyzzy forolow
         
             This means that the SDP description has two lip sync groups, with the
             group identifiers xyzzy and forolow, respectively.
         
             The msid-semantic attribute can occur more than once, but MUST NOT
             occur more than once with the same msid-semantic value.
             </div><seealso cref="fm.icelink.sdp.attribute" />
        
            */
            var MediaStreamIdSemanticAttribute = /** @class */ (function (_super) {
                __extends(MediaStreamIdSemanticAttribute, _super);
                function MediaStreamIdSemanticAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var semanticToken = __arguments[0];
                        // chained constructor: MediaStreamIdSemanticAttribute.call(this, semanticToken, "*");
                        __arguments = new Array(2);
                        __arguments[0] = semanticToken;
                        __arguments[1] = "*";
                        {
                            var semanticToken_1 = __arguments[0];
                            var msidList = __arguments[1];
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.MediaStreamIdSemanticAttribute);
                            _this.setSemanticToken(semanticToken_1);
                            _this.setMsIdList(msidList);
                        }
                    }
                    else if (__arguments.length == 2) {
                        var semanticToken = __arguments[0];
                        var msidList = __arguments[1];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.MediaStreamIdSemanticAttribute);
                        _this.setSemanticToken(semanticToken);
                        _this.setMsIdList(msidList);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                MediaStreamIdSemanticAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MediaStreamIdSemanticAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdSemanticAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.MediaStreamIdSemanticAttribute}
                */
                MediaStreamIdSemanticAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.StringExtensions.split(value, [32]);
                        if ((fm.icelink.Global.equals(strArray.length, 0))) {
                            return new fm.icelink.sdp.MediaStreamIdSemanticAttribute(fm.icelink.sdp.MediaStreamIdSemanticToken.Wms);
                        }
                        var semanticToken = strArray[0];
                        var semanticTokenFromString = fm.icelink.sdp.MediaStreamIdSemanticAttribute.getSemanticTokenFromString(semanticToken);
                        if ((fm.icelink.Global.equals(strArray.length, 1))) {
                            return new fm.icelink.sdp.MediaStreamIdSemanticAttribute(semanticTokenFromString);
                        }
                        return new fm.icelink.sdp.MediaStreamIdSemanticAttribute(semanticTokenFromString, value.substring((semanticToken.length + 1)));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaStreamIdSemanticAttribute.getSemanticTokenFromString = function (semanticToken) {
                    if (arguments.length == 1) {
                        var str = semanticToken;
                        if (((!fm.icelink.Global.equals(str, null)) && (fm.icelink.Global.equals(str, "WMS")))) {
                            return fm.icelink.sdp.MediaStreamIdSemanticToken.Wms;
                        }
                        return fm.icelink.sdp.MediaStreamIdSemanticToken.Wms;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaStreamIdSemanticAttribute.getSemanticTokenString = function (semanticToken) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(semanticToken, fm.icelink.sdp.MediaStreamIdSemanticToken.Wms))) {
                            return "WMS";
                        }
                        return "WMS";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                MediaStreamIdSemanticAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        if (fm.icelink.StringExtensions.isNullOrEmpty(this.getMsIdList())) {
                            return fm.icelink.sdp.MediaStreamIdSemanticAttribute.getSemanticTokenString(this.getSemanticToken());
                        }
                        return fm.icelink.StringExtensions.concat(fm.icelink.sdp.MediaStreamIdSemanticAttribute.getSemanticTokenString(this.getSemanticToken()), " ", this.getMsIdList());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-getMsIdList'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the space-delimited list of msids for which a given semantic is used.
                 An empty list of identifiers is an indication that the sender
                 supports the indicated semantic, but has no msid groupings of the
                 given type in the present SDP.
         
                 An identifier of "*" is an indication that all "a=msid" lines in the
                 SDP have this specific semantic.  If "*" is not used, each msid-id in
                 the SDP MUST appear in one and only one "msid-semantic" line.
                 </div>
        
        
                @return {string}
                */
                MediaStreamIdSemanticAttribute.prototype.getMsIdList = function () {
                    if (arguments.length == 0) {
                        return this._msIdList;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaStreamIdSemanticAttribute.prototype.getSemanticToken = function () {
                    if (arguments.length == 0) {
                        return this._semanticToken;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-setMsIdList'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the space-delimited list of msids for which a given semantic is used.
                 An empty list of identifiers is an indication that the sender
                 supports the indicated semantic, but has no msid groupings of the
                 given type in the present SDP.
         
                 An identifier of "*" is an indication that all "a=msid" lines in the
                 SDP have this specific semantic.  If "*" is not used, each msid-id in
                 the SDP MUST appear in one and only one "msid-semantic" line.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                MediaStreamIdSemanticAttribute.prototype.setMsIdList = function (value) {
                    if (arguments.length == 1) {
                        this._msIdList = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                MediaStreamIdSemanticAttribute.prototype.setSemanticToken = function (value) {
                    if (arguments.length == 1) {
                        this._semanticToken = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MediaStreamIdSemanticAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.MediaStreamIdSemanticAttribute = MediaStreamIdSemanticAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP media types.
             </div>
        
            */
            var MediaType = /** @class */ (function () {
                function MediaType() {
                }
                MediaType.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.MediaType]';
                };
                /**<span id='method-fm.icelink.sdp.MediaType-fromStreamType'>&nbsp;</span>**/
                /**
                 <div>
                 Convert a StreamType enum to an SDP media type.
                 </div>
        
                @param {fm.icelink.StreamType} streamType The StreamType enum.
                @return {string}
                */
                MediaType.fromStreamType = function (streamType) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(streamType, fm.icelink.StreamType.Audio))) {
                            return fm.icelink.sdp.MediaType.getAudio();
                        }
                        if ((fm.icelink.Global.equals(streamType, fm.icelink.StreamType.Video))) {
                            return fm.icelink.sdp.MediaType.getVideo();
                        }
                        if ((!fm.icelink.Global.equals(streamType, fm.icelink.StreamType.Application))) {
                            if ((fm.icelink.Global.equals(streamType, fm.icelink.StreamType.Message))) {
                                return fm.icelink.sdp.MediaType.getMessage();
                            }
                            if ((fm.icelink.Global.equals(streamType, fm.icelink.StreamType.Text))) {
                                return fm.icelink.sdp.MediaType.getText();
                            }
                        }
                        return fm.icelink.sdp.MediaType.getApplication();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-getApplication'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP media type meaning "Application".
                 </div>
        
        
                @return {string}
                */
                MediaType.getApplication = function () {
                    if (arguments.length == 0) {
                        return "application";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-getAudio'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP media type meaning "Audio".
                 </div>
        
        
                @return {string}
                */
                MediaType.getAudio = function () {
                    if (arguments.length == 0) {
                        return "audio";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-getMessage'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP media type meaning "Message".
                 </div>
        
        
                @return {string}
                */
                MediaType.getMessage = function () {
                    if (arguments.length == 0) {
                        return "message";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-getText'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP media type meaning "Text".
                 </div>
        
        
                @return {string}
                */
                MediaType.getText = function () {
                    if (arguments.length == 0) {
                        return "text";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-getVideo'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP media type meaning "Video".
                 </div>
        
        
                @return {string}
                */
                MediaType.getVideo = function () {
                    if (arguments.length == 0) {
                        return "video";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.MediaType-toStreamType'>&nbsp;</span>**/
                /**
                 <div>
                 Converts an SDP media type to a StreamType enum.
                 </div>
        
                @param {string} mediaType The SDP media type.
                @return {fm.icelink.StreamType}
                */
                MediaType.toStreamType = function (mediaType) {
                    if (arguments.length == 1) {
                        if ((fm.icelink.Global.equals(mediaType, fm.icelink.sdp.MediaType.getAudio()))) {
                            return fm.icelink.StreamType.Audio;
                        }
                        if ((fm.icelink.Global.equals(mediaType, fm.icelink.sdp.MediaType.getVideo()))) {
                            return fm.icelink.StreamType.Video;
                        }
                        if ((!fm.icelink.Global.equals(mediaType, fm.icelink.sdp.MediaType.getApplication()))) {
                            if ((fm.icelink.Global.equals(mediaType, fm.icelink.sdp.MediaType.getMessage()))) {
                                return fm.icelink.StreamType.Message;
                            }
                            if ((fm.icelink.Global.equals(mediaType, fm.icelink.sdp.MediaType.getText()))) {
                                return fm.icelink.StreamType.Text;
                            }
                        }
                        return fm.icelink.StreamType.Application;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return MediaType;
            }());
            sdp.MediaType = MediaType;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP message.
             </div>
        
            */
            var Message = /** @class */ (function () {
                function Message() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 3) {
                        var origin = __arguments[0];
                        var sessionName = __arguments[1];
                        var timeDescriptions = __arguments[2];
                        //super();
                        this.__bandwidths = new Array();
                        this.__timeDescriptions = new Array();
                        this.__sessionAttributes = new fm.icelink.sdp.AttributeCollection();
                        this.__mediaDescriptions = new Array();
                        if ((fm.icelink.Global.equals(origin, null))) {
                            throw new fm.icelink.Exception("origin cannot be null.");
                        }
                        if ((fm.icelink.Global.equals(timeDescriptions, null))) {
                            timeDescriptions = [new fm.icelink.sdp.TimeDescription(new fm.icelink.sdp.Timing())];
                        }
                        if (((fm.icelink.Global.equals(sessionName, null)) || fm.icelink.StringExtensions.isNullOrEmpty(fm.icelink.StringExtensions.trim(sessionName)))) {
                            sessionName = "-";
                        }
                        this.setProtocolVersion("0");
                        this.setOrigin(origin);
                        this.setSessionName(fm.icelink.StringExtensions.trim(sessionName));
                        fm.icelink.ArrayExtensions.addRange(this.__timeDescriptions, timeDescriptions);
                    }
                    else if (__arguments.length == 2) {
                        var origin = __arguments[0];
                        var sessionName = __arguments[1];
                        // chained constructor: Message.call(this, origin, sessionName, null);
                        __arguments = new Array(3);
                        __arguments[0] = origin;
                        __arguments[1] = sessionName;
                        __arguments[2] = null;
                        {
                            var origin_1 = __arguments[0];
                            var sessionName_1 = __arguments[1];
                            var timeDescriptions = __arguments[2];
                            //super();
                            this.__bandwidths = new Array();
                            this.__timeDescriptions = new Array();
                            this.__sessionAttributes = new fm.icelink.sdp.AttributeCollection();
                            this.__mediaDescriptions = new Array();
                            if ((fm.icelink.Global.equals(origin_1, null))) {
                                throw new fm.icelink.Exception("origin cannot be null.");
                            }
                            if ((fm.icelink.Global.equals(timeDescriptions, null))) {
                                timeDescriptions = [new fm.icelink.sdp.TimeDescription(new fm.icelink.sdp.Timing())];
                            }
                            if (((fm.icelink.Global.equals(sessionName_1, null)) || fm.icelink.StringExtensions.isNullOrEmpty(fm.icelink.StringExtensions.trim(sessionName_1)))) {
                                sessionName_1 = "-";
                            }
                            this.setProtocolVersion("0");
                            this.setOrigin(origin_1);
                            this.setSessionName(fm.icelink.StringExtensions.trim(sessionName_1));
                            fm.icelink.ArrayExtensions.addRange(this.__timeDescriptions, timeDescriptions);
                        }
                    }
                    else if (__arguments.length == 1) {
                        var origin = __arguments[0];
                        // chained constructor: Message.call(this, origin, null);
                        __arguments = new Array(2);
                        __arguments[0] = origin;
                        __arguments[1] = null;
                        {
                            var origin_2 = __arguments[0];
                            var sessionName = __arguments[1];
                            // chained constructor: Message.call(this, origin, sessionName, null);
                            __arguments = new Array(3);
                            __arguments[0] = origin_2;
                            __arguments[1] = sessionName;
                            __arguments[2] = null;
                            {
                                var origin_3 = __arguments[0];
                                var sessionName_2 = __arguments[1];
                                var timeDescriptions = __arguments[2];
                                //super();
                                this.__bandwidths = new Array();
                                this.__timeDescriptions = new Array();
                                this.__sessionAttributes = new fm.icelink.sdp.AttributeCollection();
                                this.__mediaDescriptions = new Array();
                                if ((fm.icelink.Global.equals(origin_3, null))) {
                                    throw new fm.icelink.Exception("origin cannot be null.");
                                }
                                if ((fm.icelink.Global.equals(timeDescriptions, null))) {
                                    timeDescriptions = [new fm.icelink.sdp.TimeDescription(new fm.icelink.sdp.Timing())];
                                }
                                if (((fm.icelink.Global.equals(sessionName_2, null)) || fm.icelink.StringExtensions.isNullOrEmpty(fm.icelink.StringExtensions.trim(sessionName_2)))) {
                                    sessionName_2 = "-";
                                }
                                this.setProtocolVersion("0");
                                this.setOrigin(origin_3);
                                this.setSessionName(fm.icelink.StringExtensions.trim(sessionName_2));
                                fm.icelink.ArrayExtensions.addRange(this.__timeDescriptions, timeDescriptions);
                            }
                        }
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Message.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Message]';
                };
                /**<span id='method-fm.icelink.sdp.Message-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.message` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Message}
                */
                Message.parse = function (s) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.sdp.Utility.splitAndClean(s);
                        if ((((!fm.icelink.Global.equals(strArray[0].charCodeAt(0), 118)) || (!fm.icelink.Global.equals(strArray[1].charCodeAt(0), 111))) || (!fm.icelink.Global.equals(strArray[2].charCodeAt(0), 115)))) {
                            return null;
                        }
                        var origin = fm.icelink.sdp.Origin.parse(strArray[1].substring(2));
                        var sessionName = strArray[2].substring(2);
                        var message = new fm.icelink.sdp.Message(origin, sessionName);
                        message.removeTimeDescriptions();
                        for (var i = 3; (i < strArray.length); i++) {
                            var num2 = void 0;
                            var str4 = void 0;
                            var str2 = strArray[i];
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 105))) {
                                message.setSessionInformation(str2.substring(2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 117))) {
                                try {
                                    message.setUri(new fm.icelink.Uri(str2.substring(2)));
                                }
                                catch (exception1) {
                                }
                                finally {
                                }
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 101))) {
                                message.setEmailAddress(str2.substring(2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 112))) {
                                message.setPhoneNumber(str2.substring(2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 99))) {
                                message.setConnectionData(fm.icelink.sdp.ConnectionData.parse(str2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 98))) {
                                message.addBandwidth(fm.icelink.sdp.Bandwidth.parse(str2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 116))) {
                                var str3 = str2;
                                num2 = (i + 1);
                                while ((num2 < strArray.length)) {
                                    str4 = strArray[num2];
                                    if ((!fm.icelink.Global.equals(str4.charCodeAt(0), 114))) {
                                        break;
                                    }
                                    str3 = fm.icelink.StringExtensions.concat(str3, "\n", str4);
                                    i++;
                                    num2++;
                                }
                                message.addTimeDescription(fm.icelink.sdp.TimeDescription.parse(str3));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 122))) {
                                message.setTimeZoneAdjustments(fm.icelink.sdp.TimeZones.parse(str2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 107))) {
                                message.setEncryptionKey(fm.icelink.sdp.EncryptionKey.parse(str2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 97))) {
                                message.addSessionAttribute(fm.icelink.sdp.Attribute.parse(str2));
                                continue;
                            }
                            if ((fm.icelink.Global.equals(str2.charCodeAt(0), 109))) {
                                var str5 = str2;
                                for (num2 = (i + 1); (num2 < strArray.length); num2++) {
                                    str4 = strArray[num2];
                                    if ((fm.icelink.Global.equals(str4.charCodeAt(0), 109))) {
                                        break;
                                    }
                                    str5 = fm.icelink.StringExtensions.concat(str5, "\n", str4);
                                    i++;
                                }
                                message.addMediaDescription(fm.icelink.sdp.MediaDescription.parse(str5));
                            }
                        }
                        return message;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-addBandwidth'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a proposed bandwidth.
                 </div>
        
                @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to add.
                @return {void}
                */
                Message.prototype.addBandwidth = function (bandwidth) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__bandwidths, bandwidth);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-addMediaDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a media description.
                 </div>
        
                @param {fm.icelink.sdp.MediaDescription} mediaDescription The media description to add.
                @return {void}
                */
                Message.prototype.addMediaDescription = function (mediaDescription) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__mediaDescriptions, mediaDescription);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-addSessionAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a session-level attribute.
                 </div>
        
                @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
                @return {void}
                */
                Message.prototype.addSessionAttribute = function (attribute) {
                    if (arguments.length == 1) {
                        if (fm.icelink.sdp.Attribute.isSessionLevel(new icelink.Type(attribute.getTypeString()))) {
                            this.__sessionAttributes.addAttribute(attribute);
                        }
                        else {
                            if (fm.icelink.sdp.Attribute.isMediaLevel(new icelink.Type(attribute.getTypeString()))) {
                                throw new fm.icelink.Exception("Attribute is media-only.");
                            }
                            throw new fm.icelink.Exception("Attribute is not registered.");
                        }
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-addTimeDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a start, stop, and repeat time.
                 </div>
        
                @param {fm.icelink.sdp.TimeDescription} timeDescription The start, stop, and repeat time to add.
                @return {void}
                */
                Message.prototype.addTimeDescription = function (timeDescription) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__timeDescriptions, timeDescription);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Message.prototype.findMediaDescriptions = function (mediaType) {
                    if (arguments.length == 1) {
                        var list = new Array();
                        for (var _i = 0, _a = this.getMediaDescriptions(); _i < _a.length; _i++) {
                            var description = _a[_i];
                            var media = description.getMedia();
                            if (((!fm.icelink.Global.equals(media, null)) && (fm.icelink.Global.equals(media.getMediaType(), mediaType)))) {
                                fm.icelink.ArrayExtensions.add(list, description);
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getApplicationDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the first media description of type "application".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription}
                */
                Message.prototype.getApplicationDescription = function () {
                    if (arguments.length == 0) {
                        return this.getFirstMediaDescription(this.getApplicationDescriptions());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getApplicationDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets any media descriptions of type "application".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getApplicationDescriptions = function () {
                    if (arguments.length == 0) {
                        return this.findMediaDescriptions(fm.icelink.sdp.MediaType.getApplication());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getAudioDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the first media description of type "audio".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription}
                */
                Message.prototype.getAudioDescription = function () {
                    if (arguments.length == 0) {
                        return this.getFirstMediaDescription(this.getAudioDescriptions());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getAudioDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets any media descriptions of type "audio".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getAudioDescriptions = function () {
                    if (arguments.length == 0) {
                        return this.findMediaDescriptions(fm.icelink.sdp.MediaType.getAudio());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getBandwidths'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of proposed bandwidths to be used by the session.
                 </div>
        
        
                @return {fm.icelink.sdp.Bandwidth[]}
                */
                Message.prototype.getBandwidths = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__bandwidths);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getConnectionData'>&nbsp;</span>**/
                /**
                 <div>
                 Gets session-level connection data.
                 </div>
        
        
                @return {fm.icelink.sdp.ConnectionData}
                */
                Message.prototype.getConnectionData = function () {
                    if (arguments.length == 0) {
                        return this._connectionData;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getEmailAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the email address for the person responsible for the conference.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.getEmailAddress = function () {
                    if (arguments.length == 0) {
                        return this._emailAddress;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the session-level encryption key.
                 </div>
        
        
                @return {fm.icelink.sdp.EncryptionKey}
                */
                Message.prototype.getEncryptionKey = function () {
                    if (arguments.length == 0) {
                        return this._encryptionKey;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Message.prototype.getFirstMediaDescription = function (mediaDescriptions) {
                    if (arguments.length == 1) {
                        if (((fm.icelink.Global.equals(mediaDescriptions, null)) || (fm.icelink.Global.equals(mediaDescriptions.length, 0)))) {
                            return null;
                        }
                        return mediaDescriptions[0];
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getMediaDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of media descriptions.
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getMediaDescriptions = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__mediaDescriptions);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getMessageDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the first media description of type "message".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription}
                */
                Message.prototype.getMessageDescription = function () {
                    if (arguments.length == 0) {
                        return this.getFirstMediaDescription(this.getMessageDescriptions());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getMessageDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets any media descriptions of type "message".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getMessageDescriptions = function () {
                    if (arguments.length == 0) {
                        return this.findMediaDescriptions(fm.icelink.sdp.MediaType.getMessage());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getOrigin'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the originator of the session plus a session identifier and version number.
                 </div>
        
        
                @return {fm.icelink.sdp.Origin}
                */
                Message.prototype.getOrigin = function () {
                    if (arguments.length == 0) {
                        return this._origin;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getPhoneNumber'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the phone number for the person responsible for the conference.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.getPhoneNumber = function () {
                    if (arguments.length == 0) {
                        return this._phoneNumber;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getProtocolVersion'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the version of the Session Description Protocol.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.getProtocolVersion = function () {
                    if (arguments.length == 0) {
                        return this._protocolVersion;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of session-level attributes.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                Message.prototype.getSessionAttributes = function () {
                    if (arguments.length == 0) {
                        return this.__sessionAttributes.toArray();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionInformation'>&nbsp;</span>**/
                /**
                 <div>
                 Gets textual information about the session.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.getSessionInformation = function () {
                    if (arguments.length == 0) {
                        return this._sessionInformation;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelCryptoAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Crypto attributes from the session-level attributes in this message.
                 Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.sdp.CryptoAttribute[]}
                */
                Message.prototype.getSessionLevelCryptoAttributes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getCryptoAttributesFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
                 Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                Message.prototype.getSessionLevelDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getStreamDirectionFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelFingerprintAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Fingerprint attribute from the session-level attributes in this message.
                 Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.sdp.ice.FingerprintAttribute}
                */
                Message.prototype.getSessionLevelFingerprintAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getFingerprintAttributeFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIceOptionAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains session-level Ice Options attributes associated with the Sdp Message.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                Message.prototype.getSessionLevelIceOptionAttributes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIceOptionAttributesFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIcePasswordAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Ice Password Attribute from the session-level attributes in this message.
                 Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.sdp.ice.PasswordAttribute}
                */
                Message.prototype.getSessionLevelIcePasswordAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIcePasswordAttributeFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIceUfragAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Ice Ufrag Attribute from the session-level attributes in this message.
                 Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.sdp.ice.UfragAttribute}
                */
                Message.prototype.getSessionLevelIceUfragAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getIceUfragAttributeFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelRtcpMultiplexingSupport'>&nbsp;</span>**/
                /**
                 <div>
                 Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
                 Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {boolean}
                */
                Message.prototype.getSessionLevelRtcpMultiplexingSupport = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getRtcpMultiplexingSupportFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelRtpExtMapAttributes'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains session-level RTP ext-map attributes associated with the Sdp Message.
                 </div>
        
        
                @return {fm.icelink.sdp.Attribute[]}
                */
                Message.prototype.getSessionLevelRtpExtMapAttributes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getRtpExtMapAttributesFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionLevelSetupAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Obtains Setup Attribute from the session-level attributes in this message.
                 Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
                 </div>
        
        
                @return {fm.icelink.sdp.SetupAttribute}
                */
                Message.prototype.getSessionLevelSetupAttribute = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.sdp.MediaDescription.getSetupAttributeFromCollection(this.__sessionAttributes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getSessionName'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the textual session name.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.getSessionName = function () {
                    if (arguments.length == 0) {
                        return this._sessionName;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getTextDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the first media description of type "text".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription}
                */
                Message.prototype.getTextDescription = function () {
                    if (arguments.length == 0) {
                        return this.getFirstMediaDescription(this.getTextDescriptions());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getTextDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets any media descriptions of type "text".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getTextDescriptions = function () {
                    if (arguments.length == 0) {
                        return this.findMediaDescriptions(fm.icelink.sdp.MediaType.getText());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getTimeDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of start, stop, and repeat times for the session.
                 </div>
        
        
                @return {fm.icelink.sdp.TimeDescription[]}
                */
                Message.prototype.getTimeDescriptions = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__timeDescriptions);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getTimeZoneAdjustments'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the time zone adjustments.
                 </div>
        
        
                @return {fm.icelink.sdp.TimeZones}
                */
                Message.prototype.getTimeZoneAdjustments = function () {
                    if (arguments.length == 0) {
                        return this._timeZoneAdjustments;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getUri'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the pointer to additional information about the session.
                 </div>
        
        
                @return {fm.icelink.Uri}
                */
                Message.prototype.getUri = function () {
                    if (arguments.length == 0) {
                        return this._uri;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getVideoDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the first media description of type "video".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription}
                */
                Message.prototype.getVideoDescription = function () {
                    if (arguments.length == 0) {
                        return this.getFirstMediaDescription(this.getVideoDescriptions());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-getVideoDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Gets any media descriptions of type "video".
                 </div>
        
        
                @return {fm.icelink.sdp.MediaDescription[]}
                */
                Message.prototype.getVideoDescriptions = function () {
                    if (arguments.length == 0) {
                        return this.findMediaDescriptions(fm.icelink.sdp.MediaType.getVideo());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-removeBandwidth'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a proposed bandwidth.
                 </div>
        
                @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to remove.
                @return {boolean}
                */
                Message.prototype.removeBandwidth = function (bandwidth) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__bandwidths, bandwidth);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-removeMediaDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a media description.
                 </div>
        
                @param {fm.icelink.sdp.MediaDescription} mediaDescription The media description to remove.
                @return {boolean}
                */
                Message.prototype.removeMediaDescription = function (mediaDescription) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__mediaDescriptions, mediaDescription);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-removeSessionAttribute'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a session-level attribute.
                 </div>
        
                @param {fm.icelink.sdp.AttributeType} attributeType The session-level attribute type to remove.
                @return {boolean}
                */
                Message.prototype.removeSessionAttribute = function (attributeType) {
                    if (arguments.length == 1) {
                        return this.__sessionAttributes.remove(attributeType);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-removeTimeDescription'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a start, stop, and repeat time.
                 </div>
        
                @param {fm.icelink.sdp.TimeDescription} timeDescription The start, stop, and repeat time to remove.
                @return {boolean}
                */
                Message.prototype.removeTimeDescription = function (timeDescription) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__timeDescriptions, timeDescription);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-removeTimeDescriptions'>&nbsp;</span>**/
                /**
                 <div>
                 Removes all time descriptions.
                 </div>
        
        
                @return {void}
                */
                Message.prototype.removeTimeDescriptions = function () {
                    if (arguments.length == 0) {
                        this.__timeDescriptions = new Array();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setConnectionData'>&nbsp;</span>**/
                /**
                 <div>
                 Sets session-level connection data.
                 </div>
        
        
                @param {fm.icelink.sdp.ConnectionData} value
                @return {void}
                */
                Message.prototype.setConnectionData = function (value) {
                    if (arguments.length == 1) {
                        this._connectionData = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setEmailAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the email address for the person responsible for the conference.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Message.prototype.setEmailAddress = function (value) {
                    if (arguments.length == 1) {
                        this._emailAddress = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setEncryptionKey'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the session-level encryption key.
                 </div>
        
        
                @param {fm.icelink.sdp.EncryptionKey} value
                @return {void}
                */
                Message.prototype.setEncryptionKey = function (value) {
                    if (arguments.length == 1) {
                        this._encryptionKey = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Message.prototype.setOrigin = function (value) {
                    if (arguments.length == 1) {
                        this._origin = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setPhoneNumber'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the phone number for the person responsible for the conference.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Message.prototype.setPhoneNumber = function (value) {
                    if (arguments.length == 1) {
                        this._phoneNumber = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Message.prototype.setProtocolVersion = function (value) {
                    if (arguments.length == 1) {
                        this._protocolVersion = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setSessionInformation'>&nbsp;</span>**/
                /**
                 <div>
                 Sets textual information about the session.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Message.prototype.setSessionInformation = function (value) {
                    if (arguments.length == 1) {
                        this._sessionInformation = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Message.prototype.setSessionName = function (value) {
                    if (arguments.length == 1) {
                        this._sessionName = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setTimeZoneAdjustments'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the time zone adjustments.
                 </div>
        
        
                @param {fm.icelink.sdp.TimeZones} value
                @return {void}
                */
                Message.prototype.setTimeZoneAdjustments = function (value) {
                    if (arguments.length == 1) {
                        this._timeZoneAdjustments = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-setUri'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the pointer to additional information about the session.
                 </div>
        
        
                @param {fm.icelink.Uri} value
                @return {void}
                */
                Message.prototype.setUri = function (value) {
                    if (arguments.length == 1) {
                        this._uri = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Message.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.StringExtensions.concat("v=", this.getProtocolVersion(), "\r\n"));
                        builder.append(fm.icelink.StringExtensions.concat("o=", this.getOrigin().toString(), "\r\n"));
                        builder.append(fm.icelink.StringExtensions.concat("s=", this.getSessionName(), "\r\n"));
                        if ((!fm.icelink.Global.equals(this.getSessionInformation(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat("i=", this.getSessionInformation(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getUri(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat("u=", this.getUri().toString(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getEmailAddress(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat("e=", this.getEmailAddress(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getPhoneNumber(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat("p=", this.getPhoneNumber(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getConnectionData(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat(this.getConnectionData().toString(), "\r\n"));
                        }
                        for (var _i = 0, _a = this.getBandwidths(); _i < _a.length; _i++) {
                            var bandwidth = _a[_i];
                            builder.append(fm.icelink.StringExtensions.concat(bandwidth.toString(), "\r\n"));
                        }
                        for (var _b = 0, _c = this.getTimeDescriptions(); _b < _c.length; _b++) {
                            var description = _c[_b];
                            builder.append(description.toString());
                        }
                        if ((!fm.icelink.Global.equals(this.getTimeZoneAdjustments(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat(this.getTimeZoneAdjustments().toString(), "\r\n"));
                        }
                        if ((!fm.icelink.Global.equals(this.getEncryptionKey(), null))) {
                            builder.append(fm.icelink.StringExtensions.concat(this.getEncryptionKey().toString(), "\r\n"));
                        }
                        for (var _d = 0, _e = this.getSessionAttributes(); _d < _e.length; _d++) {
                            var attribute = _e[_d];
                            builder.append(fm.icelink.StringExtensions.concat(attribute.toString(), "\r\n"));
                        }
                        for (var _f = 0, _g = this.getMediaDescriptions(); _f < _g.length; _f++) {
                            var description2 = _g[_f];
                            builder.append(description2.toString());
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Message-updateSetupValue'>&nbsp;</span>**/
                /**
                 <div>
                 Updates SDP Setup Value associated with the session description.
                 </div>
        
                @param {string} setupValue
                @return {void}
                */
                Message.prototype.updateSetupValue = function (setupValue) {
                    if (arguments.length == 1) {
                        this.removeSessionAttribute(fm.icelink.sdp.AttributeType.SetupAttribute);
                        var attribute = new fm.icelink.sdp.SetupAttribute(setupValue);
                        this.addSessionAttribute(attribute);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Message;
            }());
            sdp.Message = Message;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP network types.
             </div>
        
            */
            var NetworkType = /** @class */ (function () {
                function NetworkType() {
                }
                NetworkType.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.NetworkType]';
                };
                /**<span id='method-fm.icelink.sdp.NetworkType-getInternet'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP network type meaning "Internet".
                 </div>
        
        
                @return {string}
                */
                NetworkType.getInternet = function () {
                    if (arguments.length == 0) {
                        return "IN";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return NetworkType;
            }());
            sdp.NetworkType = NetworkType;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP orientations.
             </div>
        
            */
            var Orientation = /** @class */ (function () {
                function Orientation() {
                }
                Orientation.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Orientation]';
                };
                /**<span id='method-fm.icelink.sdp.Orientation-getLandscape'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP orientation meaning "Landscape".
                 </div>
        
        
                @return {string}
                */
                Orientation.getLandscape = function () {
                    if (arguments.length == 0) {
                        return "landscape";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Orientation-getPortrait'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP orientation meaning "Portrait".
                 </div>
        
        
                @return {string}
                */
                Orientation.getPortrait = function () {
                    if (arguments.length == 0) {
                        return "portrait";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Orientation-getSeascape'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP orientation meaning "Upside-Down Landscape".
                 </div>
        
        
                @return {string}
                */
                Orientation.getSeascape = function () {
                    if (arguments.length == 0) {
                        return "seascape";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Orientation;
            }());
            sdp.Orientation = Orientation;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Normally this is only used for a whiteboard or presentation
             tool.  It specifies the orientation of a the workspace on the
             screen.  It is a media-level attribute.  Permitted values are
             "portrait", "landscape", and "seascape" (upside-down
             landscape).  It is not dependent on charset.
             </div>
        
            */
            var OrientationAttribute = /** @class */ (function (_super) {
                __extends(OrientationAttribute, _super);
                /**<span id='method-fm.icelink.sdp.OrientationAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.orientationAttribute` class.
                 </div>
        
                @param {string} orientation The orientation of a workspace on the screen. See `fm.icelink.sdp.orientationAttribute.orientation` for possible values.
                @return {}
                */
                function OrientationAttribute(orientation) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var orientation_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.OrientationAttribute);
                        _this.setOrientation(orientation_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                OrientationAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.OrientationAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.OrientationAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.orientationAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.OrientationAttribute}
                */
                OrientationAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.OrientationAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.OrientationAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                OrientationAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getOrientation();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.OrientationAttribute-getOrientation'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the orientation of a workspace on the screen. See `fm.icelink.sdp.orientationAttribute.orientation` for possible values.
                 </div>
        
        
                @return {string}
                */
                OrientationAttribute.prototype.getOrientation = function () {
                    if (arguments.length == 0) {
                        return this._orientation;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                OrientationAttribute.prototype.setOrientation = function (value) {
                    if (arguments.length == 1) {
                        this._orientation = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return OrientationAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.OrientationAttribute = OrientationAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP origin element.
             </div>
        
            */
            var Origin = /** @class */ (function () {
                function Origin() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var unicastAddress = __arguments[0];
                        var username = __arguments[1];
                        //super();
                        this.fmicelinksdpOriginInit();
                        if ((fm.icelink.Global.equals(unicastAddress, null))) {
                            throw new fm.icelink.Exception("unicastAddress cannot be null.");
                        }
                        this.setUsername(username);
                        this.setSessionId(this.generateSessionId());
                        this.setSessionVersion(this.generateSessionVersion());
                        this.setNetworkType(fm.icelink.sdp.NetworkType.getInternet());
                        this.setAddressType(fm.icelink.sdp.AddressType.getAddressTypeForAddress(unicastAddress));
                        this.setUnicastAddress(unicastAddress);
                    }
                    else if (__arguments.length == 1) {
                        var unicastAddress = __arguments[0];
                        // chained constructor: Origin.call(this, unicastAddress, "-");
                        __arguments = new Array(2);
                        __arguments[0] = unicastAddress;
                        __arguments[1] = "-";
                        {
                            var unicastAddress_1 = __arguments[0];
                            var username = __arguments[1];
                            //super();
                            this.fmicelinksdpOriginInit();
                            if ((fm.icelink.Global.equals(unicastAddress_1, null))) {
                                throw new fm.icelink.Exception("unicastAddress cannot be null.");
                            }
                            this.setUsername(username);
                            this.setSessionId(this.generateSessionId());
                            this.setSessionVersion(this.generateSessionVersion());
                            this.setNetworkType(fm.icelink.sdp.NetworkType.getInternet());
                            this.setAddressType(fm.icelink.sdp.AddressType.getAddressTypeForAddress(unicastAddress_1));
                            this.setUnicastAddress(unicastAddress_1);
                        }
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Origin.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Origin]';
                };
                Origin.prototype.fmicelinksdpOriginInit = function () {
                    this._sessionId = 0;
                    this._sessionVersion = 0;
                };
                /**<span id='method-fm.icelink.sdp.Origin-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.origin` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Origin}
                */
                Origin.parse = function (s) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.StringExtensions.split(s, [32]);
                        var username = strArray[0];
                        var unicastAddress = strArray[5];
                        var origin = new fm.icelink.sdp.Origin(unicastAddress, username);
                        origin.setSessionId(fm.icelink.ParseAssistant.parseLongValue(strArray[1]));
                        origin.setSessionVersion(fm.icelink.ParseAssistant.parseLongValue(strArray[2]));
                        origin.setNetworkType(strArray[3]);
                        origin.setAddressType(strArray[4]);
                        return origin;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Origin.prototype.generateSessionId = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.LockedRandomizer.nextLong();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                Origin.prototype.generateSessionVersion = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.UnixTimestamp.getUtcNow();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getAddressType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of the address. See `fm.icelink.sdp.origin.addressType` for possible values.
                 </div>
        
        
                @return {string}
                */
                Origin.prototype.getAddressType = function () {
                    if (arguments.length == 0) {
                        return this._addressType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getNetworkType'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the type of network. See `fm.icelink.sdp.origin.networkType` for possible values.
                 </div>
        
        
                @return {string}
                */
                Origin.prototype.getNetworkType = function () {
                    if (arguments.length == 0) {
                        return this._networkType;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getSessionId'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the globally unique identifier for the session.
                 </div>
        
        
                @return {number}
                */
                Origin.prototype.getSessionId = function () {
                    if (arguments.length == 0) {
                        return this._sessionId;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getSessionVersion'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the version number for the session.
                 </div>
        
        
                @return {number}
                */
                Origin.prototype.getSessionVersion = function () {
                    if (arguments.length == 0) {
                        return this._sessionVersion;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getUnicastAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the address of the machine from which the session was created.
                 </div>
        
        
                @return {string}
                */
                Origin.prototype.getUnicastAddress = function () {
                    if (arguments.length == 0) {
                        return this._unicastAddress;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-getUsername'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the user's login on the originating host.
                 </div>
        
        
                @return {string}
                */
                Origin.prototype.getUsername = function () {
                    if (arguments.length == 0) {
                        return this._username;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setAddressType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the type of the address. See `fm.icelink.sdp.origin.addressType` for possible values.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Origin.prototype.setAddressType = function (value) {
                    if (arguments.length == 1) {
                        this._addressType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setNetworkType'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the type of network. See `fm.icelink.sdp.origin.networkType` for possible values.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Origin.prototype.setNetworkType = function (value) {
                    if (arguments.length == 1) {
                        this._networkType = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setSessionId'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the globally unique identifier for the session.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Origin.prototype.setSessionId = function (value) {
                    if (arguments.length == 1) {
                        this._sessionId = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setSessionVersion'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the version number for the session.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Origin.prototype.setSessionVersion = function (value) {
                    if (arguments.length == 1) {
                        this._sessionVersion = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setUnicastAddress'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the address of the machine from which the session was created.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Origin.prototype.setUnicastAddress = function (value) {
                    if (arguments.length == 1) {
                        this._unicastAddress = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-setUsername'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the user's login on the originating host.
                 </div>
        
        
                @param {string} value
                @return {void}
                */
                Origin.prototype.setUsername = function (value) {
                    if (arguments.length == 1) {
                        this._username = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Origin-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Origin.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(this.getUsername());
                        builder.append(" ");
                        builder.append(fm.icelink.IntExtensions.toString(this.getSessionId()));
                        builder.append(" ");
                        builder.append(fm.icelink.IntExtensions.toString(this.getSessionVersion()));
                        builder.append(" ");
                        builder.append(this.getNetworkType());
                        builder.append(" ");
                        builder.append(this.getAddressType());
                        builder.append(" ");
                        builder.append(this.getUnicastAddress());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Origin;
            }());
            sdp.Origin = Origin;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives the length of time in milliseconds represented by
             the media in a packet.  This is probably only meaningful for
             audio data, but may be used with other media types if it makes
             sense.  It should not be necessary to know ptime to decode RTP
             or vat audio, and it is intended as a recommendation for the
             encoding/packetisation of audio.  It is a media-level
             attribute, and it is not dependent on charset.
             </div>
        
            */
            var PacketTimeAttribute = /** @class */ (function (_super) {
                __extends(PacketTimeAttribute, _super);
                function PacketTimeAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var packetTime = __arguments[0];
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpPacketTimeAttributeInit();
                        _this.setPacketTime(packetTime);
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.PacketTimeAttribute);
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpPacketTimeAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.PacketTimeAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                PacketTimeAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.PacketTimeAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                PacketTimeAttribute.prototype.fmicelinksdpPacketTimeAttributeInit = function () {
                    this._packetTime = 0;
                };
                /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.packetTimeAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.PacketTimeAttribute}
                */
                PacketTimeAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var attribute = new fm.icelink.sdp.PacketTimeAttribute();
                        attribute.setPacketTime(fm.icelink.ParseAssistant.parseIntegerValue(value));
                        return attribute;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                PacketTimeAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.IntExtensions.toString(this.getPacketTime());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-getPacketTime'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the length of time in milliseconds represented by
                 the media in a packet.
                 </div>
        
        
                @return {number}
                */
                PacketTimeAttribute.prototype.getPacketTime = function () {
                    if (arguments.length == 0) {
                        return this._packetTime;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                PacketTimeAttribute.prototype.setPacketTime = function (value) {
                    if (arguments.length == 1) {
                        this._packetTime = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return PacketTimeAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.PacketTimeAttribute = PacketTimeAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/EncryptionKey.ts" />

/// <reference path="../sdp/EncryptionKey.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP encryption key with a method of "prompt".
             </div>
        
            */
            var PromptEncryptionKey = /** @class */ (function (_super) {
                __extends(PromptEncryptionKey, _super);
                function PromptEncryptionKey() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                PromptEncryptionKey.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.PromptEncryptionKey]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**
                @internal
        
                */
                PromptEncryptionKey.prototype.getMethodAndValue = function () {
                    if (arguments.length == 0) {
                        return "prompt";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return PromptEncryptionKey;
            }(fm.icelink.sdp.EncryptionKey));
            sdp.PromptEncryptionKey = PromptEncryptionKey;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives a suggestion for the quality of the encoding as an
             integer value.  The intention of the quality attribute for
             video is to specify a non-default trade-off between frame-rate
             and still-image quality.  For video, the value is in the range
             0 to 10, with the following suggested meaning:
         
             10 - the best still-image quality the compression scheme can
             give.
             5  - the default behaviour given no quality suggestion.
             0  - the worst still-image quality the codec designer thinks
             is still usable.
         
             It is a media-level attribute, and it is not dependent on
             charset.
             </div>
        
            */
            var QualityAttribute = /** @class */ (function (_super) {
                __extends(QualityAttribute, _super);
                function QualityAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var quality = __arguments[0];
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpQualityAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.QualityAttribute);
                        if (((quality < 0) || (quality > 10))) {
                            throw new fm.icelink.Exception("quality must be a value in the range 0 to 10.");
                        }
                        _this.setQuality(quality);
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _this.fmicelinksdpQualityAttributeInit();
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.QualityAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                QualityAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.QualityAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                QualityAttribute.prototype.fmicelinksdpQualityAttributeInit = function () {
                    this._quality = 0;
                };
                /**<span id='method-fm.icelink.sdp.QualityAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.qualityAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.QualityAttribute}
                */
                QualityAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        var attribute = new fm.icelink.sdp.QualityAttribute();
                        attribute.setQuality(fm.icelink.ParseAssistant.parseByteValue(value));
                        return attribute;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.QualityAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                QualityAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.IntExtensions.toString(this.getQuality());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.QualityAttribute-getQuality'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the suggested quality of the encoding as an integer value from 0-10.
                 </div>
        
        
                @return {number}
                */
                QualityAttribute.prototype.getQuality = function () {
                    if (arguments.length == 0) {
                        return this._quality;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                QualityAttribute.prototype.setQuality = function (value) {
                    if (arguments.length == 1) {
                        this._quality = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return QualityAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.QualityAttribute = QualityAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/DirectionAttribute.ts" />

/// <reference path="../sdp/DirectionAttribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies that the tools should be started in receive-only
             mode where applicable.  It can be either a session- or media-
             level attribute, and it is not dependent on charset.  Note that
             recvonly applies to the media only, not to any associated
             control protocol (e.g., an RTP-based system in recvonly mode
             SHOULD still send RTCP packets).
             </div>
        
            */
            var ReceiveOnlyAttribute = /** @class */ (function (_super) {
                __extends(ReceiveOnlyAttribute, _super);
                /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.receiveOnlyAttribute` class.
                 </div>
        
        
                @return {}
                */
                function ReceiveOnlyAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.DirectionAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                ReceiveOnlyAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ReceiveOnlyAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.receiveOnlyAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.ReceiveOnlyAttribute}
                */
                ReceiveOnlyAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.ReceiveOnlyAttribute();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                ReceiveOnlyAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-getStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stream direction.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                ReceiveOnlyAttribute.prototype.getStreamDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.StreamDirection.ReceiveOnly;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ReceiveOnlyAttribute;
            }(fm.icelink.sdp.DirectionAttribute));
            sdp.ReceiveOnlyAttribute = ReceiveOnlyAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP repeat time element.
             </div>
        
            */
            var RepeatTime = /** @class */ (function () {
                function RepeatTime() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 3) {
                        var repeatInterval = __arguments[0];
                        var activeDuration = __arguments[1];
                        var offsets = __arguments[2];
                        //super();
                        this.__offsets = new Array();
                        this.setRepeatInterval(repeatInterval);
                        this.setActiveDuration(activeDuration);
                        if ((!fm.icelink.Global.equals(offsets, null))) {
                            fm.icelink.ArrayExtensions.addRange(this.__offsets, offsets);
                        }
                    }
                    else if (__arguments.length == 2) {
                        var repeatInterval = __arguments[0];
                        var activeDuration = __arguments[1];
                        // chained constructor: RepeatTime.call(this, repeatInterval, activeDuration, null);
                        __arguments = new Array(3);
                        __arguments[0] = repeatInterval;
                        __arguments[1] = activeDuration;
                        __arguments[2] = null;
                        {
                            var repeatInterval_1 = __arguments[0];
                            var activeDuration_1 = __arguments[1];
                            var offsets = __arguments[2];
                            //super();
                            this.__offsets = new Array();
                            this.setRepeatInterval(repeatInterval_1);
                            this.setActiveDuration(activeDuration_1);
                            if ((!fm.icelink.Global.equals(offsets, null))) {
                                fm.icelink.ArrayExtensions.addRange(this.__offsets, offsets);
                            }
                        }
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                RepeatTime.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.RepeatTime]';
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.repeatTime` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.RepeatTime}
                */
                RepeatTime.parse = function (s) {
                    if (arguments.length == 1) {
                        s = s.substring(2);
                        var strArray = fm.icelink.StringExtensions.split(s, [32]);
                        var repeatInterval = new fm.icelink.TimeSpan(0, 0, fm.icelink.ParseAssistant.parseIntegerValue(strArray[0]));
                        var activeDuration = new fm.icelink.TimeSpan(0, 0, fm.icelink.ParseAssistant.parseIntegerValue(strArray[1]));
                        var time = new fm.icelink.sdp.RepeatTime(repeatInterval, activeDuration);
                        for (var i = 2; (i < strArray.length); i++) {
                            time.addOffset(new fm.icelink.TimeSpan(0, 0, fm.icelink.ParseAssistant.parseIntegerValue(strArray[2])));
                        }
                        return time;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-addOffset'>&nbsp;</span>**/
                /**
                 <div>
                 Adds an offset from the start time.
                 </div>
        
                @param {fm.icelink.TimeSpan} offset The offset from the start time to add.
                @return {void}
                */
                RepeatTime.prototype.addOffset = function (offset) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__offsets, offset);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-getActiveDuration'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the active duration.
                 </div>
        
        
                @return {fm.icelink.TimeSpan}
                */
                RepeatTime.prototype.getActiveDuration = function () {
                    if (arguments.length == 0) {
                        return this._activeDuration;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-getOffsets'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of offsets from the start time.
                 </div>
        
        
                @return {fm.icelink.TimeSpan[]}
                */
                RepeatTime.prototype.getOffsets = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__offsets);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-getRepeatInterval'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the repeat interval.
                 </div>
        
        
                @return {fm.icelink.TimeSpan}
                */
                RepeatTime.prototype.getRepeatInterval = function () {
                    if (arguments.length == 0) {
                        return this._repeatInterval;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-removeOffset'>&nbsp;</span>**/
                /**
                 <div>
                 Removes an offset from the start time.
                 </div>
        
                @param {fm.icelink.TimeSpan} offset The offset from the start time to remove.
                @return {boolean}
                */
                RepeatTime.prototype.removeOffset = function (offset) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__offsets, offset);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                RepeatTime.prototype.setActiveDuration = function (value) {
                    if (arguments.length == 1) {
                        this._activeDuration = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                RepeatTime.prototype.setRepeatInterval = function (value) {
                    if (arguments.length == 1) {
                        this._repeatInterval = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.RepeatTime-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                RepeatTime.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("r=");
                        builder.append(fm.icelink.IntExtensions.toString(this.getRepeatInterval().getTotalSeconds()));
                        builder.append(" ");
                        var totalSeconds = this.getActiveDuration().getTotalSeconds();
                        builder.append(fm.icelink.IntExtensions.toString(totalSeconds));
                        for (var _i = 0, _a = this.getOffsets(); _i < _a.length; _i++) {
                            var span = _a[_i];
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(span.getTotalSeconds()));
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return RepeatTime;
            }());
            sdp.RepeatTime = RepeatTime;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtcp;
            (function (rtcp) {
                /**
                 <div>
                 The RTCP attribute is used to document the RTCP port used for media
                 stream, when that port is not the next higher (odd) port number
                 following the RTP port described in the media line.
                 </div>
            
                */
                var Attribute = /** @class */ (function (_super) {
                    __extends(Attribute, _super);
                    function Attribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtcpAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpAttribute);
                        }
                        else if (__arguments.length == 2) {
                            var port = __arguments[0];
                            var connectionAddress = __arguments[1];
                            // chained constructor: Attribute.call(this);
                            __arguments = new Array(0);
                            {
                                _this = _super.call(this) || this;
                                _this.fmicelinksdprtcpAttributeInit();
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpAttribute);
                            }
                            if ((fm.icelink.Global.equals(connectionAddress, null))) {
                                throw new fm.icelink.Exception("connectionAddress cannot be null.");
                            }
                            _this.update(port, connectionAddress);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    Attribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtcp.Attribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    Attribute.prototype.fmicelinksdprtcpAttributeInit = function () {
                        this._port = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtcp.attribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtcp.Attribute}
                    */
                    Attribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num2 = 0;
                            var str = null;
                            var str2 = null;
                            var str3 = null;
                            if ((fm.icelink.Global.equals(index, -1))) {
                                num2 = fm.icelink.ParseAssistant.parseIntegerValue(value);
                            }
                            else {
                                num2 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                                value = value.substring((index + 1));
                                index = fm.icelink.StringExtensions.indexOf(value, " ");
                                str = fm.icelink.StringExtensions.substring(value, 0, index);
                                value = value.substring((index + 1));
                                index = fm.icelink.StringExtensions.indexOf(value, " ");
                                str2 = fm.icelink.StringExtensions.substring(value, 0, index);
                                value = value.substring((index + 1));
                                str3 = value;
                            }
                            var attribute = new fm.icelink.sdp.rtcp.Attribute();
                            attribute.setPort(num2);
                            attribute.setNetworkType(str);
                            attribute.setAddressType(str2);
                            attribute.setConnectionAddress(str3);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getAddressType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the type of the address. See `fm.icelink.sdp.rtcp.attribute.addressType` for possible values.
                     </div>
            
            
                    @return {string}
                    */
                    Attribute.prototype.getAddressType = function () {
                        if (arguments.length == 0) {
                            return this._addressType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    Attribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getPort()));
                            if ((!fm.icelink.Global.equals(this.getConnectionAddress(), null))) {
                                builder.append(" ");
                                builder.append(this.getNetworkType());
                                builder.append(" ");
                                builder.append(this.getAddressType());
                                builder.append(" ");
                                builder.append(this.getConnectionAddress());
                            }
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getConnectionAddress'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP connection address.
                     </div>
            
            
                    @return {string}
                    */
                    Attribute.prototype.getConnectionAddress = function () {
                        if (arguments.length == 0) {
                            return this._connectionAddress;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getNetworkType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the type of network. See `fm.icelink.sdp.rtcp.attribute.networkType` for possible values.
                     </div>
            
            
                    @return {string}
                    */
                    Attribute.prototype.getNetworkType = function () {
                        if (arguments.length == 0) {
                            return this._networkType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP port number.
                     </div>
            
            
                    @return {number}
                    */
                    Attribute.prototype.getPort = function () {
                        if (arguments.length == 0) {
                            return this._port;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    Attribute.prototype.setAddressType = function (value) {
                        if (arguments.length == 1) {
                            this._addressType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    Attribute.prototype.setConnectionAddress = function (value) {
                        if (arguments.length == 1) {
                            this._connectionAddress = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    Attribute.prototype.setNetworkType = function (value) {
                        if (arguments.length == 1) {
                            this._networkType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    Attribute.prototype.setPort = function (value) {
                        if (arguments.length == 1) {
                            this._port = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.Attribute-update'>&nbsp;</span>**/
                    /**
                     <div>
                     Updates the port and connection address.
                     </div>
            
                    @param {number} port The port.
                    @param {string} connectionAddress The connection address.
                    @return {void}
                    */
                    Attribute.prototype.update = function (port, connectionAddress) {
                        if (arguments.length == 2) {
                            this.setPort(port);
                            this.setNetworkType(fm.icelink.sdp.NetworkType.getInternet());
                            this.setAddressType(fm.icelink.sdp.AddressType.getAddressTypeForAddress(connectionAddress));
                            this.setConnectionAddress(connectionAddress);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return Attribute;
                }(fm.icelink.sdp.Attribute));
                rtcp.Attribute = Attribute;
            })(rtcp = sdp.rtcp || (sdp.rtcp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtcp;
            (function (rtcp) {
                /**
                 <div>
                 This attribute is used to indicate the capability of
                 using RTCP feedback.
                 </div>
            
                */
                var FeedbackAttribute = /** @class */ (function (_super) {
                    __extends(FeedbackAttribute, _super);
                    function FeedbackAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtcpFeedbackAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute);
                        }
                        else if (__arguments.length == 3) {
                            var payloadType = __arguments[0];
                            var type = __arguments[1];
                            var subtype = __arguments[2];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtcpFeedbackAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute);
                            _this.setPayloadType(payloadType);
                            _this.setType(type);
                            _this.setSubType(subtype);
                        }
                        else if (__arguments.length == 2) {
                            var payloadType = __arguments[0];
                            var type = __arguments[1];
                            // chained constructor: FeedbackAttribute.call(this, payloadType, type, null);
                            __arguments = new Array(3);
                            __arguments[0] = payloadType;
                            __arguments[1] = type;
                            __arguments[2] = null;
                            {
                                var payloadType_1 = __arguments[0];
                                var type_5 = __arguments[1];
                                var subtype = __arguments[2];
                                _this = _super.call(this) || this;
                                _this.fmicelinksdprtcpFeedbackAttributeInit();
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpFeedbackAttribute);
                                _this.setPayloadType(payloadType_1);
                                _this.setType(type_5);
                                _this.setSubType(subtype);
                            }
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    FeedbackAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtcp.FeedbackAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    FeedbackAttribute.prototype.fmicelinksdprtcpFeedbackAttributeInit = function () {
                        this._payloadType = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-ccmFirAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "ccm fir" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.ccmFirAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getCcm(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getFir());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtcp.feedbackAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var wildcardPayloadType = fm.icelink.sdp.rtcp.FeedbackAttribute.getWildcardPayloadType();
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            if ((index < 0)) {
                                fm.icelink.Log.error(fm.icelink.StringExtensions.concat("Could not parse SDP attribute (RTCP feedback): ", value));
                                return null;
                            }
                            var s = fm.icelink.StringExtensions.substring(value, 0, index);
                            if ((!fm.icelink.Global.equals(s, "*"))) {
                                wildcardPayloadType = fm.icelink.ParseAssistant.parseIntegerValue(s);
                            }
                            value = value.substring((index + 1));
                            var str2 = value;
                            var str3 = null;
                            index = fm.icelink.StringExtensions.indexOf(value, " ");
                            if ((index >= 0)) {
                                str2 = fm.icelink.StringExtensions.substring(value, 0, index);
                                value = value.substring((index + 1));
                                str3 = value;
                            }
                            var attribute = new fm.icelink.sdp.rtcp.FeedbackAttribute();
                            attribute.setPayloadType(wildcardPayloadType);
                            attribute.setType(str2);
                            attribute.setSubType(str3);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getWildcardPayloadType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the payload type that represents
                     wildcard feedback attributes ('*').
                     </div>
            
            
                    @return {number}
                    */
                    FeedbackAttribute.getWildcardPayloadType = function () {
                        if (arguments.length == 0) {
                            return -1;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "nack" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.nackAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackPliAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "nack pli" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.nackPliAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getPli());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackRpsiAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "nack rpsi" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.nackRpsiAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getRpsi());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackSliAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "nack sli" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.nackSliAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getSli());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-rembAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Creates a "goog-remb" feedback attribute.
                     </div>
            
                    @param {number} payloadType The payload type.
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    FeedbackAttribute.rembAttribute = function (payloadType) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.FeedbackAttribute(payloadType, fm.icelink.sdp.rtcp.FeedbackAttributeType.getRemb());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var str = ((fm.icelink.Global.equals(this.getPayloadType(), fm.icelink.sdp.rtcp.FeedbackAttribute.getWildcardPayloadType())) ? "*" : fm.icelink.IntExtensions.toString(this.getPayloadType()));
                            if ((fm.icelink.Global.equals(this.getSubType(), null))) {
                                return fm.icelink.StringExtensions.format("{0} {1}", str, this.getType());
                            }
                            return fm.icelink.StringExtensions.format("{0} {1} {2}", str, this.getType(), this.getSubType());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getPayloadType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the payload type.
                     </div>
            
            
                    @return {number}
                    */
                    FeedbackAttribute.prototype.getPayloadType = function () {
                        if (arguments.length == 0) {
                            return this._payloadType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getSubType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the sub-type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttribute.prototype.getSubType = function () {
                        if (arguments.length == 0) {
                            return this._subType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttribute.prototype.getType = function () {
                        if (arguments.length == 0) {
                            return this._type;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setPayloadType'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the payload type.
                     </div>
            
            
                    @param {number} value
                    @return {void}
                    */
                    FeedbackAttribute.prototype.setPayloadType = function (value) {
                        if (arguments.length == 1) {
                            this._payloadType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setSubType'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the sub-type.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    FeedbackAttribute.prototype.setSubType = function (value) {
                        if (arguments.length == 1) {
                            this._subType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setType'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the type.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    FeedbackAttribute.prototype.setType = function (value) {
                        if (arguments.length == 1) {
                            this._type = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return FeedbackAttribute;
                }(fm.icelink.sdp.Attribute));
                rtcp.FeedbackAttribute = FeedbackAttribute;
            })(rtcp = sdp.rtcp || (sdp.rtcp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtcp;
            (function (rtcp) {
                /**
                 <div>
                 A feedback attribute sub type.
                 </div>
            
                */
                var FeedbackAttributeSubType = /** @class */ (function () {
                    function FeedbackAttributeSubType() {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            //super();
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    FeedbackAttributeSubType.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtcp.FeedbackAttributeSubType]';
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getFir'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "full intraframe refresh" sub-type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeSubType.getFir = function () {
                        if (arguments.length == 0) {
                            return "fir";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getPli'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "picture loss indication" sub-type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeSubType.getPli = function () {
                        if (arguments.length == 0) {
                            return "pli";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getRpsi'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "reference picture selection indication" sub-type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeSubType.getRpsi = function () {
                        if (arguments.length == 0) {
                            return "rpsi";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getSli'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "slice loss indication" sub-type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeSubType.getSli = function () {
                        if (arguments.length == 0) {
                            return "sli";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return FeedbackAttributeSubType;
                }());
                rtcp.FeedbackAttributeSubType = FeedbackAttributeSubType;
            })(rtcp = sdp.rtcp || (sdp.rtcp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtcp;
            (function (rtcp) {
                /**
                 <div>
                 A feedback attribute type.
                 </div>
            
                */
                var FeedbackAttributeType = /** @class */ (function () {
                    function FeedbackAttributeType() {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            //super();
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    FeedbackAttributeType.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtcp.FeedbackAttributeType]';
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getAck'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "positive acknowledgement" type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeType.getAck = function () {
                        if (arguments.length == 0) {
                            return "ack";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getApp'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the application-defined type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeType.getApp = function () {
                        if (arguments.length == 0) {
                            return "app";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getCcm'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "codec control message" type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeType.getCcm = function () {
                        if (arguments.length == 0) {
                            return "ccm";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getNack'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "negative acknowledgement" type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeType.getNack = function () {
                        if (arguments.length == 0) {
                            return "nack";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getRemb'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the "receiver estimated maximum bitrate" type.
                     </div>
            
            
                    @return {string}
                    */
                    FeedbackAttributeType.getRemb = function () {
                        if (arguments.length == 0) {
                            return "goog-remb";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return FeedbackAttributeType;
                }());
                rtcp.FeedbackAttributeType = FeedbackAttributeType;
            })(rtcp = sdp.rtcp || (sdp.rtcp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtcp;
            (function (rtcp) {
                /**
                 <div>
                 This attribute is used to signal that RTP and RTCP traffic should be
                 multiplexed on a single port.  It is a property attribute, which does
                 not take a value.
                 </div>
            
                */
                var MuxAttribute = /** @class */ (function (_super) {
                    __extends(MuxAttribute, _super);
                    /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtcp.muxAttribute` class.
                     </div>
            
            
                    @return {}
                    */
                    function MuxAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtcpMuxAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    MuxAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtcp.MuxAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtcp.muxAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtcp.MuxAttribute}
                    */
                    MuxAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            return new fm.icelink.sdp.rtcp.MuxAttribute();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    MuxAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            return null;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return MuxAttribute;
                }(fm.icelink.sdp.Attribute));
                rtcp.MuxAttribute = MuxAttribute;
            })(rtcp = sdp.rtcp || (sdp.rtcp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                 <div>
                 https://tools.ietf.org/html/rfc5285#section-5
                 Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
                 local identifiers used in the header extension to a larger namespace.
             
                 A usable mapping MUST use IDs in the valid range, and each ID in this
                 range MUST be used only once for each media (or only once if the
                 mappings are session level).  Mappings that do not conform to these
                 rules MAY be presented, for instance, during offer/answer negotiation
                 as described in the next section, but remapping to conformant values
                 is necessary before they can be applied.
             
                 Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
                 string using an attribute of the form:
                 a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
                 Where URI is a URI, as above, VALUE is the local identifier (ID)
                 of this extension and is an integer in the valid range inclusive (0
                 is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
                 and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
                 Example:
             
                 a=extmap:1 http://example.com/082005/ext.htm#ttime
                 a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short
                 </div>
            
                */
                var ExtMapAttribute = /** @class */ (function (_super) {
                    __extends(ExtMapAttribute, _super);
                    function ExtMapAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 2) {
                            var id = __arguments[0];
                            var uri = __arguments[1];
                            // chained constructor: ExtMapAttribute.call(this);
                            __arguments = new Array(0);
                            {
                                _this = _super.call(this) || this;
                                _this.fmicelinksdprtpExtMapAttributeInit();
                                _this.__direction = fm.icelink.StreamDirection.Unset;
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpExtMapAttribute);
                            }
                            _this.setId(id);
                            _this.setUri(uri);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtpExtMapAttributeInit();
                            _this.__direction = fm.icelink.StreamDirection.Unset;
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpExtMapAttribute);
                        }
                        else if (__arguments.length == 3) {
                            var id = __arguments[0];
                            var uri = __arguments[1];
                            var direction = __arguments[2];
                            // chained constructor: ExtMapAttribute.call(this, id, uri);
                            __arguments = new Array(2);
                            __arguments[0] = id;
                            __arguments[1] = uri;
                            {
                                var id_3 = __arguments[0];
                                var uri_1 = __arguments[1];
                                // chained constructor: ExtMapAttribute.call(this);
                                __arguments = new Array(0);
                                {
                                    _this = _super.call(this) || this;
                                    _this.fmicelinksdprtpExtMapAttributeInit();
                                    _this.__direction = fm.icelink.StreamDirection.Unset;
                                    _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpExtMapAttribute);
                                }
                                _this.setId(id_3);
                                _this.setUri(uri_1);
                            }
                            _this.setDirection(direction);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    ExtMapAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.ExtMapAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    ExtMapAttribute.prototype.fmicelinksdprtpExtMapAttributeInit = function () {
                        this._id = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtp.ExtMapAttribute}
                    */
                    ExtMapAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num2 = fm.icelink.StringExtensions.indexOf(value, "/");
                            var flag = ((num2 > -1) && (index > num2));
                            var unset = fm.icelink.StreamDirection.Unset;
                            var id = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, ((num2 > -1) ? fm.icelink.MathAssistant.min(index, num2) : index)));
                            if (flag) {
                                unset = fm.icelink.StreamDirectionHelper.directionFromString(fm.icelink.StringExtensions.substring(value, (num2 + 1), ((index - num2) - 1)));
                            }
                            var str2 = value.substring((index + 1));
                            var length_37 = fm.icelink.StringExtensions.indexOf(str2, " ");
                            var uri = "";
                            var str4 = "";
                            if ((fm.icelink.Global.equals(length_37, -1))) {
                                uri = str2;
                            }
                            else {
                                uri = fm.icelink.StringExtensions.substring(str2, 0, length_37);
                                str4 = str2.substring((length_37 + 1));
                            }
                            var attribute = new fm.icelink.sdp.rtp.ExtMapAttribute(id, uri);
                            if (flag) {
                                attribute.setDirection(unset);
                            }
                            if (!fm.icelink.StringExtensions.isNullOrEmpty(str4)) {
                                attribute.setExtensionAttributes(str4);
                            }
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
                    @return {string}
                    */
                    ExtMapAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getId()));
                            if ((!fm.icelink.Global.equals(this.getDirection(), fm.icelink.StreamDirection.Unset))) {
                                var str = fm.icelink.StreamDirectionHelper.directionToString(this.getDirection());
                                builder.append("/");
                                builder.append(str);
                            }
                            builder.append(" ");
                            builder.append(this.getUri());
                            if (!fm.icelink.StringExtensions.isNullOrEmpty(this.getExtensionAttributes())) {
                                builder.append(" ");
                                builder.append(this.getExtensionAttributes());
                            }
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getDirection'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
                     </div>
            
            
                    @return {fm.icelink.StreamDirection}
                    */
                    ExtMapAttribute.prototype.getDirection = function () {
                        if (arguments.length == 0) {
                            return this.__direction;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getExtensionAttributes'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets extension attributes (optional).
                     </div>
            
            
                    @return {string}
                    */
                    ExtMapAttribute.prototype.getExtensionAttributes = function () {
                        if (arguments.length == 0) {
                            return this._extensionAttributes;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getId'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the local identifier of this extension.
                     </div>
            
            
                    @return {number}
                    */
                    ExtMapAttribute.prototype.getId = function () {
                        if (arguments.length == 0) {
                            return this._id;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getUri'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the well-known URI of this extension
                     </div>
            
            
                    @return {string}
                    */
                    ExtMapAttribute.prototype.getUri = function () {
                        if (arguments.length == 0) {
                            return this._uri;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-setDirection'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
                     </div>
            
            
                    @param {fm.icelink.StreamDirection} value
                    @return {void}
                    */
                    ExtMapAttribute.prototype.setDirection = function (value) {
                        if (arguments.length == 1) {
                            this.__direction = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-setExtensionAttributes'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets extension attributes (optional).
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    ExtMapAttribute.prototype.setExtensionAttributes = function (value) {
                        if (arguments.length == 1) {
                            this._extensionAttributes = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    ExtMapAttribute.prototype.setId = function (value) {
                        if (arguments.length == 1) {
                            this._id = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    ExtMapAttribute.prototype.setUri = function (value) {
                        if (arguments.length == 1) {
                            this._uri = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return ExtMapAttribute;
                }(fm.icelink.sdp.Attribute));
                rtp.ExtMapAttribute = ExtMapAttribute;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                @internal
                */
                var FeedbackAttributeCollection = /** @class */ (function () {
                    function FeedbackAttributeCollection() {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            //super();
                            this.__attributes = {};
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    FeedbackAttributeCollection.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.FeedbackAttributeCollection]';
                    };
                    FeedbackAttributeCollection.prototype.addAttribute = function (attribute) {
                        if (arguments.length == 1) {
                            var key = this.calculateFeedbackAttributeKey(attribute.getPayloadType(), attribute.getType(), attribute.getSubType());
                            if (!fm.icelink.HashExtensions.containsKey(this.__attributes, key)) {
                                fm.icelink.HashExtensions.add(this.__attributes, key, attribute);
                                return true;
                            }
                            return false;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    FeedbackAttributeCollection.prototype.calculateFeedbackAttributeKey = function (payloadType, feedbackAttributeType, subType) {
                        if (arguments.length == 3) {
                            var str = (fm.icelink.StringExtensions.isNullOrEmpty(feedbackAttributeType) ? "null" : feedbackAttributeType);
                            var str2 = (fm.icelink.StringExtensions.isNullOrEmpty(subType) ? "null" : subType);
                            var str3 = fm.icelink.IntExtensions.toString(payloadType);
                            return fm.icelink.StringExtensions.concat([str, "&", str2, "&", str3]);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    FeedbackAttributeCollection.prototype.clear = function () {
                        if (arguments.length == 0) {
                            fm.icelink.HashExtensions.clear(this.__attributes);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    FeedbackAttributeCollection.prototype.remove = function (attribute) {
                        if (arguments.length == 1) {
                            var key = this.calculateFeedbackAttributeKey(attribute.getPayloadType(), attribute.getType(), attribute.getSubType());
                            return fm.icelink.HashExtensions.remove(this.__attributes, key);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    FeedbackAttributeCollection.prototype.toArray = function () {
                        if (arguments.length == 0) {
                            var list = new Array();
                            for (var _i = 0, _a = fm.icelink.HashExtensions.getValues(this.__attributes); _i < _a.length; _i++) {
                                var attribute = _a[_i];
                                fm.icelink.ArrayExtensions.add(list, attribute);
                            }
                            return fm.icelink.ArrayExtensions.toArray(list);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    FeedbackAttributeCollection.prototype.tryGetFeedbackAttribute = function (payloadType, feedbackAttributeType, subType, feedbackAttribute) {
                        if (arguments.length == 4) {
                            var attribute = null;
                            var key = this.calculateFeedbackAttributeKey(payloadType, feedbackAttributeType, subType);
                            var _var0 = new fm.icelink.Holder(attribute);
                            var _var1 = fm.icelink.HashExtensions.tryGetValue(this.__attributes, key, _var0);
                            attribute = _var0.getValue();
                            if (_var1) {
                                feedbackAttribute.setValue(attribute);
                                return true;
                            }
                            feedbackAttribute.setValue(null);
                            return false;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return FeedbackAttributeCollection;
                }());
                rtp.FeedbackAttributeCollection = FeedbackAttributeCollection;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                 <div>
                 This attribute maps from an RTP payload type number (as used in
                 an "m=" line) to an format name denoting the payload format
                 to be used.  It also provides information on the clock rate and
                 format parameters.  It is a media-level attribute that is not
                 dependent on charset.
                 </div>
            
                */
                var MapAttribute = /** @class */ (function (_super) {
                    __extends(MapAttribute, _super);
                    function MapAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 3) {
                            var payloadType = __arguments[0];
                            var formatName = __arguments[1];
                            var clockRate = __arguments[2];
                            // chained constructor: MapAttribute.call(this, payloadType, formatName, clockRate, null);
                            __arguments = new Array(4);
                            __arguments[0] = payloadType;
                            __arguments[1] = formatName;
                            __arguments[2] = clockRate;
                            __arguments[3] = null;
                            {
                                var payloadType_2 = __arguments[0];
                                var formatName_1 = __arguments[1];
                                var clockRate_3 = __arguments[2];
                                var formatParameters = __arguments[3];
                                _this = _super.call(this) || this;
                                _this.fmicelinksdprtpMapAttributeInit();
                                _this.__relatedRtcpFeedbackAttributes = new fm.icelink.sdp.rtp.FeedbackAttributeCollection();
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpMapAttribute);
                                if ((fm.icelink.Global.equals(formatName_1, null))) {
                                    throw new fm.icelink.Exception("formatName cannot be null.");
                                }
                                _this.setPayloadType(payloadType_2);
                                _this.setFormatName(formatName_1);
                                _this.setClockRate(clockRate_3);
                                _this.setFormatParameters(formatParameters);
                            }
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtpMapAttributeInit();
                            _this.__relatedRtcpFeedbackAttributes = new fm.icelink.sdp.rtp.FeedbackAttributeCollection();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpMapAttribute);
                        }
                        else if (__arguments.length == 4) {
                            var payloadType = __arguments[0];
                            var formatName = __arguments[1];
                            var clockRate = __arguments[2];
                            var formatParameters = __arguments[3];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtpMapAttributeInit();
                            _this.__relatedRtcpFeedbackAttributes = new fm.icelink.sdp.rtp.FeedbackAttributeCollection();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpMapAttribute);
                            if ((fm.icelink.Global.equals(formatName, null))) {
                                throw new fm.icelink.Exception("formatName cannot be null.");
                            }
                            _this.setPayloadType(payloadType);
                            _this.setFormatName(formatName);
                            _this.setClockRate(clockRate);
                            _this.setFormatParameters(formatParameters);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    MapAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.MapAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    MapAttribute.prototype.fmicelinksdprtpMapAttributeInit = function () {
                        this._clockRate = 0;
                        this._payloadType = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtp.MapAttribute}
                    */
                    MapAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num2 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            var length_38 = fm.icelink.StringExtensions.indexOf(value, "/");
                            var str = fm.icelink.StringExtensions.substring(value, 0, length_38);
                            value = value.substring((length_38 + 1));
                            length_38 = fm.icelink.StringExtensions.indexOf(value, "/");
                            var num4 = 0;
                            var str2 = null;
                            if ((fm.icelink.Global.equals(length_38, -1))) {
                                num4 = fm.icelink.ParseAssistant.parseIntegerValue(value);
                            }
                            else {
                                num4 = fm.icelink.ParseAssistant.parseIntegerValue(fm.icelink.StringExtensions.substring(value, 0, length_38));
                                str2 = value.substring((length_38 + 1));
                            }
                            var attribute = new fm.icelink.sdp.rtp.MapAttribute();
                            attribute.setPayloadType(num2);
                            attribute.setFormatName(str);
                            attribute.setClockRate(num4);
                            attribute.setFormatParameters(str2);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-addRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Adds an Rtcp Feedback attribute associated with this Map Attribute.
                     </div>
            
                    @param {fm.icelink.sdp.rtcp.FeedbackAttribute} attribute
                    @return {void}
                    */
                    MapAttribute.prototype.addRelatedRtcpFeedbackAttribute = function (attribute) {
                        if (arguments.length == 1) {
                            this.__relatedRtcpFeedbackAttributes.addAttribute(attribute);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    MapAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getPayloadType()));
                            builder.append(" ");
                            builder.append(this.getFormatName());
                            builder.append("/");
                            builder.append(fm.icelink.IntExtensions.toString(this.getClockRate()));
                            if (!fm.icelink.StringExtensions.isNullOrEmpty(this.getFormatParameters())) {
                                builder.append("/");
                                builder.append(this.getFormatParameters());
                            }
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getClockRate'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the payload clock rate.
                     </div>
            
            
                    @return {number}
                    */
                    MapAttribute.prototype.getClockRate = function () {
                        if (arguments.length == 0) {
                            return this._clockRate;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getFormatName'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the format name denoting the payload format to be used.
                     </div>
            
            
                    @return {string}
                    */
                    MapAttribute.prototype.getFormatName = function () {
                        if (arguments.length == 0) {
                            return this._formatName;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getFormatParameters'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets format parameters for the payload.
                     </div>
            
            
                    @return {string}
                    */
                    MapAttribute.prototype.getFormatParameters = function () {
                        if (arguments.length == 0) {
                            return this._formatParameters;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getPayloadType'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTP payload type number.
                     </div>
            
            
                    @return {number}
                    */
                    MapAttribute.prototype.getPayloadType = function () {
                        if (arguments.length == 0) {
                            return this._payloadType;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedCcmFirFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "ccm fir" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedCcmFirFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getCcm(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getFir());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedFormatParametersAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets Format Parameters attribute associated with this Map Attribute
                     </div>
            
            
                    @return {fm.icelink.sdp.FormatParametersAttribute}
                    */
                    MapAttribute.prototype.getRelatedFormatParametersAttribute = function () {
                        if (arguments.length == 0) {
                            return this._relatedFormatParametersAttribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "nack" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedNackFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), null);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackPliFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "nack pli" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedNackPliFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getPli());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackRpsiFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedNackRpsiFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getRpsi());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackSliFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "nack sli" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedNackSliFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getNack(), fm.icelink.sdp.rtcp.FeedbackAttributeSubType.getSli());
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRembFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the RTCP "goog-remb" feedback attribute associated with this payload type.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
                    */
                    MapAttribute.prototype.getRelatedRembFeedbackAttribute = function () {
                        if (arguments.length == 0) {
                            return this.getRelatedRtcpFeedbackAttribute(fm.icelink.sdp.rtcp.FeedbackAttributeType.getRemb(), null);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    MapAttribute.prototype.getRelatedRtcpFeedbackAttribute = function () {
                        if (arguments.length == 3) {
                            var payloadType = arguments[0];
                            var type = arguments[1];
                            var subType = arguments[2];
                            for (var _i = 0, _a = this.getRelatedRtcpFeedbackAttributes(); _i < _a.length; _i++) {
                                var attribute = _a[_i];
                                if (((((!fm.icelink.Global.equals(attribute, null)) && (fm.icelink.Global.equals(attribute.getType(), type))) && (fm.icelink.Global.equals(attribute.getSubType(), subType))) && (fm.icelink.Global.equals(attribute.getPayloadType(), payloadType)))) {
                                    return attribute;
                                }
                            }
                            return null;
                        }
                        else if (arguments.length == 2) {
                            var type = arguments[0];
                            var subType = arguments[1];
                            for (var _b = 0, _c = this.getRelatedRtcpFeedbackAttributes(); _b < _c.length; _b++) {
                                var attribute = _c[_b];
                                if ((((!fm.icelink.Global.equals(attribute, null)) && (fm.icelink.Global.equals(attribute.getType(), type))) && (fm.icelink.Global.equals(attribute.getSubType(), subType)))) {
                                    return attribute;
                                }
                            }
                            return null;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRtcpFeedbackAttributes'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets Rtcp Feedback attributes associated with this Map Attribute.
                     </div>
            
            
                    @return {fm.icelink.sdp.rtcp.FeedbackAttribute[]}
                    */
                    MapAttribute.prototype.getRelatedRtcpFeedbackAttributes = function () {
                        if (arguments.length == 0) {
                            return this.__relatedRtcpFeedbackAttributes.toArray();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-removeRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Removes an Rtcp Feedback attribute associated with this Map Attribute.
                     Returns true if the attribute was reomved; if the attribute was not present, returns false.
                     </div>
            
                    @param {fm.icelink.sdp.rtcp.FeedbackAttribute} attribute
                    @return {boolean}
                    */
                    MapAttribute.prototype.removeRelatedRtcpFeedbackAttribute = function (attribute) {
                        if (arguments.length == 1) {
                            return this.__relatedRtcpFeedbackAttributes.remove(attribute);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-resetRtcpFeedbackAttributes'>&nbsp;</span>**/
                    /**
                     <div>
                     Resets Rtcp Feedback attributes associated with this Map Attribute.
                     </div>
            
            
                    @param {fm.icelink.sdp.rtcp.FeedbackAttribute[]} attributes
                    @return {void}
                    */
                    MapAttribute.prototype.resetRtcpFeedbackAttributes = function (attributes) {
                        if (arguments.length == 1) {
                            this.__relatedRtcpFeedbackAttributes.clear();
                            for (var _i = 0, attributes_4 = attributes; _i < attributes_4.length; _i++) {
                                var attribute = attributes_4[_i];
                                this.__relatedRtcpFeedbackAttributes.addAttribute(attribute);
                            }
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setClockRate = function (value) {
                        if (arguments.length == 1) {
                            this._clockRate = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setFormatName = function (value) {
                        if (arguments.length == 1) {
                            this._formatName = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setFormatParameters = function (value) {
                        if (arguments.length == 1) {
                            this._formatParameters = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setPayloadType = function (value) {
                        if (arguments.length == 1) {
                            this._payloadType = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-setRelatedFormatParametersAttribute'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets Format Parameters attribute associated with this Map Attribute
                     </div>
            
            
                    @param {fm.icelink.sdp.FormatParametersAttribute} value
                    @return {void}
                    */
                    MapAttribute.prototype.setRelatedFormatParametersAttribute = function (value) {
                        if (arguments.length == 1) {
                            this._relatedFormatParametersAttribute = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return MapAttribute;
                }(fm.icelink.sdp.Attribute));
                rtp.MapAttribute = MapAttribute;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Media.ts" />

/// <reference path="../../sdp/Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                 <div>
                 An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
                 </div>
            
                */
                var Media = /** @class */ (function (_super) {
                    __extends(Media, _super);
                    /**<span id='method-fm.icelink.sdp.rtp.Media-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtp.media` class.
                     </div>
            
                    @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
                    @param {number} transportPort The transport port.
                    @param {string} transportProtocol The transport protocol.
                    @param {number[]} rtpPayloadTypeNumbers The RTP payload type numbers.
                    @return {}
                    */
                    function Media(mediaType, transportPort, transportProtocol, rtpPayloadTypeNumbers) {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 4) {
                            var mediaType_2 = __arguments[0];
                            var transportPort_2 = __arguments[1];
                            var transportProtocol_2 = __arguments[2];
                            var rtpPayloadTypeNumbers_1 = __arguments[3];
                            _this = _super.call(this, mediaType_2, transportPort_2, transportProtocol_2) || this;
                            if ((fm.icelink.Global.equals(rtpPayloadTypeNumbers_1, null))) {
                                throw new fm.icelink.Exception("rtpPayloadTypeNumbers cannot be null.");
                            }
                            var strArray = new Array(rtpPayloadTypeNumbers_1.length);
                            for (var i = 0; (i < rtpPayloadTypeNumbers_1.length); i++) {
                                strArray[i] = fm.icelink.IntExtensions.toString(rtpPayloadTypeNumbers_1[i]);
                            }
                            _super.prototype.setFormatDescription.call(_this, fm.icelink.StringExtensions.join(" ", strArray));
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    Media.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.Media]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-generateRtpProfile'>&nbsp;</span>**/
                    /**
                     <div>
                     Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.
                     </div>
            
                    @param {fm.icelink.StreamType} type Stream type.
                    @param {boolean} rtcpFeedbackSupported Indicates whether Rtcp-based feedback is supported.
                    @param {boolean} useDtls Indicates whether (D)TLS is in use.
                    @param {boolean} useEncryption Indicates whether encryption is in use.
                    @return {string}
                    */
                    Media.generateRtpProfile = function (type, rtcpFeedbackSupported, useDtls, useEncryption) {
                        if (arguments.length == 4) {
                            if (!(useEncryption || !useDtls)) {
                                throw new fm.icelink.Exception("Cannot generate RTP Profile for the case when DTLS support is required but encryption is not used. Likely, useEncryption must be set.");
                            }
                            if (((!fm.icelink.Global.equals(type, fm.icelink.StreamType.Video)) && (!fm.icelink.Global.equals(type, fm.icelink.StreamType.Audio)))) {
                                throw new fm.icelink.Exception(fm.icelink.StringExtensions.format("Cannot generate RTP Profile streams of type other than Audio or Video. {0} type supplied.", new fm.icelink.StreamTypeWrapper(type).toString()));
                            }
                            if (useEncryption) {
                                if (useDtls) {
                                    if (rtcpFeedbackSupported) {
                                        return fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpfTransportProtocol();
                                    }
                                    return fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpTransportProtocol();
                                }
                                if (rtcpFeedbackSupported) {
                                    return fm.icelink.sdp.rtp.Media.getRtpSavpfTransportProtocol();
                                }
                                return fm.icelink.sdp.rtp.Media.getRtpSavpTransportProtocol();
                            }
                            if (rtcpFeedbackSupported) {
                                return fm.icelink.sdp.rtp.Media.getRtpAvpfTransportProtocol();
                            }
                            return fm.icelink.sdp.rtp.Media.getRtpAvpTransportProtocol();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getPayloadTypes'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the payload types.
                     </div>
            
                    @param {string} formatDesciption The media format desciption.
                    @return {number[]}
                    */
                    Media.getPayloadTypes = function (formatDesciption) {
                        if (arguments.length == 1) {
                            if (((!fm.icelink.Global.equals(formatDesciption, null)) && (formatDesciption.length > 0))) {
                                var strArray = fm.icelink.StringExtensions.split(fm.icelink.StringExtensions.trim(formatDesciption), [32]);
                                var numArray = new Array(strArray.length);
                                for (var i = 0; (i < strArray.length); i++) {
                                    numArray[i] = fm.icelink.ParseAssistant.parseIntegerValue(strArray[i]);
                                }
                                return numArray;
                            }
                            return new Array(0);
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpAvpfTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the extended RTP audio/video profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getRtpAvpfTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "RTP/AVPF";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpAvpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the RTP audio/video profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getRtpAvpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "RTP/AVP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpSavpfTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the extended Secure RTP audio/video profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getRtpSavpfTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "RTP/SAVPF";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpSavpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the Secure RTP audio/video profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getRtpSavpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "RTP/SAVP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getUdpTlsRtpSavpfTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getUdpTlsRtpSavpfTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "UDP/TLS/RTP/SAVPF";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getUdpTlsRtpSavpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getUdpTlsRtpSavpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "UDP/TLS/RTP/SAVP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getWellKnownPayloadClockRate'>&nbsp;</span>**/
                    /**
                     <div>
                     Returns the clockrate of a well-known payload type.
                     </div>
            
                    @param {number} payloadType The well-known payload type to get the clockrate of.
                    @return {number}
                    */
                    Media.getWellKnownPayloadClockRate = function (payloadType) {
                        if (arguments.length == 1) {
                            var _var0 = payloadType;
                            if (_var0 == 0 || _var0 == 3 || _var0 == 4 || _var0 == 5) {
                                do {
                                    return 8000;
                                } while (false);
                            }
                            else if (_var0 == 6) {
                                do {
                                    return 16000;
                                } while (false);
                            }
                            else if (_var0 == 7 || _var0 == 8 || _var0 == 9) {
                                do {
                                    return 8000;
                                } while (false);
                            }
                            else if (_var0 == 10 || _var0 == 11) {
                                do {
                                    return 44100;
                                } while (false);
                            }
                            else if (_var0 == 12 || _var0 == 13) {
                                do {
                                    return 8000;
                                } while (false);
                            }
                            else if (_var0 == 14) {
                                do {
                                    return 90000;
                                } while (false);
                            }
                            else if (_var0 == 15) {
                                do {
                                    return 8000;
                                } while (false);
                            }
                            else if (_var0 == 16) {
                                do {
                                    return 11025;
                                } while (false);
                            }
                            else if (_var0 == 17) {
                                do {
                                    return 22050;
                                } while (false);
                            }
                            else if (_var0 == 18) {
                                do {
                                    return 8000;
                                } while (false);
                            }
                            else if (_var0 == 25 || _var0 == 26 || _var0 == 28 || _var0 == 31 || _var0 == 32 || _var0 == 33 || _var0 == 34) {
                                do {
                                    return 90000;
                                } while (false);
                            }
                            return -1;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-getWellKnownPayloadName'>&nbsp;</span>**/
                    /**
                     <div>
                     Returns the name of a well-known payload type.
                     </div>
            
                    @param {number} payloadType The well-known payload type to get the name of.
                    @return {string}
                    */
                    Media.getWellKnownPayloadName = function (payloadType) {
                        if (arguments.length == 1) {
                            var _var0 = payloadType;
                            if (_var0 == 0) {
                                do {
                                    return "PCMU";
                                } while (false);
                            }
                            else if (_var0 == 3) {
                                do {
                                    return "GSM";
                                } while (false);
                            }
                            else if (_var0 == 4) {
                                do {
                                    return "G723";
                                } while (false);
                            }
                            else if (_var0 == 5 || _var0 == 6) {
                                do {
                                    return "DVI4";
                                } while (false);
                            }
                            else if (_var0 == 7) {
                                do {
                                    return "LPC";
                                } while (false);
                            }
                            else if (_var0 == 8) {
                                do {
                                    return "PCMA";
                                } while (false);
                            }
                            else if (_var0 == 9) {
                                do {
                                    return "G722";
                                } while (false);
                            }
                            else if (_var0 == 10 || _var0 == 11) {
                                do {
                                    return "L16";
                                } while (false);
                            }
                            else if (_var0 == 12) {
                                do {
                                    return "QCELP";
                                } while (false);
                            }
                            else if (_var0 == 13) {
                                do {
                                    return "CN";
                                } while (false);
                            }
                            else if (_var0 == 14) {
                                do {
                                    return "MPA";
                                } while (false);
                            }
                            else if (_var0 == 15) {
                                do {
                                    return "G728";
                                } while (false);
                            }
                            else if (_var0 == 16 || _var0 == 17) {
                                do {
                                    return "DVI4";
                                } while (false);
                            }
                            else if (_var0 == 18) {
                                do {
                                    return "G729";
                                } while (false);
                            }
                            else if (_var0 == 25) {
                                do {
                                    return "CelB";
                                } while (false);
                            }
                            else if (_var0 == 26) {
                                do {
                                    return "JPEG";
                                } while (false);
                            }
                            else if (_var0 == 28) {
                                do {
                                    return "nv";
                                } while (false);
                            }
                            else if (_var0 == 31) {
                                do {
                                    return "H261";
                                } while (false);
                            }
                            else if (_var0 == 32) {
                                do {
                                    return "MPV";
                                } while (false);
                            }
                            else if (_var0 == 33) {
                                do {
                                    return "MP2T";
                                } while (false);
                            }
                            else if (_var0 == 34) {
                                do {
                                    return "H263";
                                } while (false);
                            }
                            return null;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-supportsEncryption'>&nbsp;</span>**/
                    /**
                     <div>
                     Returns a value indicating whther a given protocol supports encryption.
                     </div>
            
                    @param {string} protocol Protocol keyword.
                    @return {boolean} Value indicating whther a given protocol supports encryption.
                    */
                    Media.supportsEncryption = function (protocol) {
                        if (arguments.length == 1) {
                            return ((((fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpTransportProtocol())) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpfTransportProtocol()))) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getRtpSavpTransportProtocol()))) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getRtpSavpfTransportProtocol())));
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.Media-supportsRtcpBasedFeedback'>&nbsp;</span>**/
                    /**
                     <div>
                     Returns a value indicating whther a given protocol supports encryption.
                     </div>
            
                    @param {string} protocol Protocol keyword.
                    @return {boolean} Value indicating whther a given protocol supports encryption.
                    */
                    Media.supportsRtcpBasedFeedback = function (protocol) {
                        if (arguments.length == 1) {
                            return (((fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getRtpSavpfTransportProtocol())) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getRtpAvpfTransportProtocol()))) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.rtp.Media.getUdpTlsRtpSavpfTransportProtocol())));
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return Media;
                }(fm.icelink.sdp.Media));
                rtp.Media = Media;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                 <div>
                 The SDP media attribute "ssrc" indicates a property (known as a
                 "source-level attribute") of a media source (RTP stream) within an
                 RTP session.
                 </div>
            
                */
                var SsrcAttribute = /** @class */ (function (_super) {
                    __extends(SsrcAttribute, _super);
                    function SsrcAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 2) {
                            var synchronizationSource = __arguments[0];
                            var attributeName = __arguments[1];
                            // chained constructor: SsrcAttribute.call(this, synchronizationSource, attributeName, null);
                            __arguments = new Array(3);
                            __arguments[0] = synchronizationSource;
                            __arguments[1] = attributeName;
                            __arguments[2] = null;
                            {
                                var synchronizationSource_1 = __arguments[0];
                                var attributeName_1 = __arguments[1];
                                var attributeValue = __arguments[2];
                                _this = _super.call(this) || this;
                                _this.fmicelinksdprtpSsrcAttributeInit();
                                _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpSsrcAttribute);
                                if (fm.icelink.StringExtensions.isNullOrEmpty(attributeName_1)) {
                                    throw new fm.icelink.Exception("attributeName cannot be null.");
                                }
                                _this.setSynchronizationSource(synchronizationSource_1);
                                _this.setName(attributeName_1);
                                _this.setValue(attributeValue);
                            }
                        }
                        else if (__arguments.length == 3) {
                            var synchronizationSource = __arguments[0];
                            var attributeName = __arguments[1];
                            var attributeValue = __arguments[2];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtpSsrcAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpSsrcAttribute);
                            if (fm.icelink.StringExtensions.isNullOrEmpty(attributeName)) {
                                throw new fm.icelink.Exception("attributeName cannot be null.");
                            }
                            _this.setSynchronizationSource(synchronizationSource);
                            _this.setName(attributeName);
                            _this.setValue(attributeValue);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdprtpSsrcAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.RtpSsrcAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    SsrcAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.SsrcAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    SsrcAttribute.prototype.fmicelinksdprtpSsrcAttributeInit = function () {
                        this._synchronizationSource = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.rtp.ssrcAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.rtp.SsrcAttribute}
                    */
                    SsrcAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var index = fm.icelink.StringExtensions.indexOf(value, " ");
                            var num2 = fm.icelink.ParseAssistant.parseLongValue(fm.icelink.StringExtensions.substring(value, 0, index));
                            value = value.substring((index + 1));
                            var length_39 = fm.icelink.StringExtensions.indexOf(value, ":");
                            var str = null;
                            var str2 = null;
                            if ((fm.icelink.Global.equals(length_39, -1))) {
                                str = value;
                            }
                            else {
                                str = fm.icelink.StringExtensions.substring(value, 0, length_39);
                                value = value.substring((length_39 + 1));
                                str2 = value;
                            }
                            var attribute = new fm.icelink.sdp.rtp.SsrcAttribute();
                            attribute.setSynchronizationSource(num2);
                            attribute.setName(str);
                            attribute.setValue(str2);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getSynchronizationSource()));
                            builder.append(" ");
                            builder.append(this.getName());
                            if (!fm.icelink.StringExtensions.isNullOrEmpty(this.getValue())) {
                                builder.append(":");
                                builder.append(this.getValue());
                            }
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getName'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the name of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttribute.prototype.getName = function () {
                        if (arguments.length == 0) {
                            return this._name;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getSynchronizationSource'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the synchronization source.
                     </div>
            
            
                    @return {number}
                    */
                    SsrcAttribute.prototype.getSynchronizationSource = function () {
                        if (arguments.length == 0) {
                            return this._synchronizationSource;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the attribute value.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttribute.prototype.getValue = function () {
                        if (arguments.length == 0) {
                            return this._value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    SsrcAttribute.prototype.setName = function (value) {
                        if (arguments.length == 1) {
                            this._name = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    SsrcAttribute.prototype.setSynchronizationSource = function (value) {
                        if (arguments.length == 1) {
                            this._synchronizationSource = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-setValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Sets the attribute value.
                     </div>
            
            
                    @param {string} value
                    @return {void}
                    */
                    SsrcAttribute.prototype.setValue = function (value) {
                        if (arguments.length == 1) {
                            this._value = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return SsrcAttribute;
                }(fm.icelink.sdp.Attribute));
                rtp.SsrcAttribute = SsrcAttribute;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var rtp;
            (function (rtp) {
                /**
                 <div>
                 SSRC atribute names.
                 </div>
            
                */
                var SsrcAttributeName = /** @class */ (function () {
                    function SsrcAttributeName() {
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 0) {
                            //super();
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                    }
                    SsrcAttributeName.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.rtp.SsrcAttributeName]';
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getCName'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating canonical name.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getCName = function () {
                        if (arguments.length == 0) {
                            return "cname";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getFormatParameters'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating format parameters.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getFormatParameters = function () {
                        if (arguments.length == 0) {
                            return "fmtp";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getLabel'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating label.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getLabel = function () {
                        if (arguments.length == 0) {
                            return "label";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getMediaStreamId'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating media stream ID.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getMediaStreamId = function () {
                        if (arguments.length == 0) {
                            return "msid";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getMediaStreamLabel'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating media stream label.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getMediaStreamLabel = function () {
                        if (arguments.length == 0) {
                            return "mslabel";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getPreviousSsrc'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets a value indicating previous SSRC.
                     </div>
            
            
                    @return {string}
                    */
                    SsrcAttributeName.getPreviousSsrc = function () {
                        if (arguments.length == 0) {
                            return "previous-ssrc";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return SsrcAttributeName;
                }());
                rtp.SsrcAttributeName = SsrcAttributeName;
            })(rtp = sdp.rtp || (sdp.rtp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var sctp;
            (function (sctp) {
                /**
                 <div>
                 AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
                 The sctpmap attribute maps from a port number (as used in an "m="
                 line) to an encoding name denoting the payload format to be used on
                 top of the SCTP association or the actual protocol running on top of it.
                 Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
                 Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
                 </div>
            
                */
                var MapAttribute = /** @class */ (function (_super) {
                    __extends(MapAttribute, _super);
                    function MapAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 3) {
                            var port = __arguments[0];
                            var protocol = __arguments[1];
                            var streams = __arguments[2];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpMapAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SctpMapAttribute);
                            _this.setPort(port);
                            _this.setSctpProtocol(protocol);
                            _this.setStreams(streams);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpMapAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SctpMapAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    MapAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.sctp.MapAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    MapAttribute.prototype.fmicelinksdpsctpMapAttributeInit = function () {
                        this._port = 0;
                        this._streams = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.sctp.MapAttribute}
                    */
                    MapAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var strArray = fm.icelink.StringExtensions.split(value, [32]);
                            var num = fm.icelink.ParseAssistant.parseIntegerValue(strArray[0]);
                            var str = strArray[1];
                            var num2 = ((strArray.length > 2) ? fm.icelink.ParseAssistant.parseIntegerValue(strArray[2]) : 16);
                            var attribute = new fm.icelink.sdp.sctp.MapAttribute();
                            attribute.setPort(num);
                            attribute.setSctpProtocol(str);
                            attribute.setStreams(num2);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    MapAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getPort()));
                            builder.append(" ");
                            builder.append(this.getSctpProtocol());
                            builder.append(" ");
                            builder.append(fm.icelink.IntExtensions.toString(this.getStreams()));
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SCTP port.
                     </div>
            
            
                    @return {number}
                    */
                    MapAttribute.prototype.getPort = function () {
                        if (arguments.length == 0) {
                            return this._port;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getSctpProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SCTP sub-protocol (association usage).
                     </div>
            
            
                    @return {string}
                    */
                    MapAttribute.prototype.getSctpProtocol = function () {
                        if (arguments.length == 0) {
                            return this._sctpProtocol;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getStreams'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the number of incoming streams.
                     </div>
            
            
                    @return {number}
                    */
                    MapAttribute.prototype.getStreams = function () {
                        if (arguments.length == 0) {
                            return this._streams;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setPort = function (value) {
                        if (arguments.length == 1) {
                            this._port = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setSctpProtocol = function (value) {
                        if (arguments.length == 1) {
                            this._sctpProtocol = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MapAttribute.prototype.setStreams = function (value) {
                        if (arguments.length == 1) {
                            this._streams = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return MapAttribute;
                }(fm.icelink.sdp.Attribute));
                sctp.MapAttribute = MapAttribute;
            })(sctp = sdp.sctp || (sdp.sctp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var sctp;
            (function (sctp) {
                /**
                 <div>
                 The attribute can be associated with an m- line to indicate
                 the maximum message size (indicated in bytes) that an SCTP endpoint
                 is willing to receive on the SCTP association associated with the m-
                 line. Different attribute values can be used in each direction.
                 </div>
            
                */
                var MaxMessageSizeAttribute = /** @class */ (function (_super) {
                    __extends(MaxMessageSizeAttribute, _super);
                    function MaxMessageSizeAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var maxMessageSize = __arguments[0];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpMaxMessageSizeAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SctpMaxMessageSizeAttribute);
                            _this.setMaxMessageSize(maxMessageSize);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpMaxMessageSizeAttributeInit();
                            _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SctpMaxMessageSizeAttribute);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    MaxMessageSizeAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.sctp.MaxMessageSizeAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    MaxMessageSizeAttribute.prototype.fmicelinksdpsctpMaxMessageSizeAttributeInit = function () {
                        this._maxMessageSize = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.sctp.maxMessageSizeAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.sctp.MaxMessageSizeAttribute}
                    */
                    MaxMessageSizeAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var num = fm.icelink.ParseAssistant.parseLongValue(value);
                            var attribute = new fm.icelink.sdp.sctp.MaxMessageSizeAttribute();
                            attribute.setMaxMessageSize(num);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    MaxMessageSizeAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getMaxMessageSize()));
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-getMaxMessageSize'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the maximum message size in bytes.
                     </div>
            
            
                    @return {number}
                    */
                    MaxMessageSizeAttribute.prototype.getMaxMessageSize = function () {
                        if (arguments.length == 0) {
                            return this._maxMessageSize;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    MaxMessageSizeAttribute.prototype.setMaxMessageSize = function (value) {
                        if (arguments.length == 1) {
                            this._maxMessageSize = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return MaxMessageSizeAttribute;
                }(fm.icelink.sdp.Attribute));
                sctp.MaxMessageSizeAttribute = MaxMessageSizeAttribute;
            })(sctp = sdp.sctp || (sdp.sctp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Media.ts" />

/// <reference path="../../sdp/Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var sctp;
            (function (sctp) {
                /**
                 <div>
                 An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
                 </div>
            
                */
                var Media = /** @class */ (function (_super) {
                    __extends(Media, _super);
                    /**<span id='method-fm.icelink.sdp.sctp.Media-constructor'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.sctp.media` class.
                     </div>
            
                    @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
                    @param {number} transportPort The transport port.
                    @param {string} transportProtocol The transport protocol.
                    @param {string} associationUsage The association usage.
                    @return {}
                    */
                    function Media(mediaType, transportPort, transportProtocol, associationUsage) {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 4) {
                            var mediaType_3 = __arguments[0];
                            var transportPort_3 = __arguments[1];
                            var transportProtocol_3 = __arguments[2];
                            var associationUsage_1 = __arguments[3];
                            _this = _super.call(this, mediaType_3, transportPort_3, transportProtocol_3) || this;
                            if ((fm.icelink.Global.equals(associationUsage_1, null))) {
                                throw new fm.icelink.Exception("associationUsage cannot be null.");
                            }
                            _super.prototype.setFormatDescription.call(_this, associationUsage_1);
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    Media.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.sctp.Media]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getDtlsSctpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the SCTP over DTLS data profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getDtlsSctpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "DTLS/SCTP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getSctpDtlsTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the DTLS over SCTP data profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getSctpDtlsTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "SCTP/DTLS";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getSctpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the SCTP data profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getSctpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "SCTP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getTcpDtlsSctpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getTcpDtlsSctpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "TCP/DTLS/SCTP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getUdpDtlsSctpTransportProtocol'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getUdpDtlsSctpTransportProtocol = function () {
                        if (arguments.length == 0) {
                            return "UDP/DTLS/SCTP";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-getWebRtcDatachannelAssociationUsage'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the Association Usage name registry for WebRTC Datachannel.
                     </div>
            
            
                    @return {string}
                    */
                    Media.getWebRtcDatachannelAssociationUsage = function () {
                        if (arguments.length == 0) {
                            return "webrtc-datachannel";
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.Media-supportsEncryption'>&nbsp;</span>**/
                    /**
                     <div>
                     Returns a value indicating whther a given protocol supports encryption.
                     </div>
            
                    @param {string} protocol Protocol keyword.
                    @return {boolean} Value indicating whther a given protocol supports encryption.
                    */
                    Media.supportsEncryption = function (protocol) {
                        if (arguments.length == 1) {
                            return (((fm.icelink.Global.equals(protocol, fm.icelink.sdp.sctp.Media.getUdpDtlsSctpTransportProtocol())) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.sctp.Media.getDtlsSctpTransportProtocol()))) || (fm.icelink.Global.equals(protocol, fm.icelink.sdp.sctp.Media.getTcpDtlsSctpTransportProtocol())));
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return Media;
                }(fm.icelink.sdp.Media));
                sctp.Media = Media;
            })(sctp = sdp.sctp || (sdp.sctp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../../sdp/Attribute.ts" />

/// <reference path="../../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            var sctp;
            (function (sctp) {
                /**
                 <div>
                 The attribute can be associated with an SDP media description (m-
                 line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
                 which case the m- line port value indicates the port of the
                 underlying transport-layer protocol (UDP or TCP), on which SCTP is
                 carried, and the 'sctp-port' value indicates the SCTP port.
                 </div>
            
                */
                var PortAttribute = /** @class */ (function (_super) {
                    __extends(PortAttribute, _super);
                    function PortAttribute() {
                        var _this = this;
                        var __arguments = new Array(arguments.length);
                        for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                            __arguments[__argumentIndex] = arguments[__argumentIndex];
                        }
                        if (__arguments.length == 1) {
                            var port = __arguments[0];
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpPortAttributeInit();
                            _this.setPort(port);
                        }
                        else if (__arguments.length == 0) {
                            _this = _super.call(this) || this;
                            _this.fmicelinksdpsctpPortAttributeInit();
                        }
                        else {
                            throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                        }
                        return _this;
                    }
                    PortAttribute.prototype.getTypeString = function () {
                        return '[fm.icelink.sdp.sctp.PortAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                    };
                    PortAttribute.prototype.fmicelinksdpsctpPortAttributeInit = function () {
                        this._port = 0;
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-fromAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
                     </div>
            
                    @param {string} value The attribute value.
                    @return {fm.icelink.sdp.sctp.PortAttribute}
                    */
                    PortAttribute.fromAttributeValue = function (value) {
                        if (arguments.length == 1) {
                            var num = fm.icelink.ParseAssistant.parseIntegerValue(value);
                            var attribute = new fm.icelink.sdp.sctp.PortAttribute();
                            attribute.setPort(num);
                            return attribute;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-getAttributeValue'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the internal value of the attribute.
                     </div>
            
            
                    @return {string}
                    */
                    PortAttribute.prototype.getAttributeValue = function () {
                        if (arguments.length == 0) {
                            var builder = new fm.icelink.StringBuilder();
                            builder.append(fm.icelink.IntExtensions.toString(this.getPort()));
                            return builder.toString();
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-getPort'>&nbsp;</span>**/
                    /**
                     <div>
                     Gets the SCTP port.
                     </div>
            
            
                    @return {number}
                    */
                    PortAttribute.prototype.getPort = function () {
                        if (arguments.length == 0) {
                            return this._port;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    /**
                    @internal
            
                    */
                    PortAttribute.prototype.setPort = function (value) {
                        if (arguments.length == 1) {
                            this._port = value;
                        }
                        else {
                            throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                        }
                    };
                    return PortAttribute;
                }(fm.icelink.sdp.Attribute));
                sctp.PortAttribute = PortAttribute;
            })(sctp = sdp.sctp || (sdp.sctp = {}));
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This can be a session-level attribute or a media-level
             attribute.  As a session-level attribute, it specifies the
             language for the session description.  As a media-level
             attribute, it specifies the language for any media-level SDP
             information field associated with that media.  Multiple sdplang
             attributes can be provided either at session or media level if
             multiple languages in the session description or media use
             multiple languages, in which case the order of the attributes
             indicates the order of importance of the various languages in
             the session or media from most important to least important.
             </div>
        
            */
            var SdpLanguageAttribute = /** @class */ (function (_super) {
                __extends(SdpLanguageAttribute, _super);
                /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sdpLanguageAttribute` class.
                 </div>
        
                @param {string} languageTag The language for either the session description
                 (if used as a session-level attribute) or any media-level SDP
                 information field associated with that media (if used as a
                 media-level attribute).
                @return {}
                */
                function SdpLanguageAttribute(languageTag) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var languageTag_2 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SdpLanguageAttribute);
                        if ((fm.icelink.Global.equals(languageTag_2, null))) {
                            throw new fm.icelink.Exception("languageTag cannot be null.");
                        }
                        _this.setLanguageTag(languageTag_2);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                SdpLanguageAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.SdpLanguageAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sdpLanguageAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.SdpLanguageAttribute}
                */
                SdpLanguageAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.SdpLanguageAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                SdpLanguageAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getLanguageTag();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-getLanguageTag'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the language for either the session description
                 (if used as a session-level attribute) or any media-level SDP
                 information field associated with that media (if used as a
                 media-level attribute).
                 </div>
        
        
                @return {string}
                */
                SdpLanguageAttribute.prototype.getLanguageTag = function () {
                    if (arguments.length == 0) {
                        return this._languageTag;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                SdpLanguageAttribute.prototype.setLanguageTag = function (value) {
                    if (arguments.length == 1) {
                        this._languageTag = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return SdpLanguageAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.SdpLanguageAttribute = SdpLanguageAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/DirectionAttribute.ts" />

/// <reference path="../sdp/DirectionAttribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies that the tools should be started in send-only
             mode.  An example may be where a different unicast address is
             to be used for a traffic destination than for a traffic source.
             In such a case, two media descriptions may be used, one
             sendonly and one recvonly.  It can be either a session- or
             media-level attribute, but would normally only be used as a
             media attribute.  It is not dependent on charset.  Note that
             sendonly applies only to the media, and any associated control
             protocol (e.g., RTCP) SHOULD still be received and processed as
             normal.
             </div>
        
            */
            var SendOnlyAttribute = /** @class */ (function (_super) {
                __extends(SendOnlyAttribute, _super);
                /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sendOnlyAttribute` class.
                 </div>
        
        
                @return {}
                */
                function SendOnlyAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.DirectionAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                SendOnlyAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.SendOnlyAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sendOnlyAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.SendOnlyAttribute}
                */
                SendOnlyAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.SendOnlyAttribute();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                SendOnlyAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-getStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stream direction.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                SendOnlyAttribute.prototype.getStreamDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.StreamDirection.SendOnly;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return SendOnlyAttribute;
            }(fm.icelink.sdp.DirectionAttribute));
            sdp.SendOnlyAttribute = SendOnlyAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/DirectionAttribute.ts" />

/// <reference path="../sdp/DirectionAttribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This specifies that the tools should be started in send and
             receive mode.  This is necessary for interactive conferences
             with tools that default to receive-only mode.  It can be either
             a session or media-level attribute, and it is not dependent on
             charset.
             </div>
        
            */
            var SendReceiveAttribute = /** @class */ (function (_super) {
                __extends(SendReceiveAttribute, _super);
                /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sendReceiveAttribute` class.
                 </div>
        
        
                @return {}
                */
                function SendReceiveAttribute() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.DirectionAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                SendReceiveAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.SendReceiveAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.sendReceiveAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.SendReceiveAttribute}
                */
                SendReceiveAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.SendReceiveAttribute();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                SendReceiveAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return null;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-getStreamDirection'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stream direction.
                 </div>
        
        
                @return {fm.icelink.StreamDirection}
                */
                SendReceiveAttribute.prototype.getStreamDirection = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.StreamDirection.SendReceive;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return SendReceiveAttribute;
            }(fm.icelink.sdp.DirectionAttribute));
            sdp.SendReceiveAttribute = SendReceiveAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             Defines valid SDP setups.
             </div>
        
            */
            var Setup = /** @class */ (function () {
                function Setup() {
                }
                Setup.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Setup]';
                };
                /**<span id='method-fm.icelink.sdp.Setup-getActive'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP setup meaning "Active".
                 </div>
        
        
                @return {string}
                */
                Setup.getActive = function () {
                    if (arguments.length == 0) {
                        return "active";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Setup-getActPass'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP setup meaning "Active or Passive".
                 </div>
        
        
                @return {string}
                */
                Setup.getActPass = function () {
                    if (arguments.length == 0) {
                        return "actpass";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Setup-getPassive'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the SDP setup meaning "Passive".
                 </div>
        
        
                @return {string}
                */
                Setup.getPassive = function () {
                    if (arguments.length == 0) {
                        return "passive";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Setup;
            }());
            sdp.Setup = Setup;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             The 'setup' attribute indicates which of the end points should
             initiate the TCP connection establishment (i.e., send the initial TCP
             SYN).  The 'setup' attribute is charset-independent and can be a
             session-level or a media-level attribute.
             </div>
        
            */
            var SetupAttribute = /** @class */ (function (_super) {
                __extends(SetupAttribute, _super);
                /**<span id='method-fm.icelink.sdp.SetupAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.setupAttribute` class.
                 </div>
        
                @param {string} setup Which end point should initiate the connection establishment. See `fm.icelink.sdp.setupAttribute.setup` for possible values.
                @return {}
                */
                function SetupAttribute(setup) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var setup_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.SetupAttribute);
                        _this.setSetup(setup_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                SetupAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.SetupAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.SetupAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.setupAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.SetupAttribute}
                */
                SetupAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.SetupAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SetupAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                SetupAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getSetup();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.SetupAttribute-getSetup'>&nbsp;</span>**/
                /**
                 <div>
                 Gets which end point should initiate the connection establishment. See `fm.icelink.sdp.setupAttribute.setup` for possible values.
                 </div>
        
        
                @return {string}
                */
                SetupAttribute.prototype.getSetup = function () {
                    if (arguments.length == 0) {
                        return this._setup;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                SetupAttribute.prototype.setSetup = function (value) {
                    if (arguments.length == 1) {
                        this._setup = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return SetupAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.SetupAttribute = SetupAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP time description element.
             </div>
        
            */
            var TimeDescription = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.TimeDescription-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.timeDescription` class.
                 </div>
        
                @param {fm.icelink.sdp.Timing} timing The start and stop time.
                @return {}
                */
                function TimeDescription(timing) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var timing_1 = __arguments[0];
                        //super();
                        this.__repeatTimes = new Array();
                        if ((fm.icelink.Global.equals(timing_1, null))) {
                            throw new fm.icelink.Exception("timing cannot be null.");
                        }
                        this.setTiming(timing_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                TimeDescription.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.TimeDescription]';
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.timeDescription` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.TimeDescription}
                */
                TimeDescription.parse = function (s) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.sdp.Utility.splitAndClean(s);
                        if ((!fm.icelink.Global.equals(strArray[0].charCodeAt(0), 116))) {
                            return null;
                        }
                        var description = new fm.icelink.sdp.TimeDescription(fm.icelink.sdp.Timing.parse(strArray[0]));
                        for (var i = 1; (i < strArray.length); i++) {
                            var str = strArray[i];
                            if ((fm.icelink.Global.equals(str.charCodeAt(0), 114))) {
                                description.addRepeatTime(fm.icelink.sdp.RepeatTime.parse(str));
                            }
                        }
                        return description;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-addRepeatTime'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a repeat time.
                 </div>
        
                @param {fm.icelink.sdp.RepeatTime} repeatTime The repeat time to add.
                @return {void}
                */
                TimeDescription.prototype.addRepeatTime = function (repeatTime) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__repeatTimes, repeatTime);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-getRepeatTimes'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of repeat times.
                 </div>
        
        
                @return {fm.icelink.sdp.RepeatTime[]}
                */
                TimeDescription.prototype.getRepeatTimes = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__repeatTimes);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-getTiming'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the start and stop time.
                 </div>
        
        
                @return {fm.icelink.sdp.Timing}
                */
                TimeDescription.prototype.getTiming = function () {
                    if (arguments.length == 0) {
                        return this._timing;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-removeRepeatTime'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a repeat time.
                 </div>
        
                @param {fm.icelink.sdp.RepeatTime} repeatTime The repeat time to remove.
                @return {boolean}
                */
                TimeDescription.prototype.removeRepeatTime = function (repeatTime) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__repeatTimes, repeatTime);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                TimeDescription.prototype.setTiming = function (value) {
                    if (arguments.length == 1) {
                        this._timing = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeDescription-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                TimeDescription.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.StringExtensions.concat(this.getTiming().toString(), "\r\n"));
                        for (var _i = 0, _a = this.getRepeatTimes(); _i < _a.length; _i++) {
                            var time = _a[_i];
                            builder.append(fm.icelink.StringExtensions.concat(time.toString(), "\r\n"));
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return TimeDescription;
            }());
            sdp.TimeDescription = TimeDescription;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP time zone element.
             </div>
        
            */
            var TimeZone = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.TimeZone-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.timeZone` class.
                 </div>
        
                @param {number} adjustmentTime The time that a time zone adjustment happens (network time protocol).
                @param {fm.icelink.TimeSpan} offset The offset from the time when the session was first scheduled.
                @return {}
                */
                function TimeZone(adjustmentTime, offset) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var adjustmentTime_1 = __arguments[0];
                        var offset_1 = __arguments[1];
                        //super();
                        this.fmicelinksdpTimeZoneInit();
                        this.setAdjustmentTime(adjustmentTime_1);
                        this.setOffset(offset_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                TimeZone.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.TimeZone]';
                };
                TimeZone.prototype.fmicelinksdpTimeZoneInit = function () {
                    this._adjustmentTime = 0;
                };
                /**<span id='method-fm.icelink.sdp.TimeZone-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.timeZone` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.TimeZone}
                */
                TimeZone.parse = function (s) {
                    if (arguments.length == 1) {
                        var strArray = fm.icelink.StringExtensions.split(s, [32]);
                        var adjustmentTime = fm.icelink.ParseAssistant.parseDoubleValue(strArray[0]);
                        return new fm.icelink.sdp.TimeZone(adjustmentTime, new fm.icelink.TimeSpan(0, 0, fm.icelink.ParseAssistant.parseIntegerValue(strArray[1])));
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZone-getAdjustmentTime'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the time that a time zone adjustment happens (network time protocol).
                 </div>
        
        
                @return {number}
                */
                TimeZone.prototype.getAdjustmentTime = function () {
                    if (arguments.length == 0) {
                        return this._adjustmentTime;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZone-getOffset'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the offset from the time when the session was first scheduled.
                 </div>
        
        
                @return {fm.icelink.TimeSpan}
                */
                TimeZone.prototype.getOffset = function () {
                    if (arguments.length == 0) {
                        return this._offset;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                TimeZone.prototype.setAdjustmentTime = function (value) {
                    if (arguments.length == 1) {
                        this._adjustmentTime = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                TimeZone.prototype.setOffset = function (value) {
                    if (arguments.length == 1) {
                        this._offset = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZone-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                TimeZone.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append(fm.icelink.IntExtensions.toString(this.getAdjustmentTime()));
                        builder.append(" ");
                        builder.append(fm.icelink.IntExtensions.toString(this.getOffset().getTotalSeconds()));
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return TimeZone;
            }());
            sdp.TimeZone = TimeZone;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP time zones element.
             </div>
        
            */
            var TimeZones = /** @class */ (function () {
                /**<span id='method-fm.icelink.sdp.TimeZones-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.timeZones` class.
                 </div>
        
                @param {fm.icelink.sdp.TimeZone[]} values The values.
                @return {}
                */
                function TimeZones(values) {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var values_4 = __arguments[0];
                        //super();
                        this.__values = new Array();
                        if ((fm.icelink.Global.equals(values_4, null))) {
                            throw new fm.icelink.Exception("timeZones cannot be null.");
                        }
                        fm.icelink.ArrayExtensions.addRange(this.__values, values_4);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                TimeZones.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.TimeZones]';
                };
                /**<span id='method-fm.icelink.sdp.TimeZones-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.timeZones` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.TimeZones}
                */
                TimeZones.parse = function (s) {
                    if (arguments.length == 1) {
                        s = s.substring(2);
                        var array = fm.icelink.StringExtensions.split(s, [32]);
                        var zones = new fm.icelink.sdp.TimeZones([fm.icelink.sdp.TimeZone.parse(fm.icelink.StringExtensions.join(" ", fm.icelink.StringAssistant.subArray(array, 0, 2)))]);
                        for (var i = 2; (i < array.length); i = (i + 2)) {
                            zones.addTimeZone(fm.icelink.sdp.TimeZone.parse(fm.icelink.StringExtensions.join(" ", fm.icelink.StringAssistant.subArray(array, i, 2))));
                        }
                        return zones;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZones-addTimeZone'>&nbsp;</span>**/
                /**
                 <div>
                 Adds a time zone adjustment.
                 </div>
        
                @param {fm.icelink.sdp.TimeZone} value The time zone adjustment to add.
                @return {void}
                */
                TimeZones.prototype.addTimeZone = function (value) {
                    if (arguments.length == 1) {
                        fm.icelink.ArrayExtensions.add(this.__values, value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZones-getValues'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the array of time zone adjustments.
                 </div>
        
        
                @return {fm.icelink.sdp.TimeZone[]}
                */
                TimeZones.prototype.getValues = function () {
                    if (arguments.length == 0) {
                        return fm.icelink.ArrayExtensions.toArray(this.__values);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZones-removeTimeZone'>&nbsp;</span>**/
                /**
                 <div>
                 Removes a time zone adjustment.
                 </div>
        
                @param {fm.icelink.sdp.TimeZone} value The time zone adjustment to remove.
                @return {boolean}
                */
                TimeZones.prototype.removeTimeZone = function (value) {
                    if (arguments.length == 1) {
                        return fm.icelink.ArrayExtensions.remove(this.__values, value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.TimeZones-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                TimeZones.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("z=");
                        for (var _i = 0, _a = this.getValues(); _i < _a.length; _i++) {
                            var zone = _a[_i];
                            builder.append(" ");
                            builder.append(zone.toString());
                        }
                        return fm.icelink.StringExtensions.trim(builder.toString());
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return TimeZones;
            }());
            sdp.TimeZones = TimeZones;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP timing element.
             </div>
        
            */
            var Timing = /** @class */ (function () {
                function Timing() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                        this.fmicelinksdpTimingInit();
                        this.setStartTime(0);
                        this.setStopTime(0);
                    }
                    else if (__arguments.length == 2) {
                        var startTime = __arguments[0];
                        var stopTime = __arguments[1];
                        //super();
                        this.fmicelinksdpTimingInit();
                        this.setStartTime(startTime);
                        this.setStopTime(stopTime);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Timing.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Timing]';
                };
                Timing.prototype.fmicelinksdpTimingInit = function () {
                    this._startTime = 0;
                    this._stopTime = 0;
                };
                /**<span id='method-fm.icelink.sdp.Timing-parse'>&nbsp;</span>**/
                /**
                 <div>
                 Creates an `fm.icelink.sdp.timing` instance from a string.
                 </div>
        
                @param {string} s The string to parse.
                @return {fm.icelink.sdp.Timing}
                */
                Timing.parse = function (s) {
                    if (arguments.length == 1) {
                        s = s.substring(2);
                        var strArray = fm.icelink.StringExtensions.split(s, [32]);
                        var num = 0;
                        if ((!fm.icelink.Global.equals(strArray[0], "0"))) {
                            num = fm.icelink.ParseAssistant.parseDoubleValue(strArray[0]);
                        }
                        var num2 = 0;
                        if ((!fm.icelink.Global.equals(strArray[1], "0"))) {
                            num2 = fm.icelink.ParseAssistant.parseDoubleValue(strArray[1]);
                        }
                        var timing = new fm.icelink.sdp.Timing();
                        timing.setStartTime(num);
                        timing.setStopTime(num2);
                        return timing;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Timing-getStartTime'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the start time.
                 </div>
        
        
                @return {number}
                */
                Timing.prototype.getStartTime = function () {
                    if (arguments.length == 0) {
                        return this._startTime;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Timing-getStopTime'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the stop time.
                 </div>
        
        
                @return {number}
                */
                Timing.prototype.getStopTime = function () {
                    if (arguments.length == 0) {
                        return this._stopTime;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Timing-setStartTime'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the start time.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Timing.prototype.setStartTime = function (value) {
                    if (arguments.length == 1) {
                        this._startTime = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Timing-setStopTime'>&nbsp;</span>**/
                /**
                 <div>
                 Sets the stop time.
                 </div>
        
        
                @param {number} value
                @return {void}
                */
                Timing.prototype.setStopTime = function (value) {
                    if (arguments.length == 1) {
                        this._stopTime = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.Timing-toString'>&nbsp;</span>**/
                /**
                 <div>
                 Converts this instance to a string.
                 </div>
        
        
                @return {string}
                */
                Timing.prototype.toString = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("t=");
                        if ((!fm.icelink.Global.equals(this.getStartTime(), 0))) {
                            builder.append(fm.icelink.IntExtensions.toString(this.getStartTime()));
                        }
                        else {
                            builder.append("0");
                        }
                        builder.append(" ");
                        if ((!fm.icelink.Global.equals(this.getStopTime(), 0))) {
                            builder.append(fm.icelink.IntExtensions.toString(this.getStopTime()));
                        }
                        else {
                            builder.append("0");
                        }
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Timing;
            }());
            sdp.Timing = Timing;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This gives the name and version number of the tool used to
             create the session description.  It is a session-level
             attribute, and it is not dependent on charset.
             </div>
        
            */
            var ToolAttribute = /** @class */ (function (_super) {
                __extends(ToolAttribute, _super);
                /**<span id='method-fm.icelink.sdp.ToolAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.toolAttribute` class.
                 </div>
        
                @param {string} tool The name and version number of the
                 tool used to create the session description.
                @return {}
                */
                function ToolAttribute(tool) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var tool_1 = __arguments[0];
                        _this = _super.call(this) || this;
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.ToolAttribute);
                        if ((fm.icelink.Global.equals(tool_1, null))) {
                            throw new fm.icelink.Exception("tool cannot be null.");
                        }
                        _this.setTool(tool_1);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                ToolAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.ToolAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.ToolAttribute-fromAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.toolAttribute` class.
                 </div>
        
                @param {string} value The attribute value.
                @return {fm.icelink.sdp.ToolAttribute}
                */
                ToolAttribute.fromAttributeValue = function (value) {
                    if (arguments.length == 1) {
                        return new fm.icelink.sdp.ToolAttribute(value);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ToolAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                ToolAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getTool();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.ToolAttribute-getTool'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the name and version number of the
                 tool used to create the session description.
                 </div>
        
        
                @return {string}
                */
                ToolAttribute.prototype.getTool = function () {
                    if (arguments.length == 0) {
                        return this._tool;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                ToolAttribute.prototype.setTool = function (value) {
                    if (arguments.length == 1) {
                        this._tool = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return ToolAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.ToolAttribute = ToolAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Media.ts" />

/// <reference path="../sdp/Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP media description with a transport protocol of "udp".
             </div>
        
            */
            var UdpMedia = /** @class */ (function (_super) {
                __extends(UdpMedia, _super);
                /**<span id='method-fm.icelink.sdp.UdpMedia-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.udpMedia` class.
                 </div>
        
                @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
                @param {number} transportPort The transport port.
                @param {string} formatDescription The format description.
                @return {}
                */
                function UdpMedia(mediaType, transportPort, formatDescription) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 3) {
                        var mediaType_4 = __arguments[0];
                        var transportPort_4 = __arguments[1];
                        var formatDescription_1 = __arguments[2];
                        _this = _super.call(this, mediaType_4, transportPort_4, fm.icelink.sdp.UdpMedia.getUdpTransportProtocol(), formatDescription_1) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                UdpMedia.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.UdpMedia]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.UdpMedia-getUdpTransportProtocol'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the protocol keyword for UDP.
                 </div>
        
        
                @return {string}
                */
                UdpMedia.getUdpTransportProtocol = function () {
                    if (arguments.length == 0) {
                        return "udp";
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return UdpMedia;
            }(fm.icelink.sdp.Media));
            sdp.UdpMedia = UdpMedia;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/Attribute.ts" />

/// <reference path="../sdp/Attribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             This attribute is used to encapsulate unrecognized SDP attributes.
             </div>
        
            */
            var UnknownAttribute = /** @class */ (function (_super) {
                __extends(UnknownAttribute, _super);
                /**<span id='method-fm.icelink.sdp.UnknownAttribute-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.unknownAttribute` class.
                 </div>
        
                @param {string} name The name.
                @param {string} value The value.
                @return {}
                */
                function UnknownAttribute(name, value) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 2) {
                        var name_17 = __arguments[0];
                        var value_42 = __arguments[1];
                        _this = _super.call(this) || this;
                        _this.setName(name_17);
                        _this.setValue(value_42);
                        _super.prototype.setAttributeType.call(_this, fm.icelink.sdp.AttributeType.UnknownAttribute);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                UnknownAttribute.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.UnknownAttribute]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**<span id='method-fm.icelink.sdp.UnknownAttribute-getAttributeValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the internal value of the attribute.
                 </div>
        
        
                @return {string}
                */
                UnknownAttribute.prototype.getAttributeValue = function () {
                    if (arguments.length == 0) {
                        return this.getValue();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.UnknownAttribute-getName'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the attribute name.
                 </div>
        
        
                @return {string}
                */
                UnknownAttribute.prototype.getName = function () {
                    if (arguments.length == 0) {
                        return this._name;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.UnknownAttribute-getValue'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the attribute value.
                 </div>
        
        
                @return {string}
                */
                UnknownAttribute.prototype.getValue = function () {
                    if (arguments.length == 0) {
                        return this._value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                UnknownAttribute.prototype.setName = function (value) {
                    if (arguments.length == 1) {
                        this._name = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                UnknownAttribute.prototype.setValue = function (value) {
                    if (arguments.length == 1) {
                        this._value = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return UnknownAttribute;
            }(fm.icelink.sdp.Attribute));
            sdp.UnknownAttribute = UnknownAttribute;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../sdp/EncryptionKey.ts" />

/// <reference path="../sdp/EncryptionKey.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
             <div>
             An SDP encryption key with a method of "uri".
             </div>
        
            */
            var UriEncryptionKey = /** @class */ (function (_super) {
                __extends(UriEncryptionKey, _super);
                /**<span id='method-fm.icelink.sdp.UriEncryptionKey-constructor'>&nbsp;</span>**/
                /**
                 <div>
                 Initializes a new instance of the `fm.icelink.sdp.uriEncryptionKey` class.
                 </div>
        
                @param {fm.icelink.Uri} uri The URI referring to the data containing the key.
                @return {}
                */
                function UriEncryptionKey(uri) {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var uri_2 = __arguments[0];
                        _this = _super.call(this) || this;
                        if ((fm.icelink.Global.equals(uri_2, null))) {
                            throw new fm.icelink.Exception("uri cannot be null.");
                        }
                        _this.setUri(uri_2);
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                UriEncryptionKey.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.UriEncryptionKey]' + ',' + _super.prototype.getTypeString.call(this);
                };
                /**
                @internal
        
                */
                UriEncryptionKey.prototype.getMethodAndValue = function () {
                    if (arguments.length == 0) {
                        var builder = new fm.icelink.StringBuilder();
                        builder.append("uri:");
                        builder.append(this.getUri().toString());
                        return builder.toString();
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**<span id='method-fm.icelink.sdp.UriEncryptionKey-getUri'>&nbsp;</span>**/
                /**
                 <div>
                 Gets the URI referring to the data containing the key.
                 </div>
        
        
                @return {fm.icelink.Uri}
                */
                UriEncryptionKey.prototype.getUri = function () {
                    if (arguments.length == 0) {
                        return this._uri;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                /**
                @internal
        
                */
                UriEncryptionKey.prototype.setUri = function (value) {
                    if (arguments.length == 1) {
                        this._uri = value;
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return UriEncryptionKey;
            }(fm.icelink.sdp.EncryptionKey));
            sdp.UriEncryptionKey = UriEncryptionKey;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var sdp;
        (function (sdp) {
            /**
            @internal
            */
            var Utility = /** @class */ (function () {
                function Utility() {
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 0) {
                        //super();
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                }
                Utility.prototype.getTypeString = function () {
                    return '[fm.icelink.sdp.Utility]';
                };
                Utility.splitAndClean = function (s) {
                    if (arguments.length == 1) {
                        var list = icelink.ArrayExtensions.newArray(fm.icelink.StringExtensions.split(s, [10]));
                        for (var i = 0; (i < fm.icelink.ArrayExtensions.getCount(list)); i++) {
                            list[i] = fm.icelink.StringExtensions.trim(list[i]);
                            if (fm.icelink.StringExtensions.isNullOrEmpty(list[i])) {
                                fm.icelink.ArrayExtensions.removeAt(list, i);
                                i--;
                            }
                        }
                        return fm.icelink.ArrayExtensions.toArray(list);
                    }
                    else {
                        throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                    }
                };
                return Utility;
            }());
            sdp.Utility = Utility;
        })(sdp = icelink.sdp || (icelink.sdp = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A session description.
         </div>
    
        */
        var SessionDescription = /** @class */ (function () {
            function SessionDescription() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkSessionDescriptionInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SessionDescription.prototype.getTypeString = function () {
                return '[fm.icelink.SessionDescription]';
            };
            SessionDescription.prototype.fmicelinkSessionDescriptionInit = function () {
                this._renegotiation = false;
            };
            /**<span id='method-fm.icelink.SessionDescription-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} sessionDescriptionJson The JSON to deserialize.
            @return {fm.icelink.SessionDescription} The deserialized session description.
            */
            SessionDescription.fromJson = function (sessionDescriptionJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(sessionDescriptionJson, function () {
                        return new fm.icelink.SessionDescription();
                    }, function (sessionDescription, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "sdpMessage"))) {
                                if ((fm.icelink.Global.equals(str, "tieBreaker"))) {
                                    sessionDescription.setTieBreaker(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str, "isOffer"))) {
                                        sessionDescription.setType(((fm.icelink.Global.equals(fm.icelink.JsonSerializer.deserializeBoolean(valueJson), true)) ? fm.icelink.SessionDescriptionType.Offer : fm.icelink.SessionDescriptionType.Answer));
                                    }
                                }
                            }
                            else {
                                sessionDescription.setSdpMessage(fm.icelink.sdp.Message.parse(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.SessionDescription} sessionDescription The session description.
            @return {string}
             The serialized JSON.
     
            */
            SessionDescription.toJson = function (sessionDescription) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(sessionDescription, function (sd, jsonObject) {
                        if ((!fm.icelink.Global.equals(sessionDescription.getSdpMessage(), null))) {
                            jsonObject["sdpMessage"] = fm.icelink.JsonSerializer.serializeString(sessionDescription.getSdpMessage().toString());
                        }
                        if ((!fm.icelink.Global.equals(sessionDescription.getTieBreaker(), null))) {
                            jsonObject["tieBreaker"] = fm.icelink.JsonSerializer.serializeString(sessionDescription.getTieBreaker());
                        }
                        jsonObject["isOffer"] = fm.icelink.JsonSerializer.serializeBoolean(sessionDescription.getIsOffer());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getHasAudio'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether an audio stream is described.
             </div>
    
    
            @return {boolean}
            */
            SessionDescription.prototype.getHasAudio = function () {
                if (arguments.length == 0) {
                    var sdpMessage = this.getSdpMessage();
                    if ((fm.icelink.Global.equals(sdpMessage, null))) {
                        return false;
                    }
                    return (!fm.icelink.Global.equals(sdpMessage.getAudioDescription(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getHasData'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether a data stream is described.
             </div>
    
    
            @return {boolean}
            */
            SessionDescription.prototype.getHasData = function () {
                if (arguments.length == 0) {
                    var sdpMessage = this.getSdpMessage();
                    if ((fm.icelink.Global.equals(sdpMessage, null))) {
                        return false;
                    }
                    return (((!fm.icelink.Global.equals(sdpMessage.getApplicationDescription(), null)) || (!fm.icelink.Global.equals(sdpMessage.getTextDescription(), null))) || (!fm.icelink.Global.equals(sdpMessage.getMessageDescription(), null)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getHasVideo'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether a video stream is described.
             </div>
    
    
            @return {boolean}
            */
            SessionDescription.prototype.getHasVideo = function () {
                if (arguments.length == 0) {
                    var sdpMessage = this.getSdpMessage();
                    if ((fm.icelink.Global.equals(sdpMessage, null))) {
                        return false;
                    }
                    return (!fm.icelink.Global.equals(sdpMessage.getVideoDescription(), null));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getIsOffer'>&nbsp;</span>**/
            /**
             <div>
             Gets a value indicating whether this instance is offer.
             </div>
    
    
            @return {boolean}
            */
            SessionDescription.prototype.getIsOffer = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getType(), fm.icelink.SessionDescriptionType.Offer));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            SessionDescription.prototype.getRenegotiation = function () {
                if (arguments.length == 0) {
                    return this._renegotiation;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getSdpMessage'>&nbsp;</span>**/
            /**
             <div>
             Gets the SDP message.
             </div>
    
    
            @return {fm.icelink.sdp.Message}
            */
            SessionDescription.prototype.getSdpMessage = function () {
                if (arguments.length == 0) {
                    return this._sdpMessage;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getSessionId'>&nbsp;</span>**/
            /**
             <div>
             Gets the session id of the remote description, if remote description is set. Returns null otherwise.
             </div>
    
    
            @return {number}
            */
            SessionDescription.prototype.getSessionId = function () {
                if (arguments.length == 0) {
                    if ((!fm.icelink.Global.equals(this.getSdpMessage(), null))) {
                        var origin = this.getSdpMessage().getOrigin();
                        if ((!fm.icelink.Global.equals(origin, null))) {
                            return origin.getSessionId();
                        }
                    }
                    return -1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getSessionVersion'>&nbsp;</span>**/
            /**
             <div>
             Gets the version of the remote description, if remote description is set. Returns null otherwise.
             </div>
    
    
            @return {number}
            */
            SessionDescription.prototype.getSessionVersion = function () {
                if (arguments.length == 0) {
                    if ((!fm.icelink.Global.equals(this.getSdpMessage(), null))) {
                        var origin = this.getSdpMessage().getOrigin();
                        if ((!fm.icelink.Global.equals(origin, null))) {
                            return origin.getSessionVersion();
                        }
                    }
                    return -1;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getTieBreaker'>&nbsp;</span>**/
            /**
             <div>
             Gets the tie breaker in case of a role conflict.
             </div>
    
    
            @return {string}
            */
            SessionDescription.prototype.getTieBreaker = function () {
                if (arguments.length == 0) {
                    return this._tieBreaker;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.SessionDescriptionType}
            */
            SessionDescription.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            SessionDescription.prototype.setRenegotiation = function (value) {
                if (arguments.length == 1) {
                    this._renegotiation = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-setSdpMessage'>&nbsp;</span>**/
            /**
             <div>
             Sets the SDP message.
             </div>
    
    
            @param {fm.icelink.sdp.Message} value
            @return {void}
            */
            SessionDescription.prototype.setSdpMessage = function (value) {
                if (arguments.length == 1) {
                    this._sdpMessage = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-setTieBreaker'>&nbsp;</span>**/
            /**
             <div>
             Sets the tie breaker in case of a role conflict.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            SessionDescription.prototype.setTieBreaker = function (value) {
                if (arguments.length == 1) {
                    this._tieBreaker = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-setType'>&nbsp;</span>**/
            /**
             <div>
             Sets the type.
             </div>
    
    
            @param {fm.icelink.SessionDescriptionType} value
            @return {void}
            */
            SessionDescription.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SessionDescription-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
    
            @return {string}
            */
            SessionDescription.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.SessionDescription.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SessionDescription;
        }());
        icelink.SessionDescription = SessionDescription;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var SessionDescriptionTypeWrapper = /** @class */ (function () {
            function SessionDescriptionTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_43 = __arguments[0];
                    //super();
                    this._value = value_43;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SessionDescriptionTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.SessionDescriptionTypeWrapper]';
            };
            SessionDescriptionTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.SessionDescriptionType.Offer)
                        return 'Offer';
                    if (this._value == fm.icelink.SessionDescriptionType.Answer)
                        return 'Answer';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SessionDescriptionTypeWrapper;
        }());
        icelink.SessionDescriptionTypeWrapper = SessionDescriptionTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A size (width and height).
         </div>
    
        */
        var Size = /** @class */ (function () {
            function Size() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 2) {
                    var width = __arguments[0];
                    var height = __arguments[1];
                    //super();
                    this.fmicelinkSizeInit();
                    this.setWidth(width);
                    this.setHeight(height);
                }
                else if (__arguments.length == 0) {
                    //super();
                    this.fmicelinkSizeInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Size.prototype.getTypeString = function () {
                return '[fm.icelink.Size]';
            };
            Size.prototype.fmicelinkSizeInit = function () {
                this._height = 0;
                this._width = 0;
            };
            /**<span id='method-fm.icelink.Size-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} sizeJson The JSON to deserialize.
            @return {fm.icelink.Size} The deserialized size.
            */
            Size.fromJson = function (sizeJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(sizeJson, function () {
                        return new fm.icelink.Size();
                    }, function (size, name, valueJson) {
                        var str = name;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "width"))) {
                                if ((fm.icelink.Global.equals(str, "height"))) {
                                    size.setHeight(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                }
                            }
                            else {
                                size.setWidth(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Size-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.Size} size The size.
            @return {string}
             The serialized JSON.
     
            */
            Size.toJson = function (size) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(size, function (obj, jsonObj) {
                        jsonObj["width"] = fm.icelink.JsonSerializer.serializeInteger(size.getWidth());
                        jsonObj["height"] = fm.icelink.JsonSerializer.serializeInteger(size.getHeight());
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Size-getHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height.
             </div>
    
    
            @return {number}
            */
            Size.prototype.getHeight = function () {
                if (arguments.length == 0) {
                    return this._height;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Size-getWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width.
             </div>
    
    
            @return {number}
            */
            Size.prototype.getWidth = function () {
                if (arguments.length == 0) {
                    return this._width;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Size.prototype.setHeight = function (value) {
                if (arguments.length == 1) {
                    this._height = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            Size.prototype.setWidth = function (value) {
                if (arguments.length == 1) {
                    this._width = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Size-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
             The serialized JSON.
     
            */
            Size.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Size.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Size;
        }());
        icelink.Size = Size;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var SignallingStateWrapper = /** @class */ (function () {
            function SignallingStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_44 = __arguments[0];
                    //super();
                    this._value = value_44;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SignallingStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.SignallingStateWrapper]';
            };
            SignallingStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.SignallingState.New)
                        return 'New';
                    if (this._value == fm.icelink.SignallingState.HaveLocalOffer)
                        return 'HaveLocalOffer';
                    if (this._value == fm.icelink.SignallingState.HaveRemoteOffer)
                        return 'HaveRemoteOffer';
                    if (this._value == fm.icelink.SignallingState.Stable)
                        return 'Stable';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SignallingStateWrapper;
        }());
        icelink.SignallingStateWrapper = SignallingStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A sink output (e.g. device, track, screen).
         </div>
    
        */
        var SinkOutput = /** @class */ (function () {
            function SinkOutput() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else if (__arguments.length == 2) {
                    var id = __arguments[0];
                    var name_18 = __arguments[1];
                    //super();
                    this.setId(id);
                    this.setName(name_18);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SinkOutput.prototype.getTypeString = function () {
                return '[fm.icelink.SinkOutput]';
            };
            /**<span id='method-fm.icelink.SinkOutput-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} sinkOutputJson The sink output JSON.
            @return {fm.icelink.SinkOutput}
            */
            SinkOutput.fromJson = function (sinkOutputJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(sinkOutputJson, function () {
                        return new fm.icelink.SinkOutput();
                    }, function (obj, key, valueJson) {
                        var str = key;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "id"))) {
                                if ((fm.icelink.Global.equals(str, "name"))) {
                                    obj.setName(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                            }
                            else {
                                obj.setId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance array from JSON.
             </div>
    
            @param {string} sinkOutputsJson The sink outputs JSON.
            @return {fm.icelink.SinkOutput[]}
            */
            SinkOutput.fromJsonArray = function (sinkOutputsJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(sinkOutputsJson, fm.icelink.SinkOutput.fromJson.bind(fm.icelink.SinkOutput));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.SinkOutput} sinkOutput The sink output.
            @return {string}
            */
            SinkOutput.toJson = function (sinkOutput) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(sinkOutput, function (obj, jsonObject) {
                        if ((!fm.icelink.Global.equals(obj.getId(), null))) {
                            jsonObject["id"] = fm.icelink.JsonSerializer.serializeString(obj.getId());
                        }
                        if ((!fm.icelink.Global.equals(obj.getName(), null))) {
                            jsonObject["name"] = fm.icelink.JsonSerializer.serializeString(obj.getName());
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance array to JSON.
             </div>
    
            @param {fm.icelink.SinkOutput[]} sinkOutputs The sink outputs.
            @return {string}
            */
            SinkOutput.toJsonArray = function (sinkOutputs) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(sinkOutputs, fm.icelink.SinkOutput.toJson.bind(fm.icelink.SinkOutput));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            SinkOutput.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this._id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-getName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name.
             </div>
    
    
            @return {string}
            */
            SinkOutput.prototype.getName = function () {
                if (arguments.length == 0) {
                    return this._name;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            SinkOutput.prototype.setId = function (value) {
                if (arguments.length == 1) {
                    this._id = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            SinkOutput.prototype.setName = function (value) {
                if (arguments.length == 1) {
                    this._name = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
            */
            SinkOutput.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.SinkOutput.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SinkOutput-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
            @return {string}
             A string that represents this instance.
     
            */
            SinkOutput.prototype.toString = function () {
                if (arguments.length == 0) {
                    return this.getName();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SinkOutput;
        }());
        icelink.SinkOutput = SinkOutput;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A source input (e.g. device, track, screen).
         </div>
    
        */
        var SourceInput = /** @class */ (function () {
            function SourceInput() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else if (__arguments.length == 2) {
                    var id = __arguments[0];
                    var name_19 = __arguments[1];
                    //super();
                    this.setId(id);
                    this.setName(name_19);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            SourceInput.prototype.getTypeString = function () {
                return '[fm.icelink.SourceInput]';
            };
            /**<span id='method-fm.icelink.SourceInput-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance from JSON.
             </div>
    
            @param {string} sourceInputJson The source input JSON.
            @return {fm.icelink.SourceInput}
            */
            SourceInput.fromJson = function (sourceInputJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(sourceInputJson, function () {
                        return new fm.icelink.SourceInput();
                    }, function (obj, key, valueJson) {
                        var str = key;
                        if ((!fm.icelink.Global.equals(str, null))) {
                            if (!(fm.icelink.Global.equals(str, "id"))) {
                                if ((fm.icelink.Global.equals(str, "name"))) {
                                    obj.setName(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                            }
                            else {
                                obj.setId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            }
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Deserializes an instance array from JSON.
             </div>
    
            @param {string} sourceInputsJson The source inputs JSON.
            @return {fm.icelink.SourceInput[]}
            */
            SourceInput.fromJsonArray = function (sourceInputsJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(sourceInputsJson, fm.icelink.SourceInput.fromJson.bind(fm.icelink.SourceInput));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance to JSON.
             </div>
    
            @param {fm.icelink.SourceInput} sourceInput The source input.
            @return {string}
            */
            SourceInput.toJson = function (sourceInput) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(sourceInput, function (obj, jsonObject) {
                        if ((!fm.icelink.Global.equals(obj.getId(), null))) {
                            jsonObject["id"] = fm.icelink.JsonSerializer.serializeString(obj.getId());
                        }
                        if ((!fm.icelink.Global.equals(obj.getName(), null))) {
                            jsonObject["name"] = fm.icelink.JsonSerializer.serializeString(obj.getName());
                        }
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an instance array to JSON.
             </div>
    
            @param {fm.icelink.SourceInput[]} sourceInputs The source inputs.
            @return {string}
            */
            SourceInput.toJsonArray = function (sourceInputs) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(sourceInputs, fm.icelink.SourceInput.toJson.bind(fm.icelink.SourceInput));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier.
             </div>
    
    
            @return {string}
            */
            SourceInput.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this._id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-getName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name.
             </div>
    
    
            @return {string}
            */
            SourceInput.prototype.getName = function () {
                if (arguments.length == 0) {
                    return this._name;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-setId'>&nbsp;</span>**/
            /**
             <div>
             Sets the identifier.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            SourceInput.prototype.setId = function (value) {
                if (arguments.length == 1) {
                    this._id = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-setName'>&nbsp;</span>**/
            /**
             <div>
             Sets the name.
             </div>
    
    
            @param {string} value
            @return {void}
            */
            SourceInput.prototype.setName = function (value) {
                if (arguments.length == 1) {
                    this._name = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this instance to JSON.
             </div>
    
            @return {string}
            */
            SourceInput.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.SourceInput.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.SourceInput-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
            @return {string}
             A string that represents this instance.
     
            */
            SourceInput.prototype.toString = function () {
                if (arguments.length == 0) {
                    return this.getName();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return SourceInput;
        }());
        icelink.SourceInput = SourceInput;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Base stats.
         </div>
    
        */
        var BaseStats = /** @class */ (function () {
            function BaseStats() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            BaseStats.prototype.getTypeString = function () {
                return '[fm.icelink.BaseStats]';
            };
            /**<span id='method-fm.icelink.BaseStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            BaseStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "id"))) {
                            if ((fm.icelink.Global.equals(str, "timestamp"))) {
                                this.setTimestamp(fm.icelink.UnixTimestamp.unixMillisToDateTime(fm.icelink.JsonSerializer.deserializeLong(valueJson)));
                            }
                        }
                        else {
                            this.setId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.BaseStats-getId'>&nbsp;</span>**/
            /**
             <div>
             Gets the identifier of
             the object generating these stats.
             </div>
    
    
            @return {string}
            */
            BaseStats.prototype.getId = function () {
                if (arguments.length == 0) {
                    return this._id;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.BaseStats-getTimestamp'>&nbsp;</span>**/
            /**
             <div>
             Gets the timestamp when
             these stats were generated.
             </div>
    
    
            @return {fm.icelink.DateTime}
            */
            BaseStats.prototype.getTimestamp = function () {
                if (arguments.length == 0) {
                    return this._timestamp;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.BaseStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            BaseStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    if ((!fm.icelink.Global.equals(this.getId(), null))) {
                        jsonObject["id"] = fm.icelink.JsonSerializer.serializeString(this.getId());
                    }
                    jsonObject["timestamp"] = fm.icelink.JsonSerializer.serializeLong(fm.icelink.UnixTimestamp.dateTimeToUnixMillis(this.getTimestamp()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            BaseStats.prototype.setId = function (value) {
                if (arguments.length == 1) {
                    this._id = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            BaseStats.prototype.setTimestamp = function (value) {
                if (arguments.length == 1) {
                    this._timestamp = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return BaseStats;
        }());
        icelink.BaseStats = BaseStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Codec stats.
         </div>
    
        */
        var CodecStats = /** @class */ (function (_super) {
            __extends(CodecStats, _super);
            function CodecStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkCodecStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            CodecStats.prototype.getTypeString = function () {
                return '[fm.icelink.CodecStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            CodecStats.prototype.fmicelinkCodecStatsInit = function () {
                this._channelCount = 0;
                this._clockRate = 0;
                this._payloadType = 0;
            };
            /**<span id='method-fm.icelink.CodecStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes codec stats from JSON.
             </div>
    
            @param {string} codecJson The codec's stats JSON.
            @return {fm.icelink.CodecStats}
            */
            CodecStats.fromJson = function (codecJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(codecJson, function () {
                        return new fm.icelink.CodecStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes codec stats to JSON.
             </div>
    
            @param {fm.icelink.CodecStats} codec The codec's stats.
            @return {string}
            */
            CodecStats.toJson = function (codec) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(codec, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            CodecStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str2 = key;
                    if ((!fm.icelink.Global.equals(str2, null))) {
                        if (!(fm.icelink.Global.equals(str2, "codecType"))) {
                            if ((fm.icelink.Global.equals(str2, "payloadType"))) {
                                this.setPayloadType(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str2, "name"))) {
                                    this.setName(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str2, "clockRate"))) {
                                        this.setClockRate(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str2, "channelCount"))) {
                                            this.setChannelCount(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                        }
                                        else {
                                            if ((fm.icelink.Global.equals(str2, "parameters"))) {
                                                this.setParameters(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            var str = fm.icelink.JsonSerializer.deserializeString(valueJson);
                            this.setCodecType(((fm.icelink.Global.equals(str, "encode")) ? fm.icelink.CodecType.Encode : fm.icelink.CodecType.Decode));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getChannelCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the channel count.
             </div>
    
    
            @return {number}
            */
            CodecStats.prototype.getChannelCount = function () {
                if (arguments.length == 0) {
                    return this._channelCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getClockRate'>&nbsp;</span>**/
            /**
             <div>
             Gets the clock rate.
             </div>
    
    
            @return {number}
            */
            CodecStats.prototype.getClockRate = function () {
                if (arguments.length == 0) {
                    return this._clockRate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getCodecType'>&nbsp;</span>**/
            /**
             <div>
             Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.
             </div>
    
    
            @return {fm.icelink.CodecType}
            */
            CodecStats.prototype.getCodecType = function () {
                if (arguments.length == 0) {
                    return this._codecType;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getName'>&nbsp;</span>**/
            /**
             <div>
             Gets the name.
             </div>
    
    
            @return {string}
            */
            CodecStats.prototype.getName = function () {
                if (arguments.length == 0) {
                    return this._name;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getParameters'>&nbsp;</span>**/
            /**
             <div>
             Gets the parameters.
             </div>
    
    
            @return {string}
            */
            CodecStats.prototype.getParameters = function () {
                if (arguments.length == 0) {
                    return this._parameters;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-getPayloadType'>&nbsp;</span>**/
            /**
             <div>
             Gets the payload type.
             </div>
    
    
            @return {number}
            */
            CodecStats.prototype.getPayloadType = function () {
                if (arguments.length == 0) {
                    return this._payloadType;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            CodecStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["codecType"] = fm.icelink.JsonSerializer.serializeString(((fm.icelink.Global.equals(this.getCodecType(), fm.icelink.CodecType.Encode)) ? "encode" : "decode"));
                    jsonObject["payloadType"] = fm.icelink.JsonSerializer.serializeInteger(this.getPayloadType());
                    if ((!fm.icelink.Global.equals(this.getName(), null))) {
                        jsonObject["name"] = fm.icelink.JsonSerializer.serializeString(this.getName());
                    }
                    jsonObject["clockRate"] = fm.icelink.JsonSerializer.serializeInteger(this.getClockRate());
                    if ((!fm.icelink.Global.equals(this.getChannelCount(), 0))) {
                        jsonObject["channelCount"] = fm.icelink.JsonSerializer.serializeInteger(this.getChannelCount());
                    }
                    if ((!fm.icelink.Global.equals(this.getParameters(), null))) {
                        jsonObject["parameters"] = fm.icelink.JsonSerializer.serializeString(this.getParameters());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setChannelCount = function (value) {
                if (arguments.length == 1) {
                    this._channelCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setClockRate = function (value) {
                if (arguments.length == 1) {
                    this._clockRate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setCodecType = function (value) {
                if (arguments.length == 1) {
                    this._codecType = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setName = function (value) {
                if (arguments.length == 1) {
                    this._name = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setParameters = function (value) {
                if (arguments.length == 1) {
                    this._parameters = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CodecStats.prototype.setPayloadType = function (value) {
                if (arguments.length == 1) {
                    this._payloadType = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CodecStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            CodecStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.CodecStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CodecStats;
        }(fm.icelink.BaseStats));
        icelink.CodecStats = CodecStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Stream stats.
         </div>
    
        */
        var StreamStats = /** @class */ (function (_super) {
            __extends(StreamStats, _super);
            function StreamStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            StreamStats.prototype.getTypeString = function () {
                return '[fm.icelink.StreamStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.StreamStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            StreamStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "type"))) {
                            if ((fm.icelink.Global.equals(str, "transport"))) {
                                this.setTransport(fm.icelink.TransportStats.fromJson(valueJson));
                            }
                        }
                        else {
                            this.setType(this.typeFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-getIsHost'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the transport's active candidate pair has a host candidate.
             </div>
    
    
            @return {boolean}
            */
            StreamStats.prototype.getIsHost = function () {
                if (arguments.length == 0) {
                    var transport = this.getTransport();
                    if ((fm.icelink.Global.equals(transport, null))) {
                        return false;
                    }
                    return transport.getIsHost();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-getIsReflexive'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the transport's active candidate pair has a reflexive candidate.
             </div>
    
    
            @return {boolean}
            */
            StreamStats.prototype.getIsReflexive = function () {
                if (arguments.length == 0) {
                    var transport = this.getTransport();
                    if ((fm.icelink.Global.equals(transport, null))) {
                        return false;
                    }
                    return transport.getIsReflexive();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-getIsRelayed'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the transport's active candidate pair has a relayed candidate.
             </div>
    
    
            @return {boolean}
            */
            StreamStats.prototype.getIsRelayed = function () {
                if (arguments.length == 0) {
                    var transport = this.getTransport();
                    if ((fm.icelink.Global.equals(transport, null))) {
                        return false;
                    }
                    return transport.getIsRelayed();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-getTransport'>&nbsp;</span>**/
            /**
             <div>
             Gets the transport's stats.
             </div>
    
    
            @return {fm.icelink.TransportStats}
            */
            StreamStats.prototype.getTransport = function () {
                if (arguments.length == 0) {
                    return this._transport;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.StreamType}
            */
            StreamStats.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            StreamStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["type"] = fm.icelink.JsonSerializer.serializeString(this.typeToString(this.getType()));
                    if ((!fm.icelink.Global.equals(this.getTransport(), null))) {
                        jsonObject["transport"] = fm.icelink.TransportStats.toJson(this.getTransport());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamStats.prototype.setTransport = function (value) {
                if (arguments.length == 1) {
                    this._transport = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamStats.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamStats.prototype.typeFromString = function (typeString) {
                if (arguments.length == 1) {
                    var _var0 = typeString;
                    if (_var0 == "audio") {
                        do {
                            return fm.icelink.StreamType.Audio;
                        } while (false);
                    }
                    else if (_var0 == "video") {
                        do {
                            return fm.icelink.StreamType.Video;
                        } while (false);
                    }
                    else if (_var0 == "application") {
                        do {
                            return fm.icelink.StreamType.Application;
                        } while (false);
                    }
                    else if (_var0 == "message") {
                        do {
                            return fm.icelink.StreamType.Message;
                        } while (false);
                    }
                    else if (_var0 == "text") {
                        do {
                            return fm.icelink.StreamType.Text;
                        } while (false);
                    }
                    return fm.icelink.StreamType.Text;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamStats.prototype.typeToString = function (type) {
                if (arguments.length == 1) {
                    var _var0 = type;
                    if (_var0 == fm.icelink.StreamType.Audio) {
                        do {
                            return "audio";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Video) {
                        do {
                            return "video";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Application) {
                        do {
                            return "application";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Message) {
                        do {
                            return "message";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamType.Text) {
                        do {
                            return "text";
                        } while (false);
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamStats;
        }(fm.icelink.BaseStats));
        icelink.StreamStats = StreamStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="StreamStats.ts" />

/// <reference path="StreamStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Data stream stats.
         </div>
    
        */
        var DataStreamStats = /** @class */ (function (_super) {
            __extends(DataStreamStats, _super);
            function DataStreamStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            DataStreamStats.prototype.getTypeString = function () {
                return '[fm.icelink.DataStreamStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.DataStreamStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes data stream stats from JSON.
             </div>
    
            @param {string} dataStreamJson The data stream's stats JSON.
            @return {fm.icelink.DataStreamStats}
            */
            DataStreamStats.fromJson = function (dataStreamJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(dataStreamJson, function () {
                        return new fm.icelink.DataStreamStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataStreamStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes data stream stats to JSON.
             </div>
    
            @param {fm.icelink.DataStreamStats} dataStream The data stream's stats.
            @return {string}
            */
            DataStreamStats.toJson = function (dataStream) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(dataStream, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataStreamStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            DataStreamStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if (((!fm.icelink.Global.equals(str, null)) && (fm.icelink.Global.equals(str, "dataChannels")))) {
                        this.setDataChannels(fm.icelink.DataChannelStats.fromJsonArray(valueJson));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            DataStreamStats.prototype.getDataChannel = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getDataChannels());
                }
                else if (arguments.length == 1) {
                    var dataChannelId = arguments[0];
                    for (var _i = 0, _a = this.getDataChannels(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), dataChannelId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataStreamStats-getDataChannels'>&nbsp;</span>**/
            /**
             <div>
             Gets the data channels' stats.
             </div>
    
    
            @return {fm.icelink.DataChannelStats[]}
            */
            DataStreamStats.prototype.getDataChannels = function () {
                if (arguments.length == 0) {
                    return this._dataChannels;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataStreamStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            DataStreamStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getDataChannels(), null))) {
                        jsonObject["dataChannels"] = fm.icelink.DataChannelStats.toJsonArray(this.getDataChannels());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataStreamStats.prototype.setDataChannels = function (value) {
                if (arguments.length == 1) {
                    this._dataChannels = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataStreamStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            DataStreamStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.DataStreamStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataStreamStats;
        }(fm.icelink.StreamStats));
        icelink.DataStreamStats = DataStreamStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media component stats.
         </div>
    
        */
        var MediaComponentStats = /** @class */ (function (_super) {
            __extends(MediaComponentStats, _super);
            function MediaComponentStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaComponentStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaComponentStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaComponentStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaComponentStats.prototype.fmicelinkMediaComponentStatsInit = function () {
                this._firCount = 0;
                this._nackCount = 0;
                this._pliCount = 0;
                this._sliCount = 0;
                this._synchronizationSource = 0;
            };
            /**<span id='method-fm.icelink.MediaComponentStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaComponentStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "ssrc") {
                        do {
                            this.setSynchronizationSource(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "track") {
                        do {
                            this.setTrack(fm.icelink.MediaTrackStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "codec") {
                        do {
                            this.setCodec(fm.icelink.CodecStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "nackCount") {
                        do {
                            this.setNackCount(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "pliCount") {
                        do {
                            this.setNackCount(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "firCount") {
                        do {
                            this.setNackCount(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "sliCount") {
                        do {
                            this.setSliCount(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getCodec'>&nbsp;</span>**/
            /**
             <div>
             Gets the codec stats.
             </div>
    
    
            @return {fm.icelink.CodecStats}
            */
            MediaComponentStats.prototype.getCodec = function () {
                if (arguments.length == 0) {
                    return this._codec;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getFirCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the FIR count.
             </div>
    
    
            @return {number}
            */
            MediaComponentStats.prototype.getFirCount = function () {
                if (arguments.length == 0) {
                    return this._firCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getNackCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the NACK count.
             </div>
    
    
            @return {number}
            */
            MediaComponentStats.prototype.getNackCount = function () {
                if (arguments.length == 0) {
                    return this._nackCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getPliCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the PLI count.
             </div>
    
    
            @return {number}
            */
            MediaComponentStats.prototype.getPliCount = function () {
                if (arguments.length == 0) {
                    return this._pliCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getSliCount'>&nbsp;</span>**/
            /**
             <div>
             Gets the SLI count.
             </div>
    
    
            @return {number}
            */
            MediaComponentStats.prototype.getSliCount = function () {
                if (arguments.length == 0) {
                    return this._sliCount;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Gets the synchronization source.
             </div>
    
    
            @return {number}
            */
            MediaComponentStats.prototype.getSynchronizationSource = function () {
                if (arguments.length == 0) {
                    return this._synchronizationSource;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-getTrack'>&nbsp;</span>**/
            /**
             <div>
             Gets the track's stats.
             </div>
    
    
            @return {fm.icelink.MediaTrackStats}
            */
            MediaComponentStats.prototype.getTrack = function () {
                if (arguments.length == 0) {
                    return this._track;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaComponentStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["ssrc"] = fm.icelink.JsonSerializer.serializeLong(this.getSynchronizationSource());
                    if ((!fm.icelink.Global.equals(this.getTrack(), null))) {
                        jsonObject["track"] = fm.icelink.MediaTrackStats.toJson(this.getTrack());
                    }
                    if ((!fm.icelink.Global.equals(this.getCodec(), null))) {
                        jsonObject["codec"] = fm.icelink.CodecStats.toJson(this.getCodec());
                    }
                    jsonObject["nackCount"] = fm.icelink.JsonSerializer.serializeLong(this.getNackCount());
                    jsonObject["pliCount"] = fm.icelink.JsonSerializer.serializeLong(this.getPliCount());
                    jsonObject["firCount"] = fm.icelink.JsonSerializer.serializeLong(this.getFirCount());
                    jsonObject["sliCount"] = fm.icelink.JsonSerializer.serializeLong(this.getSliCount());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setCodec'>&nbsp;</span>**/
            /**
             <div>
             Sets the codec stats.
             </div>
    
    
            @param {fm.icelink.CodecStats} value
            @return {void}
            */
            MediaComponentStats.prototype.setCodec = function (value) {
                if (arguments.length == 1) {
                    this._codec = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setFirCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the FIR count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaComponentStats.prototype.setFirCount = function (value) {
                if (arguments.length == 1) {
                    this._firCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setNackCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the NACK count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaComponentStats.prototype.setNackCount = function (value) {
                if (arguments.length == 1) {
                    this._nackCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setPliCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the PLI count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaComponentStats.prototype.setPliCount = function (value) {
                if (arguments.length == 1) {
                    this._pliCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setSliCount'>&nbsp;</span>**/
            /**
             <div>
             Sets the SLI count.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaComponentStats.prototype.setSliCount = function (value) {
                if (arguments.length == 1) {
                    this._sliCount = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Sets the synchronization source.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            MediaComponentStats.prototype.setSynchronizationSource = function (value) {
                if (arguments.length == 1) {
                    this._synchronizationSource = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaComponentStats-setTrack'>&nbsp;</span>**/
            /**
             <div>
             Sets the track's stats.
             </div>
    
    
            @param {fm.icelink.MediaTrackStats} value
            @return {void}
            */
            MediaComponentStats.prototype.setTrack = function (value) {
                if (arguments.length == 1) {
                    this._track = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaComponentStats;
        }(fm.icelink.BaseStats));
        icelink.MediaComponentStats = MediaComponentStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media stats.
         </div>
    
        */
        var MediaStats = /** @class */ (function (_super) {
            __extends(MediaStats, _super);
            function MediaStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.MediaStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes media stats from JSON.
             </div>
    
            @param {string} mediaJson The media's stats JSON.
            @return {fm.icelink.MediaStats}
            */
            MediaStats.fromJson = function (mediaJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(mediaJson, function () {
                        return new fm.icelink.MediaStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes media stats to JSON.
             </div>
    
            @param {fm.icelink.MediaStats} media The media's stats.
            @return {string}
            */
            MediaStats.toJson = function (media) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(media, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if (((!fm.icelink.Global.equals(str, null)) && (fm.icelink.Global.equals(str, "tracks")))) {
                        this.setTracks(fm.icelink.MediaTrackStats.fromJsonArray(valueJson));
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            MediaStats.prototype.getTrack = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getTracks());
                }
                else if (arguments.length == 1) {
                    var trackId = arguments[0];
                    for (var _i = 0, _a = this.getTracks(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), trackId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStats-getTracks'>&nbsp;</span>**/
            /**
             <div>
             Gets the tracks' stats.
             </div>
    
    
            @return {fm.icelink.MediaTrackStats[]}
            */
            MediaStats.prototype.getTracks = function () {
                if (arguments.length == 0) {
                    return this._tracks;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getTracks(), null))) {
                        jsonObject["tracks"] = fm.icelink.MediaTrackStats.toJsonArray(this.getTracks());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaStats.prototype.setTracks = function (value) {
                if (arguments.length == 1) {
                    this._tracks = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            MediaStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.MediaStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaStats;
        }(fm.icelink.BaseStats));
        icelink.MediaStats = MediaStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaComponentStats.ts" />

/// <reference path="MediaComponentStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media sender stats.
         </div>
    
        */
        var MediaSenderStats = /** @class */ (function (_super) {
            __extends(MediaSenderStats, _super);
            function MediaSenderStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaSenderStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaSenderStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaSenderStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaSenderStats.prototype.fmicelinkMediaSenderStatsInit = function () {
                this._bytesSent = 0;
                this._packetsSent = 0;
                this._roundTripTime = 0;
            };
            /**<span id='method-fm.icelink.MediaSenderStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes media sender stats from JSON.
             </div>
    
            @param {string} mediaSenderJson The media sender's stats JSON.
            @return {fm.icelink.MediaSenderStats}
            */
            MediaSenderStats.fromJson = function (mediaSenderJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(mediaSenderJson, function () {
                        return new fm.icelink.MediaSenderStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes media sender stats to JSON.
             </div>
    
            @param {fm.icelink.MediaSenderStats} mediaSender The media sender's stats.
            @return {string}
            */
            MediaSenderStats.toJson = function (mediaSender) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(mediaSender, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaSenderStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "packetsSent"))) {
                            if ((fm.icelink.Global.equals(str, "bytesSent"))) {
                                this.setBytesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str, "rtt"))) {
                                    this.setRoundTripTime(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                }
                            }
                        }
                        else {
                            this.setPacketsSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-getBytesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes sent.
             </div>
    
    
            @return {number}
            */
            MediaSenderStats.prototype.getBytesSent = function () {
                if (arguments.length == 0) {
                    return this._bytesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-getPacketsSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of packets sent.
             </div>
    
    
            @return {number}
            */
            MediaSenderStats.prototype.getPacketsSent = function () {
                if (arguments.length == 0) {
                    return this._packetsSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-getRoundTripTime'>&nbsp;</span>**/
            /**
             <div>
             Gets the round trip time in milliseconds.
             </div>
    
    
            @return {number}
            */
            MediaSenderStats.prototype.getRoundTripTime = function () {
                if (arguments.length == 0) {
                    return this._roundTripTime;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaSenderStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["packetsSent"] = fm.icelink.JsonSerializer.serializeLong(this.getPacketsSent());
                    jsonObject["bytesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesSent());
                    jsonObject["rtt"] = fm.icelink.JsonSerializer.serializeInteger(this.getRoundTripTime());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaSenderStats.prototype.setBytesSent = function (value) {
                if (arguments.length == 1) {
                    this._bytesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaSenderStats.prototype.setPacketsSent = function (value) {
                if (arguments.length == 1) {
                    this._packetsSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaSenderStats.prototype.setRoundTripTime = function (value) {
                if (arguments.length == 1) {
                    this._roundTripTime = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaSenderStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            MediaSenderStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.MediaSenderStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaSenderStats;
        }(fm.icelink.MediaComponentStats));
        icelink.MediaSenderStats = MediaSenderStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaComponentStats.ts" />

/// <reference path="MediaComponentStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media receiver stats.
         </div>
    
        */
        var MediaReceiverStats = /** @class */ (function (_super) {
            __extends(MediaReceiverStats, _super);
            function MediaReceiverStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaReceiverStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaReceiverStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaReceiverStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaReceiverStats.prototype.fmicelinkMediaReceiverStatsInit = function () {
                this._bytesReceived = 0;
                this._jitter = 0;
                this._packetsDiscarded = 0;
                this._packetsLost = 0;
                this._packetsReceived = 0;
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes media receiver stats from JSON.
             </div>
    
            @param {string} mediaReceiverJson The media receiver's stats JSON.
            @return {fm.icelink.MediaReceiverStats}
            */
            MediaReceiverStats.fromJson = function (mediaReceiverJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(mediaReceiverJson, function () {
                        return new fm.icelink.MediaReceiverStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes media receiver stats to JSON.
             </div>
    
            @param {fm.icelink.MediaReceiverStats} mediaReceiver The media receiver's stats.
            @return {string}
            */
            MediaReceiverStats.toJson = function (mediaReceiver) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(mediaReceiver, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaReceiverStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "packetsReceived"))) {
                            if ((fm.icelink.Global.equals(str, "bytesReceived"))) {
                                this.setBytesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str, "packetsLost"))) {
                                    this.setPacketsLost(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                                }
                                else {
                                    if ((fm.icelink.Global.equals(str, "jitter"))) {
                                        this.setJitter(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                                    }
                                    else {
                                        if ((fm.icelink.Global.equals(str, "packetsDiscarded"))) {
                                            this.setPacketsDiscarded(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            this.setPacketsReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-getBytesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes received.
             </div>
    
    
            @return {number}
            */
            MediaReceiverStats.prototype.getBytesReceived = function () {
                if (arguments.length == 0) {
                    return this._bytesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-getJitter'>&nbsp;</span>**/
            /**
             <div>
             Gets the jitter in milliseconds.
             </div>
    
    
            @return {number}
            */
            MediaReceiverStats.prototype.getJitter = function () {
                if (arguments.length == 0) {
                    return this._jitter;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsDiscarded'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of packets discarded.
             </div>
    
    
            @return {number}
            */
            MediaReceiverStats.prototype.getPacketsDiscarded = function () {
                if (arguments.length == 0) {
                    return this._packetsDiscarded;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsLost'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of packets lost.
             </div>
    
    
            @return {number}
            */
            MediaReceiverStats.prototype.getPacketsLost = function () {
                if (arguments.length == 0) {
                    return this._packetsLost;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of packets received.
             </div>
    
    
            @return {number}
            */
            MediaReceiverStats.prototype.getPacketsReceived = function () {
                if (arguments.length == 0) {
                    return this._packetsReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaReceiverStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["packetsReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getPacketsReceived());
                    jsonObject["bytesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesReceived());
                    jsonObject["packetsLost"] = fm.icelink.JsonSerializer.serializeLong(this.getPacketsLost());
                    jsonObject["jitter"] = fm.icelink.JsonSerializer.serializeInteger(this.getJitter());
                    jsonObject["packetsDiscarded"] = fm.icelink.JsonSerializer.serializeLong(this.getPacketsDiscarded());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaReceiverStats.prototype.setBytesReceived = function (value) {
                if (arguments.length == 1) {
                    this._bytesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaReceiverStats.prototype.setJitter = function (value) {
                if (arguments.length == 1) {
                    this._jitter = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaReceiverStats.prototype.setPacketsDiscarded = function (value) {
                if (arguments.length == 1) {
                    this._packetsDiscarded = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaReceiverStats.prototype.setPacketsLost = function (value) {
                if (arguments.length == 1) {
                    this._packetsLost = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaReceiverStats.prototype.setPacketsReceived = function (value) {
                if (arguments.length == 1) {
                    this._packetsReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaReceiverStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            MediaReceiverStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.MediaReceiverStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaReceiverStats;
        }(fm.icelink.MediaComponentStats));
        icelink.MediaReceiverStats = MediaReceiverStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media track stats.
         </div>
    
        */
        var MediaTrackStats = /** @class */ (function (_super) {
            __extends(MediaTrackStats, _super);
            function MediaTrackStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkMediaTrackStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaTrackStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaTrackStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            MediaTrackStats.prototype.fmicelinkMediaTrackStatsInit = function () {
                this._detached = false;
                this._frameHeight = 0;
                this._frameRate = 0;
                this._framesCorrupted = 0;
                this._framesDecoded = 0;
                this._framesDropped = 0;
                this._framesEncoded = 0;
                this._framesReceived = 0;
                this._framesSent = 0;
                this._frameWidth = 0;
                this._stopped = false;
            };
            /**<span id='method-fm.icelink.MediaTrackStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes media track stats from JSON.
             </div>
    
            @param {string} mediaTrackJson The media track's stats JSON.
            @return {fm.icelink.MediaTrackStats}
            */
            MediaTrackStats.fromJson = function (mediaTrackJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(mediaTrackJson, function () {
                        return new fm.icelink.MediaTrackStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of media track stats from JSON.
             </div>
    
            @param {string} mediaTracksJson The media tracks' stats JSON.
            @return {fm.icelink.MediaTrackStats[]}
            */
            MediaTrackStats.fromJsonArray = function (mediaTracksJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(mediaTracksJson, fm.icelink.MediaTrackStats.fromJson.bind(fm.icelink.MediaTrackStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes media track stats to JSON.
             </div>
    
            @param {fm.icelink.MediaTrackStats} mediaTrack The media track's stats.
            @return {string}
            */
            MediaTrackStats.toJson = function (mediaTrack) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(mediaTrack, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of media track stats to JSON.
             </div>
    
            @param {fm.icelink.MediaTrackStats[]} mediaTracks The media tracks' stats.
            @return {string}
            */
            MediaTrackStats.toJsonArray = function (mediaTracks) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(mediaTracks, fm.icelink.MediaTrackStats.toJson.bind(fm.icelink.MediaTrackStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaTrackStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "stopped") {
                        do {
                            this.setStopped(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "detached") {
                        do {
                            this.setDetached(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "ssrcs") {
                        do {
                            this.setSynchronizationSources(fm.icelink.JsonSerializer.deserializeLongArray(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "frameWidth") {
                        do {
                            this.setFrameWidth(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "frameHeight") {
                        do {
                            this.setFrameHeight(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "frameRate") {
                        do {
                            this.setFrameRate(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesSent") {
                        do {
                            this.setFramesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesReceived") {
                        do {
                            this.setFramesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesDecoded") {
                        do {
                            this.setFramesDecoded(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesDropped") {
                        do {
                            this.setFramesDropped(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesCorrupted") {
                        do {
                            this.setFramesCorrupted(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "framesEncoded") {
                        do {
                            this.setFramesEncoded(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getDetached'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the track is detached.
             </div>
    
    
            @return {boolean}
            */
            MediaTrackStats.prototype.getDetached = function () {
                if (arguments.length == 0) {
                    return this._detached;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFrameHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the frame height. Video-only.
             Set by encoder or decoder.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFrameHeight = function () {
                if (arguments.length == 0) {
                    return this._frameHeight;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFrameRate'>&nbsp;</span>**/
            /**
             <div>
             Gets the frame rate. Video-only.
             Set by encoder or decoder.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFrameRate = function () {
                if (arguments.length == 0) {
                    return this._frameRate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesCorrupted'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of corrupted frames. Video-only.
             Set by depacketizer.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesCorrupted = function () {
                if (arguments.length == 0) {
                    return this._framesCorrupted;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesDecoded'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of frames decoded.
             Set by decoder.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesDecoded = function () {
                if (arguments.length == 0) {
                    return this._framesDecoded;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesDropped'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of frames dropped. Video-only.
             Set by depacketizer.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesDropped = function () {
                if (arguments.length == 0) {
                    return this._framesDropped;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesEncoded'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of frames encoded.
             Set by encoded.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesEncoded = function () {
                if (arguments.length == 0) {
                    return this._framesEncoded;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of frames received.
             Set by depacketizer.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesReceived = function () {
                if (arguments.length == 0) {
                    return this._framesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFramesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of frames sent.
             Set by packetizer.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFramesSent = function () {
                if (arguments.length == 0) {
                    return this._framesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getFrameWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the frame width. Video-only.
             Set by encoder or decoder.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getFrameWidth = function () {
                if (arguments.length == 0) {
                    return this._frameWidth;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getStopped'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the track is stopped.
             Set by source.
             </div>
    
    
            @return {boolean}
            */
            MediaTrackStats.prototype.getStopped = function () {
                if (arguments.length == 0) {
                    return this._stopped;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Gets the first synchronization source.
             </div>
    
    
            @return {number}
            */
            MediaTrackStats.prototype.getSynchronizationSource = function () {
                if (arguments.length == 0) {
                    var synchronizationSources = this.getSynchronizationSources();
                    if (((fm.icelink.Global.equals(synchronizationSources, null)) || (fm.icelink.Global.equals(synchronizationSources.length, 0)))) {
                        return 0;
                    }
                    return synchronizationSources[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-getSynchronizationSources'>&nbsp;</span>**/
            /**
             <div>
             Gets the synchronization sources.
             </div>
    
    
            @return {number[]}
            */
            MediaTrackStats.prototype.getSynchronizationSources = function () {
                if (arguments.length == 0) {
                    return this._synchronizationSources;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaTrackStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["stopped"] = fm.icelink.JsonSerializer.serializeBoolean(this.getStopped());
                    jsonObject["detached"] = fm.icelink.JsonSerializer.serializeBoolean(this.getDetached());
                    jsonObject["ssrcs"] = fm.icelink.JsonSerializer.serializeLongArray(this.getSynchronizationSources());
                    jsonObject["frameWidth"] = fm.icelink.JsonSerializer.serializeInteger(this.getFrameWidth());
                    jsonObject["frameHeight"] = fm.icelink.JsonSerializer.serializeInteger(this.getFrameHeight());
                    jsonObject["frameRate"] = fm.icelink.JsonSerializer.serializeInteger(this.getFrameRate());
                    jsonObject["framesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesSent());
                    jsonObject["framesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesReceived());
                    jsonObject["framesDecoded"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesDecoded());
                    jsonObject["framesDropped"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesDropped());
                    jsonObject["framesCorrupted"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesCorrupted());
                    jsonObject["framesEncoded"] = fm.icelink.JsonSerializer.serializeLong(this.getFramesEncoded());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setDetached = function (value) {
                if (arguments.length == 1) {
                    this._detached = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFrameHeight = function (value) {
                if (arguments.length == 1) {
                    this._frameHeight = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFrameRate = function (value) {
                if (arguments.length == 1) {
                    this._frameRate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesCorrupted = function (value) {
                if (arguments.length == 1) {
                    this._framesCorrupted = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesDecoded = function (value) {
                if (arguments.length == 1) {
                    this._framesDecoded = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesDropped = function (value) {
                if (arguments.length == 1) {
                    this._framesDropped = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesEncoded = function (value) {
                if (arguments.length == 1) {
                    this._framesEncoded = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesReceived = function (value) {
                if (arguments.length == 1) {
                    this._framesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFramesSent = function (value) {
                if (arguments.length == 1) {
                    this._framesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setFrameWidth = function (value) {
                if (arguments.length == 1) {
                    this._frameWidth = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setStopped = function (value) {
                if (arguments.length == 1) {
                    this._stopped = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaTrackStats.prototype.setSynchronizationSources = function (value) {
                if (arguments.length == 1) {
                    this._synchronizationSources = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaTrackStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            MediaTrackStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.MediaTrackStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaTrackStats;
        }(fm.icelink.BaseStats));
        icelink.MediaTrackStats = MediaTrackStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Candidate stats.
         </div>
    
        */
        var CandidateStats = /** @class */ (function (_super) {
            __extends(CandidateStats, _super);
            function CandidateStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkCandidateStatsInit();
                    _this.__turnTransportProtocol = fm.icelink.ProtocolType.Unknown;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            CandidateStats.prototype.getTypeString = function () {
                return '[fm.icelink.CandidateStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            CandidateStats.prototype.fmicelinkCandidateStatsInit = function () {
                this._port = 0;
                this._priority = 0;
                this._relatedPort = 0;
            };
            /**<span id='method-fm.icelink.CandidateStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes candidate stats from JSON.
             </div>
    
            @param {string} candidateJson The candidate's stats JSON.
            @return {fm.icelink.CandidateStats}
            */
            CandidateStats.fromJson = function (candidateJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(candidateJson, function () {
                        return new fm.icelink.CandidateStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of candidate stats from JSON.
             </div>
    
            @param {string} candidatesJson The candidates' stats JSON.
            @return {fm.icelink.CandidateStats[]}
            */
            CandidateStats.fromJsonArray = function (candidatesJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(candidatesJson, fm.icelink.CandidateStats.fromJson.bind(fm.icelink.CandidateStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes candidate stats to JSON.
             </div>
    
            @param {fm.icelink.CandidateStats} candidate The candidate's stats.
            @return {string}
            */
            CandidateStats.toJson = function (candidate) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(candidate, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of candidate stats to JSON.
             </div>
    
            @param {fm.icelink.CandidateStats[]} candidates The candidates' stats.
            @return {string}
            */
            CandidateStats.toJsonArray = function (candidates) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(candidates, fm.icelink.CandidateStats.toJson.bind(fm.icelink.CandidateStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            CandidateStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "ipAddress") {
                        do {
                            this.setIPAddress(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "port") {
                        do {
                            this.setPort(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "turnProtocol") {
                        do {
                            this.setTurnProtocol(this.protocolTypeFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "relatedIPAddress") {
                        do {
                            this.setRelatedIPAddress(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "relatedPort") {
                        do {
                            this.setRelatedPort(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "protocol") {
                        do {
                            this.setProtocol(this.protocolTypeFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "type") {
                        do {
                            this.setType(this.typeFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "priority") {
                        do {
                            this.setPriority(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getIPAddress'>&nbsp;</span>**/
            /**
             <div>
             Gets the IP address.
             </div>
    
    
            @return {string}
            */
            CandidateStats.prototype.getIPAddress = function () {
                if (arguments.length == 0) {
                    return this._ipAddress;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getIsHost'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the candidate is host/local.
             </div>
    
    
            @return {boolean}
            */
            CandidateStats.prototype.getIsHost = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getType(), fm.icelink.CandidateType.Host));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getIsReflexive'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the candidate is reflexive.
             </div>
    
    
            @return {boolean}
            */
            CandidateStats.prototype.getIsReflexive = function () {
                if (arguments.length == 0) {
                    return ((fm.icelink.Global.equals(this.getType(), fm.icelink.CandidateType.ServerReflexive)) || (fm.icelink.Global.equals(this.getType(), fm.icelink.CandidateType.PeerReflexive)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getIsRelayed'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the candidate is relayed.
             </div>
    
    
            @return {boolean}
            */
            CandidateStats.prototype.getIsRelayed = function () {
                if (arguments.length == 0) {
                    return (fm.icelink.Global.equals(this.getType(), fm.icelink.CandidateType.Relayed));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getPort'>&nbsp;</span>**/
            /**
             <div>
             Gets the port.
             </div>
    
    
            @return {number}
            */
            CandidateStats.prototype.getPort = function () {
                if (arguments.length == 0) {
                    return this._port;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getPriority'>&nbsp;</span>**/
            /**
             <div>
             Gets the priority.
             </div>
    
    
            @return {number}
            */
            CandidateStats.prototype.getPriority = function () {
                if (arguments.length == 0) {
                    return this._priority;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getProtocol'>&nbsp;</span>**/
            /**
             <div>
             Gets the protocol.
             </div>
    
    
            @return {fm.icelink.ProtocolType}
            */
            CandidateStats.prototype.getProtocol = function () {
                if (arguments.length == 0) {
                    return this._protocol;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getRelatedIPAddress'>&nbsp;</span>**/
            /**
             <div>
             Gets the related IP address.
             </div>
    
    
            @return {string}
            */
            CandidateStats.prototype.getRelatedIPAddress = function () {
                if (arguments.length == 0) {
                    return this._relatedIPAddress;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getRelatedPort'>&nbsp;</span>**/
            /**
             <div>
             Gets the related port.
             </div>
    
    
            @return {number}
            */
            CandidateStats.prototype.getRelatedPort = function () {
                if (arguments.length == 0) {
                    return this._relatedPort;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getTurnProtocol'>&nbsp;</span>**/
            /**
             <div>
             Gets the protocol used by this candidate when communicating with a TURN (relay) server. If unknown or not a relayed candidate, defaults to ProtocolType.Unknown.
             </div>
    
    
            @return {fm.icelink.ProtocolType}
            */
            CandidateStats.prototype.getTurnProtocol = function () {
                if (arguments.length == 0) {
                    return this.__turnTransportProtocol;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-getType'>&nbsp;</span>**/
            /**
             <div>
             Gets the type.
             </div>
    
    
            @return {fm.icelink.CandidateType}
            */
            CandidateStats.prototype.getType = function () {
                if (arguments.length == 0) {
                    return this._type;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.protocolTypeFromString = function (protocolTypeString) {
                if (arguments.length == 1) {
                    var _var0 = protocolTypeString;
                    if (_var0 == "udp") {
                        do {
                            return fm.icelink.ProtocolType.Udp;
                        } while (false);
                    }
                    else if (_var0 == "tcp") {
                        do {
                            return fm.icelink.ProtocolType.Tcp;
                        } while (false);
                    }
                    return fm.icelink.ProtocolType.Unknown;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.protocolTypeToString = function (protocolType) {
                if (arguments.length == 1) {
                    var _var0 = protocolType;
                    if (_var0 == fm.icelink.ProtocolType.Udp) {
                        do {
                            return "udp";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.ProtocolType.Tcp) {
                        do {
                            return "tcp";
                        } while (false);
                    }
                    return "unknown";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            CandidateStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getIPAddress(), null))) {
                        jsonObject["ipAddress"] = fm.icelink.JsonSerializer.serializeString(this.getIPAddress());
                    }
                    if ((!fm.icelink.Global.equals(this.getPort(), 0))) {
                        jsonObject["port"] = fm.icelink.JsonSerializer.serializeInteger(this.getPort());
                    }
                    if ((!fm.icelink.Global.equals(this.getRelatedIPAddress(), null))) {
                        jsonObject["relatedIPAddress"] = fm.icelink.JsonSerializer.serializeString(this.getRelatedIPAddress());
                    }
                    if ((!fm.icelink.Global.equals(this.getRelatedPort(), 0))) {
                        jsonObject["relatedPort"] = fm.icelink.JsonSerializer.serializeInteger(this.getRelatedPort());
                    }
                    jsonObject["protocol"] = fm.icelink.JsonSerializer.serializeString(this.protocolTypeToString(this.getProtocol()));
                    jsonObject["type"] = fm.icelink.JsonSerializer.serializeString(this.typeToString(this.getType()));
                    if ((fm.icelink.Global.equals(this.getType(), fm.icelink.CandidateType.Relayed))) {
                        jsonObject["turnProtocol"] = fm.icelink.JsonSerializer.serializeString(this.protocolTypeToString(this.getTurnProtocol()));
                    }
                    jsonObject["priority"] = fm.icelink.JsonSerializer.serializeLong(this.getPriority());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setIPAddress = function (value) {
                if (arguments.length == 1) {
                    this._ipAddress = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setPort = function (value) {
                if (arguments.length == 1) {
                    this._port = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setPriority = function (value) {
                if (arguments.length == 1) {
                    this._priority = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setProtocol = function (value) {
                if (arguments.length == 1) {
                    this._protocol = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setRelatedIPAddress = function (value) {
                if (arguments.length == 1) {
                    this._relatedIPAddress = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setRelatedPort = function (value) {
                if (arguments.length == 1) {
                    this._relatedPort = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setTurnProtocol = function (value) {
                if (arguments.length == 1) {
                    this.__turnTransportProtocol = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.setType = function (value) {
                if (arguments.length == 1) {
                    this._type = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidateStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            CandidateStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.CandidateStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.typeFromString = function (typeString) {
                if (arguments.length == 1) {
                    var _var0 = typeString;
                    if (_var0 == "host") {
                        do {
                            return fm.icelink.CandidateType.Host;
                        } while (false);
                    }
                    else if (_var0 == "srflx") {
                        do {
                            return fm.icelink.CandidateType.ServerReflexive;
                        } while (false);
                    }
                    else if (_var0 == "relay") {
                        do {
                            return fm.icelink.CandidateType.Relayed;
                        } while (false);
                    }
                    else if (_var0 == "prflx") {
                        do {
                            return fm.icelink.CandidateType.PeerReflexive;
                        } while (false);
                    }
                    return fm.icelink.CandidateType.Unknown;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidateStats.prototype.typeToString = function (type) {
                if (arguments.length == 1) {
                    var _var0 = type;
                    if (_var0 == fm.icelink.CandidateType.Host) {
                        do {
                            return "host";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidateType.ServerReflexive) {
                        do {
                            return "srflx";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidateType.Relayed) {
                        do {
                            return "relay";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidateType.PeerReflexive) {
                        do {
                            return "prflx";
                        } while (false);
                    }
                    return "unknown";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CandidateStats;
        }(fm.icelink.BaseStats));
        icelink.CandidateStats = CandidateStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Candidate pair stats.
         </div>
    
        */
        var CandidatePairStats = /** @class */ (function (_super) {
            __extends(CandidatePairStats, _super);
            function CandidatePairStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkCandidatePairStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            CandidatePairStats.prototype.getTypeString = function () {
                return '[fm.icelink.CandidatePairStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            CandidatePairStats.prototype.fmicelinkCandidatePairStatsInit = function () {
                this._bytesReceived = 0;
                this._bytesSent = 0;
                this._consentRequestsReceived = 0;
                this._consentRequestsSent = 0;
                this._consentResponsesReceived = 0;
                this._consentResponsesSent = 0;
                this._currentRoundTripTime = 0;
                this._nominated = false;
                this._priority = 0;
                this._requestsSent = 0;
                this._responsesReceived = 0;
                this._totalRoundTripTime = 0;
            };
            /**<span id='method-fm.icelink.CandidatePairStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes candidate pair stats from JSON.
             </div>
    
            @param {string} candidatePairJson The candidate pair's stats JSON.
            @return {fm.icelink.CandidatePairStats}
            */
            CandidatePairStats.fromJson = function (candidatePairJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(candidatePairJson, function () {
                        return new fm.icelink.CandidatePairStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of candidate pair stats from JSON.
             </div>
    
            @param {string} candidatePairsJson The candidate pairs' stats JSON.
            @return {fm.icelink.CandidatePairStats[]}
            */
            CandidatePairStats.fromJsonArray = function (candidatePairsJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(candidatePairsJson, fm.icelink.CandidatePairStats.fromJson.bind(fm.icelink.CandidatePairStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes candidate pair stats to JSON.
             </div>
    
            @param {fm.icelink.CandidatePairStats} candidatePair The candidate pair's stats.
            @return {string}
            */
            CandidatePairStats.toJson = function (candidatePair) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(candidatePair, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of candidate pair stats to JSON.
             </div>
    
            @param {fm.icelink.CandidatePairStats[]} candidatePairs The candidate pairs' stats.
            @return {string}
            */
            CandidatePairStats.toJsonArray = function (candidatePairs) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(candidatePairs, fm.icelink.CandidatePairStats.toJson.bind(fm.icelink.CandidatePairStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            CandidatePairStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "transportId") {
                        do {
                            this.setTransportId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "localCandidateId") {
                        do {
                            this.setLocalCandidateId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "remoteCandidateId") {
                        do {
                            this.setRemoteCandidateId(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "state") {
                        do {
                            this.setState(this.stateFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "priority") {
                        do {
                            this.setPriority(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "nominated") {
                        do {
                            this.setNominated(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "bytesSent") {
                        do {
                            this.setBytesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "bytesReceived") {
                        do {
                            this.setBytesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "requestsSent") {
                        do {
                            this.setRequestsSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "responsesReceived") {
                        do {
                            this.setResponsesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "consentRequestsSent") {
                        do {
                            this.setConsentRequestsSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "consentRequestsReceived") {
                        do {
                            this.setConsentRequestsReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "consentResponsesSent") {
                        do {
                            this.setConsentResponsesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "consentresponsesReceived") {
                        do {
                            this.setConsentResponsesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "totalRTT") {
                        do {
                            this.setTotalRoundTripTime(fm.icelink.JsonSerializer.deserializeDouble(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "currentRTT") {
                        do {
                            this.setCurrentRoundTripTime(fm.icelink.JsonSerializer.deserializeDouble(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getBytesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes received.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getBytesReceived = function () {
                if (arguments.length == 0) {
                    return this._bytesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getBytesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes sent.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getBytesSent = function () {
                if (arguments.length == 0) {
                    return this._bytesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getConsentRequestsReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of consent requests received.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getConsentRequestsReceived = function () {
                if (arguments.length == 0) {
                    return this._consentRequestsReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getConsentRequestsSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of consent requests sent.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getConsentRequestsSent = function () {
                if (arguments.length == 0) {
                    return this._consentRequestsSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getConsentResponsesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of consent responses received.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getConsentResponsesReceived = function () {
                if (arguments.length == 0) {
                    return this._consentResponsesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getConsentResponsesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of consent responses sent.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getConsentResponsesSent = function () {
                if (arguments.length == 0) {
                    return this._consentResponsesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getCurrentRoundTripTime'>&nbsp;</span>**/
            /**
             <div>
             Gets the current round trip time in milliseconds.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getCurrentRoundTripTime = function () {
                if (arguments.length == 0) {
                    return this._currentRoundTripTime;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getLocalCandidateId'>&nbsp;</span>**/
            /**
             <div>
             Gets the local candidate identifier.
             </div>
    
    
            @return {string}
            */
            CandidatePairStats.prototype.getLocalCandidateId = function () {
                if (arguments.length == 0) {
                    return this._localCandidateId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getNominated'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the candidate pair is nominated.
             </div>
    
    
            @return {boolean}
            */
            CandidatePairStats.prototype.getNominated = function () {
                if (arguments.length == 0) {
                    return this._nominated;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getPriority'>&nbsp;</span>**/
            /**
             <div>
             Gets the priority.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getPriority = function () {
                if (arguments.length == 0) {
                    return this._priority;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getRemoteCandidateId'>&nbsp;</span>**/
            /**
             <div>
             Gets the remote candidate identifier.
             </div>
    
    
            @return {string}
            */
            CandidatePairStats.prototype.getRemoteCandidateId = function () {
                if (arguments.length == 0) {
                    return this._remoteCandidateId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getRequestsSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of requests sent.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getRequestsSent = function () {
                if (arguments.length == 0) {
                    return this._requestsSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getResponsesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of responses received.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getResponsesReceived = function () {
                if (arguments.length == 0) {
                    return this._responsesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state.
             </div>
    
    
            @return {fm.icelink.CandidatePairState}
            */
            CandidatePairStats.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this._state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getTotalRoundTripTime'>&nbsp;</span>**/
            /**
             <div>
             Gets the total round trip time in milliseconds.
             </div>
    
    
            @return {number}
            */
            CandidatePairStats.prototype.getTotalRoundTripTime = function () {
                if (arguments.length == 0) {
                    return this._totalRoundTripTime;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-getTransportId'>&nbsp;</span>**/
            /**
             <div>
             Gets the transport identifier.
             </div>
    
    
            @return {string}
            */
            CandidatePairStats.prototype.getTransportId = function () {
                if (arguments.length == 0) {
                    return this._transportId;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            CandidatePairStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getTransportId(), null))) {
                        jsonObject["transportId"] = fm.icelink.JsonSerializer.serializeString(this.getTransportId());
                    }
                    if ((!fm.icelink.Global.equals(this.getLocalCandidateId(), null))) {
                        jsonObject["localCandidateId"] = fm.icelink.JsonSerializer.serializeString(this.getLocalCandidateId());
                    }
                    if ((!fm.icelink.Global.equals(this.getRemoteCandidateId(), null))) {
                        jsonObject["remoteCandidateId"] = fm.icelink.JsonSerializer.serializeString(this.getRemoteCandidateId());
                    }
                    jsonObject["state"] = fm.icelink.JsonSerializer.serializeString(this.stateToString(this.getState()));
                    jsonObject["priority"] = fm.icelink.JsonSerializer.serializeLong(this.getPriority());
                    jsonObject["nominated"] = fm.icelink.JsonSerializer.serializeBoolean(this.getNominated());
                    jsonObject["bytesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesSent());
                    jsonObject["bytesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesReceived());
                    jsonObject["consentRequestsSent"] = fm.icelink.JsonSerializer.serializeLong(this.getConsentRequestsSent());
                    jsonObject["consentRequestsReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getConsentRequestsReceived());
                    jsonObject["requestsSent"] = fm.icelink.JsonSerializer.serializeLong(this.getRequestsSent());
                    jsonObject["consentResponsesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getConsentResponsesSent());
                    jsonObject["consentResponsesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getConsentResponsesReceived());
                    jsonObject["responsesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getResponsesReceived());
                    jsonObject["totalRTT"] = fm.icelink.JsonSerializer.serializeDouble(this.getTotalRoundTripTime());
                    jsonObject["currentRTT"] = fm.icelink.JsonSerializer.serializeDouble(this.getCurrentRoundTripTime());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setBytesReceived = function (value) {
                if (arguments.length == 1) {
                    this._bytesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setBytesSent = function (value) {
                if (arguments.length == 1) {
                    this._bytesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setConsentRequestsReceived = function (value) {
                if (arguments.length == 1) {
                    this._consentRequestsReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setConsentRequestsSent = function (value) {
                if (arguments.length == 1) {
                    this._consentRequestsSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setConsentResponsesReceived = function (value) {
                if (arguments.length == 1) {
                    this._consentResponsesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setConsentResponsesSent = function (value) {
                if (arguments.length == 1) {
                    this._consentResponsesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setCurrentRoundTripTime = function (value) {
                if (arguments.length == 1) {
                    this._currentRoundTripTime = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setLocalCandidateId = function (value) {
                if (arguments.length == 1) {
                    this._localCandidateId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setNominated = function (value) {
                if (arguments.length == 1) {
                    this._nominated = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setPriority = function (value) {
                if (arguments.length == 1) {
                    this._priority = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setRemoteCandidateId = function (value) {
                if (arguments.length == 1) {
                    this._remoteCandidateId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setRequestsSent = function (value) {
                if (arguments.length == 1) {
                    this._requestsSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setResponsesReceived = function (value) {
                if (arguments.length == 1) {
                    this._responsesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setState = function (value) {
                if (arguments.length == 1) {
                    this._state = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setTotalRoundTripTime = function (value) {
                if (arguments.length == 1) {
                    this._totalRoundTripTime = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.setTransportId = function (value) {
                if (arguments.length == 1) {
                    this._transportId = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.stateFromString = function (stateString) {
                if (arguments.length == 1) {
                    var _var0 = stateString;
                    if (_var0 == "new") {
                        do {
                            return fm.icelink.CandidatePairState.New;
                        } while (false);
                    }
                    else if (_var0 == "waiting") {
                        do {
                            return fm.icelink.CandidatePairState.Waiting;
                        } while (false);
                    }
                    else if (_var0 == "inProgress") {
                        do {
                            return fm.icelink.CandidatePairState.InProgress;
                        } while (false);
                    }
                    else if (_var0 == "succeeded") {
                        do {
                            return fm.icelink.CandidatePairState.Succeeded;
                        } while (false);
                    }
                    else if (_var0 == "failed") {
                        do {
                            return fm.icelink.CandidatePairState.Failed;
                        } while (false);
                    }
                    else if (_var0 == "closed") {
                        do {
                            return fm.icelink.CandidatePairState.Closed;
                        } while (false);
                    }
                    else if (_var0 == "connectivityLost") {
                        do {
                            return fm.icelink.CandidatePairState.ConnectivityLost;
                        } while (false);
                    }
                    return fm.icelink.CandidatePairState.New;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CandidatePairStats.prototype.stateToString = function (state) {
                if (arguments.length == 1) {
                    var _var0 = state;
                    if (_var0 == fm.icelink.CandidatePairState.New) {
                        do {
                            return "new";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.Waiting) {
                        do {
                            return "waiting";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.InProgress) {
                        do {
                            return "inProgress";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.Succeeded) {
                        do {
                            return "succeeded";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.Failed) {
                        do {
                            return "failed";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.Closed) {
                        do {
                            return "closed";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.CandidatePairState.ConnectivityLost) {
                        do {
                            return "connectivityLost";
                        } while (false);
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CandidatePairStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            CandidatePairStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.CandidatePairStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CandidatePairStats;
        }(fm.icelink.BaseStats));
        icelink.CandidatePairStats = CandidatePairStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Certificate stats.
         </div>
    
        */
        var CertificateStats = /** @class */ (function (_super) {
            __extends(CertificateStats, _super);
            function CertificateStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            CertificateStats.prototype.getTypeString = function () {
                return '[fm.icelink.CertificateStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.CertificateStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes certificate stats from JSON.
             </div>
    
            @param {string} certificateJson The certificate's stats JSON.
            @return {fm.icelink.CertificateStats}
            */
            CertificateStats.fromJson = function (certificateJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(certificateJson, function () {
                        return new fm.icelink.CertificateStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of certificate stats from JSON.
             </div>
    
            @param {string} certificatesJson The certificates' stats JSON.
            @return {fm.icelink.CertificateStats[]}
            */
            CertificateStats.fromJsonArray = function (certificatesJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(certificatesJson, fm.icelink.CertificateStats.fromJson.bind(fm.icelink.CertificateStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes certificate stats to JSON.
             </div>
    
            @param {fm.icelink.CertificateStats} certificate The certificate's stats.
            @return {string}
            */
            CertificateStats.toJson = function (certificate) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(certificate, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of certificate stats to JSON.
             </div>
    
            @param {fm.icelink.CertificateStats[]} certificates The certificates' stats.
            @return {string}
            */
            CertificateStats.toJsonArray = function (certificates) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(certificates, fm.icelink.CertificateStats.toJson.bind(fm.icelink.CertificateStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            CertificateStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "fingerprint"))) {
                            if ((fm.icelink.Global.equals(str, "fingerprintAlgorithm"))) {
                                this.setFingerprintAlgorithm(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str, "certificateBase64"))) {
                                    this.setCertificateBase64(fm.icelink.JsonSerializer.deserializeString(valueJson));
                                }
                            }
                        }
                        else {
                            this.setFingerprint(fm.icelink.JsonSerializer.deserializeString(valueJson));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-getCertificateBase64'>&nbsp;</span>**/
            /**
             <div>
             Gets the certificate in Base64 format.
             </div>
    
    
            @return {string}
            */
            CertificateStats.prototype.getCertificateBase64 = function () {
                if (arguments.length == 0) {
                    return this._certificateBase64;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-getFingerprint'>&nbsp;</span>**/
            /**
             <div>
             Gets the fingerprint.
             </div>
    
    
            @return {string}
            */
            CertificateStats.prototype.getFingerprint = function () {
                if (arguments.length == 0) {
                    return this._fingerprint;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-getFingerprintAlgorithm'>&nbsp;</span>**/
            /**
             <div>
             Gets the fingerprint algorithm.
             </div>
    
    
            @return {string}
            */
            CertificateStats.prototype.getFingerprintAlgorithm = function () {
                if (arguments.length == 0) {
                    return this._fingerprintAlgorithm;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            CertificateStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getFingerprint(), null))) {
                        jsonObject["fingerprint"] = fm.icelink.JsonSerializer.serializeString(this.getFingerprint());
                    }
                    if ((!fm.icelink.Global.equals(this.getFingerprintAlgorithm(), null))) {
                        jsonObject["fingerprintAlgorithm"] = fm.icelink.JsonSerializer.serializeString(this.getFingerprintAlgorithm());
                    }
                    if ((!fm.icelink.Global.equals(this.getCertificateBase64(), null))) {
                        jsonObject["certificateBase64"] = fm.icelink.JsonSerializer.serializeString(this.getCertificateBase64());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CertificateStats.prototype.setCertificateBase64 = function (value) {
                if (arguments.length == 1) {
                    this._certificateBase64 = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CertificateStats.prototype.setFingerprint = function (value) {
                if (arguments.length == 1) {
                    this._fingerprint = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            CertificateStats.prototype.setFingerprintAlgorithm = function (value) {
                if (arguments.length == 1) {
                    this._fingerprintAlgorithm = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.CertificateStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            CertificateStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.CertificateStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return CertificateStats;
        }(fm.icelink.BaseStats));
        icelink.CertificateStats = CertificateStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Data channel stats.
         </div>
    
        */
        var DataChannelStats = /** @class */ (function (_super) {
            __extends(DataChannelStats, _super);
            function DataChannelStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkDataChannelStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            DataChannelStats.prototype.getTypeString = function () {
                return '[fm.icelink.DataChannelStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            DataChannelStats.prototype.fmicelinkDataChannelStatsInit = function () {
                this._bytesReceived = 0;
                this._bytesSent = 0;
                this._messagesReceived = 0;
                this._messagesSent = 0;
                this._ordered = false;
            };
            /**<span id='method-fm.icelink.DataChannelStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes data channel stats from JSON.
             </div>
    
            @param {string} dataChannelJson The data channel's stats JSON.
            @return {fm.icelink.DataChannelStats}
            */
            DataChannelStats.fromJson = function (dataChannelJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(dataChannelJson, function () {
                        return new fm.icelink.DataChannelStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of data channel stats from JSON.
             </div>
    
            @param {string} dataChannelsJson The data channels' stats JSON.
            @return {fm.icelink.DataChannelStats[]}
            */
            DataChannelStats.fromJsonArray = function (dataChannelsJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(dataChannelsJson, fm.icelink.DataChannelStats.fromJson.bind(fm.icelink.DataChannelStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes data channel stats to JSON.
             </div>
    
            @param {fm.icelink.DataChannelStats} dataChannel The data channel's stats.
            @return {string}
            */
            DataChannelStats.toJson = function (dataChannel) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(dataChannel, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of data channel stats to JSON.
             </div>
    
            @param {fm.icelink.DataChannelStats[]} dataChannels The data channels' stats.
            @return {string}
            */
            DataChannelStats.toJsonArray = function (dataChannels) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(dataChannels, fm.icelink.DataChannelStats.toJson.bind(fm.icelink.DataChannelStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            DataChannelStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "label") {
                        do {
                            this.setLabel(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "ordered") {
                        do {
                            this.setOrdered(fm.icelink.JsonSerializer.deserializeBoolean(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "protocol") {
                        do {
                            this.setProtocol(fm.icelink.JsonSerializer.deserializeString(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "state") {
                        do {
                            this.setState(this.stateFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "messagesSent") {
                        do {
                            this.setMessagesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "bytesSent") {
                        do {
                            this.setBytesSent(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "messagesReceived") {
                        do {
                            this.setMessagesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "bytesReceived") {
                        do {
                            this.setBytesReceived(fm.icelink.JsonSerializer.deserializeLong(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getBytesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes received.
             </div>
    
    
            @return {number}
            */
            DataChannelStats.prototype.getBytesReceived = function () {
                if (arguments.length == 0) {
                    return this._bytesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getBytesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes sent.
             </div>
    
    
            @return {number}
            */
            DataChannelStats.prototype.getBytesSent = function () {
                if (arguments.length == 0) {
                    return this._bytesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getLabel'>&nbsp;</span>**/
            /**
             <div>
             Gets the label.
             </div>
    
    
            @return {string}
            */
            DataChannelStats.prototype.getLabel = function () {
                if (arguments.length == 0) {
                    return this._label;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getMessagesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of messages received.
             </div>
    
    
            @return {number}
            */
            DataChannelStats.prototype.getMessagesReceived = function () {
                if (arguments.length == 0) {
                    return this._messagesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getMessagesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of messages sent.
             </div>
    
    
            @return {number}
            */
            DataChannelStats.prototype.getMessagesSent = function () {
                if (arguments.length == 0) {
                    return this._messagesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getOrdered'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the channel is ordered.
             </div>
    
    
            @return {boolean}
            */
            DataChannelStats.prototype.getOrdered = function () {
                if (arguments.length == 0) {
                    return this._ordered;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getProtocol'>&nbsp;</span>**/
            /**
             <div>
             Gets the protocol.
             </div>
    
    
            @return {string}
            */
            DataChannelStats.prototype.getProtocol = function () {
                if (arguments.length == 0) {
                    return this._protocol;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-getState'>&nbsp;</span>**/
            /**
             <div>
             Gets the state.
             </div>
    
    
            @return {fm.icelink.DataChannelState}
            */
            DataChannelStats.prototype.getState = function () {
                if (arguments.length == 0) {
                    return this._state;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            DataChannelStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getLabel(), null))) {
                        jsonObject["label"] = fm.icelink.JsonSerializer.serializeString(this.getLabel());
                    }
                    jsonObject["ordered"] = fm.icelink.JsonSerializer.serializeBoolean(this.getOrdered());
                    if ((!fm.icelink.Global.equals(this.getProtocol(), null))) {
                        jsonObject["protocol"] = fm.icelink.JsonSerializer.serializeString(this.getProtocol());
                    }
                    jsonObject["state"] = fm.icelink.JsonSerializer.serializeString(this.stateToString(this.getState()));
                    jsonObject["messagesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getMessagesSent());
                    jsonObject["bytesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesSent());
                    jsonObject["messagesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getMessagesReceived());
                    jsonObject["bytesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesReceived());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setBytesReceived = function (value) {
                if (arguments.length == 1) {
                    this._bytesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setBytesSent = function (value) {
                if (arguments.length == 1) {
                    this._bytesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setLabel = function (value) {
                if (arguments.length == 1) {
                    this._label = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setMessagesReceived = function (value) {
                if (arguments.length == 1) {
                    this._messagesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setMessagesSent = function (value) {
                if (arguments.length == 1) {
                    this._messagesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setOrdered = function (value) {
                if (arguments.length == 1) {
                    this._ordered = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setProtocol = function (value) {
                if (arguments.length == 1) {
                    this._protocol = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.setState = function (value) {
                if (arguments.length == 1) {
                    this._state = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.stateFromString = function (stateString) {
                if (arguments.length == 1) {
                    var _var0 = stateString;
                    if (_var0 == "new") {
                        do {
                            return fm.icelink.DataChannelState.New;
                        } while (false);
                    }
                    else if (_var0 == "connecting") {
                        do {
                            return fm.icelink.DataChannelState.Connecting;
                        } while (false);
                    }
                    else if (_var0 == "connected") {
                        do {
                            return fm.icelink.DataChannelState.Connected;
                        } while (false);
                    }
                    else if (_var0 == "failed") {
                        do {
                            return fm.icelink.DataChannelState.Failed;
                        } while (false);
                    }
                    else if (_var0 == "closing") {
                        do {
                            return fm.icelink.DataChannelState.Closing;
                        } while (false);
                    }
                    else if (_var0 == "closed") {
                        do {
                            return fm.icelink.DataChannelState.Closed;
                        } while (false);
                    }
                    return fm.icelink.DataChannelState.New;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            DataChannelStats.prototype.stateToString = function (state) {
                if (arguments.length == 1) {
                    var _var0 = state;
                    if (_var0 == fm.icelink.DataChannelState.New) {
                        do {
                            return "new";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.DataChannelState.Connecting) {
                        do {
                            return "connecting";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.DataChannelState.Connected) {
                        do {
                            return "connected";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.DataChannelState.Closing) {
                        do {
                            return "closing";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.DataChannelState.Closed) {
                        do {
                            return "closed";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.DataChannelState.Failed) {
                        do {
                            return "failed";
                        } while (false);
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.DataChannelStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            DataChannelStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.DataChannelStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return DataChannelStats;
        }(fm.icelink.BaseStats));
        icelink.DataChannelStats = DataChannelStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Connection stats.
         </div>
    
        */
        var ConnectionStats = /** @class */ (function (_super) {
            __extends(ConnectionStats, _super);
            function ConnectionStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            ConnectionStats.prototype.getTypeString = function () {
                return '[fm.icelink.ConnectionStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.ConnectionStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes connection stats from JSON.
             </div>
    
            @param {string} connectionJson The connection's stats JSON.
            @return {fm.icelink.ConnectionStats}
            */
            ConnectionStats.fromJson = function (connectionJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(connectionJson, function () {
                        return new fm.icelink.ConnectionStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes connection stats to JSON.
             </div>
    
            @param {fm.icelink.ConnectionStats} connection The connection's stats.
            @return {string}
            */
            ConnectionStats.toJson = function (connection) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(connection, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            ConnectionStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "mediaStreams"))) {
                            if ((fm.icelink.Global.equals(str, "dataStream"))) {
                                this.setDataStream(fm.icelink.DataStreamStats.fromJson(valueJson));
                            }
                        }
                        else {
                            this.setMediaStreams(fm.icelink.MediaStreamStats.fromJsonArray(valueJson));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getAudioStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first audio stream's stats.
             </div>
    
    
            @return {fm.icelink.MediaStreamStats}
            */
            ConnectionStats.prototype.getAudioStream = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getAudioStreams());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getAudioStreams'>&nbsp;</span>**/
            /**
             <div>
             Gets the audio streams' stats.
             </div>
    
    
            @return {fm.icelink.MediaStreamStats[]}
            */
            ConnectionStats.prototype.getAudioStreams = function () {
                if (arguments.length == 0) {
                    var list = new Array();
                    var mediaStreams = this.getMediaStreams();
                    if ((!fm.icelink.Global.equals(mediaStreams, null))) {
                        for (var _i = 0, mediaStreams_4 = mediaStreams; _i < mediaStreams_4.length; _i++) {
                            var stats = mediaStreams_4[_i];
                            if ((fm.icelink.Global.equals(stats.getType(), fm.icelink.StreamType.Audio))) {
                                fm.icelink.ArrayExtensions.add(list, stats);
                            }
                        }
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getDataStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the data stream's stats.
             </div>
    
    
            @return {fm.icelink.DataStreamStats}
            */
            ConnectionStats.prototype.getDataStream = function () {
                if (arguments.length == 0) {
                    return this._dataStream;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getIsHost'>&nbsp;</span>**/
            /**
             <div>
             Gets whether any of the streams are using a transport
             whose active candidate pair has a host candidate.
             </div>
    
    
            @return {boolean}
            */
            ConnectionStats.prototype.getIsHost = function () {
                if (arguments.length == 0) {
                    var streams = this.getStreams();
                    if ((!fm.icelink.Global.equals(streams, null))) {
                        for (var _i = 0, streams_5 = streams; _i < streams_5.length; _i++) {
                            var stats = streams_5[_i];
                            if (stats.getIsHost()) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getIsReflexive'>&nbsp;</span>**/
            /**
             <div>
             Gets whether any of the streams are using a transport
             whose active candidate pair has a reflexive candidate.
             </div>
    
    
            @return {boolean}
            */
            ConnectionStats.prototype.getIsReflexive = function () {
                if (arguments.length == 0) {
                    var streams = this.getStreams();
                    if ((!fm.icelink.Global.equals(streams, null))) {
                        for (var _i = 0, streams_6 = streams; _i < streams_6.length; _i++) {
                            var stats = streams_6[_i];
                            if (stats.getIsReflexive()) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getIsRelayed'>&nbsp;</span>**/
            /**
             <div>
             Gets whether any of the streams are using a transport
             whose active candidate pair has a relayed candidate.
             </div>
    
    
            @return {boolean}
            */
            ConnectionStats.prototype.getIsRelayed = function () {
                if (arguments.length == 0) {
                    var streams = this.getStreams();
                    if ((!fm.icelink.Global.equals(streams, null))) {
                        for (var _i = 0, streams_7 = streams; _i < streams_7.length; _i++) {
                            var stats = streams_7[_i];
                            if (stats.getIsRelayed()) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            ConnectionStats.prototype.getMediaStream = function () {
                if (arguments.length == 1) {
                    var mediaStreamId = arguments[0];
                    for (var _i = 0, _a = this.getMediaStreams(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), mediaStreamId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getMediaStreams());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getMediaStreams'>&nbsp;</span>**/
            /**
             <div>
             Gets the media streams' stats.
             </div>
    
    
            @return {fm.icelink.MediaStreamStats[]}
            */
            ConnectionStats.prototype.getMediaStreams = function () {
                if (arguments.length == 0) {
                    return this._mediaStreams;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getStreams'>&nbsp;</span>**/
            /**
             <div>
             Gets the streams' stats.
             </div>
    
    
            @return {fm.icelink.StreamStats[]}
            */
            ConnectionStats.prototype.getStreams = function () {
                if (arguments.length == 0) {
                    var list = new Array();
                    var mediaStreams = this.getMediaStreams();
                    if ((!fm.icelink.Global.equals(mediaStreams, null))) {
                        for (var _i = 0, mediaStreams_5 = mediaStreams; _i < mediaStreams_5.length; _i++) {
                            var stats = mediaStreams_5[_i];
                            fm.icelink.ArrayExtensions.add(list, stats);
                        }
                    }
                    var dataStream = this.getDataStream();
                    if ((!fm.icelink.Global.equals(dataStream, null))) {
                        fm.icelink.ArrayExtensions.add(list, dataStream);
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getVideoStream'>&nbsp;</span>**/
            /**
             <div>
             Gets the first video stream's stats.
             </div>
    
    
            @return {fm.icelink.MediaStreamStats}
            */
            ConnectionStats.prototype.getVideoStream = function () {
                if (arguments.length == 0) {
                    return fm.icelink.Utility.firstOrDefault(this.getVideoStreams());
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-getVideoStreams'>&nbsp;</span>**/
            /**
             <div>
             Gets the video streams' stats.
             </div>
    
    
            @return {fm.icelink.MediaStreamStats[]}
            */
            ConnectionStats.prototype.getVideoStreams = function () {
                if (arguments.length == 0) {
                    var list = new Array();
                    var mediaStreams = this.getMediaStreams();
                    if ((!fm.icelink.Global.equals(mediaStreams, null))) {
                        for (var _i = 0, mediaStreams_6 = mediaStreams; _i < mediaStreams_6.length; _i++) {
                            var stats = mediaStreams_6[_i];
                            if ((fm.icelink.Global.equals(stats.getType(), fm.icelink.StreamType.Video))) {
                                fm.icelink.ArrayExtensions.add(list, stats);
                            }
                        }
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            ConnectionStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    if ((!fm.icelink.Global.equals(this.getMediaStreams(), null))) {
                        jsonObject["mediaStreams"] = fm.icelink.MediaStreamStats.toJsonArray(this.getMediaStreams());
                    }
                    if ((!fm.icelink.Global.equals(this.getDataStream(), null))) {
                        jsonObject["dataStream"] = fm.icelink.DataStreamStats.toJson(this.getDataStream());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            ConnectionStats.prototype.setDataStream = function (value) {
                if (arguments.length == 1) {
                    this._dataStream = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            ConnectionStats.prototype.setMediaStreams = function (value) {
                if (arguments.length == 1) {
                    this._mediaStreams = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.ConnectionStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            ConnectionStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.ConnectionStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return ConnectionStats;
        }(fm.icelink.BaseStats));
        icelink.ConnectionStats = ConnectionStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="StreamStats.ts" />

/// <reference path="StreamStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Media stream stats.
         </div>
    
        */
        var MediaStreamStats = /** @class */ (function (_super) {
            __extends(MediaStreamStats, _super);
            function MediaStreamStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            MediaStreamStats.prototype.getTypeString = function () {
                return '[fm.icelink.MediaStreamStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.MediaStreamStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes media stream stats from JSON.
             </div>
    
            @param {string} mediaStreamJson The media stream's stats JSON.
            @return {fm.icelink.MediaStreamStats}
            */
            MediaStreamStats.fromJson = function (mediaStreamJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(mediaStreamJson, function () {
                        return new fm.icelink.MediaStreamStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-fromJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Derializes an array of media stream stats from JSON.
             </div>
    
            @param {string} mediaStreamsJson The media streams' stats JSON.
            @return {fm.icelink.MediaStreamStats[]}
            */
            MediaStreamStats.fromJsonArray = function (mediaStreamsJson) {
                if (arguments.length == 1) {
                    var list = fm.icelink.JsonSerializer.deserializeObjectArray(mediaStreamsJson, fm.icelink.MediaStreamStats.fromJson.bind(fm.icelink.MediaStreamStats));
                    if ((fm.icelink.Global.equals(list, null))) {
                        return null;
                    }
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes media stream stats to JSON.
             </div>
    
            @param {fm.icelink.MediaStreamStats} mediaStream The media stream's stats.
            @return {string}
            */
            MediaStreamStats.toJson = function (mediaStream) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(mediaStream, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-toJsonArray'>&nbsp;</span>**/
            /**
             <div>
             Serializes an array of media stream stats to JSON.
             </div>
    
            @param {fm.icelink.MediaStreamStats[]} mediaStreams The media streams' stats.
            @return {string}
            */
            MediaStreamStats.toJsonArray = function (mediaStreams) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObjectArray(mediaStreams, fm.icelink.MediaStreamStats.toJson.bind(fm.icelink.MediaStreamStats));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            MediaStreamStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var str = key;
                    if ((!fm.icelink.Global.equals(str, null))) {
                        if (!(fm.icelink.Global.equals(str, "direction"))) {
                            if ((fm.icelink.Global.equals(str, "sender"))) {
                                this.setSender(fm.icelink.MediaSenderStats.fromJson(valueJson));
                            }
                            else {
                                if ((fm.icelink.Global.equals(str, "receiver"))) {
                                    this.setReceiver(fm.icelink.MediaReceiverStats.fromJson(valueJson));
                                }
                            }
                        }
                        else {
                            this.setDirection(fm.icelink.StreamDirectionHelper.directionFromString(fm.icelink.JsonSerializer.deserializeString(valueJson)));
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-getDirection'>&nbsp;</span>**/
            /**
             <div>
             Gets the direction.
             </div>
    
    
            @return {fm.icelink.StreamDirection}
            */
            MediaStreamStats.prototype.getDirection = function () {
                if (arguments.length == 0) {
                    return this._direction;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-getReceiver'>&nbsp;</span>**/
            /**
             <div>
             Gets the receiver's stats.
             </div>
    
    
            @return {fm.icelink.MediaReceiverStats}
            */
            MediaStreamStats.prototype.getReceiver = function () {
                if (arguments.length == 0) {
                    return this._receiver;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-getSender'>&nbsp;</span>**/
            /**
             <div>
             Gets the sender's stats.
             </div>
    
    
            @return {fm.icelink.MediaSenderStats}
            */
            MediaStreamStats.prototype.getSender = function () {
                if (arguments.length == 0) {
                    return this._sender;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            MediaStreamStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["direction"] = fm.icelink.JsonSerializer.serializeString(fm.icelink.StreamDirectionHelper.directionToString(this.getDirection()));
                    if ((!fm.icelink.Global.equals(this.getSender(), null))) {
                        jsonObject["sender"] = fm.icelink.MediaSenderStats.toJson(this.getSender());
                    }
                    if ((!fm.icelink.Global.equals(this.getReceiver(), null))) {
                        jsonObject["receiver"] = fm.icelink.MediaReceiverStats.toJson(this.getReceiver());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaStreamStats.prototype.setDirection = function (value) {
                if (arguments.length == 1) {
                    this._direction = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaStreamStats.prototype.setReceiver = function (value) {
                if (arguments.length == 1) {
                    this._receiver = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            MediaStreamStats.prototype.setSender = function (value) {
                if (arguments.length == 1) {
                    this._sender = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.MediaStreamStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            MediaStreamStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.MediaStreamStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return MediaStreamStats;
        }(fm.icelink.StreamStats));
        icelink.MediaStreamStats = MediaStreamStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Class containing utility methods to manipulate `fm.icelink.streamDirection`.
         </div>
    
        */
        var StreamDirectionHelper = /** @class */ (function () {
            function StreamDirectionHelper() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StreamDirectionHelper.prototype.getTypeString = function () {
                return '[fm.icelink.StreamDirectionHelper]';
            };
            /**<span id='method-fm.icelink.StreamDirectionHelper-directionFromString'>&nbsp;</span>**/
            /**
             <div>
             Converts string representations of stream directions to `fm.icelink.streamDirection`.
             </div>
    
            @param {string} directionString String representation of direction.
            @return {fm.icelink.StreamDirection}
            */
            StreamDirectionHelper.directionFromString = function (directionString) {
                if (arguments.length == 1) {
                    var _var0 = directionString;
                    if (_var0 == "sendrecv") {
                        do {
                            return fm.icelink.StreamDirection.SendReceive;
                        } while (false);
                    }
                    else if (_var0 == "sendonly") {
                        do {
                            return fm.icelink.StreamDirection.SendOnly;
                        } while (false);
                    }
                    else if (_var0 == "recvonly") {
                        do {
                            return fm.icelink.StreamDirection.ReceiveOnly;
                        } while (false);
                    }
                    else if (_var0 == "inactive") {
                        do {
                            return fm.icelink.StreamDirection.Inactive;
                        } while (false);
                    }
                    return fm.icelink.StreamDirection.Unset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamDirectionHelper-directionToString'>&nbsp;</span>**/
            /**
             <div>
             Obtains the string representation of `fm.icelink.streamDirection`.
             </div>
    
            @param {fm.icelink.StreamDirection} direction StreamDirection that requires conversion.
            @return {string}
            */
            StreamDirectionHelper.directionToString = function (direction) {
                if (arguments.length == 1) {
                    var _var0 = direction;
                    if (_var0 == fm.icelink.StreamDirection.SendReceive) {
                        do {
                            return "sendrecv";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.SendOnly) {
                        do {
                            return "sendonly";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.ReceiveOnly) {
                        do {
                            return "recvonly";
                        } while (false);
                    }
                    else if (_var0 == fm.icelink.StreamDirection.Inactive) {
                        do {
                            return "inactive";
                        } while (false);
                    }
                    return "unset";
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            StreamDirectionHelper.isReceiveDisabled = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isNumber(arguments[0]))) {
                    var direction = arguments[0];
                    return ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Inactive)) || (fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendOnly)));
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isString(arguments[0]))) {
                    var stringDirection = arguments[0];
                    return ((fm.icelink.Global.equals(stringDirection, "inactive")) || (fm.icelink.Global.equals(stringDirection, "sendonly")));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            StreamDirectionHelper.isSendDisabled = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isString(arguments[0]))) {
                    var stringDirection = arguments[0];
                    return ((fm.icelink.Global.equals(stringDirection, "inactive")) || (fm.icelink.Global.equals(stringDirection, "recvonly")));
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isNumber(arguments[0]))) {
                    var direction = arguments[0];
                    return ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Inactive)) || (fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.ReceiveOnly)));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamDirectionHelper.setReceiveDisable = function (stringDirection, disabled) {
                if (arguments.length == 2) {
                    var direction = fm.icelink.StreamDirectionHelper.directionFromString(stringDirection);
                    if (disabled) {
                        return (fm.icelink.StreamDirectionHelper.isReceiveDisabled(direction) ? stringDirection : fm.icelink.StreamDirectionHelper.directionToString(fm.icelink.StreamDirectionHelper.toggleReceive(direction)));
                    }
                    return (fm.icelink.StreamDirectionHelper.isReceiveDisabled(direction) ? fm.icelink.StreamDirectionHelper.directionToString(fm.icelink.StreamDirectionHelper.toggleReceive(direction)) : stringDirection);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamDirectionHelper.setSendDisable = function (stringDirection, disabled) {
                if (arguments.length == 2) {
                    var direction = fm.icelink.StreamDirectionHelper.directionFromString(stringDirection);
                    if (disabled) {
                        return (fm.icelink.StreamDirectionHelper.isSendDisabled(direction) ? stringDirection : fm.icelink.StreamDirectionHelper.directionToString(fm.icelink.StreamDirectionHelper.toggleSend(direction)));
                    }
                    return (fm.icelink.StreamDirectionHelper.isSendDisabled(direction) ? fm.icelink.StreamDirectionHelper.directionToString(fm.icelink.StreamDirectionHelper.toggleSend(direction)) : stringDirection);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamDirectionHelper.toggleReceive = function (direction) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Inactive))) {
                        return fm.icelink.StreamDirection.ReceiveOnly;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.ReceiveOnly))) {
                        return fm.icelink.StreamDirection.Inactive;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendReceive))) {
                        return fm.icelink.StreamDirection.SendOnly;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendOnly))) {
                        return fm.icelink.StreamDirection.SendReceive;
                    }
                    return fm.icelink.StreamDirection.Unset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            StreamDirectionHelper.toggleSend = function (direction) {
                if (arguments.length == 1) {
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.Inactive))) {
                        return fm.icelink.StreamDirection.SendOnly;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendOnly))) {
                        return fm.icelink.StreamDirection.Inactive;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.SendReceive))) {
                        return fm.icelink.StreamDirection.ReceiveOnly;
                    }
                    if ((fm.icelink.Global.equals(direction, fm.icelink.StreamDirection.ReceiveOnly))) {
                        return fm.icelink.StreamDirection.SendReceive;
                    }
                    return fm.icelink.StreamDirection.Unset;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamDirectionHelper;
        }());
        icelink.StreamDirectionHelper = StreamDirectionHelper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="BaseStats.ts" />

/// <reference path="BaseStats.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Transport stats.
         </div>
    
        */
        var TransportStats = /** @class */ (function (_super) {
            __extends(TransportStats, _super);
            function TransportStats() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                    _this.fmicelinkTransportStatsInit();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            TransportStats.prototype.getTypeString = function () {
                return '[fm.icelink.TransportStats]' + ',' + _super.prototype.getTypeString.call(this);
            };
            TransportStats.prototype.fmicelinkTransportStatsInit = function () {
                this._bytesReceived = 0;
                this._bytesSent = 0;
            };
            /**<span id='method-fm.icelink.TransportStats-fromJson'>&nbsp;</span>**/
            /**
             <div>
             Derializes transport stats from JSON.
             </div>
    
            @param {string} transportJson The transport's stats JSON.
            @return {fm.icelink.TransportStats}
            */
            TransportStats.fromJson = function (transportJson) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.deserializeObject(transportJson, function () {
                        return new fm.icelink.TransportStats();
                    }, function (obj, key, valueJson) {
                        obj.deserializeProperties(key, valueJson);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes transport stats to JSON.
             </div>
    
            @param {fm.icelink.TransportStats} transport The transport's stats.
            @return {string}
            */
            TransportStats.toJson = function (transport) {
                if (arguments.length == 1) {
                    return fm.icelink.JsonSerializer.serializeObject(transport, function (obj, jsonObject) {
                        obj.serializeProperties(jsonObject);
                    });
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-deserializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Deserializes the properties.
             </div>
    
            @param {string} key The key.
            @param {string} valueJson The value in JSON format.
            @return {void}
            */
            TransportStats.prototype.deserializeProperties = function (key, valueJson) {
                if (arguments.length == 2) {
                    _super.prototype.deserializeProperties.call(this, key, valueJson);
                    var _var0 = key;
                    if (_var0 == "bytesSent") {
                        do {
                            this.setBytesSent(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "bytesReceived") {
                        do {
                            this.setBytesReceived(fm.icelink.JsonSerializer.deserializeInteger(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "rtcpTransport") {
                        do {
                            this.setRtcpTransport(fm.icelink.TransportStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "localCandidates") {
                        do {
                            this.setLocalCandidates(fm.icelink.CandidateStats.fromJsonArray(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "remoteCandidates") {
                        do {
                            this.setRemoteCandidates(fm.icelink.CandidateStats.fromJsonArray(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "candidatePairs") {
                        do {
                            this.setCandidatePairs(fm.icelink.CandidatePairStats.fromJsonArray(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "activeCandidatePair") {
                        do {
                            this.setActiveCandidatePair(fm.icelink.CandidatePairStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "localCertificate") {
                        do {
                            this.setLocalCertificate(fm.icelink.CertificateStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                    else if (_var0 == "remoteCertificate") {
                        do {
                            this.setRemoteCertificate(fm.icelink.CertificateStats.fromJson(valueJson));
                            break;
                        } while (false);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getActiveCandidatePair'>&nbsp;</span>**/
            /**
             <div>
             Gets the active candidate pair's stats.
             </div>
    
    
            @return {fm.icelink.CandidatePairStats}
            */
            TransportStats.prototype.getActiveCandidatePair = function () {
                if (arguments.length == 0) {
                    return this._activeCandidatePair;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getBytesReceived'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes received.
             </div>
    
    
            @return {number}
            */
            TransportStats.prototype.getBytesReceived = function () {
                if (arguments.length == 0) {
                    return this._bytesReceived;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getBytesSent'>&nbsp;</span>**/
            /**
             <div>
             Gets the number of bytes sent.
             </div>
    
    
            @return {number}
            */
            TransportStats.prototype.getBytesSent = function () {
                if (arguments.length == 0) {
                    return this._bytesSent;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getCandidatePair'>&nbsp;</span>**/
            /**
             <div>
             Gets a candidate pair by its identifier.
             </div>
    
            @param {string} candidatePairId The candidate pair identifier.
            @return {fm.icelink.CandidatePairStats}
            */
            TransportStats.prototype.getCandidatePair = function (candidatePairId) {
                if (arguments.length == 1) {
                    for (var _i = 0, _a = this.getCandidatePairs(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), candidatePairId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getCandidatePairs'>&nbsp;</span>**/
            /**
             <div>
             Gets the candidate pairs' stats.
             </div>
    
    
            @return {fm.icelink.CandidatePairStats[]}
            */
            TransportStats.prototype.getCandidatePairs = function () {
                if (arguments.length == 0) {
                    return this._candidatePairs;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getIsHost'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the active candidate pair has a host candidate.
             </div>
    
    
            @return {boolean}
            */
            TransportStats.prototype.getIsHost = function () {
                if (arguments.length == 0) {
                    var activeCandidatePair = this.getActiveCandidatePair();
                    if ((fm.icelink.Global.equals(activeCandidatePair, null))) {
                        return false;
                    }
                    var localCandidate = this.getLocalCandidate(activeCandidatePair.getLocalCandidateId());
                    var remoteCandidate = this.getRemoteCandidate(activeCandidatePair.getRemoteCandidateId());
                    return (((!fm.icelink.Global.equals(localCandidate, null)) && localCandidate.getIsHost()) || ((!fm.icelink.Global.equals(remoteCandidate, null)) && remoteCandidate.getIsHost()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getIsReflexive'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the active candidate pair has a reflexive candidate.
             </div>
    
    
            @return {boolean}
            */
            TransportStats.prototype.getIsReflexive = function () {
                if (arguments.length == 0) {
                    var activeCandidatePair = this.getActiveCandidatePair();
                    if ((fm.icelink.Global.equals(activeCandidatePair, null))) {
                        return false;
                    }
                    var localCandidate = this.getLocalCandidate(activeCandidatePair.getLocalCandidateId());
                    var remoteCandidate = this.getRemoteCandidate(activeCandidatePair.getRemoteCandidateId());
                    return (((!fm.icelink.Global.equals(localCandidate, null)) && localCandidate.getIsReflexive()) || ((!fm.icelink.Global.equals(remoteCandidate, null)) && remoteCandidate.getIsReflexive()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getIsRelayed'>&nbsp;</span>**/
            /**
             <div>
             Gets whether the active candidate pair has a relayed candidate.
             </div>
    
    
            @return {boolean}
            */
            TransportStats.prototype.getIsRelayed = function () {
                if (arguments.length == 0) {
                    var activeCandidatePair = this.getActiveCandidatePair();
                    if ((fm.icelink.Global.equals(activeCandidatePair, null))) {
                        return false;
                    }
                    var localCandidate = this.getLocalCandidate(activeCandidatePair.getLocalCandidateId());
                    var remoteCandidate = this.getRemoteCandidate(activeCandidatePair.getRemoteCandidateId());
                    return (((!fm.icelink.Global.equals(localCandidate, null)) && localCandidate.getIsRelayed()) || ((!fm.icelink.Global.equals(remoteCandidate, null)) && remoteCandidate.getIsRelayed()));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getLocalCandidate'>&nbsp;</span>**/
            /**
             <div>
             Gets a local candidate by its identifier.
             </div>
    
            @param {string} candidateId The candidate identifier.
            @return {fm.icelink.CandidateStats}
            */
            TransportStats.prototype.getLocalCandidate = function (candidateId) {
                if (arguments.length == 1) {
                    for (var _i = 0, _a = this.getLocalCandidates(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), candidateId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getLocalCandidates'>&nbsp;</span>**/
            /**
             <div>
             Gets the local candidates' stats.
             </div>
    
    
            @return {fm.icelink.CandidateStats[]}
            */
            TransportStats.prototype.getLocalCandidates = function () {
                if (arguments.length == 0) {
                    return this._localCandidates;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getLocalCertificate'>&nbsp;</span>**/
            /**
             <div>
             Gets the local certificate's stats.
             </div>
    
    
            @return {fm.icelink.CertificateStats}
            */
            TransportStats.prototype.getLocalCertificate = function () {
                if (arguments.length == 0) {
                    return this._localCertificate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getRemoteCandidate'>&nbsp;</span>**/
            /**
             <div>
             Gets a remote candidate by its identifier.
             </div>
    
            @param {string} candidateId The candidate identifier.
            @return {fm.icelink.CandidateStats}
            */
            TransportStats.prototype.getRemoteCandidate = function (candidateId) {
                if (arguments.length == 1) {
                    for (var _i = 0, _a = this.getRemoteCandidates(); _i < _a.length; _i++) {
                        var stats = _a[_i];
                        if ((fm.icelink.Global.equals(stats.getId(), candidateId))) {
                            return stats;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getRemoteCandidates'>&nbsp;</span>**/
            /**
             <div>
             Gets the remote candidates' stats.
             </div>
    
    
            @return {fm.icelink.CandidateStats[]}
            */
            TransportStats.prototype.getRemoteCandidates = function () {
                if (arguments.length == 0) {
                    return this._remoteCandidates;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getRemoteCertificate'>&nbsp;</span>**/
            /**
             <div>
             Gets the remote certificate's stats.
             </div>
    
    
            @return {fm.icelink.CertificateStats}
            */
            TransportStats.prototype.getRemoteCertificate = function () {
                if (arguments.length == 0) {
                    return this._remoteCertificate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-getRtcpTransport'>&nbsp;</span>**/
            /**
             <div>
             Gets the RTCP transport's stats.
             </div>
    
    
            @return {fm.icelink.TransportStats}
            */
            TransportStats.prototype.getRtcpTransport = function () {
                if (arguments.length == 0) {
                    return this._rtcpTransport;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-serializeProperties'>&nbsp;</span>**/
            /**
             <div>
             Serializes the properties.
             </div>
    
            @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
            @return {void}
            */
            TransportStats.prototype.serializeProperties = function (jsonObject) {
                if (arguments.length == 1) {
                    _super.prototype.serializeProperties.call(this, jsonObject);
                    jsonObject["bytesSent"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesSent());
                    jsonObject["bytesReceived"] = fm.icelink.JsonSerializer.serializeLong(this.getBytesReceived());
                    if ((!fm.icelink.Global.equals(this.getRtcpTransport(), null))) {
                        jsonObject["rtcpTransport"] = fm.icelink.TransportStats.toJson(this.getRtcpTransport());
                    }
                    if ((!fm.icelink.Global.equals(this.getLocalCandidates(), null))) {
                        jsonObject["localCandidates"] = fm.icelink.CandidateStats.toJsonArray(this.getLocalCandidates());
                    }
                    if ((!fm.icelink.Global.equals(this.getRemoteCandidates(), null))) {
                        jsonObject["remoteCandidates"] = fm.icelink.CandidateStats.toJsonArray(this.getRemoteCandidates());
                    }
                    if ((!fm.icelink.Global.equals(this.getCandidatePairs(), null))) {
                        jsonObject["candidatePairs"] = fm.icelink.CandidatePairStats.toJsonArray(this.getCandidatePairs());
                    }
                    if ((!fm.icelink.Global.equals(this.getActiveCandidatePair(), null))) {
                        jsonObject["activeCandidatePair"] = fm.icelink.CandidatePairStats.toJson(this.getActiveCandidatePair());
                    }
                    if ((!fm.icelink.Global.equals(this.getLocalCertificate(), null))) {
                        jsonObject["localCertificate"] = fm.icelink.CertificateStats.toJson(this.getLocalCertificate());
                    }
                    if ((!fm.icelink.Global.equals(this.getRemoteCertificate(), null))) {
                        jsonObject["remoteCertificate"] = fm.icelink.CertificateStats.toJson(this.getRemoteCertificate());
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setActiveCandidatePair'>&nbsp;</span>**/
            /**
             <div>
             Sets the active candidate pair's stats.
             </div>
    
    
            @param {fm.icelink.CandidatePairStats} value
            @return {void}
            */
            TransportStats.prototype.setActiveCandidatePair = function (value) {
                if (arguments.length == 1) {
                    this._activeCandidatePair = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setBytesReceived'>&nbsp;</span>**/
            /**
             <div>
             Sets the number of bytes received.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            TransportStats.prototype.setBytesReceived = function (value) {
                if (arguments.length == 1) {
                    this._bytesReceived = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setBytesSent'>&nbsp;</span>**/
            /**
             <div>
             Sets the number of bytes sent.
             </div>
    
    
            @param {number} value
            @return {void}
            */
            TransportStats.prototype.setBytesSent = function (value) {
                if (arguments.length == 1) {
                    this._bytesSent = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setCandidatePairs'>&nbsp;</span>**/
            /**
             <div>
             Sets the candidate pairs' stats.
             </div>
    
    
            @param {fm.icelink.CandidatePairStats[]} value
            @return {void}
            */
            TransportStats.prototype.setCandidatePairs = function (value) {
                if (arguments.length == 1) {
                    this._candidatePairs = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setLocalCandidates'>&nbsp;</span>**/
            /**
             <div>
             Sets the local candidates' stats.
             </div>
    
    
            @param {fm.icelink.CandidateStats[]} value
            @return {void}
            */
            TransportStats.prototype.setLocalCandidates = function (value) {
                if (arguments.length == 1) {
                    this._localCandidates = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setLocalCertificate'>&nbsp;</span>**/
            /**
             <div>
             Sets the local certificate's stats.
             </div>
    
    
            @param {fm.icelink.CertificateStats} value
            @return {void}
            */
            TransportStats.prototype.setLocalCertificate = function (value) {
                if (arguments.length == 1) {
                    this._localCertificate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setRemoteCandidates'>&nbsp;</span>**/
            /**
             <div>
             Sets the remote candidates' stats.
             </div>
    
    
            @param {fm.icelink.CandidateStats[]} value
            @return {void}
            */
            TransportStats.prototype.setRemoteCandidates = function (value) {
                if (arguments.length == 1) {
                    this._remoteCandidates = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setRemoteCertificate'>&nbsp;</span>**/
            /**
             <div>
             Sets the remote certificate's stats.
             </div>
    
    
            @param {fm.icelink.CertificateStats} value
            @return {void}
            */
            TransportStats.prototype.setRemoteCertificate = function (value) {
                if (arguments.length == 1) {
                    this._remoteCertificate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-setRtcpTransport'>&nbsp;</span>**/
            /**
             <div>
             Sets the RTCP transport's stats.
             </div>
    
    
            @param {fm.icelink.TransportStats} value
            @return {void}
            */
            TransportStats.prototype.setRtcpTransport = function (value) {
                if (arguments.length == 1) {
                    this._rtcpTransport = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.TransportStats-toJson'>&nbsp;</span>**/
            /**
             <div>
             Serializes this to JSON.
             </div>
    
            @return {string}
            */
            TransportStats.prototype.toJson = function () {
                if (arguments.length == 0) {
                    return fm.icelink.TransportStats.toJson(this);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return TransportStats;
        }(fm.icelink.BaseStats));
        icelink.TransportStats = TransportStats;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Collection.ts" />

/// <reference path="Collection.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A stream collection.
         </div>
    
        */
        var StreamCollection = /** @class */ (function (_super) {
            __extends(StreamCollection, _super);
            function StreamCollection() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    _this = _super.call(this) || this;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            StreamCollection.prototype.getTypeString = function () {
                return '[fm.icelink.StreamCollection]' + ',' + _super.prototype.getTypeString.call(this);
            };
            /**<span id='method-fm.icelink.StreamCollection-arrayFromList'>&nbsp;</span>**/
            /**
             <div>
             Creates an array from a list.
             </div>
    
            @param {Array<fm.icelink.WebRtcStream>} list The list.
            @return {fm.icelink.WebRtcStream[]}
            */
            StreamCollection.prototype.arrayFromList = function (list) {
                if (arguments.length == 1) {
                    return fm.icelink.ArrayExtensions.toArray(list);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamCollection-createCollection'>&nbsp;</span>**/
            /**
             <div>
             Creates a collection.
             </div>
    
    
            @return {fm.icelink.StreamCollection}
            */
            StreamCollection.prototype.createCollection = function () {
                if (arguments.length == 0) {
                    return new fm.icelink.StreamCollection();
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamCollection-getByType'>&nbsp;</span>**/
            /**
             <div>
             Gets a stream by its type.
             </div><typeparam name="T"></typeparam>
    
    
            @param {fm.icelink.StreamType} type
            @return {T}
            */
            StreamCollection.prototype.getByType = function (type) {
                if (arguments.length == 1) {
                    for (var _i = 0, _a = _super.prototype.getValues.call(this); _i < _a.length; _i++) {
                        var stream = _a[_i];
                        if ((fm.icelink.Global.equals(stream.getType(), type))) {
                            return stream;
                        }
                    }
                    return null;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.StreamCollection-getManyByType'>&nbsp;</span>**/
            /**
             <div>
             Gets some streams by their type.
             </div><typeparam name="T"></typeparam>
    
    
            @param {fm.icelink.StreamType} type
            @return {Array<T>}
            */
            StreamCollection.prototype.getManyByType = function (type) {
                if (arguments.length == 1) {
                    var list = new Array();
                    for (var _i = 0, _a = _super.prototype.getValues.call(this); _i < _a.length; _i++) {
                        var stream = _a[_i];
                        if ((fm.icelink.Global.equals(stream.getType(), type))) {
                            fm.icelink.ArrayExtensions.add(list, stream);
                        }
                    }
                    return list;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamCollection;
        }(fm.icelink.Collection));
        icelink.StreamCollection = StreamCollection;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var StreamDirectionWrapper = /** @class */ (function () {
            function StreamDirectionWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_45 = __arguments[0];
                    //super();
                    this._value = value_45;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StreamDirectionWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.StreamDirectionWrapper]';
            };
            StreamDirectionWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.StreamDirection.SendReceive)
                        return 'SendReceive';
                    if (this._value == fm.icelink.StreamDirection.SendOnly)
                        return 'SendOnly';
                    if (this._value == fm.icelink.StreamDirection.ReceiveOnly)
                        return 'ReceiveOnly';
                    if (this._value == fm.icelink.StreamDirection.Inactive)
                        return 'Inactive';
                    if (this._value == fm.icelink.StreamDirection.Unset)
                        return 'Unset';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamDirectionWrapper;
        }());
        icelink.StreamDirectionWrapper = StreamDirectionWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var StreamStateWrapper = /** @class */ (function () {
            function StreamStateWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_46 = __arguments[0];
                    //super();
                    this._value = value_46;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StreamStateWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.StreamStateWrapper]';
            };
            StreamStateWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.StreamState.New)
                        return 'New';
                    if (this._value == fm.icelink.StreamState.Initializing)
                        return 'Initializing';
                    if (this._value == fm.icelink.StreamState.Connecting)
                        return 'Connecting';
                    if (this._value == fm.icelink.StreamState.Connected)
                        return 'Connected';
                    if (this._value == fm.icelink.StreamState.Failing)
                        return 'Failing';
                    if (this._value == fm.icelink.StreamState.Failed)
                        return 'Failed';
                    if (this._value == fm.icelink.StreamState.Closing)
                        return 'Closing';
                    if (this._value == fm.icelink.StreamState.Closed)
                        return 'Closed';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamStateWrapper;
        }());
        icelink.StreamStateWrapper = StreamStateWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var StreamTypeWrapper = /** @class */ (function () {
            function StreamTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_47 = __arguments[0];
                    //super();
                    this._value = value_47;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            StreamTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.StreamTypeWrapper]';
            };
            StreamTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.StreamType.Audio)
                        return 'Audio';
                    if (this._value == fm.icelink.StreamType.Video)
                        return 'Video';
                    if (this._value == fm.icelink.StreamType.Application)
                        return 'Application';
                    if (this._value == fm.icelink.StreamType.Message)
                        return 'Message';
                    if (this._value == fm.icelink.StreamType.Text)
                        return 'Text';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return StreamTypeWrapper;
        }());
        icelink.StreamTypeWrapper = StreamTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
        @internal
        */
        var TransportTypeWrapper = /** @class */ (function () {
            function TransportTypeWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_48 = __arguments[0];
                    //super();
                    this._value = value_48;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            TransportTypeWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.TransportTypeWrapper]';
            };
            TransportTypeWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.TransportType.Gatherer)
                        return 'Gatherer';
                    if (this._value == fm.icelink.TransportType.IceTransport)
                        return 'IceTransport';
                    if (this._value == fm.icelink.TransportType.DtlsTransport)
                        return 'DtlsTransport';
                    if (this._value == fm.icelink.TransportType.SctpTransport)
                        return 'SctpTransport';
                    if (this._value == fm.icelink.TransportType.ReliableDataTransport)
                        return 'ReliableDataTransport';
                    if (this._value == fm.icelink.TransportType.SrtpTransport)
                        return 'SrtpTransport';
                    if (this._value == fm.icelink.TransportType.Unset)
                        return 'Unset';
                    if (this._value == fm.icelink.TransportType.MediaTransport)
                        return 'MediaTransport';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return TransportTypeWrapper;
        }());
        icelink.TransportTypeWrapper = TransportTypeWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        var TrickleIcePolicyWrapper = /** @class */ (function () {
            function TrickleIcePolicyWrapper(value) {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 1) {
                    var value_49 = __arguments[0];
                    //super();
                    this._value = value_49;
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            TrickleIcePolicyWrapper.prototype.getTypeString = function () {
                return '[fm.icelink.TrickleIcePolicyWrapper]';
            };
            TrickleIcePolicyWrapper.prototype.toString = function () {
                if (arguments.length == 0) {
                    if (this._value == fm.icelink.TrickleIcePolicy.NotSupported)
                        return 'NotSupported';
                    if (this._value == fm.icelink.TrickleIcePolicy.FullTrickle)
                        return 'FullTrickle';
                    if (this._value == fm.icelink.TrickleIcePolicy.HalfTrickle)
                        return 'HalfTrickle';
                    return '';
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return TrickleIcePolicyWrapper;
        }());
        icelink.TrickleIcePolicyWrapper = TrickleIcePolicyWrapper;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         Utility methods.
         </div>
    
        */
        var Utility = /** @class */ (function () {
            function Utility() {
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 0) {
                    //super();
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
            }
            Utility.prototype.getTypeString = function () {
                return '[fm.icelink.Utility]';
            };
            /**<span id='method-fm.icelink.Utility-clone'>&nbsp;</span>**/
            /**
             <div>
             Clones the specified list.
             </div><typeparam name="T"></typeparam>
    
            @param {Array<T>} list The list.
            @return {Array<T>}
            */
            Utility.clone = function (list) {
                if (arguments.length == 1) {
                    var list2 = new Array();
                    fm.icelink.ArrayExtensions.addRange(list2, list);
                    return list2;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Utility.firstOrDefault = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObject(arguments[0][0])))))) {
                    var array = arguments[0];
                    if (((fm.icelink.Global.equals(array, null)) || (fm.icelink.Global.equals(array.length, 0)))) {
                        return null;
                    }
                    return array[0];
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObject(arguments[0]))) {
                    var list = arguments[0];
                    if (((fm.icelink.Global.equals(list, null)) || (fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(list), 0)))) {
                        return null;
                    }
                    return list[0];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-formatDoubleAsPercent'>&nbsp;</span>**/
            /**
             <div>
             Formats a double as a percentage string.
             </div>
    
            @param {number} value The value.
            @param {number} decimalPlaces The number of decimal places to include.
            @return {string}
            */
            Utility.formatDoubleAsPercent = function (value, decimalPlaces) {
                if (arguments.length == 2) {
                    var num = void 0;
                    if ((decimalPlaces < 0)) {
                        decimalPlaces = 0;
                    }
                    var str = fm.icelink.IntExtensions.toString((value * 100));
                    var strArray = fm.icelink.StringExtensions.split(str, [46]);
                    if ((fm.icelink.Global.equals(strArray.length, 1))) {
                        str = fm.icelink.StringExtensions.concat(str, ".");
                        for (num = 0; (num < decimalPlaces); num++) {
                            str = fm.icelink.StringExtensions.concat(str, "0");
                        }
                        return str;
                    }
                    var str2 = strArray[0];
                    if ((fm.icelink.Global.equals(str2.length, 0))) {
                        str2 = "0";
                    }
                    var str3 = strArray[1];
                    if ((str3.length > decimalPlaces)) {
                        str3 = fm.icelink.StringExtensions.substring(str3, 0, decimalPlaces);
                    }
                    else {
                        if ((str3.length < decimalPlaces)) {
                            var num2 = (decimalPlaces - str3.length);
                            for (num = 0; (num < num2); num++) {
                                str3 = fm.icelink.StringExtensions.concat(str3, "0");
                            }
                        }
                    }
                    return fm.icelink.StringExtensions.concat(str2, ".", str3);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-generateSynchronizationSource'>&nbsp;</span>**/
            /**
             <div>
             Generates a synchronization source.
             </div>
    
    
            @return {number}
            */
            Utility.generateSynchronizationSource = function () {
                if (arguments.length == 0) {
                    var buffer = new Uint8Array(4);
                    fm.icelink.LockedRandomizer.nextBytes(buffer);
                    return fm.icelink.Binary.fromBytes32(buffer, 0, false);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-generateTieBreaker'>&nbsp;</span>**/
            /**
             <div>
             Generates a Connection Tie-breaker.
             </div>
    
            @return {string}
            */
            Utility.generateTieBreaker = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.replace(fm.icelink.Guid.newGuid().toString(), "-", "");
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            Utility.lastOrDefault = function () {
                if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || icelink.Util.isObject(arguments[0]))) {
                    var list = arguments[0];
                    if (((fm.icelink.Global.equals(list, null)) || (fm.icelink.Global.equals(fm.icelink.ArrayExtensions.getCount(list), 0)))) {
                        return null;
                    }
                    return list[(fm.icelink.ArrayExtensions.getCount(list) - 1)];
                }
                else if (arguments.length == 1 && (icelink.Util.isNullOrUndefined(arguments[0]) || (icelink.Util.isArray(arguments[0]) && (arguments[0].length == 0 || (icelink.Util.isNullOrUndefined(arguments[0][0]) || icelink.Util.isObject(arguments[0][0])))))) {
                    var array = arguments[0];
                    if (((fm.icelink.Global.equals(array, null)) || (fm.icelink.Global.equals(array.length, 0)))) {
                        return null;
                    }
                    return array[(array.length - 1)];
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-toList'>&nbsp;</span>**/
            /**
             <div>
             Converts an array to a list.
             </div><typeparam name="T"></typeparam>
    
            @param {T[]} array The array.
            @return {Array<T>}
            */
            Utility.toList = function (array) {
                if (arguments.length == 1) {
                    var list = new Array();
                    for (var i = 0; (i < array.length); i++) {
                        fm.icelink.ArrayExtensions.add(list, array[i]);
                    }
                    return list;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-treeFindLeaves'>&nbsp;</span>**/
            /**
             <div>
             Enumerates over all nodes in the tree, invoking the callback for each one.
             </div><typeparam name="T">The generic to search.</typeparam>
    
            @param {T} root The root.
            @param {fm.icelink.IFunction1<T,T[]>} childrenCallback The children callback.
            @param {fm.icelink.IAction1<T>} nodeCallback The node callback.
            @return {void}
            */
            Utility.treeFindLeaves = function (root, childrenCallback, nodeCallback) {
                if (arguments.length == 3) {
                    var localArray = childrenCallback(root);
                    if ((!fm.icelink.Global.equals(localArray, null))) {
                        for (var _i = 0, localArray_1 = localArray; _i < localArray_1.length; _i++) {
                            var local = localArray_1[_i];
                            fm.icelink.Utility.treeSearch(local, childrenCallback, nodeCallback);
                        }
                    }
                    else {
                        nodeCallback(root);
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.Utility-treeSearch'>&nbsp;</span>**/
            /**
             <div>
             Enumerates over all nodes in the tree, invoking the callback for each one.
             </div><typeparam name="T">The generic to search.</typeparam>
    
            @param {T} root The root.
            @param {fm.icelink.IFunction1<T,T[]>} childrenCallback The children callback.
            @param {fm.icelink.IAction1<T>} nodeCallback The node callback.
            @return {void}
            */
            Utility.treeSearch = function (root, childrenCallback, nodeCallback) {
                if (arguments.length == 3) {
                    nodeCallback(root);
                    var localArray = childrenCallback(root);
                    if ((!fm.icelink.Global.equals(localArray, null))) {
                        for (var _i = 0, localArray_2 = localArray; _i < localArray_2.length; _i++) {
                            var local = localArray_2[_i];
                            fm.icelink.Utility.treeSearch(local, childrenCallback, nodeCallback);
                        }
                    }
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return Utility;
        }());
        icelink.Utility = Utility;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="MediaConfig.ts" />

/// <reference path="MediaConfig.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        /**
         <div>
         A video configuration.
         </div>
    
        */
        var VideoConfig = /** @class */ (function (_super) {
            __extends(VideoConfig, _super);
            function VideoConfig() {
                var _this = this;
                var __arguments = new Array(arguments.length);
                for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                    __arguments[__argumentIndex] = arguments[__argumentIndex];
                }
                if (__arguments.length == 3) {
                    var width = __arguments[0];
                    var height = __arguments[1];
                    var frameRate = __arguments[2];
                    // chained constructor: VideoConfig.call(this, width, height, frameRate, 90000);
                    __arguments = new Array(4);
                    __arguments[0] = width;
                    __arguments[1] = height;
                    __arguments[2] = frameRate;
                    __arguments[3] = 90000;
                    {
                        var width_1 = __arguments[0];
                        var height_1 = __arguments[1];
                        var frameRate_2 = __arguments[2];
                        var clockRate = __arguments[3];
                        _this = _super.call(this, clockRate) || this;
                        _this.fmicelinkVideoConfigInit();
                        _this.setWidth(width_1);
                        _this.setHeight(height_1);
                        _this.setFrameRate(frameRate_2);
                    }
                }
                else if (__arguments.length == 4) {
                    var width = __arguments[0];
                    var height = __arguments[1];
                    var frameRate = __arguments[2];
                    var clockRate = __arguments[3];
                    _this = _super.call(this, clockRate) || this;
                    _this.fmicelinkVideoConfigInit();
                    _this.setWidth(width);
                    _this.setHeight(height);
                    _this.setFrameRate(frameRate);
                }
                else {
                    throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                }
                return _this;
            }
            VideoConfig.prototype.getTypeString = function () {
                return '[fm.icelink.VideoConfig]' + ',' + _super.prototype.getTypeString.call(this);
            };
            VideoConfig.prototype.fmicelinkVideoConfigInit = function () {
                this._frameRate = 0;
                this._height = 0;
                this._width = 0;
            };
            /**<span id='method-fm.icelink.VideoConfig-getFrameRate'>&nbsp;</span>**/
            /**
             <div>
             Gets the frame rate.
             </div>
    
    
            @return {number}
            */
            VideoConfig.prototype.getFrameRate = function () {
                if (arguments.length == 0) {
                    return this._frameRate;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoConfig-getHeight'>&nbsp;</span>**/
            /**
             <div>
             Gets the height.
             </div>
    
    
            @return {number}
            */
            VideoConfig.prototype.getHeight = function () {
                if (arguments.length == 0) {
                    return this._height;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoConfig-getWidth'>&nbsp;</span>**/
            /**
             <div>
             Gets the width.
             </div>
    
    
            @return {number}
            */
            VideoConfig.prototype.getWidth = function () {
                if (arguments.length == 0) {
                    return this._width;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoConfig-isEquivalent'>&nbsp;</span>**/
            /**
             <div>
             Determines whether the specified configuration is equivalent.
             </div>
    
            @param {fm.icelink.VideoConfig} config The configuration.
            @return {boolean}
            */
            VideoConfig.prototype.isEquivalent = function (config) {
                if (arguments.length == 1) {
                    if (!_super.prototype.isEquivalent.call(this, config)) {
                        return false;
                    }
                    return (((fm.icelink.Global.equals(this.getWidth(), config.getWidth())) && (fm.icelink.Global.equals(this.getHeight(), config.getHeight()))) && (fm.icelink.Global.equals(this.getFrameRate(), config.getFrameRate())));
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoConfig.prototype.setFrameRate = function (value) {
                if (arguments.length == 1) {
                    this._frameRate = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoConfig.prototype.setHeight = function (value) {
                if (arguments.length == 1) {
                    this._height = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**
            @internal
    
            */
            VideoConfig.prototype.setWidth = function (value) {
                if (arguments.length == 1) {
                    this._width = value;
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            /**<span id='method-fm.icelink.VideoConfig-toString'>&nbsp;</span>**/
            /**
             <div>
             Returns a string that represents this instance.
             </div>
    
    
            @return {string}
            */
            VideoConfig.prototype.toString = function () {
                if (arguments.length == 0) {
                    return fm.icelink.StringExtensions.format("Clock Rate: {0}, Width: {1}, Height: {2}, Frame Rate: {3}", [fm.icelink.IntExtensions.toString(_super.prototype.getClockRate.call(this)), fm.icelink.IntExtensions.toString(this.getWidth()), fm.icelink.IntExtensions.toString(this.getHeight()), fm.icelink.IntExtensions.toString(this.getFrameRate())]);
                }
                else {
                    throw new icelink.Exception('Method overload does not exist with specified parameter count/type combination.');
                }
            };
            return VideoConfig;
        }(fm.icelink.MediaConfig));
        icelink.VideoConfig = VideoConfig;
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../VideoFormat.ts" />

/// <reference path="../VideoFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var vp8;
        (function (vp8) {
            /**
             <div>
             A VP8 format.
             </div>
        
            */
            var Format = /** @class */ (function (_super) {
                __extends(Format, _super);
                function Format() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var clockRate = __arguments[0];
                        _this = _super.call(this, fm.icelink.VideoFormat.getVp8Name(), clockRate) || this;
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this, fm.icelink.VideoFormat.getVp8Name()) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                Format.prototype.getTypeString = function () {
                    return '[fm.icelink.vp8.Format]' + ',' + _super.prototype.getTypeString.call(this);
                };
                return Format;
            }(fm.icelink.VideoFormat));
            vp8.Format = Format;
        })(vp8 = icelink.vp8 || (icelink.vp8 = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="../VideoFormat.ts" />

/// <reference path="../VideoFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        var vp9;
        (function (vp9) {
            /**
             <div>
             A VP9 format.
             </div>
        
            */
            var Format = /** @class */ (function (_super) {
                __extends(Format, _super);
                function Format() {
                    var _this = this;
                    var __arguments = new Array(arguments.length);
                    for (var __argumentIndex = 0; __argumentIndex < __arguments.length; ++__argumentIndex) {
                        __arguments[__argumentIndex] = arguments[__argumentIndex];
                    }
                    if (__arguments.length == 1) {
                        var clockRate = __arguments[0];
                        _this = _super.call(this, fm.icelink.VideoFormat.getVp9Name(), clockRate) || this;
                    }
                    else if (__arguments.length == 0) {
                        _this = _super.call(this, fm.icelink.VideoFormat.getVp9Name()) || this;
                    }
                    else {
                        throw new icelink.Exception('Constructor overload does not exist with specified parameter count/type combination.');
                    }
                    return _this;
                }
                Format.prototype.getTypeString = function () {
                    return '[fm.icelink.vp9.Format]' + ',' + _super.prototype.getTypeString.call(this);
                };
                return Format;
            }(fm.icelink.VideoFormat));
            vp9.Format = Format;
        })(vp9 = icelink.vp9 || (icelink.vp9 = {}));
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Binary.ts" />

/// <reference path="Binary.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.Binary.fmicelinkBinaryInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Build.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.Build.fmicelinkBuildInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Constants.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.Constants.fmicelinkConstantsInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="UnixTimestamp.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.UnixTimestamp.fmicelinkUnixTimestampInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="HttpTransfer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.HttpTransfer.fmicelinkHttpTransferInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="JsonChecker.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.JsonChecker.fmicelinkJsonCheckerInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LockedRandomizer.ts" />
/// <reference path="Randomizer.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.LockedRandomizer.fmicelinkLockedRandomizerInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="Log.ts" />
/// <reference path="AsyncLogger.ts" />
/// <reference path="ILog.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.Log.fmicelinkLogInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="LogConfiguration.ts" />
/// <reference path="LogLevel.ts" />
/// <reference path="LogProvider.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.LogConfiguration.fmicelinkLogConfigurationInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="VideoFormat.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.VideoFormat.fmicelinkVideoFormatInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="sdp/Attribute.ts" />
/// <reference path="sdp/AttributeRegistration.ts" />
/// <reference path="sdp/UnknownAttribute.ts" />
/// <reference path="sdp/AttributeCreationArgs.ts" />
/// <reference path="IFunction1.ts" />
/// <reference path="sdp/CategoryAttribute.ts" />
/// <reference path="sdp/CharacterSetAttribute.ts" />
/// <reference path="sdp/ConferenceTypeAttribute.ts" />
/// <reference path="sdp/CryptoAttribute.ts" />
/// <reference path="sdp/FormatParametersAttribute.ts" />
/// <reference path="sdp/FrameRateAttribute.ts" />
/// <reference path="sdp/InactiveAttribute.ts" />
/// <reference path="sdp/KeywordsAttribute.ts" />
/// <reference path="sdp/LanguageAttribute.ts" />
/// <reference path="sdp/MaxPacketTimeAttribute.ts" />
/// <reference path="sdp/OrientationAttribute.ts" />
/// <reference path="sdp/PacketTimeAttribute.ts" />
/// <reference path="sdp/QualityAttribute.ts" />
/// <reference path="sdp/ReceiveOnlyAttribute.ts" />
/// <reference path="sdp/SdpLanguageAttribute.ts" />
/// <reference path="sdp/SendOnlyAttribute.ts" />
/// <reference path="sdp/SendReceiveAttribute.ts" />
/// <reference path="sdp/SetupAttribute.ts" />
/// <reference path="sdp/ToolAttribute.ts" />
/// <reference path="sdp/MediaStreamIdSemanticAttribute.ts" />
/// <reference path="sdp/MediaStreamIdAttribute.ts" />
/// <reference path="sdp/ice/CandidateAttribute.ts" />
/// <reference path="sdp/ice/FingerprintAttribute.ts" />
/// <reference path="sdp/ice/LiteAttribute.ts" />
/// <reference path="sdp/ice/MismatchAttribute.ts" />
/// <reference path="sdp/ice/OptionsAttribute.ts" />
/// <reference path="sdp/ice/PasswordAttribute.ts" />
/// <reference path="sdp/ice/UfragAttribute.ts" />
/// <reference path="sdp/ice/RemoteCandidatesAttribute.ts" />
/// <reference path="sdp/rtp/MapAttribute.ts" />
/// <reference path="sdp/rtp/SsrcAttribute.ts" />
/// <reference path="sdp/rtp/ExtMapAttribute.ts" />
/// <reference path="sdp/rtcp/Attribute.ts" />
/// <reference path="sdp/rtcp/FeedbackAttribute.ts" />
/// <reference path="sdp/rtcp/MuxAttribute.ts" />
/// <reference path="sdp/sctp/MapAttribute.ts" />
/// <reference path="sdp/sctp/MaxMessageSizeAttribute.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.sdp.Attribute.fmicelinksdpAttributeInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));
/// <reference path="sdp/Media.ts" />
(function (fm) {
    var icelink;
    (function (icelink) {
        fm.icelink.sdp.Media.fmicelinksdpMediaInitialize();
    })(icelink = fm.icelink || (fm.icelink = {}));
})(fm || (fm = {}));

return fm.icelink
}));
