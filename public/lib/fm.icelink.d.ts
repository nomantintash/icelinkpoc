//
// Title: IceLink for JavaScript
// Version: 3.2.4.716
// Copyright Frozen Mountain Software 2011+
//
declare namespace fm.icelink {
    class ArrayExtensions {
        getTypeString(): string;
        static getCount<T>(array: T[]): number;
        static add<T>(array: T[], value: T): void;
        static remove<T>(array: T[], value: T): boolean;
        static removeAt<T>(array: T[], index: number): void;
        static insert<T>(array: T[], index: number, value: T): void;
        static toArray<T>(array: T[]): T[];
        static clear<T>(array: T[]): void;
        static addRange<T>(array: T[], values: T[]): void;
        static getRange<T>(array: T[], index: number, count: number): T[];
        static contains<T>(array: T[], value: T): boolean;
        static newArray<T>(values: T[]): T[];
        static clone<T>(array: T[]): T[];
        static map<T, R>(array: T[], callback: IFunction3<T, number, T[], R>): R[];
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    class AtomicInteger {
        private _value;
        constructor(startValue?: number);
        compareAndSwap(expected: number, newValue: number): number;
        getValue(): number;
        add(value: number): number;
        subtract(value: number): number;
        increment(): number;
        decrement(): number;
    }
}
declare namespace fm.icelink {
    class AtomicLong {
        private _value;
        constructor(startValue?: number);
        compareAndSwap(expected: number, newValue: number): number;
        getValue(): number;
        add(value: number): number;
        subtract(value: number): number;
        increment(): number;
        decrement(): number;
    }
}
declare namespace fm.icelink {
    class Base64 {
        getTypeString(): string;
        private static _base64Regex;
        static encode(b: Uint8Array): string;
        static encodeBuffer(buffer: DataBuffer): string;
        static decode(s: string): Uint8Array;
        static tryEncode(b: Uint8Array, result: Holder<string>): boolean;
        static tryEncodeBuffer(buffer: DataBuffer, result: Holder<string>): boolean;
        static tryDecode(s: string, result: Holder<Uint8Array>): boolean;
        private static b64ToUint6(cc);
        private static decodeIt(str64, blocksSize?);
        private static uint6ToB64(b);
        private static encodeIt(bytes, index, length);
    }
}
declare namespace fm.icelink {
    class BitAssistant {
        getTypeString(): string;
        static castByte(value: number): number;
        static castInteger(value: number): number;
        static castLong(value: number): number;
        static leftShift(value: number, count: number): number;
        static leftShiftShort(value: number, count: number): number;
        static leftShiftInteger(value: number, count: number): number;
        static leftShiftLong(value: number, count: number): number;
        static rightShift(value: number, count: number): number;
        static rightShiftShort(value: number, count: number): number;
        static rightShiftInteger(value: number, count: number): number;
        static rightShiftLong(value: number, count: number): number;
        static sequencesAreEqual(array1: Uint8Array, array2: Uint8Array): boolean;
        static sequencesAreEqual(array1: Uint8Array, offset1: number, array2: Uint8Array, offset2: number, length: number): boolean;
        static sequencesAreEqualConstantTime(array1: Uint8Array, array2: Uint8Array): boolean;
        static sequencesAreEqualConstantTime(array1: Uint8Array, offset1: number, array2: Uint8Array, offset2: number, length: number): boolean;
        static subArray(array: Uint8Array, offset: number, count?: number): Uint8Array;
        static reverse(array: Uint8Array): void;
        static copy(source: Uint8Array, sourceIndex: number, destination: Uint8Array, destinationIndex: number, length: number): void;
        static set(array: Uint8Array, index: number, length: number, value: number): void;
        static getHexString(array: Uint8Array): string;
        static getHexString(array: Uint8Array, offset: number, length: number): string;
        static getHexBytes(s: string): Uint8Array;
    }
}
declare namespace fm.icelink {
    class ByteCollection {
        getTypeString(): string;
        private _buffer;
        constructor(buffer?: Uint8Array);
        count(): number;
        add(b: number): void;
        addRange(buffer: Uint8Array): void;
        removeRange(index: number, count: number): void;
        insertRange(index: number, buffer: Uint8Array): void;
        getRange(index: number, count: number): Uint8Array;
        get(index: number): number;
        toArray(): Uint8Array;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Base class for all logging provider implementations.
     </div>

    */
    abstract class LogProvider {
        getTypeString(): string;
        private fmicelinkLogProviderInit();
        /**<span id='method-fm.icelink.LogProvider-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.logProvider` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.LogProvider-doLog'>&nbsp;</span>**/
        /**
         <div>
         Logs a message at the specified log level.
         </div>

        @param {fm.icelink.LogEvent} logItem The log event containing the details.
        @return {void}
        */
        protected abstract doLog(logItem: fm.icelink.LogEvent): void;
        /**<span id='method-fm.icelink.LogProvider-generateLogLine'>&nbsp;</span>**/
        /**
         <div>
         Generates a default log line.
         </div>

        @param {fm.icelink.LogEvent} logItem The log event containing the details.
        @return {string}
        */
        protected generateLogLine(logItem: fm.icelink.LogEvent): string;
        /**<span id='method-fm.icelink.LogProvider-getFilter'>&nbsp;</span>**/
        /**
         <div>
         Gets a filter on the log provider.
         </div>


        @return {fm.icelink.IFunction2<string,fm.icelink.LogLevel,boolean>}
        */
        getFilter(): fm.icelink.IFunction2<string, fm.icelink.LogLevel, boolean>;
        /**<span id='method-fm.icelink.LogProvider-getLevel'>&nbsp;</span>**/
        /**
         <div>
         Gets the log level.
         </div>


        @return {fm.icelink.LogLevel}
        */
        getLevel(): fm.icelink.LogLevel;
        /**<span id='method-fm.icelink.LogProvider-getLogLevelString'>&nbsp;</span>**/
        /**
         <div>
         Converts a log-level to a 5-character string for
         consistently-spaced character sequences.
         </div>

        @param {fm.icelink.LogLevel} level The log level.
        @return {string} The log level as an upper-case string
         with right-side whitespace padding to ensure
         a 5-character sequence.
        */
        protected getLogLevelString(level: fm.icelink.LogLevel): string;
        /**<span id='method-fm.icelink.LogProvider-getPrefix'>&nbsp;</span>**/
        /**
         <div>
         Converts a log-level to a 5-character string for
         consistently-spaced character sequences.
         </div>

        @param {fm.icelink.LogLevel} level The log level.
        @param {boolean} includeTimestamp Whether to include a timestamp in the prefix.
        @return {string} The log level as an upper-case string
         with right-side whitespace padding to ensure
         a 5-character sequence.
        */
        protected getPrefix(level: fm.icelink.LogLevel, includeTimestamp: boolean): string;
        /**<span id='method-fm.icelink.LogProvider-getPrefixTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Converts a timestamp to a string formatted for
         rendering in a log message (yyyy/MM/dd-hh:mm:ss).
         </div>

        @param {fm.icelink.DateTime} timestamp The timestamp.
        @return {string} The timestamp as a formatted string.
        */
        protected getPrefixTimestamp(timestamp: fm.icelink.DateTime): string;
        /**<span id='method-fm.icelink.LogProvider-getProcessId'>&nbsp;</span>**/
        /**
         <div>
         Gets the current process id.
         </div>


        @return {number}
        */
        protected getProcessId(): number;
        /**<span id='method-fm.icelink.LogProvider-getProduct'>&nbsp;</span>**/
        /**
         <div>
         Returns the name of the current product.
         </div>


        @return {string}
        */
        protected getProduct(): string;
        /**<span id='method-fm.icelink.LogProvider-log'>&nbsp;</span>**/
        /**
         <div>
         Log a message.
         </div>

        @param {fm.icelink.LogEvent} logItem The log event containing the details.
        @return {void}
        */
        log(logItem: fm.icelink.LogEvent): void;
        /**<span id='method-fm.icelink.LogProvider-setFilter'>&nbsp;</span>**/
        /**
         <div>
         Sets a filter on the log provider.
         </div>


        @param {fm.icelink.IFunction2<string,fm.icelink.LogLevel,boolean>} value
        @return {void}
        */
        setFilter(value: fm.icelink.IFunction2<string, fm.icelink.LogLevel, boolean>): void;
        /**<span id='method-fm.icelink.LogProvider-setLevel'>&nbsp;</span>**/
        /**
         <div>
         Sets the log level.
         </div>


        @param {fm.icelink.LogLevel} value
        @return {void}
        */
        setLevel(value: fm.icelink.LogLevel): void;
    }
}
declare namespace fm.icelink {
    class ConsoleLogProvider extends LogProvider {
        getTypeString(): string;
        constructor(level?: LogLevel);
        writeLine(text: string): void;
        doLog(logItem: fm.icelink.LogEvent): void;
    }
}
declare namespace fm.icelink {
    class Convert {
        getTypeString(): string;
        static toInt32(s: string, base: number): number;
    }
}
declare namespace fm.icelink {
    class DateTime {
        getTypeString(): string;
        private _date;
        constructor(date: Date);
        constructor(ticks: number);
        constructor(year: number, month: number, day: number, hour: number, minute: number, second: number);
        static getNow(): DateTime;
        static getUtcNow(): DateTime;
        getDate(): Date;
        getTicks(): number;
        toUniversalTime(): DateTime;
        getYear(): number;
        getMonth(): number;
        getDay(): number;
        getHour(): number;
        getMinute(): number;
        getSecond(): number;
        getMillisecond(): number;
        addSeconds(seconds: number): DateTime;
        addMilliseconds(milliseconds: number): DateTime;
    }
}
declare namespace fm.icelink {
    class DateTimeFormatInfo {
        getTypeString(): string;
        static getInvariantInfo(): DateTimeFormatInfo;
    }
}
declare namespace fm.icelink {
    enum DateTimeStyles {
        AssumeUniversal = 1,
        AdjustToUniversal = 2,
    }
}
declare namespace fm.icelink {
    class DispatchQueue<T> {
        getTypeString(): string;
        private _count;
        private _action;
        constructor(action: IAction1<T>);
        getQueueCount(): number;
        enqueue(item: T): void;
    }
}
declare namespace fm.icelink {
    class DomLogProvider extends LogProvider {
        getTypeString(): string;
        private _container;
        constructor(container: HTMLElement, level?: LogLevel);
        writeLine(text: string): void;
        doLog(logItem: fm.icelink.LogEvent): void;
    }
}
declare namespace fm.icelink {
    class Encoding {
        getTypeString(): string;
        static getAscii(): Encoding;
        static getUtf8(): Encoding;
        getString(bytes: Uint8Array, index?: number, count?: number): string;
        getBytes(str: string): Uint8Array;
        getByteCount(str: string): number;
    }
}
declare class fmicelinkGlobalError extends Error {
}
declare namespace fm.icelink {
    class Exception extends fmicelinkGlobalError {
        constructor(message?: string);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Future base properties/methods.
     </div>

    */
    abstract class FutureBase<T> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.FutureBase-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception if rejected.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.FutureBase-getResult'>&nbsp;</span>**/
        /**
         <div>
         Gets the result if resolved.
         </div>


        @return {T}
        */
        getResult(): T;
        /**<span id='method-fm.icelink.FutureBase-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the current state.
         </div>


        @return {fm.icelink.FutureState}
        */
        getState(): fm.icelink.FutureState;
        /**<span id='method-fm.icelink.FutureBase-setException'>&nbsp;</span>**/
        /**
         <div>
         Sets the exception if rejected.
         </div>


        @param {fm.icelink.Exception} value
        @return {void}
        */
        protected setException(value: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.FutureBase-setResult'>&nbsp;</span>**/
        /**
         <div>
         Sets the result if resolved.
         </div>


        @param {T} value
        @return {void}
        */
        protected setResult(value: T): void;
        /**<span id='method-fm.icelink.FutureBase-setState'>&nbsp;</span>**/
        /**
         <div>
         Sets the current state.
         </div>


        @param {fm.icelink.FutureState} value
        @return {void}
        */
        protected setState(value: fm.icelink.FutureState): void;
    }
}
declare namespace fm.icelink {
    abstract class Future<T> extends FutureBase<T> {
        getTypeString(): string;
        abstract fail(rejectAction: IAction1<Exception>): Future<T>;
        abstract then<R>(resolve: IAction1<T> | IFunction1<T, Future<R>>): Future<R>;
        abstract then<R>(resolve: IAction1<T> | IFunction1<T, Future<R>>, reject: IAction1<Exception>): Future<R>;
    }
}
declare namespace fm.icelink {
    class Global {
        getTypeString(): string;
        static tryCast<T>(x: any, t: {
            new (): T;
        }): T;
        static tryCastArray(x: any): any[];
        static tryCastObject(x: any): Object;
        static tryCastString(x: any): string;
        static tryCastInt(x: any): number;
        static tryCastFloat(x: any): number;
        static equals(x1: any, x2: any): boolean;
    }
}
declare namespace fm.icelink {
    class Guid {
        getTypeString(): string;
        static empty: Guid;
        private _guidString;
        constructor();
        constructor(guidString: string);
        equals(guid: Guid): boolean;
        toString(): string;
        static newGuid(): Guid;
        static equals(guid1: Guid, guid2: Guid): boolean;
    }
}
declare namespace fm.icelink {
    interface Hash<K, V> {
        [key: string]: V;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A hash context.
     </div>

    */
    abstract class HashContextBase {
        getTypeString(): string;
        /**<span id='method-fm.icelink.HashContextBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.hashContextBase` class.
         </div>

        @param {fm.icelink.HashType} type The type.
        @return {}
        */
        constructor(type: fm.icelink.HashType);
        /**<span id='method-fm.icelink.HashContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the hash for a given type.
         </div>

        @param {fm.icelink.HashType} type The type.
        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        static compute(type: fm.icelink.HashType, input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.HashContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the hash for a given type.
         </div>

        @param {fm.icelink.HashType} type The type.
        @param {string} inputString The input string.
        @return {fm.icelink.DataBuffer}
        */
        static compute(type: fm.icelink.HashType, inputString: string): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.HashContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the hash.
         </div>

        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        compute(input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.HashContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the hash.
         </div>

        @param {string} inputString The input.
        @return {fm.icelink.DataBuffer}
        */
        compute(inputString: string): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.HashContextBase-destroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this instance.
         </div>


        @return {void}
        */
        destroy(): void;
        /**<span id='method-fm.icelink.HashContextBase-doCompute'>&nbsp;</span>**/
        /**
         <div>
         Computes the hash.
         </div>

        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        protected abstract doCompute(input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.HashContextBase-doDestroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this instance.
         </div>


        @return {void}
        */
        protected abstract doDestroy(): void;
        /**<span id='method-fm.icelink.HashContextBase-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.HashType}
        */
        getType(): fm.icelink.HashType;
    }
}
declare namespace fm.icelink {
    class HashContext extends HashContextBase {
        getTypeString(): string;
        constructor(type: HashType);
        doCompute(input: DataBuffer): DataBuffer;
        doDestroy(): void;
    }
}
declare namespace fm.icelink {
    class HashExtensions {
        getTypeString(): string;
        static getCount<T>(obj: Hash<string, T>): number;
        static getKeys<T>(obj: Hash<string, T>): string[];
        static getValues<T>(obj: Hash<string, T>): T[];
        static tryGetValue<T>(obj: Hash<any, T>, key: any, holder: Holder<T>): boolean;
        static containsKey<T>(obj: Hash<any, T>, key: any): boolean;
        static containsValue<T>(obj: Hash<string, T>, value: T): boolean;
        static add<T>(obj: Hash<string, T>, key: string, value: T): T;
        static remove<T>(obj: Hash<string, T>, key: string): boolean;
        static clear<T>(obj: Hash<string, T>): void;
    }
}
declare namespace fm.icelink {
    class Holder<T> {
        getTypeString(): string;
        private _value;
        constructor(value: T);
        getValue(): T;
        setValue(value: T): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Base class that defines methods for transferring content over HTTP.
     </div>

    */
    abstract class HttpTransfer {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpTransfer-addOnSendFinish'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised before an HTTP request is sent.
         </div>

        @param {fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>} value
        @return {void}
        */
        static addOnSendFinish(value: fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-addOnSendStart'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised before an HTTP request is sent.
         </div>

        @param {fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>} value
        @return {void}
        */
        static addOnSendStart(value: fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-addQueryToUrl'>&nbsp;</span>**/
        /**
         <div>
         Escapes and adds a query parameter as a key/value pair to a URL.
         </div>

        @param {string} url The URL with the query to which the key/value should be added.
        @param {string} key The key of the query parameter to add.
        @param {string} value The value of the query parameter to add.
        @return {string} The original URL with the query parameter added.
        */
        static addQueryToUrl(url: string, key: string, value: string): string;
        /**<span id='method-fm.icelink.HttpTransfer-addQueryToUrl'>&nbsp;</span>**/
        /**
         <div>
         Escapes and adds a query parameter as a key/empty-value pair to a URL.
         </div>

        @param {string} url The URL with the query to which the key/value should be added.
        @param {string} key The key of the query parameter to add.
        @return {string} The original URL with the query parameter added.
        */
        static addQueryToUrl(url: string, key: string): string;
        /**<span id='method-fm.icelink.HttpTransfer-getRandomWildcardCharacter'>&nbsp;</span>**/
        /**
         <div>
         Gets a random wildcard character.
         </div>

        @return {string} A random wildcard character.
        */
        static getRandomWildcardCharacter(): string;
        /**<span id='method-fm.icelink.HttpTransfer-getWildcardCharacters'>&nbsp;</span>**/
        /**
         <div>
         Gets the wildcard characters used
         to replace asterisks in ReplaceWildcards.
         </div>


        @return {string}
        */
        static getWildcardCharacters(): string;
        /**<span id='method-fm.icelink.HttpTransfer-removeOnSendFinish'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised before an HTTP request is sent.
         </div>

        @param {fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>} value
        @return {void}
        */
        static removeOnSendFinish(value: fm.icelink.IAction1<fm.icelink.HttpSendFinishArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-removeOnSendStart'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised before an HTTP request is sent.
         </div>

        @param {fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>} value
        @return {void}
        */
        static removeOnSendStart(value: fm.icelink.IAction1<fm.icelink.HttpSendStartArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-replaceWildcards'>&nbsp;</span>**/
        /**
         <div>
         Replaces asterisks in URLs with characters from
         WildcardCharacters.
         </div>

        @param {string} url The URL with asterisks.
        @return {string}
        */
        static replaceWildcards(url: string): string;
        /**<span id='method-fm.icelink.HttpTransfer-setWildcardCharacters'>&nbsp;</span>**/
        /**
         <div>
         Sets the wildcard characters used
         to replace asterisks in ReplaceWildcards.
         </div>


        @param {string} value
        @return {void}
        */
        static setWildcardCharacters(value: string): void;
        /**<span id='method-fm.icelink.HttpTransfer-send'>&nbsp;</span>**/
        /**
         <div>
         Sends a request synchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @return {fm.icelink.HttpResponseArgs} The resulting response.
        */
        send(requestArgs: fm.icelink.HttpRequestArgs): fm.icelink.HttpResponseArgs;
        /**<span id='method-fm.icelink.HttpTransfer-sendAsync'>&nbsp;</span>**/
        /**
         <div>
         Sends a request asynchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute with the resulting response.
        @return {void}
        */
        sendAsync(requestArgs: fm.icelink.HttpRequestArgs, callback: fm.icelink.IAction1<fm.icelink.HttpResponseArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-sendBinary'>&nbsp;</span>**/
        /**
         <div>
         Sends binary content synchronously using the specified arguments.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request arguments.
        @return {fm.icelink.HttpResponseArgs} The response arguments from the server.
        */
        abstract sendBinary(requestArgs: fm.icelink.HttpRequestArgs): fm.icelink.HttpResponseArgs;
        /**<span id='method-fm.icelink.HttpTransfer-sendBinaryAsync'>&nbsp;</span>**/
        /**
         <div>
         Sends binary content asynchronously using the specified arguments.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request arguments.
        @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute on success or failure.
        @return {void}
        */
        abstract sendBinaryAsync(requestArgs: fm.icelink.HttpRequestArgs, callback: fm.icelink.IAction1<fm.icelink.HttpResponseArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-sendText'>&nbsp;</span>**/
        /**
         <div>
         Sends text content synchronously using the specified arguments.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request arguments.
        @return {fm.icelink.HttpResponseArgs} The response arguments from the server.
        */
        abstract sendText(requestArgs: fm.icelink.HttpRequestArgs): fm.icelink.HttpResponseArgs;
        /**<span id='method-fm.icelink.HttpTransfer-sendTextAsync'>&nbsp;</span>**/
        /**
         <div>
         Sends text content asynchronously using the specified arguments.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request arguments.
        @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute on success or failure.
        @return {void}
        */
        abstract sendTextAsync(requestArgs: fm.icelink.HttpRequestArgs, callback: fm.icelink.IAction1<fm.icelink.HttpResponseArgs>): void;
        /**<span id='method-fm.icelink.HttpTransfer-shutdown'>&nbsp;</span>**/
        /**
         <div>
         Releases any resources and shuts down.
         </div>


        @return {void}
        */
        abstract shutdown(): void;
    }
}
declare let fmicelinkGlobalIsError: (obj: any) => boolean;
declare namespace fm.icelink {
    class Util {
        getTypeString(): string;
        private static _xdCache;
        private static _chars;
        private static _loadFunctions;
        private static _wildcard;
        private static _readyRun;
        private static _readyBound;
        private static _loaded;
        static isNumber(obj: any): boolean;
        static isString(obj: any): boolean;
        static isBoolean(obj: any): boolean;
        static isNull(obj: any): boolean;
        static isUndefined(obj: any): boolean;
        static isNullOrUndefined(obj: any): boolean;
        static isFunction(obj: any): boolean;
        static isArray(obj: any): boolean;
        static isUint8Array(obj: any): boolean;
        static isDate(obj: any): boolean;
        static isRegExp(obj: any): boolean;
        static isError(obj: any): boolean;
        static isObject(obj: any): boolean;
        static isObjectType(obj: any, typeString: string): boolean;
        static isArrayType(obj: any, typeString: string): boolean;
        static isPlainObject(obj: any): boolean;
        static canAttachProperties<T>(instance: T, obj: any): boolean;
        static attachProperties<T>(instance: T, obj: any): T;
        static isIE(): boolean;
        static isIE6(): boolean;
        static isIE7(): boolean;
        static isIE8(): boolean;
        static isIE9(): boolean;
        static isAndroid(): boolean;
        static isBlackBerry(): boolean;
        static isiOS(): boolean;
        static isOpera(): boolean;
        static isWindows(): boolean;
        static isMobile(): boolean;
        static hasActiveX(): boolean;
        static hasJava(): boolean;
        static getJavaVersion(): string;
        static isJavaWebStartInstalledActiveX(version: string): boolean;
        static isXD(url1: string, url2?: string): boolean;
        private static getHost(url?);
        private static compareHost(host1, host2);
        private static getCurrentHost();
        private static parseUrl(url);
        static absolutizeUrl(url?: string): string;
        static wildcard(str: string): string;
        static getWildcard(): string;
        static randomChar(str: string): string;
        static observe(element: EventTarget, event: string, handler: Function): void;
        static unobserve(element: EventTarget, event: string, handler: Function): void;
        static observeAttr(element: EventTarget, handler: Function): void;
        static construct<T>(func: Function, args: IArguments): T;
        static extend(dest: any, src: any): any;
        static addOnLoad(fn: Function): void;
        static ready(): void;
        static bindReady(): void;
        private static __initialized;
        static initialize(): void;
    }
}
declare namespace fm.icelink {
    interface HttpWebRequestSendOptions {
        sync: boolean;
        url: string;
        frameUrl: string;
        method: string;
        content: string;
        contentBinary: Uint8Array;
        headers: Hash<string, string>;
        timeout: number;
        robustResponse: boolean;
        onRequestCreated?: IFunction1<HttpWebRequest, HttpWebRequestSendOptions>;
        onResponseReceived?: IAction1<HttpWebResponse>;
        onSuccess?: IAction1<HttpWebRequestSuccessArgs>;
        onFailure?: IAction1<HttpWebRequestFailureArgs>;
    }
    interface HttpWebRequest {
    }
    interface HttpWebResponse {
    }
    interface HttpWebRequestSuccessArgs {
        content: string;
        contentBinary: Uint8Array;
        headers: Hash<string, string>;
        statusCode: number;
    }
    interface HttpWebRequestFailureArgs {
        message: string;
        local: boolean;
    }
    class HttpWebRequestTransfer extends HttpTransfer {
        getTypeString(): string;
        private static _corsFailCache;
        private static _corsSuccessCache;
        private static _pmFailCache;
        private static _pmSuccessCache;
        private static _disableCors;
        private static _disablePostMessage;
        private static _disableJsonp;
        private static _forceJsonp;
        constructor();
        static getPlatformCode: () => string;
        static setDisableCors(disableCors: boolean): void;
        static getDisableCors(): boolean;
        static setDisablePostMessage(disablePostMessage: boolean): void;
        static getDisablePostMessage(): boolean;
        static setDisableJsonp(disableJsonp: boolean): void;
        static getDisableJsonp(): boolean;
        static setForceJsonp(forceJsonp: boolean): void;
        static getForceJsonp(): boolean;
        static canCors(): boolean;
        static canPostMessage(): boolean;
        sendTextAsync(requestArgs: HttpRequestArgs, callback: IAction1<HttpResponseArgs>): void;
        sendText(requestArgs: HttpRequestArgs): HttpResponseArgs;
        sendBinaryAsync(requestArgs: HttpRequestArgs, callback: IAction1<HttpResponseArgs>): void;
        sendBinary(requestArgs: HttpRequestArgs): HttpResponseArgs;
        process(requestArgs: HttpRequestArgs, callback: IAction1<HttpResponseArgs>): HttpResponseArgs;
        sendInternal(fn: IAction1<Object>, cors: boolean, pm: boolean, requestArgs: HttpRequestArgs, callback: IAction1<HttpResponseArgs>): HttpResponseArgs;
        shutdown(): void;
    }
}
declare namespace fm.icelink {
    interface IAction0 {
        (): void;
    }
}
declare namespace fm.icelink {
    interface IAction1<T> {
        (p: T): void;
    }
}
declare namespace fm.icelink {
    interface IAction2<T1, T2> {
        (p1: T1, p2: T2): void;
    }
}
declare namespace fm.icelink {
    interface IAction3<T1, T2, T3> {
        (p1: T1, p2: T2, p3: T3): void;
    }
}
declare namespace fm.icelink {
    interface IAction4<T1, T2, T3, T4> {
        (p1: T1, p2: T2, p3: T3, p4: T4): void;
    }
}
declare namespace fm.icelink {
    interface IAction5<T1, T2, T3, T4, T5> {
        (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): void;
    }
}
declare namespace fm.icelink {
    interface IAction6<T1, T2, T3, T4, T5, T6> {
        (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): void;
    }
}
declare namespace fm.icelink {
    interface IFunction0<R> {
        (): R;
    }
}
declare namespace fm.icelink {
    interface IFunction1<T, R> {
        (p: T): R;
    }
}
declare namespace fm.icelink {
    interface IFunction2<T1, T2, R> {
        (p1: T1, p2: T2): R;
    }
}
declare namespace fm.icelink {
    interface IFunction3<T1, T2, T3, R> {
        (p1: T1, p2: T2, p3: T3): R;
    }
}
declare namespace fm.icelink {
    interface IFunction4<T1, T2, T3, T4, R> {
        (p1: T1, p2: T2, p3: T3, p4: T4): R;
    }
}
declare namespace fm.icelink {
    interface IFunction5<T1, T2, T3, T4, T5, R> {
        (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): R;
    }
}
declare namespace fm.icelink {
    interface IFunction6<T1, T2, T3, T4, T5, T6, R> {
        (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): R;
    }
}
declare namespace fm.icelink {
    class InternalConcurrentDictionary<TKey, TValue> {
        getTypeString(): string;
        private __dict;
        private __hashFunction;
        constructor(hashCallback: fm.icelink.IFunction1<TKey, string>);
        getIsEmpty(): boolean;
        getKeys(): TKey[];
        getValues(): TValue[];
        getCount(): number;
        containsKey(key: TKey): boolean;
        getOrAdd(key: TKey, valueFactory: fm.icelink.IFunction1<TKey, TValue>): TValue;
        addOrUpdate(key: TKey, addValue: TValue, updateValueFactory: fm.icelink.IFunction2<TKey, TValue, TValue>): TValue;
        tryAdd(key: TKey, value: TValue): boolean;
        tryGetValue(key: TKey, holder: fm.icelink.Holder<TValue>): boolean;
        tryRemove(key: TKey, value: fm.icelink.Holder<TValue>): boolean;
        tryUpdate(key: TKey, newValue: TValue, comparisonValue: TValue): boolean;
        clear(): void;
    }
}
declare namespace fm.icelink {
    class IntExtensions {
        getTypeString(): string;
        static toString(value: number, format?: string): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Provides Json serialize and deserialize methods for all browsers. It will also
     turn strings with form <code>"/Date(xxxxxxxxxx-xxxx)"</code> (Microsoft date serialization format) into actual dates.
     </div>
     */
    class Json {
        getTypeString(): string;
        static useMicrosoftDateFormat: boolean;
        private static _dateRegex;
        private static _reviver(key, value);
        private static _buildReviver(reviver);
        static deserialize(text: string, reviver?: (key: any, value: any) => any): any;
        static serialize(value: any): string;
        static serialize(value: any, replacer: (key: string, value: any) => any): string;
        static serialize(value: any, replacer: any[]): string;
        static serialize(value: any, replacer: (key: string, value: any) => any, space: string | number): string;
        static serialize(value: any, replacer: any[], space: string | number): string;
    }
}
interface Date {
    toJSONFM(key?: any): string;
}
declare namespace fm.icelink {
    interface JsonpSendOptions extends HttpWebRequestSendOptions {
        canSegmentJsonArray: boolean;
        callbackParameterName: string;
        contentParameterName: string;
        methodParameterName: string;
        headersParameterName: string;
        statusCodeParameterName: string;
        cacheBusterParameterName: string;
        useFrame: boolean;
    }
    class Jsonp {
        getTypeString(): string;
        static maxUrlLength: number;
        private static _scriptFrame;
        private static _scriptFrameLoaded;
        private static _callbackCount;
        private static _cb;
        private static _pastScriptFrames;
        private static _scriptFrameDestroyer;
        static getNextCallback(options: JsonpSendOptions): string;
        private static failureHandler(options, callbackName, message);
        static send(options: JsonpSendOptions): void;
        private static cleanup(callbackName, useFrame);
        private static callbackExists(callbackName);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A message authentication code (MAC) context.
     </div>

    */
    abstract class MacContextBase {
        getTypeString(): string;
        /**<span id='method-fm.icelink.MacContextBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.macContextBase` class.
         </div>

        @param {fm.icelink.MacType} type The type.
        @return {}
        */
        constructor(type: fm.icelink.MacType);
        /**<span id='method-fm.icelink.MacContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the message authentication code (MAC) for a given type.
         </div>

        @param {fm.icelink.MacType} type The type.
        @param {fm.icelink.DataBuffer} key The key.
        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        static compute(type: fm.icelink.MacType, key: fm.icelink.DataBuffer, input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.MacContextBase-compute'>&nbsp;</span>**/
        /**
         <div>
         Computes the message authentication code (MAC).
         </div>

        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        compute(input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.MacContextBase-destroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this instance.
         </div>


        @return {void}
        */
        destroy(): void;
        /**<span id='method-fm.icelink.MacContextBase-doCompute'>&nbsp;</span>**/
        /**
         <div>
         Computes the message authentication code (MAC).
         </div>

        @param {fm.icelink.DataBuffer} input The input.
        @return {fm.icelink.DataBuffer}
        */
        protected abstract doCompute(input: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.MacContextBase-doDestroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this instance.
         </div>


        @return {void}
        */
        protected abstract doDestroy(): void;
        /**<span id='method-fm.icelink.MacContextBase-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.MacType}
        */
        getType(): fm.icelink.MacType;
    }
}
declare namespace fm.icelink {
    class MacContext extends MacContextBase {
        getTypeString(): string;
        private _key;
        constructor(type: MacType, key: DataBuffer);
        doCompute(input: DataBuffer): DataBuffer;
        doDestroy(): void;
    }
}
declare namespace fm.icelink {
    class ManagedStopwatch {
        getTypeString(): string;
        static dispatch(action: IAction0): void;
        private startTime;
        private stopTime;
        static getTimestamp(): number;
        getElapsedTicks(): number;
        getElapsedMilliseconds(): number;
        start(): void;
        stop(): void;
        restart(): void;
    }
}
declare namespace fm.icelink {
    class ManagedThread {
        getTypeString(): string;
        static getCurrentThreadId(): number;
        static dispatch(action: IAction0): void;
    }
}
declare namespace fm.icelink {
    class MathAssistant {
        getTypeString(): string;
        static getPi(): number;
        static getE(): number;
        static abs(val: number): number;
        static acos(val: number): number;
        static asin(val: number): number;
        static atan(val: number): number;
        static atan2(y: number, x: number): number;
        static ceil(val: number): number;
        static cos(val: number): number;
        static cosh(val: number): number;
        static exp(val: number): number;
        static floor(val: number): number;
        static log(val: number): number;
        static log10(val: number): number;
        static max(val1: number, val2: number): number;
        static min(val1: number, val2: number): number;
        static pow(x: number, y: number): number;
        static round(value: number): number;
        static sin(val: number): number;
        static sinh(val: number): number;
        static sqrt(val: number): number;
        static tan(val: number): number;
        static tanh(val: number): number;
    }
}
declare namespace fm.icelink {
    class NameValueCollection {
        getTypeString(): string;
        private _value;
        constructor(value?: Hash<string, string>);
        source: () => Hash<string, string>;
        get(name: string): string;
        set(name: string, value: string): void;
        getCount(): number;
        toHash(): Hash<string, string>;
        getKeys(): string[];
        getAllKeys(): string[];
    }
}
declare namespace fm.icelink {
    class ObjectExtensions {
        getTypeString(): string;
        static getType(obj: any): Type;
        static getHashCode(obj: any): number;
    }
}
declare namespace fm.icelink {
    class ParseAssistant {
        getTypeString(): string;
        static parseByteValue(s: string): number;
        static parseShortValue(s: string): number;
        static parseIntegerValue(s: string): number;
        static parseLongValue(s: string): number;
        static parseFloatValue(s: string): number;
        static parseDoubleValue(s: string): number;
        static parseDecimalValue(s: string): number;
        static parseBooleanValue(s: string): boolean;
        static parseGuidValue(s: string): Guid;
        static tryParseByteValue(s: string, h: Holder<number>): boolean;
        static tryParseShortValue(s: string, h: Holder<number>): boolean;
        static tryParseIntegerValue(s: string, h: Holder<number>): boolean;
        static tryParseLongValue(s: string, h: Holder<number>): boolean;
        static tryParseFloatValue(s: string, h: Holder<number>): boolean;
        static tryParseDoubleValue(s: string, h: Holder<number>): boolean;
        static tryParseDecimalValue(s: string, h: Holder<number>): boolean;
        static tryParseBooleanValue(s: string, h: Holder<boolean>): boolean;
        static tryParseGuidValue(s: string, h: Holder<Guid>): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Platform-specific methods.
     </div>

    */
    interface IPlatform {
        getArchitecture(): fm.icelink.Architecture;
        getDirectorySeparator(): string;
        getIsLittleEndian(): boolean;
        getIsMobile(): boolean;
        getOperatingSystem(): fm.icelink.OperatingSystem;
        getProcessId(): number;
        getSourceLanguage(): fm.icelink.SourceLanguage;
        setIsMobile(value: boolean): void;
    }
}
declare namespace fm.icelink {
    class Platform implements IPlatform {
        private static instance;
        static getInstance(): IPlatform;
        constructor();
        private littleEndianChecked;
        private isLittleEndian;
        private isMobile;
        getIsMobile(): boolean;
        setIsMobile(isMobile: boolean): void;
        getIsLittleEndian(): boolean;
        getOperatingSystem(): OperatingSystem;
        getArchitecture(): Architecture;
        getSourceLanguage(): SourceLanguage;
        getDirectorySeparator(): string;
        getProcessId(): number;
    }
}
declare namespace fm.icelink {
    interface XhrSendOptions extends HttpWebRequestSendOptions {
        abortOnUnload?: boolean;
        cacheBusterParameterName?: string;
    }
    class Xhr {
        getTypeString(): string;
        private static _count;
        private static _current;
        private static _disableBinary;
        private static _defaultWithCredentials;
        static setDisableBinary(disableBinary: boolean): void;
        static getDisableBinary(): boolean;
        static setDefaultWithCredentials(defaultWithCredentials: boolean): void;
        static getDefaultWithCredentials(): boolean;
        private static failureHandler(options, message);
        private static successHandler(options, x);
        private static handler(options, x);
        static send(options: XhrSendOptions): boolean;
        private static __initialized;
        static initialize(): void;
    }
}
declare namespace fm.icelink {
    interface PostMessageSendOptions extends XhrSendOptions {
        id: number;
    }
    class PostMessage {
        getTypeString(): string;
        private static _cache;
        private static _optionsCounter;
        private static _optionsCache;
        private static getOrigin(url);
        private static createFrame(options, callback);
        static send(options: PostMessageSendOptions): void;
        private static listen(options, frame);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Promise base properties/methods.
     </div><typeparam name="T">The type of the result.</typeparam>

    */
    abstract class PromiseBase<T> extends fm.icelink.Future<T> implements fm.icelink.IPromise {
        getTypeString(): string;
        /**<span id='method-fm.icelink.PromiseBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.promiseBase` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.PromiseBase-all'>&nbsp;</span>**/
        /**
         <div>
         Returns a promise that resolves when all passed in promises resolve.
         </div>

        @param {fm.icelink.Future<R>[]} promises The promises to check.
        @return {fm.icelink.Future<R>}
        */
        static all<R extends Object>(promises: fm.icelink.Future<R>[]): fm.icelink.Future<R>;
        /**<span id='method-fm.icelink.PromiseBase-rejectNow'>&nbsp;</span>**/
        /**
         <div>
         Creates a promise and rejects it immediately.
         </div>

        @param {fm.icelink.Exception} ex The exception.
        @return {fm.icelink.Future<R>}
        */
        static rejectNow<R extends Object>(ex: fm.icelink.Exception): fm.icelink.Future<R>;
        /**<span id='method-fm.icelink.PromiseBase-resolveNow'>&nbsp;</span>**/
        /**
         <div>
         Creates a promise and resolves it immediately
         using a null result value.
         </div>


        @return {fm.icelink.Future<Object>}
        */
        static resolveNow(): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.PromiseBase-resolveNow'>&nbsp;</span>**/
        /**
         <div>
         Creates a promise and resolves it immediately
         using the given result value.
         </div>

        @param {R} result The result.
        @return {fm.icelink.Future<R>}
        */
        static resolveNow<R extends Object>(result: R): fm.icelink.Future<R>;
        /**<span id='method-fm.icelink.PromiseBase-wrapPromise'>&nbsp;</span>**/
        /**
         <div>
         Creates a promise and resolves it using the result from a
         callback function, or rejects it if an exception is thrown.
         </div>

        @param {fm.icelink.IFunction0<fm.icelink.Future<R>>} callback The callback function.
        @return {fm.icelink.Future<R>}
        */
        static wrapPromise<R extends Object>(callback: fm.icelink.IFunction0<fm.icelink.Future<R>>): fm.icelink.Future<R>;
        /**<span id='method-fm.icelink.PromiseBase-doAll'>&nbsp;</span>**/
        /**
         <div>
         Internal DoAll.
         </div>


        @param {fm.icelink.Future<R>[]} promises
        @param {fm.icelink.AtomicInteger} counter
        @return {void}
        */
        protected doAll<R extends Object>(promises: fm.icelink.Future<R>[], counter: fm.icelink.AtomicInteger): void;
        /**<span id='method-fm.icelink.PromiseBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier of this promise.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.PromiseBase-process'>&nbsp;</span>**/
        /**
         <div>
         Processes the specified promise.
         </div>

        @param {fm.icelink.IPromise} promise The promise.
        @param {fm.icelink.IAction1<T>} resolve The resolve.
        @param {fm.icelink.IAction1<fm.icelink.Exception>} reject The reject.
        @return {void}
        */
        protected process(promise: fm.icelink.IPromise, resolve: fm.icelink.IAction1<T>, reject: fm.icelink.IAction1<fm.icelink.Exception>): void;
        /**<span id='method-fm.icelink.PromiseBase-reject'>&nbsp;</span>**/
        /**
         <div>
         Rejects the promise.
         </div>

        @param {fm.icelink.Exception} exception The exception.
        @return {boolean}
        */
        reject(exception: fm.icelink.Exception): boolean;
        /**<span id='method-fm.icelink.PromiseBase-rejectAsync'>&nbsp;</span>**/
        /**
         <div>
         Rejects the promise asynchronously.
         </div>

        @param {fm.icelink.Exception} exception The exception.
        @return {fm.icelink.Future<Object>}
        */
        rejectAsync(exception: fm.icelink.Exception): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.PromiseBase-resolve'>&nbsp;</span>**/
        /**
         <div>
         Resolves the promise.
         </div>

        @param {T} result The result.
        @return {boolean}
        */
        resolve(result: T): boolean;
        /**<span id='method-fm.icelink.PromiseBase-resolveAsync'>&nbsp;</span>**/
        /**
         <div>
         Resolves the promise asynchronously.
         </div>

        @param {T} result The result.
        @return {fm.icelink.Future<Object>}
        */
        resolveAsync(result: T): fm.icelink.Future<Object>;
    }
}
declare namespace fm.icelink {
    class Promise<T> extends PromiseBase<T> {
        getTypeString(): string;
        then<R>(resolve: IFunction1<T, R | Future<R>>, reject?: IAction1<Exception>): Future<R>;
        fail(reject?: IAction1<Exception>): Future<T>;
        static wrap(callbackAction: IAction0): Future<Object>;
        static wrap<R extends Object>(callbackFunction: IFunction0<R>): Future<R>;
        static wrapAsync(callbackAction: IAction0): Future<Object>;
        static wrapAsync<R extends Object>(callbackFunction: IFunction0<R>): Future<R>;
    }
}
declare namespace fm.icelink {
    class Randomizer {
        getTypeString(): string;
        private static _randomCharset;
        next(): number;
        next(maxValue: number): number;
        next(minValue: number, maxValue: number): number;
        nextDouble(): number;
        nextBytes(buffer: Uint8Array): void;
        randomString(size: number): string;
    }
}
declare namespace fm.icelink {
    class Regex {
        getTypeString(): string;
        private pattern;
        constructor(pattern: string);
        static isMatch(input: string, pattern: string): boolean;
        isMatch(input: string): boolean;
    }
}
declare namespace fm.icelink {
    class Sha256 {
        digestLength: number;
        blockSize: number;
        private state;
        private temp;
        private buffer;
        private bufferLength;
        private bytesHashed;
        finished: boolean;
        constructor();
        reset(): this;
        clean(): void;
        update(data: Uint8Array, dataLength?: number): this;
        finish(out: Uint8Array): this;
        digest(): Uint8Array;
        _saveState(out: Uint32Array): void;
        _restoreState(from: Uint32Array, bytesHashed: number): void;
    }
    class HmacSha256 {
        private inner;
        private outer;
        blockSize: number;
        digestLength: number;
        private istate;
        private ostate;
        constructor(key: Uint8Array);
        reset(): this;
        clean(): void;
        update(data: Uint8Array): this;
        finish(out: Uint8Array): this;
        digest(): Uint8Array;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    class Stack<T> {
        getTypeString(): string;
        private _list;
        private _depth;
        constructor(depth?: number);
        push(o: T): void;
        pop(): T;
        peek(): T;
        getCount(): number;
    }
}
declare namespace fm.icelink {
    class StringBuilder {
        getTypeString(): string;
        private _value;
        constructor(value?: string);
        append(s: string, startIndex?: number, count?: number): StringBuilder;
        toString(): string;
        getLength(): number;
        remove(startIndex: number, length: number): StringBuilder;
    }
}
declare namespace fm.icelink {
    enum StringComparison {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }
}
declare namespace fm.icelink {
    class StringExtensions {
        getTypeString(): string;
        static empty: string;
        static toString(s: string): string;
        static trim(s: string): string;
        static trimEnd(s: string, chars: number[]): string;
        static trimStart(s: string, chars: number[]): string;
        static replace(s: string, search: string, replace: string): string;
        static concat(...strings: any[]): string;
        static contains(str: string, s: string): boolean;
        static join(separator: string, ...array: any[]): string;
        static split(s: string, chars: number[]): string[];
        static isNullOrEmpty(s: string): boolean;
        static isEqual(str: string, s: string, stringComparison?: StringComparison): boolean;
        static indexOf(str: string, s: string, stringComparison?: StringComparison): number;
        static lastIndexOf(str: string, s: string, stringComparison?: StringComparison): number;
        static startsWith(str: string, s: string, stringComparison?: StringComparison): boolean;
        static endsWith(str: string, s: string, stringComparison?: StringComparison): boolean;
        static compareTo(s1: string, s2: string): number;
        static format(format: string, ...args: any[]): string;
        static toLower(str: string): string;
        static toUpper(str: string): string;
        static getChars(str: string): string[];
        static substring(str: string, startIndex: number, length: number): string;
        static getHashCode(str: string): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A thread-safe class for running timeouts on asynchronous methods.
     </div>

    */
    interface ITimeoutTimer {
        start(timeout: number): void;
        stop(): boolean;
    }
}
declare namespace fm.icelink {
    class TimeoutTimer implements ITimeoutTimer {
        getTypeString(): string;
        private _timer;
        private _callback;
        private _state;
        private _currentTimeout;
        constructor(callback: IAction1<any>, state: any);
        start(timeout: number): void;
        stop(): boolean;
    }
}
declare namespace fm.icelink {
    class TimeSpan {
        private _hours;
        private _minutes;
        private _seconds;
        private _milliseconds;
        constructor(ticks: number);
        constructor(hours: number, minutes: number, seconds: number);
        getTotalSeconds(): number;
        getTotalMilliseconds(): number;
    }
}
declare namespace fm.icelink {
    class Type {
        getTypeString(): string;
        private _typeString;
        constructor(typeString: string);
        getFullName(): string;
        getBaseType(): Type;
    }
}
declare namespace fm.icelink {
    class Uri {
        getTypeString(): string;
        private _uriString;
        constructor(uriString: string);
        toString(): string;
        static escapeDataString(s: string): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     WebSocket base properties/methods.
     </div>

    */
    class WebSocketBase {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketBase-raiseCloseComplete'>&nbsp;</span>**/
        /**
         <div>
         Raises the close complete callback.
         </div>

        @param {fm.icelink.WebSocketCloseArgs} closeArgs The close arguments.
        @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
        @param {string} reason The reason.
        @return {void}
        */
        protected raiseCloseComplete(closeArgs: fm.icelink.WebSocketCloseArgs, statusCode: fm.icelink.WebSocketStatusCode, reason: string): void;
        /**<span id='method-fm.icelink.WebSocketBase-raiseOpenFailure'>&nbsp;</span>**/
        /**
         <div>
         Raises the open failure callback.
         </div>

        @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
        @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
        @param {fm.icelink.Exception} exception The exception.
        @return {void}
        */
        protected raiseOpenFailure(openArgs: fm.icelink.WebSocketOpenArgs, statusCode: fm.icelink.WebSocketStatusCode, exception: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.WebSocketBase-raiseOpenSuccess'>&nbsp;</span>**/
        /**
         <div>
         Raises the open success callback.
         </div>

        @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
        @return {void}
        */
        protected raiseOpenSuccess(openArgs: fm.icelink.WebSocketOpenArgs): void;
        /**<span id='method-fm.icelink.WebSocketBase-raiseReceive'>&nbsp;</span>**/
        /**
         <div>
         Raises the receive callback.
         </div>

        @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
        @param {string} textMessage The text message.
        @param {Uint8Array} binaryMessage The binary message.
        @return {void}
        */
        protected raiseReceive(openArgs: fm.icelink.WebSocketOpenArgs, textMessage: string, binaryMessage: Uint8Array): void;
        /**<span id='method-fm.icelink.WebSocketBase-raiseStreamFailure'>&nbsp;</span>**/
        /**
         <div>
         Raises the stream failure callback.
         </div>

        @param {fm.icelink.WebSocketOpenArgs} openArgs The open arguments.
        @param {fm.icelink.WebSocketStatusCode} statusCode The status code.
        @param {fm.icelink.Exception} exception The exception.
        @return {void}
        */
        protected raiseStreamFailure(openArgs: fm.icelink.WebSocketOpenArgs, statusCode: fm.icelink.WebSocketStatusCode, exception: fm.icelink.Exception): void;
    }
}
declare namespace fm.icelink {
    class WebSocket extends WebSocketBase implements IWebSocket {
        getTypeString(): string;
        private static _disableBinary;
        private _requestUrl;
        private _webSocket;
        private _protocol;
        private _onRequestCreated;
        private _onResponseReceived;
        private _opening;
        private _closing;
        private _aborting;
        private _openArgs;
        private _sendArgs;
        private _timer;
        private _raisedStreamFailure;
        private _raisedOpenFailure;
        static getExists(): boolean;
        static setDisableBinary(disableBinary: boolean): void;
        static getDisableBinary(): boolean;
        getSecure(): boolean;
        constructor(requestUrl: string, protocol?: string);
        getBufferedAmount(): number;
        getIsOpen(): boolean;
        open(args: WebSocketOpenArgs): void;
        private onOpen;
        private onError;
        private onClose;
        private processOnClose(code, reason);
        private onMessage;
        send(args: WebSocketSendArgs): void;
        close(): void;
        close(args: WebSocketCloseArgs): void;
        private raiseOnRequestCreated();
        private raiseOnResponseReceived();
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Base definition for classes that allow serialization to/from JSON.
     </div>

    */
    abstract class Serializable {
        getTypeString(): string;
        private fmicelinkSerializableInit();
        /**<span id='method-fm.icelink.Serializable-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.serializable` class.
         </div>


        @return {}
        */
        constructor();
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Supplies class instances with a key-value
     mapping to support dynamic property storage.
     </div>

    */
    abstract class Dynamic extends fm.icelink.Serializable {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Dynamic-getDynamicProperties'>&nbsp;</span>**/
        /**
         <div>
         Gets the dynamic properties on this instance.
         </div>


        @return {fm.icelink.Hash<string,Object>}
        */
        getDynamicProperties(): fm.icelink.Hash<string, Object>;
        /**<span id='method-fm.icelink.Dynamic-getDynamicValue'>&nbsp;</span>**/
        /**
         <div>
         Gets a property value from the local cache.
         </div>

        @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
        @return {Object} The stored value, if found; otherwise null.
        */
        getDynamicValue(key: string): Object;
        /**<span id='method-fm.icelink.Dynamic-setDynamicValue'>&nbsp;</span>**/
        /**
         <div>
         Sets a property value in the local cache.
         </div>

        @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
        @param {Object} value The property value. This can be any object that needs to be stored for future use.
        @return {void}
        */
        setDynamicValue(key: string, value: Object): void;
        /**<span id='method-fm.icelink.Dynamic-unsetDynamicValue'>&nbsp;</span>**/
        /**
         <div>
         Unsets a property value in the local cache.
         </div>

        @param {string} key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
        @return {boolean} true if the value was removed; otherwise, false.
        */
        unsetDynamicValue(key: string): boolean;
    }
}
declare namespace fm.icelink {
    interface IExternalStream extends IStream, IExternal<IInternalStream> {
    }
    interface IInternalStream extends IStream, IInternal<IExternalStream> {
    }
    abstract class Stream extends Dynamic implements IExternalStream {
        getTypeString(): string;
        getState(): StreamState;
        addOnStateChange(value: IAction0): void;
        removeOnStateChange(value: IAction0): void;
        changeDirection(newDirection: StreamDirection): Error;
        getDirection(): StreamDirection;
        getLocalReceive(): boolean;
        setLocalReceive(receiveEnabled: boolean): void;
        getLocalSend(): boolean;
        setLocalSend(sendEnabled: boolean): void;
        getRemoteReceive(): boolean;
        getRemoteSend(): boolean;
        getRemoteDirection(): StreamDirection;
        getId(): string;
        getLabel(): string;
        getLocalDirection(): StreamDirection;
        getTag(): string;
        getType(): StreamType;
        setLocalDirection(value: StreamDirection): void;
        setTag(value: string): void;
        addOnDirectionChange(value: IAction0): void;
        removeOnDirectionChange(value: IAction0): void;
    }
}
declare namespace fm.icelink {
    interface IExternalMediaStream extends IMediaStream, IExternal<IInternalMediaStream> {
    }
    interface IInternalMediaStream extends IMediaStream, IInternal<IExternalMediaStream> {
    }
    abstract class MediaStream<TTrack> extends Stream implements IMediaStream, IExternalMediaStream {
        getTypeString(): string;
        getLocalTrack(): TTrack;
        getRemoteTrack(): TTrack;
        getLocalBandwidth(): number;
        getMuted(): boolean;
        getRemoteBandwidth(): number;
        setLocalBandwidth(value: number): void;
        setMuted(value: boolean): void;
        constructor(localTrack: TTrack, remoteTrack: TTrack);
    }
}
declare namespace fm.icelink {
    interface IExternalAudioStream extends IAudioStream, IExternal<IInternalAudioStream> {
    }
    interface IInternalAudioStream extends IAudioStream, IInternal<IExternalAudioStream> {
    }
    class AudioStream extends MediaStream<AudioTrack> implements IAudioStream, IExternalAudioStream {
        getTypeString(): string;
        getLocalMedia(): LocalMedia;
        getRemoteMedia(): RemoteMedia;
        constructor(localTrack: AudioTrack);
        constructor(localTrack: AudioTrack, remoteTrack: AudioTrack);
        constructor(localMedia: LocalMedia);
        constructor(localMedia: LocalMedia, remoteMedia: RemoteMedia);
        constructor(remoteMedia: RemoteMedia);
        addOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        insertDtmfTone(dtmfTone: dtmf.Tone): boolean;
        insertDtmfTones(dtmfTones: dtmf.Tone[]): boolean;
        removeOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
    }
}
declare namespace fm.icelink {
    interface IExternalMediaTrack extends IMediaTrack, IExternal<IInternalMediaTrack> {
    }
    interface IInternalMediaTrack extends IMediaTrack, IInternal<IExternalMediaTrack> {
    }
    abstract class MediaTrack extends Dynamic implements IMediaTrack, IExternalMediaTrack {
        getTypeString(): string;
        getMedia(): Media;
        constructor(media: Media);
        addOnStarted(value: IAction0): void;
        addOnStopped(value: IAction0): void;
        addOnDestroyed(value: IAction0): void;
        removeOnStarted(value: IAction0): void;
        removeOnStopped(value: IAction0): void;
        removeOnDestroyed(value: IAction0): void;
        changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        changeSourceInput(sourceInput: SourceInput): Future<Object>;
        destroy(): boolean;
        getMuted(): boolean;
        getSinkOutput(): SinkOutput;
        getSinkOutputs(): Future<SinkOutput[]>;
        getSourceInput(): SourceInput;
        getSourceInputs(): Future<SourceInput[]>;
        setMuted(value: boolean): void;
        setSinkOutput(value: SinkOutput): void;
        setSourceInput(value: SourceInput): void;
    }
}
declare namespace fm.icelink {
    interface IExternalAudioTrack extends IAudioTrack, IExternal<IInternalAudioTrack> {
    }
    interface IInternalAudioTrack extends IAudioTrack, IInternal<IExternalAudioTrack> {
    }
    class AudioTrack extends MediaTrack implements IAudioTrack, IExternalAudioTrack {
        getTypeString(): string;
        constructor(media: Media, internalMedia?: IInternalMedia);
        addOnLevel(value: IAction1<number>): void;
        getGain(): number;
        getVolume(): number;
        removeOnLevel(value: IAction1<number>): void;
        setGain(value: number): void;
        setVolume(value: number): void;
    }
}
declare namespace fm.icelink {
    interface IExternalConnection extends IConnection<IExternalConnection, IExternalStream, IExternalAudioStream, IExternalVideoStream, IExternalDataStream>, IExternal<IInternalConnection> {
    }
    interface IInternalConnection extends IConnection<IInternalConnection, IInternalStream, IInternalAudioStream, IInternalVideoStream, IInternalDataStream>, IInternal<IExternalConnection> {
    }
    class Connection extends Dynamic implements IConnection<Connection, Stream, AudioStream, VideoStream, DataStream>, IExternalConnection {
        getTypeString(): string;
        private _onExternalIdChangeValues;
        constructor(stream: Stream);
        constructor(streams: Stream[]);
        addIceServer(iceServer: IceServer): void;
        addIceServers(iceServers: IceServer[]): void;
        addOnGatheringStateChange(value: IAction1<Connection>): void;
        addOnIceConnectionStateChange(value: IAction1<Connection>): void;
        addOnLocalCandidate(value: IAction2<Connection, Candidate>): void;
        addOnLocalDescription(value: IAction2<Connection, SessionDescription>): void;
        addOnRemoteCandidate(value: IAction2<Connection, Candidate>): void;
        addOnRemoteDescription(value: IAction2<Connection, SessionDescription>): void;
        addOnSignallingStateChange(value: IAction1<Connection>): void;
        addOnStateChange(value: IAction1<Connection>): void;
        addRemoteCandidate(remoteCandidate: Candidate): Future<Candidate>;
        close(): void;
        createAnswer(): Future<SessionDescription>;
        createOffer(): Future<SessionDescription>;
        getDeadStreamTimeout(): number;
        getError(): Error;
        getExternalId(): string;
        getIceGatherPolicy(): IceGatherPolicy;
        getIceServer(): IceServer;
        getGatheringState(): IceGatheringState;
        getIceConnectionState(): IceConnectionState;
        getIceServers(): IceServer[];
        getId(): string;
        getLocalDescription(): SessionDescription;
        getRemoteDescription(): SessionDescription;
        getSignallingState(): SignallingState;
        getState(): ConnectionState;
        getStats(): Future<ConnectionStats>;
        getStreams(): Stream[];
        getTieBreaker(): string;
        getTimeout(): number;
        getTrickleIcePolicy(): TrickleIcePolicy;
        getHasAudio(): boolean;
        getHasVideo(): boolean;
        getHasData(): boolean;
        getAudioStream(): AudioStream;
        getAudioStreams(): AudioStream[];
        getVideoStream(): VideoStream;
        getVideoStreams(): VideoStream[];
        getDataStream(): DataStream;
        getDataStreams(): DataStream[];
        removeIceServer(iceServer: IceServer): void;
        removeIceServers(iceServers: IceServer[]): void;
        removeOnGatheringStateChange(value: IAction1<Connection>): void;
        removeOnIceConnectionStateChange(value: IAction1<Connection>): void;
        removeOnLocalCandidate(value: IAction2<Connection, Candidate>): void;
        removeOnLocalDescription(value: IAction2<Connection, SessionDescription>): void;
        removeOnRemoteCandidate(value: IAction2<Connection, Candidate>): void;
        removeOnRemoteDescription(value: IAction2<Connection, SessionDescription>): void;
        removeOnSignallingStateChange(value: IAction1<Connection>): void;
        removeOnStateChange(value: IAction1<Connection>): void;
        setDeadStreamTimeout(value: number): void;
        setExternalId(value: string): void;
        addOnExternalIdChange(value: IAction2<string, string>): void;
        removeOnExternalIdChange(value: IAction2<string, string>): void;
        setIceGatherPolicy(value: IceGatherPolicy): void;
        setIceServer(value: IceServer): void;
        setIceServers(value: IceServer[]): void;
        setLocalDescription(localDescription: SessionDescription): Future<SessionDescription>;
        setRemoteDescription(remoteDescription: SessionDescription): Future<SessionDescription>;
        setTimeout(value: number): void;
        setTrickleIcePolicy(value: TrickleIcePolicy): void;
        setTieBreaker(value: string): void;
        getRemoteMedia(): RemoteMedia;
        private externalsToInternals(externals);
        private externalToInternal(external);
        private internalsToExternals(internals);
        private internalToExternal(internal);
    }
}
declare namespace fm.icelink {
    interface IExternalDataChannel extends IDataChannel<IExternalDataChannel>, IExternal<IInternalDataChannel> {
    }
    interface IInternalDataChannel extends IDataChannel<IInternalDataChannel>, IInternal<IExternalDataChannel> {
    }
    class DataChannel extends Dynamic implements IDataChannel<DataChannel>, IExternalDataChannel {
        getTypeString(): string;
        constructor(label: string, ordered?: boolean, subprotocol?: string);
        setOnReceive(value: IAction1<DataChannelReceiveArgs>): void;
        getSubprotocol(): string;
        getOnReceive(): IAction1<DataChannelReceiveArgs>;
        sendDataString(dataString: string): fm.icelink.Future<Object>;
        sendDataBytes(dataBytes: DataBuffer): fm.icelink.Future<Object>;
        getState(): DataChannelState;
        getLabel(): string;
        getId(): string;
        getOrdered(): boolean;
        addOnStateChange(value: IAction1<DataChannel>): void;
        removeOnStateChange(value: IAction1<DataChannel>): void;
    }
}
declare namespace fm.icelink {
    interface IExternalDataStream extends IDataStream<IExternalDataChannel>, IExternal<IInternalDataStream> {
    }
    interface IInternalDataStream extends IDataStream<IInternalDataChannel>, IInternal<IExternalDataStream> {
    }
    class DataStream extends Stream implements IDataStream<DataChannel>, IExternalDataStream {
        getTypeString(): string;
        constructor(channel: DataChannel);
        constructor(channels: DataChannel[]);
        getChannels(): DataChannel[];
        private externalToInternal(external);
        private externalsToInternals(externals);
        private internalToExternal(internal);
        private internalsToExternals(internals);
    }
}
declare namespace fm.icelink {
    class DomAudioSink extends Dynamic {
        getTypeString(): string;
        constructor(track: AudioTrack);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A layout preset.
     </div>

    */
    class LayoutPreset extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkLayoutPresetInit();
        /**<span id='method-fm.icelink.LayoutPreset-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.layoutPreset` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.LayoutPreset-getFacetime'>&nbsp;</span>**/
        /**
         <div>
         Gets a Facetime-style layout preset.
         </div>


        @return {fm.icelink.LayoutPreset}
        */
        static getFacetime(): fm.icelink.LayoutPreset;
        /**<span id='method-fm.icelink.LayoutPreset-getGoogleHangouts'>&nbsp;</span>**/
        /**
         <div>
         Gets a Google Hangouts-style layout preset.
         Note that this will present differently
         on mobile devices.
         </div>


        @return {fm.icelink.LayoutPreset}
        */
        static getGoogleHangouts(): fm.icelink.LayoutPreset;
        /**<span id='method-fm.icelink.LayoutPreset-getSkype'>&nbsp;</span>**/
        /**
         <div>
         Gets a Skype-style layout preset.
         Note that this will present differently
         on mobile devices.
         </div>


        @return {fm.icelink.LayoutPreset}
        */
        static getSkype(): fm.icelink.LayoutPreset;
        /**<span id='method-fm.icelink.LayoutPreset-applyPreset'>&nbsp;</span>**/
        /**
         <div>
         Applies a preset.
         </div>

        @param {fm.icelink.LayoutPreset} preset The preset to apply.
        @return {void}
        */
        applyPreset(preset: fm.icelink.LayoutPreset): void;
        /**<span id='method-fm.icelink.LayoutPreset-calculateLayout'>&nbsp;</span>**/
        /**
         <div>
         Gets a video frame layout.
         </div>

        @param {number} layoutWidth The total width of the layout.
        @param {number} layoutHeight The total height of the layout.
        @param {number} remoteCount The number of remote frames.
        @param {fm.icelink.LayoutOrigin} origin The layout origin
        @return {fm.icelink.Layout} The video frame layout.
        */
        calculateLayout(layoutWidth: number, layoutHeight: number, remoteCount: number, origin: fm.icelink.LayoutOrigin): fm.icelink.Layout;
        /**<span id='method-fm.icelink.LayoutPreset-copyToPreset'>&nbsp;</span>**/
        /**
         <div>
         Copies this preset's properties to another preset.
         </div>

        @param {fm.icelink.LayoutPreset} preset The target preset.
        @return {void}
        */
        copyToPreset(preset: fm.icelink.LayoutPreset): void;
        /**<span id='method-fm.icelink.LayoutPreset-getAlignment'>&nbsp;</span>**/
        /**
         <div>
         Gets the alignment of the layout.
         Defaults to `fm.icelink.layoutAlignment.BottomRight`.
         </div>


        @return {fm.icelink.LayoutAlignment}
        */
        getAlignment(): fm.icelink.LayoutAlignment;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height of block elements in pixels.
         Overrides `fm.icelink.layoutPreset.blockHeightPercent`.
         </div>


        @return {number}
        */
        getBlockHeight(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockHeightPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the height of block elements as a percent
         of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockHeight`.
         </div>


        @return {number}
        */
        getBlockHeightPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginX'>&nbsp;</span>**/
        /**
         <div>
         Gets the X-margin between block elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.blockMarginXPercent`.
         </div>


        @return {number}
        */
        getBlockMarginX(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginXPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the X-margin between block elements and the layout
         edge as a percent of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockMarginX`.
         </div>


        @return {number}
        */
        getBlockMarginXPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginY'>&nbsp;</span>**/
        /**
         <div>
         Gets the Y-margin between block elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.blockMarginYPercent`.
         </div>


        @return {number}
        */
        getBlockMarginY(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockMarginYPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the Y-margin between block elements and the layout
         edge as a percent of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockMarginY`.
         </div>


        @return {number}
        */
        getBlockMarginYPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width of block elements in pixels.
         Overrides `fm.icelink.layoutPreset.blockWidthPercent`.
         </div>


        @return {number}
        */
        getBlockWidth(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getBlockWidthPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the width of block elements as a percent
         of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockWidth`.
         </div>


        @return {number}
        */
        getBlockWidthPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the direction of the layout flow.
         Defaults to `fm.icelink.layoutDirection.Horizontal`.
         </div>


        @return {fm.icelink.LayoutDirection}
        */
        getDirection(): fm.icelink.LayoutDirection;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height of floating elements in pixels.
         Overrides `fm.icelink.layoutPreset.floatHeightPercent`.
         </div>


        @return {number}
        */
        getFloatHeight(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatHeightPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the height of floating elements as a percent
         of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatHeight`.
         </div>


        @return {number}
        */
        getFloatHeightPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginX'>&nbsp;</span>**/
        /**
         <div>
         Gets the X-margin between floating elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.floatMarginXPercent`.
         </div>


        @return {number}
        */
        getFloatMarginX(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginXPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the X-margin between floating elements and the layout
         edge as a percent of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatMarginX`.
         </div>


        @return {number}
        */
        getFloatMarginXPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginY'>&nbsp;</span>**/
        /**
         <div>
         Gets the Y-margin between floating elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.floatMarginYPercent`.
         </div>


        @return {number}
        */
        getFloatMarginY(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatMarginYPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the Y-margin between floating elements and the layout
         edge as a percent of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatMarginY`.
         </div>


        @return {number}
        */
        getFloatMarginYPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width of floating elements in pixels.
         Overrides `fm.icelink.layoutPreset.floatWidthPercent`.
         </div>


        @return {number}
        */
        getFloatWidth(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getFloatWidthPercent'>&nbsp;</span>**/
        /**
         <div>
         Gets the width of floating elements as a percent
         of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatWidth`.
         </div>


        @return {number}
        */
        getFloatWidthPercent(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getInlineMargin'>&nbsp;</span>**/
        /**
         <div>
         Gets the size of the margin in pixels to use
         between inline elements.
         </div>


        @return {number}
        */
        getInlineMargin(): number;
        /**<span id='method-fm.icelink.LayoutPreset-getMode'>&nbsp;</span>**/
        /**
         <div>
         Gets the mode used by the layout engine.
         Defaults to `fm.icelink.layoutMode.FloatLocal`.
         </div>


        @return {fm.icelink.LayoutMode}
        */
        getMode(): fm.icelink.LayoutMode;
        /**<span id='method-fm.icelink.LayoutPreset-setAlignment'>&nbsp;</span>**/
        /**
         <div>
         Sets the alignment of the layout.
         Defaults to `fm.icelink.layoutAlignment.BottomRight`.
         </div>


        @param {fm.icelink.LayoutAlignment} value
        @return {void}
        */
        setAlignment(value: fm.icelink.LayoutAlignment): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the height of block elements in pixels.
         Overrides `fm.icelink.layoutPreset.blockHeightPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockHeight(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockHeightPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the height of block elements as a percent
         of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockHeight`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockHeightPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginX'>&nbsp;</span>**/
        /**
         <div>
         Sets the X-margin between block elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.blockMarginXPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockMarginX(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginXPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the X-margin between block elements and the layout
         edge as a percent of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockMarginX`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockMarginXPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginY'>&nbsp;</span>**/
        /**
         <div>
         Sets the Y-margin between block elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.blockMarginYPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockMarginY(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockMarginYPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the Y-margin between block elements and the layout
         edge as a percent of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockMarginY`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockMarginYPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the width of block elements in pixels.
         Overrides `fm.icelink.layoutPreset.blockWidthPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockWidth(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setBlockWidthPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the width of block elements as a percent
         of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.blockWidth`.
         </div>


        @param {number} value
        @return {void}
        */
        setBlockWidthPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets the direction of the layout flow.
         Defaults to `fm.icelink.layoutDirection.Horizontal`.
         </div>


        @param {fm.icelink.LayoutDirection} value
        @return {void}
        */
        setDirection(value: fm.icelink.LayoutDirection): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the height of floating elements in pixels.
         Overrides `fm.icelink.layoutPreset.floatHeightPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatHeight(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatHeightPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the height of floating elements as a percent
         of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatHeight`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatHeightPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginX'>&nbsp;</span>**/
        /**
         <div>
         Sets the X-margin between floating elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.floatMarginXPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatMarginX(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginXPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the X-margin between floating elements and the layout
         edge as a percent of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatMarginX`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatMarginXPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginY'>&nbsp;</span>**/
        /**
         <div>
         Sets the Y-margin between floating elements and the layout
         edge in pixels.
         Overrides `fm.icelink.layoutPreset.floatMarginYPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatMarginY(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatMarginYPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the Y-margin between floating elements and the layout
         edge as a percent of the container height between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatMarginY`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatMarginYPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the width of floating elements in pixels.
         Overrides `fm.icelink.layoutPreset.floatWidthPercent`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatWidth(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setFloatWidthPercent'>&nbsp;</span>**/
        /**
         <div>
         Sets the width of floating elements as a percent
         of the container width between 0.0 and 1.0.
         Overrides `fm.icelink.layoutPreset.floatWidth`.
         </div>


        @param {number} value
        @return {void}
        */
        setFloatWidthPercent(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setInlineMargin'>&nbsp;</span>**/
        /**
         <div>
         Sets the size of the margin in pixels to use
         between inline elements.
         </div>


        @param {number} value
        @return {void}
        */
        setInlineMargin(value: number): void;
        /**<span id='method-fm.icelink.LayoutPreset-setMode'>&nbsp;</span>**/
        /**
         <div>
         Sets the mode used by the layout engine.
         Defaults to `fm.icelink.layoutMode.FloatLocal`.
         </div>


        @param {fm.icelink.LayoutMode} value
        @return {void}
        */
        setMode(value: fm.icelink.LayoutMode): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A class that supplies simple video frame layout management.
     </div>

    */
    abstract class LayoutManager<T> extends fm.icelink.LayoutPreset {
        getTypeString(): string;
        private fmicelinkLayoutManagerInit();
        /**<span id='method-fm.icelink.LayoutManager-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.layoutManager` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.LayoutManager-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.layoutManager` class.
         </div>


        @param {fm.icelink.LayoutPreset} preset
        @return {}
        */
        constructor(preset: fm.icelink.LayoutPreset);
        /**<span id='method-fm.icelink.LayoutManager-addOnLayout'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when a layout is calculated.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.Layout>} value
        @return {void}
        */
        addOnLayout(value: fm.icelink.IAction1<fm.icelink.Layout>): void;
        /**<span id='method-fm.icelink.LayoutManager-addRemoteMedia'>&nbsp;</span>**/
        /**
         <div>
         Adds remote media to the layout.
         </div>

        @param {fm.icelink.IViewableMedia<T>} remoteMedia The remote media.
        @return {boolean} true if successful; otherwise, false.
 
        */
        addRemoteMedia(remoteMedia: fm.icelink.IViewableMedia<T>): boolean;
        /**<span id='method-fm.icelink.LayoutManager-addRemoteView'>&nbsp;</span>**/
        /**
         <div>
         Adds a remote view to the layout.
         </div>

        @param {string} id The remote view ID.
        @param {T} view The remote view.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        addRemoteView(id: string, view: T): boolean;
        /**<span id='method-fm.icelink.LayoutManager-addRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Adds remote views to the layout.
         </div>

        @param {string[]} ids The remote view IDs.
        @param {T[]} views The remote views.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        addRemoteViews(ids: string[], views: T[]): boolean;
        /**<span id='method-fm.icelink.LayoutManager-addView'>&nbsp;</span>**/
        /**
         <div>
         Adds a view to the container.
         </div>

        @param {T} view The view to add.
        @return {void}
        */
        protected abstract addView(view: T): void;
        /**<span id='method-fm.icelink.LayoutManager-dispatchToMainThread'>&nbsp;</span>**/
        /**
         <div>
         Dispatches an action to the main thread.
         </div>

        @param {fm.icelink.IAction2<Object,Object>} action The action to invoke.
        @param {Object} arg1 The first argument.
        @param {Object} arg2 The second argument.
        @return {void}
        */
        protected abstract dispatchToMainThread(action: fm.icelink.IAction2<Object, Object>, arg1: Object, arg2: Object): void;
        /**<span id='method-fm.icelink.LayoutManager-getLayout'>&nbsp;</span>**/
        /**
         <div>
         Gets a video frame layout.
         </div>

        @param {number} layoutWidth The total width of the layout.
        @param {number} layoutHeight The total height of the layout.
        @param {number} remoteCount The number of remote frames.
        @return {fm.icelink.Layout} The video frame layout.
        */
        protected getLayout(layoutWidth: number, layoutHeight: number, remoteCount: number): fm.icelink.Layout;
        /**<span id='method-fm.icelink.LayoutManager-getLayout'>&nbsp;</span>**/
        /**
         <div>
         Gets a video frame layout.
         </div>

        @param {number} layoutWidth The total width of the layout.
        @param {number} layoutHeight The total height of the layout.
        @param {number} remoteCount The number of remote frames.
        @param {string[]} remoteViewIds The array of remote view ids.
        @return {fm.icelink.Layout} The video frame layout.
        */
        protected getLayout(layoutWidth: number, layoutHeight: number, remoteCount: number, remoteViewIds: string[]): fm.icelink.Layout;
        /**<span id='method-fm.icelink.LayoutManager-getLayoutOrigin'>&nbsp;</span>**/
        /**
         <div>
         Gets the layout origin.
         Defaults to TopLeft.
         </div>


        @return {fm.icelink.LayoutOrigin}
        */
        getLayoutOrigin(): fm.icelink.LayoutOrigin;
        /**<span id='method-fm.icelink.LayoutManager-getLocalView'>&nbsp;</span>**/
        /**
         <div>
         Gets the local view from the layout.
         </div>

        @return {T} The local view.
        */
        getLocalView(): T;
        /**<span id='method-fm.icelink.LayoutManager-getRemoteView'>&nbsp;</span>**/
        /**
         <div>
         Gets a remote view from the layout.
         </div>

        @param {string} id The remote view ID.
        @return {T} The remote view.
        */
        getRemoteView(id: string): T;
        /**<span id='method-fm.icelink.LayoutManager-getRemoteViewIds'>&nbsp;</span>**/
        /**
         <div>
         Gets the IDs of the remote views in the layout.
         </div>

        @return {string[]} The remote view IDs.
        */
        getRemoteViewIds(): string[];
        /**<span id='method-fm.icelink.LayoutManager-getRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Gets remote views from the layout.
         </div>

        @param {string[]} ids The remote view IDs.
        @return {Array<T>} The remote views.
        */
        getRemoteViews(ids: string[]): Array<T>;
        /**<span id='method-fm.icelink.LayoutManager-getRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Gets all remote views from the layout.
         </div>

        @return {Array<T>} The remote views.
        */
        getRemoteViews(): Array<T>;
        /**<span id='method-fm.icelink.LayoutManager-layout'>&nbsp;</span>**/
        /**
         <div>
         Positions the local and remote views within the layout.
         </div>


        @return {void}
        */
        abstract layout(): void;
        /**<span id='method-fm.icelink.LayoutManager-layoutOnMainThread'>&nbsp;</span>**/
        /**
         <div>
         Positions the local and remote views within the layout
         after dispatching to the main thread.
         </div>


        @return {void}
        */
        layoutOnMainThread(): void;
        /**<span id='method-fm.icelink.LayoutManager-removeOnLayout'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when a layout is calculated.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.Layout>} value
        @return {void}
        */
        removeOnLayout(value: fm.icelink.IAction1<fm.icelink.Layout>): void;
        /**<span id='method-fm.icelink.LayoutManager-removeRemoteMedia'>&nbsp;</span>**/
        /**
         <div>
         Removes remote media from the layout.
         </div>

        @param {fm.icelink.IViewableMedia<T>} remoteMedia The remote media.
        @return {boolean} true if successful; otherwise, false.
 
        */
        removeRemoteMedia(remoteMedia: fm.icelink.IViewableMedia<T>): boolean;
        /**<span id='method-fm.icelink.LayoutManager-removeRemoteView'>&nbsp;</span>**/
        /**
         <div>
         Removes a remote view from the layout.
         </div>

        @param {string} id The remote view ID.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        removeRemoteView(id: string): boolean;
        /**<span id='method-fm.icelink.LayoutManager-removeRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Removes remote views from the layout.
         </div>

        @param {string[]} ids The remote view IDs.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        removeRemoteViews(ids: string[]): boolean;
        /**<span id='method-fm.icelink.LayoutManager-removeRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Removes all remote views from the layout.
         </div>


        @return {void}
        */
        removeRemoteViews(): void;
        /**<span id='method-fm.icelink.LayoutManager-removeView'>&nbsp;</span>**/
        /**
         <div>
         Removes a view from the container.
         </div>

        @param {T} view The view to remove.
        @return {void}
        */
        protected abstract removeView(view: T): void;
        /**<span id='method-fm.icelink.LayoutManager-reset'>&nbsp;</span>**/
        /**
         <div>
         Removes all remote views from the layout,
         then removes the local view from the layout.
         </div>


        @return {void}
        */
        reset(): void;
        /**<span id='method-fm.icelink.LayoutManager-setLayoutOrigin'>&nbsp;</span>**/
        /**
         <div>
         Sets the layout origin.
         Defaults to TopLeft.
         </div>


        @param {fm.icelink.LayoutOrigin} value
        @return {void}
        */
        protected setLayoutOrigin(value: fm.icelink.LayoutOrigin): void;
        /**<span id='method-fm.icelink.LayoutManager-setLocalMedia'>&nbsp;</span>**/
        /**
         <div>
         Adds the local media to the layout.
         </div>

        @param {fm.icelink.IViewableMedia<T>} localMedia The local media.
        @return {boolean} true if successful; otherwise, false.
        */
        setLocalMedia(localMedia: fm.icelink.IViewableMedia<T>): boolean;
        /**<span id='method-fm.icelink.LayoutManager-setLocalView'>&nbsp;</span>**/
        /**
         <div>
         Adds the local view to the layout.
         </div>

        @param {T} view The local view.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        setLocalView(view: T): boolean;
        /**<span id='method-fm.icelink.LayoutManager-swapRemoteMedia'>&nbsp;</span>**/
        /**
         <div>
         Swaps remote media in the layout.
         </div>

        @param {fm.icelink.IViewableMedia<T>} remoteMediaToRemove The remote media to remove.
        @param {fm.icelink.IViewableMedia<T>} remoteMediaToAdd The remote media to add.
        @return {boolean}
        */
        swapRemoteMedia(remoteMediaToRemove: fm.icelink.IViewableMedia<T>, remoteMediaToAdd: fm.icelink.IViewableMedia<T>): boolean;
        /**<span id='method-fm.icelink.LayoutManager-swapRemoteView'>&nbsp;</span>**/
        /**
         <div>
         Swaps a remote view in the layout.
         </div>

        @param {string} idToRemove The remote view ID to remove.
        @param {string} idToAdd The remote view ID to add.
        @param {T} viewToAdd The remote view to add.
        @return {boolean}
        */
        swapRemoteView(idToRemove: string, idToAdd: string, viewToAdd: T): boolean;
        /**<span id='method-fm.icelink.LayoutManager-swapRemoteViews'>&nbsp;</span>**/
        /**
         <div>
         Swaps remote views in the layout.
         </div>

        @param {string[]} idsToRemove The remote view IDs to remove.
        @param {string[]} idsToAdd The remote view IDs to add.
        @param {T[]} viewsToAdd The remote views to add.
        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        swapRemoteViews(idsToRemove: string[], idsToAdd: string[], viewsToAdd: T[]): boolean;
        /**<span id='method-fm.icelink.LayoutManager-unsetLocalView'>&nbsp;</span>**/
        /**
         <div>
         Removes the local view from the layout.
         </div>

        @return {boolean} true if successful; otherwise, false. Check the logs for additional information.
        */
        unsetLocalView(): boolean;
    }
}
declare namespace fm.icelink {
    class DomLayoutManager extends LayoutManager<HTMLElement> {
        getTypeString(): string;
        getContainer(): HTMLElement;
        constructor(container: HTMLElement, preset?: LayoutPreset);
        protected addView(view: HTMLElement): void;
        protected removeView(view: HTMLElement): void;
        protected dispatchToMainThread(action: IAction2<any, any>, arg1: any, arg2: any): void;
        layout(): void;
    }
}
declare namespace fm.icelink {
    interface IExternalDomVideoSink extends IViewSink<HTMLElement>, IExternal<IInternalDomVideoSink> {
    }
    interface IInternalDomVideoSink extends IViewSink<HTMLElement>, IInternal<IExternalDomVideoSink> {
    }
    class DomVideoSink extends Dynamic implements IExternalDomVideoSink {
        getTypeString(): string;
        getView(): HTMLElement;
        getViewScale(): LayoutScale;
        setViewScale(viewScale: LayoutScale): void;
        getViewMirror(): boolean;
        setViewMirror(viewMirror: boolean): void;
        constructor(track: VideoTrack);
    }
}
declare namespace fm.icelink {
    class Factory {
        getTypeString(): string;
        static createConnection(streams: Stream[]): Connection;
        static createAudioStream(localMedia: LocalMedia): AudioStream;
        static createVideoStream(localMedia: LocalMedia): VideoStream;
        static createDataChannel(label: string): DataChannel;
        static createDataStream(channel: DataChannel): DataStream;
        static createDomVideoSink(track: VideoTrack): DomVideoSink;
        static createLocalMedia(audio: any, video: any, screen?: boolean): LocalMedia;
    }
}
declare namespace fm.icelink {
    interface IExternal<TInternal> {
    }
}
declare namespace fm.icelink {
    interface IInternal<TExternal> {
    }
}
declare namespace fm.icelink {
    interface IExternalMedia extends IMedia<IExternalAudioTrack, IExternalVideoTrack>, IViewSinkableMedia<HTMLElement, IExternalDomVideoSink>, IExternal<IInternalMedia> {
    }
    interface IInternalMedia extends IMedia<IInternalAudioTrack, IInternalVideoTrack>, IViewSinkableMedia<HTMLElement, IInternalDomVideoSink>, IInternal<IExternalMedia> {
    }
    abstract class Media extends Dynamic implements IMedia<AudioTrack, VideoTrack>, IExternalMedia {
        getTypeString(): string;
        addOnAudioDestroyed(value: IAction0): void;
        addOnVideoDestroyed(value: IAction0): void;
        removeOnAudioDestroyed(value: IAction0): void;
        removeOnVideoDestroyed(value: IAction0): void;
        addOnAudioLevel(value: IAction1<number>): void;
        addOnVideoSize(value: IAction1<Size>): void;
        getAudioGain(): number;
        getAudioMuted(): boolean;
        getAudioTrack(): AudioTrack;
        getAudioTracks(): AudioTrack[];
        getAudioVolume(): number;
        getId(): string;
        getVideoMuted(): boolean;
        getVideoSize(): Size;
        getVideoTrack(): VideoTrack;
        getVideoTracks(): VideoTrack[];
        grabVideoFrame(): Future<VideoBuffer>;
        removeOnAudioLevel(value: IAction1<number>): void;
        removeOnVideoSize(value: IAction1<Size>): void;
        setAudioGain(value: number): void;
        setAudioMuted(value: boolean): void;
        setAudioVolume(value: number): void;
        setVideoMuted(value: boolean): void;
        destroy(): void;
        getView(): HTMLElement;
        getViewSink(): DomVideoSink;
        private externalsToInternals(externals);
        private externalToInternal(external);
        private internalsToExternals(internals);
        private internalToExternal(internal);
    }
}
declare namespace fm.icelink {
    interface IExternalLocalMedia extends ILocalMedia<IExternalLocalMedia, IExternalAudioTrack, IExternalVideoTrack>, IViewSinkableMedia<HTMLElement, IExternalDomVideoSink>, IExternal<IInternalLocalMedia> {
    }
    interface IInternalLocalMedia extends ILocalMedia<IInternalLocalMedia, IInternalAudioTrack, IInternalVideoTrack>, IViewSinkableMedia<HTMLElement, IInternalDomVideoSink>, IInternal<IExternalLocalMedia> {
    }
    class LocalMedia extends Media implements ILocalMedia<LocalMedia, AudioTrack, VideoTrack>, IExternalLocalMedia {
        getTypeString(): string;
        private _internal;
        addOnAudioStarted(value: IAction0): void;
        addOnAudioStopped(value: IAction0): void;
        addOnVideoStarted(value: IAction0): void;
        addOnVideoStopped(value: IAction0): void;
        removeOnAudioStarted(value: IAction0): void;
        removeOnAudioStopped(value: IAction0): void;
        removeOnVideoStarted(value: IAction0): void;
        removeOnVideoStopped(value: IAction0): void;
        /**
         * Deprecated: Use fm.icelink.Plugin.getChromeExtensionId()
         */
        static getChromeExtensionId(): string;
        /**
         * Deprecated: Use fm.icelink.Plugin.setChromeExtensionId()
         */
        static setChromeExtensionId(chromeExtensionId: string): void;
        /**
         * Deprecated: Use fm.icelink.Plugin.getChromeExtensionUrl()
         */
        static getChromeExtensionUrl(): string;
        /**
         * Deprecated: Use fm.icelink.Plugin.getChromeExtensionInstalled()
         */
        static getChromeExtensionInstalled(): boolean;
        /**
         * Deprecated: Use fm.icelink.Plugin.getChromeExtensionRequiresUserGesture()
         */
        static getChromeExtensionRequiresUserGesture(): boolean;
        /**
         * Deprecated: Use fm.icelink.Plugin.setChromeExtensionRequiresUserGesture()
         */
        static setChromeExtensionRequiresUserGesture(chromeExtensionRequiresUserGesture: boolean): void;
        constructor(audio: any, video: any, screen?: boolean);
        changeAudioSourceInput(audioSourceInput: SourceInput): Future<Object>;
        changeVideoSourceInput(videoSourceInput: SourceInput): Future<Object>;
        getAudioSourceInput(): SourceInput;
        getAudioSourceInputs(): Future<SourceInput[]>;
        getVideoSourceInput(): SourceInput;
        getVideoSourceInputs(): Future<SourceInput[]>;
        setAudioSourceInput(value: SourceInput): void;
        setVideoSourceInput(value: SourceInput): void;
        start(): Future<LocalMedia>;
        stop(): Future<LocalMedia>;
        changeAudioInput(audioInput: SourceInput): Future<Object>;
        changeVideoInput(videoInput: SourceInput): Future<Object>;
        getAudioInput(): SourceInput;
        getAudioInputs(): Future<SourceInput[]>;
        getVideoInput(): SourceInput;
        getVideoInputs(): Future<SourceInput[]>;
        setAudioInput(audioInput: SourceInput): void;
        setVideoInput(videoInput: SourceInput): void;
        getState(): LocalMediaState;
    }
}
declare namespace fm.icelink {
    class LocalNetwork {
        getTypeString(): string;
        static getAddressType(ipAddress: string): AddressType;
    }
}
declare namespace fm.icelink {
    class PluginConstants {
        static getLoaderClassId(): string;
        static getDomVideoSinkClassId(): string;
    }
}
interface LoaderActiveXObject extends HTMLObjectElement {
    GetIsLoaded(): boolean;
}
declare namespace fm.icelink {
    class Plugin {
        static install(pluginConfig: PluginConfig): Future<Object>;
        static getPluginConfig(): PluginConfig;
        static hasRtcPeerConnection(): boolean;
        static hasRtcDataChannel(): boolean;
        static hasGetUserMedia(): boolean;
        static hasRtcIceGatherer(): boolean;
        static hasRtcIceTransport(): boolean;
        static hasRtcDtlsTransport(): boolean;
        static hasRtcRtpSender(): boolean;
        static hasRtcRtpReceiver(): boolean;
        static hasWebRtc(localMedia?: boolean, dataChannels?: boolean): boolean;
        static hasOrtc(localMedia?: boolean, dataChannels?: boolean): boolean;
        static hasNative(localMedia?: boolean, dataChannels?: boolean): boolean;
        static hasActiveX(): boolean;
        static isReady(localMedia?: boolean, dataChannels?: boolean): boolean;
        static useActiveX(localMedia?: boolean, dataChannels?: boolean): boolean;
        static useNative(localMedia?: boolean, dataChannels?: boolean): boolean;
        private static checkForActiveX(promise, object, startTime);
        static getChromeExtensionId(): string;
        static setChromeExtensionId(chromeExtensionId: string): void;
        static getChromeExtensionUrl(): string;
        static getChromeExtensionInstalled(): boolean;
        static getChromeExtensionRequiresUserGesture(): boolean;
        static setChromeExtensionRequiresUserGesture(chromeExtensionRequiresUserGesture: boolean): void;
    }
}
declare namespace fm.icelink {
    abstract class PluginStream extends Dynamic implements IStream, IInternalStream {
        getTypeString(): string;
        abstract getState(): StreamState;
        abstract addOnStateChange(value: IAction0): void;
        abstract removeOnStateChange(value: IAction0): void;
        abstract getLocalReceive(): boolean;
        abstract setLocalReceive(localReceiveEnabled: boolean): void;
        abstract getLocalSend(): boolean;
        abstract setLocalSend(localSendEnabled: boolean): void;
        abstract getRemoteSend(): boolean;
        abstract getRemoteReceive(): boolean;
        abstract getRemoteDirection(): StreamDirection;
        abstract getHandle(): number;
        abstract addOnDirectionChange(value: IAction0): void;
        abstract removeOnDirectionChange(value: IAction0): void;
        abstract changeDirection(newDirection: StreamDirection): Error;
        abstract getDirection(): StreamDirection;
        abstract getId(): string;
        abstract getLabel(): string;
        abstract getLocalDirection(): StreamDirection;
        abstract getTag(): string;
        abstract getType(): StreamType;
        abstract setLocalDirection(value: StreamDirection): void;
        abstract setTag(value: string): void;
    }
}
declare namespace fm.icelink {
    abstract class PluginMediaStream<TTrack extends PluginMediaTrack> extends PluginStream implements IMediaStream, IInternalMediaStream {
        getTypeString(): string;
        getLocalTrack(): TTrack;
        getRemoteTrack(): TTrack;
        abstract getLocalBandwidth(): number;
        abstract setLocalBandwidth(value: number): void;
        abstract getMuted(): boolean;
        abstract getRemoteBandwidth(): number;
        abstract setMuted(muted: boolean): void;
        constructor(localTrack: TTrack, remoteTrack: TTrack);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginAudioStream {
        ChangeDirection(newDirection: number): string;
        GetDirection(): number;
        GetHandle(): number;
        GetId(): string;
        GetLabel(): string;
        GetLocalBandwidth(): number;
        GetLocalDirection(): number;
        GetLocalReceive(): boolean;
        GetLocalSend(): boolean;
        GetMuted(): boolean;
        GetRemoteBandwidth(): number;
        GetRemoteDirection(): number;
        GetRemoteReceive(): boolean;
        GetRemoteSend(): boolean;
        GetState(): number;
        GetTag(): string;
        Initialize(localMediaHandle: number, remoteMediaHandle: number): void;
        InsertDtmfTone(dtmfToneJson: string): boolean;
        InsertDtmfTones(dtmfTonesJson: string): boolean;
        SetLocalBandwidth(bandwidth: number): void;
        SetLocalDirection(direction: number): void;
        SetLocalReceive(localReceiveEnabled: boolean): void;
        SetLocalSend(localSendEnabled: boolean): void;
        SetMuted(muted: boolean): void;
        SetOnDirectionChange(callback: Object): void;
        SetOnReceiveDtmfTone(callback: Object): void;
        SetOnReceiveDtmfToneChange(callback: Object): void;
        SetOnSendDtmfTone(callback: Object): void;
        SetOnSendDtmfToneChange(callback: Object): void;
        SetOnStateChange(callback: Object): void;
        SetTag(tag: string): void;
    }
}
declare namespace fm.icelink.dtmf {
    /**
     <div>
     A DTMF (telephone-event) tone.
     </div>

    */
    class Tone {
        getTypeString(): string;
        private fmicelinkdtmfToneInit();
        constructor();
        /**<span id='method-fm.icelink.dtmf.Tone-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dtmf.tone` class.
         </div>

        @param {string} value The value.
        @return {}
        */
        constructor(value: string);
        /**<span id='method-fm.icelink.dtmf.Tone-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dtmf.tone` class.
         </div>

        @param {string} value The value.
        @param {number} duration The duration.
        @return {}
        */
        constructor(value: string, duration: number);
        /**<span id='method-fm.icelink.dtmf.Tone-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes from JSON.
         </div>

        @param {string} toneJson The JSON.
        @return {fm.icelink.dtmf.Tone}
        */
        static fromJson(toneJson: string): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an array from JSON.
         </div>

        @param {string} tonesJson The JSON.
        @return {fm.icelink.dtmf.Tone[]}
        */
        static fromJsonArray(tonesJson: string): fm.icelink.dtmf.Tone[];
        /**<span id='method-fm.icelink.dtmf.Tone-fromToneString'>&nbsp;</span>**/
        /**
         <div>
         Converts a DTMF tone string into an array of tones.
         </div>

        @param {string} toneString The tone string.
        @param {number} duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
        @param {number} interToneGap The time between tones, in milliseconds (minimum of 40).
        @return {fm.icelink.dtmf.Tone[]}
        */
        static fromToneString(toneString: string, duration: number, interToneGap: number): fm.icelink.dtmf.Tone[];
        /**<span id='method-fm.icelink.dtmf.Tone-fromToneString'>&nbsp;</span>**/
        /**
         <div>
         Converts a DTMF tone string into an array of tones.
         Each tone will have a duration of 100ms and an inter-tone gap of 100ms.
         </div>

        @param {string} toneString The tone string.
        @return {fm.icelink.dtmf.Tone[]}
        */
        static fromToneString(toneString: string): fm.icelink.dtmf.Tone[];
        /**<span id='method-fm.icelink.dtmf.Tone-fromToneString'>&nbsp;</span>**/
        /**
         <div>
         Converts a DTMF tone string into an array of tones.
         Each tone will have an inter-tone gap of 100ms.
         </div>

        @param {string} toneString The tone string.
        @param {number} duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
        @return {fm.icelink.dtmf.Tone[]}
        */
        static fromToneString(toneString: string, duration: number): fm.icelink.dtmf.Tone[];
        /**<span id='method-fm.icelink.dtmf.Tone-getA'>&nbsp;</span>**/
        /**
         <div>
         Gets A tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getA(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getAValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the A value ("A").
         </div>


        @return {string}
        */
        static getAValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getB'>&nbsp;</span>**/
        /**
         <div>
         Gets the B tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getB(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getBValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the B value ("B").
         </div>


        @return {string}
        */
        static getBValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getC'>&nbsp;</span>**/
        /**
         <div>
         Gets the C tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getC(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getCValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the C value ("C").
         </div>


        @return {string}
        */
        static getCValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getD'>&nbsp;</span>**/
        /**
         <div>
         Gets the D tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getD(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getDValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the D value ("D").
         </div>


        @return {string}
        */
        static getDValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getEight'>&nbsp;</span>**/
        /**
         <div>
         Gets the eight tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getEight(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getEightValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the eight value ("8").
         </div>


        @return {string}
        */
        static getEightValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getEmpty'>&nbsp;</span>**/
        /**
         <div>
         Gets the empty tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getEmpty(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getEmptyValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the empty value ("").
         </div>


        @return {string}
        */
        static getEmptyValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getFive'>&nbsp;</span>**/
        /**
         <div>
         Gets the five tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getFive(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getFiveValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the five value ("5").
         </div>


        @return {string}
        */
        static getFiveValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getFour'>&nbsp;</span>**/
        /**
         <div>
         Gets the four tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getFour(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getFourValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the four value ("4").
         </div>


        @return {string}
        */
        static getFourValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getHash'>&nbsp;</span>**/
        /**
         <div>
         Gets the hash tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getHash(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getHashValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the hash value ("#").
         </div>


        @return {string}
        */
        static getHashValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getNine'>&nbsp;</span>**/
        /**
         <div>
         Gets the nine tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getNine(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getNineValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the nine value ("9").
         </div>


        @return {string}
        */
        static getNineValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getOne'>&nbsp;</span>**/
        /**
         <div>
         Gets the one tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getOne(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getOneValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the one value ("1").
         </div>


        @return {string}
        */
        static getOneValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getPause'>&nbsp;</span>**/
        /**
         <div>
         Gets the pause tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getPause(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getPauseDuration'>&nbsp;</span>**/
        /**
         <div>
         Gets the pause duration in milliseconds (2000).
         </div>


        @return {number}
        */
        static getPauseDuration(): number;
        /**<span id='method-fm.icelink.dtmf.Tone-getPauseValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the pause value (",").
         </div>


        @return {string}
        */
        static getPauseValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getSeven'>&nbsp;</span>**/
        /**
         <div>
         Gets the seven tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getSeven(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getSevenValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the seven value ("7").
         </div>


        @return {string}
        */
        static getSevenValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getSix'>&nbsp;</span>**/
        /**
         <div>
         Gets the six tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getSix(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getSixValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the six value ("6").
         </div>


        @return {string}
        */
        static getSixValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getStar'>&nbsp;</span>**/
        /**
         <div>
         Gets the star tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getStar(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getStarValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the star value ("*").
         </div>


        @return {string}
        */
        static getStarValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getThree'>&nbsp;</span>**/
        /**
         <div>
         Gets the three tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getThree(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getThreeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the three value ("3").
         </div>


        @return {string}
        */
        static getThreeValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getTwo'>&nbsp;</span>**/
        /**
         <div>
         Gets the two tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getTwo(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getTwoValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the two value ("2").
         </div>


        @return {string}
        */
        static getTwoValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-getZero'>&nbsp;</span>**/
        /**
         <div>
         Gets the zero tone.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        static getZero(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getZeroValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the zero value ("0").
         </div>


        @return {string}
        */
        static getZeroValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes to JSON.
         </div>

        @param {fm.icelink.dtmf.Tone} tone
        @return {string}
        */
        static toJson(tone: fm.icelink.dtmf.Tone): string;
        /**<span id='method-fm.icelink.dtmf.Tone-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array to JSON.
         </div>

        @param {fm.icelink.dtmf.Tone[]} tones The array.
        @return {string}
        */
        static toJsonArray(tones: fm.icelink.dtmf.Tone[]): string;
        /**<span id='method-fm.icelink.dtmf.Tone-toToneString'>&nbsp;</span>**/
        /**
         <div>
         Converts an array of DTMF tones into a tone string.
         This discards duration and inter-tone gap data.
         </div>

        @param {fm.icelink.dtmf.Tone[]} tones The tones.
        @return {string}
        */
        static toToneString(tones: fm.icelink.dtmf.Tone[]): string;
        /**<span id='method-fm.icelink.dtmf.Tone-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {fm.icelink.dtmf.Tone}
        */
        clone(): fm.icelink.dtmf.Tone;
        /**<span id='method-fm.icelink.dtmf.Tone-getDuration'>&nbsp;</span>**/
        /**
         <div>
         Gets the duration in milliseconds.
         </div>


        @return {number}
        */
        getDuration(): number;
        /**<span id='method-fm.icelink.dtmf.Tone-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {string}
        */
        getValue(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
        /**<span id='method-fm.icelink.dtmf.Tone-toString'>&nbsp;</span>**/
        /**
         <div>
         Serializes to a string.
         </div>

        @return {string}
        */
        toString(): string;
    }
}
interface AudioStreamActiveXObject extends ActiveXObject, fm.icelink.IPluginAudioStream {
}
declare namespace fm.icelink {
    class PluginAudioStream extends PluginMediaStream<PluginAudioTrack> implements IAudioStream, IInternalAudioStream {
        getTypeString(): string;
        constructor(external: IExternalAudioStream, localTrack: PluginAudioTrack, remoteTrack: PluginAudioTrack);
        getState(): StreamState;
        addOnStateChange(value: IAction0): void;
        removeOnStateChange(value: IAction0): void;
        getLocalReceive(): boolean;
        getLocalSend(): boolean;
        getRemoteReceive(): boolean;
        getRemoteSend(): boolean;
        setLocalReceive(value: boolean): void;
        setLocalSend(value: boolean): void;
        getRemoteDirection(): StreamDirection;
        getHandle(): number;
        changeDirection(newDirection: StreamDirection): Error;
        getDirection(): StreamDirection;
        getId(): string;
        getLabel(): string;
        getLocalBandwidth(): number;
        getLocalDirection(): StreamDirection;
        getMuted(): boolean;
        getRemoteBandwidth(): number;
        getTag(): string;
        getType(): StreamType;
        setLocalDirection(value: StreamDirection): void;
        setLocalBandwidth(value: number): void;
        setMuted(value: boolean): void;
        setTag(value: string): void;
        addOnDirectionChange(value: IAction0): void;
        removeOnDirectionChange(value: IAction0): void;
        addOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        insertDtmfTone(dtmfTone: dtmf.Tone): boolean;
        insertDtmfTones(dtmfTones: dtmf.Tone[]): boolean;
        removeOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
    }
}
declare namespace fm.icelink {
    abstract class PluginMediaTrack extends Dynamic implements IMediaTrack, IInternalMediaTrack {
        getTypeString(): string;
        getMedia(): PluginMedia;
        constructor(media: PluginMedia);
        abstract changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        abstract changeSourceInput(sourceInput: SourceInput): Future<Object>;
        destroy(): boolean;
        abstract addOnStarted(value: IAction0): void;
        abstract addOnStopped(value: IAction0): void;
        abstract addOnDestroyed(value: IAction0): void;
        abstract removeOnStarted(value: IAction0): void;
        abstract removeOnStopped(value: IAction0): void;
        abstract removeOnDestroyed(value: IAction0): void;
        abstract getMuted(): boolean;
        abstract getSinkOutput(): SinkOutput;
        abstract getSinkOutputs(): Future<SinkOutput[]>;
        abstract getSourceInput(): SourceInput;
        abstract getSourceInputs(): Future<SourceInput[]>;
        abstract setMuted(value: boolean): void;
        abstract setSinkOutput(value: SinkOutput): void;
        abstract setSourceInput(value: SourceInput): void;
    }
}
declare namespace fm.icelink {
    class PluginAudioTrack extends PluginMediaTrack implements IAudioTrack, IInternalAudioTrack {
        getTypeString(): string;
        constructor(external: IExternalAudioTrack, media: PluginMedia);
        private isLocal();
        addOnStarted(value: IAction0): void;
        addOnStopped(value: IAction0): void;
        addOnDestroyed(value: IAction0): void;
        removeOnStarted(value: IAction0): void;
        removeOnStopped(value: IAction0): void;
        removeOnDestroyed(value: IAction0): void;
        changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        getSinkOutput(): SinkOutput;
        getSinkOutputs(): Future<SinkOutput[]>;
        setSinkOutput(value: SinkOutput): void;
        changeSourceInput(sourceInput: SourceInput): Future<Object>;
        getSourceInput(): SourceInput;
        getSourceInputs(): Future<SourceInput[]>;
        setSourceInput(value: SourceInput): void;
        addOnLevel(value: IAction1<number>): void;
        getGain(): number;
        getMuted(): boolean;
        getVolume(): number;
        removeOnLevel(value: IAction1<number>): void;
        setGain(value: number): void;
        setMuted(value: boolean): void;
        setVolume(value: number): void;
    }
}
declare namespace fm.icelink {
    class PluginConfig {
        private _activeXPath;
        private _activeXTimeout;
        private _preferActiveX;
        getActiveXPath(): string;
        setActiveXPath(activeXPath: string): void;
        getActiveXTimeout(): number;
        setActiveXTimeout(activeXTimeout: number): void;
        getPreferActiveX(): boolean;
        setPreferActiveX(preferActiveX: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginConnection {
        AddIceServer(iceServer: string): void;
        AddIceServers(iceServers: string): void;
        AddRemoteCandidate(remoteCandidate: string, promise: Object): void;
        Close(): void;
        CreateAnswer(promise: Object): void;
        CreateOffer(promise: Object): void;
        GetDeadStreamTimeout(): number;
        GetError(): string;
        GetExternalId(): string;
        GetGatheringState(): number;
        GetHandle(): number;
        GetIceConnectionState(): number;
        GetIceGatherPolicy(): number;
        GetIceServer(): string;
        GetIceServers(): string;
        GetId(): string;
        GetLocalDescription(): string;
        GetRemoteDescription(): string;
        GetSignallingState(): number;
        GetState(): number;
        GetStats(promise: Object): void;
        GetTieBreaker(): string;
        GetTimeout(): number;
        GetTrickleIcePolicy(): number;
        Initialize(streamPtrs: Object): void;
        RemoveIceServer(iceServer: string): void;
        RemoveIceServers(iceServers: string): void;
        SetDeadStreamTimeout(deadStreamTimeout: number): void;
        SetExternalId(externalId: string): void;
        SetIceGatherPolicy(iceGatherPolicy: number): void;
        SetIceServer(iceServer: string): void;
        SetIceServers(iceServers: string): void;
        SetLocalDescription(localDescription: string, promise: Object): void;
        SetOnExternalIdChange(callback: Object): void;
        SetOnGatheringStateChange(callback: Object): void;
        SetOnIceConnectionStateChange(callback: Object): void;
        SetOnLocalCandidate(callback: Object): void;
        SetOnLocalDescription(callback: Object): void;
        SetOnRemoteCandidate(callback: Object): void;
        SetOnRemoteDescription(callback: Object): void;
        SetOnSignallingStateChange(callback: Object): void;
        SetOnStateChange(callback: Object): void;
        SetRemoteDescription(remoteDescription: string, promise: Object): void;
        SetTieBreaker(tieBreaker: string): void;
        SetTimeout(timeout: number): void;
        SetTrickleIcePolicy(trickleIcePolicy: number): void;
    }
}
interface ConnectionActiveXObject extends ActiveXObject, fm.icelink.IPluginConnection {
}
declare namespace fm.icelink {
    class PluginConnection extends Dynamic implements IConnection<PluginConnection, PluginStream, PluginAudioStream, PluginVideoStream, PluginDataStream>, IInternalConnection {
        getTypeString(): string;
        constructor(external: IExternalConnection, streams: PluginStream[]);
        addIceServer(iceServer: IceServer): void;
        addIceServers(iceServers: IceServer[]): void;
        addOnLocalCandidate(value: IAction2<PluginConnection, Candidate>): void;
        addOnExternalIdChange(value: IAction2<string, string>): void;
        addOnIceConnectionStateChange(value: IAction1<PluginConnection>): void;
        addOnGatheringStateChange(value: IAction1<PluginConnection>): void;
        addOnLocalDescription(value: IAction2<PluginConnection, SessionDescription>): void;
        addOnRemoteCandidate(value: IAction2<PluginConnection, Candidate>): void;
        addOnRemoteDescription(value: IAction2<PluginConnection, SessionDescription>): void;
        addOnSignallingStateChange(value: IAction1<PluginConnection>): void;
        addOnStateChange(value: IAction1<PluginConnection>): void;
        addRemoteCandidate(remoteCandidate: Candidate): Future<Candidate>;
        close(): void;
        createAnswer(): Future<SessionDescription>;
        createOffer(): Future<SessionDescription>;
        getHasAudio(): boolean;
        getHasVideo(): boolean;
        getHasData(): boolean;
        getAudioStream(): PluginAudioStream;
        getAudioStreams(): PluginAudioStream[];
        getVideoStream(): PluginVideoStream;
        getVideoStreams(): PluginVideoStream[];
        getDataStream(): PluginDataStream;
        getDataStreams(): PluginDataStream[];
        getDeadStreamTimeout(): number;
        getExternalId(): string;
        getError(): Error;
        getIceGatherPolicy(): IceGatherPolicy;
        getIceServer(): IceServer;
        getIceServers(): IceServer[];
        getId(): string;
        getLocalDescription(): SessionDescription;
        getRemoteDescription(): SessionDescription;
        getSignallingState(): SignallingState;
        getState(): ConnectionState;
        getStats(): Future<ConnectionStats>;
        getStreams(): PluginStream[];
        getTieBreaker(): string;
        getTimeout(): number;
        getTrickleIcePolicy(): TrickleIcePolicy;
        getIceConnectionState(): IceConnectionState;
        getGatheringState(): IceGatheringState;
        removeIceServer(iceServer: IceServer): void;
        removeIceServers(iceServers: IceServer[]): void;
        removeOnLocalCandidate(value: IAction2<PluginConnection, Candidate>): void;
        removeOnIceConnectionStateChange(value: IAction1<PluginConnection>): void;
        removeOnExternalIdChange(value: IAction2<string, string>): void;
        removeOnGatheringStateChange(value: IAction1<PluginConnection>): void;
        removeOnLocalDescription(value: IAction2<PluginConnection, SessionDescription>): void;
        removeOnRemoteCandidate(value: IAction2<PluginConnection, Candidate>): void;
        removeOnRemoteDescription(value: IAction2<PluginConnection, SessionDescription>): void;
        removeOnSignallingStateChange(value: IAction1<PluginConnection>): void;
        removeOnStateChange(value: IAction1<PluginConnection>): void;
        setDeadStreamTimeout(value: number): void;
        setExternalId(value: string): void;
        setIceGatherPolicy(value: IceGatherPolicy): void;
        setIceServer(value: IceServer): void;
        setIceServers(value: IceServer[]): void;
        setTieBreaker(value: string): void;
        setLocalDescription(localDescription: SessionDescription): Future<SessionDescription>;
        setRemoteDescription(remoteDescription: SessionDescription): Future<SessionDescription>;
        setTimeout(value: number): void;
        setTrickleIcePolicy(value: TrickleIcePolicy): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginDataChannel {
        GetHandle(): number;
        GetId(): string;
        GetLabel(): string;
        GetOrdered(): boolean;
        GetState(): number;
        GetSubprotocol(): string;
        Initialize(label: string, ordered: boolean, subprotocol: string): void;
        PromisedSendDataBytes(data: string, promise: Object): void;
        PromisedSendDataString(dataString: string, promise: Object): void;
        SetOnReceive(callback: Object): void;
        SetOnStateChange(callback: Object): void;
    }
}
interface DataChannelActiveXObject extends ActiveXObject, fm.icelink.IPluginDataChannel {
}
declare namespace fm.icelink {
    class PluginDataChannel extends Dynamic implements IDataChannel<PluginDataChannel>, IInternalDataChannel {
        getTypeString(): string;
        getHandle(): number;
        constructor(external: IExternalDataChannel, label: string, ordered?: boolean, subprotocol?: string);
        addOnStateChange(value: IAction1<PluginDataChannel>): void;
        getLabel(): string;
        getOnReceive(): IAction1<DataChannelReceiveArgs>;
        getOrdered(): boolean;
        getId(): string;
        getState(): DataChannelState;
        getSubprotocol(): string;
        removeOnStateChange(value: IAction1<PluginDataChannel>): void;
        sendDataBytes(dataBytes: DataBuffer): fm.icelink.Future<Object>;
        sendDataString(dataString: string): fm.icelink.Future<Object>;
        setOnReceive(value: IAction1<DataChannelReceiveArgs>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginDataStream {
        ChangeDirection(newDirection: number): string;
        GetDirection(): number;
        GetHandle(): number;
        GetId(): string;
        GetLabel(): string;
        GetLocalDirection(): number;
        GetLocalReceive(): boolean;
        GetLocalSend(): boolean;
        GetRemoteDirection(): number;
        GetRemoteReceive(): boolean;
        GetRemoteSend(): boolean;
        GetState(): number;
        GetTag(): string;
        Initialize(channelHandles: Object): void;
        SetLocalDirection(direction: number): void;
        SetLocalReceive(localReceiveEnabled: boolean): void;
        SetLocalSend(localSendEnabled: boolean): void;
        SetOnDirectionChange(callback: Object): void;
        SetOnStateChange(callback: Object): void;
        SetTag(tag: string): void;
    }
}
interface DataStreamActiveXObject extends ActiveXObject, fm.icelink.IPluginDataStream {
}
declare namespace fm.icelink {
    class PluginDataStream extends PluginStream implements IDataStream<PluginDataChannel>, IInternalDataStream {
        getTypeString(): string;
        constructor(external: IExternalDataStream, channels: PluginDataChannel[]);
        getState(): StreamState;
        addOnStateChange(value: IAction0): void;
        removeOnStateChange(value: IAction0): void;
        getLocalReceive(): boolean;
        getLocalSend(): boolean;
        getRemoteReceive(): boolean;
        getRemoteSend(): boolean;
        setLocalReceive(value: boolean): void;
        setLocalSend(value: boolean): void;
        getRemoteDirection(): StreamDirection;
        getHandle(): number;
        changeDirection(newDirection: StreamDirection): Error;
        getDirection(): StreamDirection;
        getId(): string;
        getLabel(): string;
        getLocalDirection(): StreamDirection;
        getTag(): string;
        getType(): StreamType;
        setLocalDirection(value: StreamDirection): void;
        setTag(value: string): void;
        addOnDirectionChange(callback: Object): void;
        removeOnDirectionChange(callback: Object): void;
        getChannels(): PluginDataChannel[];
    }
}
declare namespace fm.icelink {
    class PluginDomAudioSink extends Dynamic implements IInternal<DomAudioSink> {
        getTypeString(): string;
        getTrack(): PluginAudioTrack;
        getLocal(): boolean;
        constructor(external: DomAudioSink, track: PluginAudioTrack);
        setTrack(track: PluginAudioTrack): boolean;
    }
}
interface VideoElementActiveXObject extends HTMLObjectElement {
    GetIsLoaded(): boolean;
    GetHandle(): number;
    GetWidth(): number;
    GetHeight(): number;
    GetViewMirror(): boolean;
    SetViewMirror(viewMirrow: boolean): void;
    GetViewScale(): number;
    SetViewScale(viewScale: number): void;
}
declare namespace fm.icelink {
    class PluginDomVideoSink extends Dynamic implements IInternalDomVideoSink {
        getTypeString(): string;
        getTrack(): PluginVideoTrack;
        getLocal(): boolean;
        getView(): HTMLElement;
        getViewScale(): LayoutScale;
        setViewScale(viewScale: LayoutScale): void;
        getVideoWidth(): number;
        getVideoHeight(): number;
        getViewMirror(): boolean;
        setViewMirror(viewMirror: boolean): void;
        constructor(external: IExternalDomVideoSink, track: PluginVideoTrack);
        setTrack(track: PluginVideoTrack): boolean;
        private checkifLoaded(object);
    }
}
interface MediaActiveXObject extends ActiveXObject {
    GetHandle(): number;
    Destroy(): void;
    GetAudioGain(): number;
    GetAudioMuted(): boolean;
    GetAudioVolume(): number;
    GetId(): string;
    GetVideoMuted(): boolean;
    GetVideoSize(): string;
    GrabVideoFrame(promise: Object): void;
    SetAudioGain(value: number): void;
    SetAudioMuted(value: boolean): void;
    SetAudioVolume(value: number): void;
    SetOnAudioLevel(callback: Object): void;
    SetOnVideoSize(callback: Object): void;
    SetVideoMuted(value: boolean): void;
}
declare namespace fm.icelink {
    abstract class PluginMedia extends Dynamic implements IMedia<PluginAudioTrack, PluginVideoTrack>, IInternalMedia {
        getTypeString(): string;
        getHandle(): number;
        abstract addOnAudioDestroyed(value: IAction0): void;
        abstract addOnVideoDestroyed(value: IAction0): void;
        abstract removeOnAudioDestroyed(value: IAction0): void;
        abstract removeOnVideoDestroyed(value: IAction0): void;
        destroy(): void;
        addOnAudioLevel(value: IAction1<number>): void;
        addOnVideoSize(value: IAction1<Size>): void;
        getAudioGain(): number;
        getAudioMuted(): boolean;
        getAudioTrack(): PluginAudioTrack;
        getAudioTracks(): PluginAudioTrack[];
        getAudioVolume(): number;
        getId(): string;
        getVideoMuted(): boolean;
        getVideoSize(): Size;
        getVideoTrack(): PluginVideoTrack;
        getVideoTracks(): PluginVideoTrack[];
        grabVideoFrame(): Future<VideoBuffer>;
        removeOnAudioLevel(value: IAction1<number>): void;
        removeOnVideoSize(value: IAction1<Size>): void;
        setAudioGain(value: number): void;
        setAudioMuted(value: boolean): void;
        setAudioVolume(value: number): void;
        setVideoMuted(value: boolean): void;
        getView(): HTMLElement;
        getViewSink(): PluginDomVideoSink;
        protected _videoSink: PluginDomVideoSink;
        constructor(external: IExternalMedia);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginLocalMedia {
        AttachView(viewHandle: number): void;
        ChangeAudioSourceInput(promise: Object, audioSourceInput: string): void;
        ChangeVideoSourceInput(promise: Object, videoSourceInput: string): void;
        Destroy(): void;
        GetAudioGain(): number;
        GetAudioMuted(): boolean;
        GetAudioSourceInput(): string;
        GetAudioSourceInputs(promise: Object): void;
        GetAudioVolume(): number;
        GetHandle(): number;
        GetId(): string;
        GetState(): number;
        GetVideoMuted(): boolean;
        GetVideoSize(): string;
        GetVideoSourceInput(): string;
        GetVideoSourceInputs(promise: Object): void;
        GrabVideoFrame(promise: Object): void;
        Initialize(disableAudio: boolean, disableVideo: boolean, isScreenShare: boolean): void;
        SetAudioGain(gain: number): void;
        SetAudioMuted(muted: boolean): void;
        SetAudioSourceInput(value: string): void;
        SetAudioVolume(volume: number): void;
        SetOnAudioDestroyed(callback: Object): void;
        SetOnAudioLevel(callback: Object): void;
        SetOnAudioStarted(callback: Object): void;
        SetOnAudioStopped(callback: Object): void;
        SetOnVideoDestroyed(callback: Object): void;
        SetOnVideoSize(callback: Object): void;
        SetOnVideoStarted(callback: Object): void;
        SetOnVideoStopped(callback: Object): void;
        SetVideoMuted(muted: boolean): void;
        SetVideoSourceInput(value: string): void;
        Start(promise: Object): void;
        Stop(promise: Object): void;
    }
}
interface LocalMediaActiveXObject extends ActiveXObject, fm.icelink.IPluginLocalMedia {
}
declare namespace fm.icelink {
    class PluginLocalMedia extends PluginMedia implements ILocalMedia<PluginLocalMedia, PluginAudioTrack, PluginVideoTrack>, IInternalLocalMedia {
        getTypeString(): string;
        getAudio(): any;
        setAudio(audio: any): void;
        getVideo(): any;
        setVideo(video: any): void;
        getScreen(): boolean;
        setScreen(screen: boolean): void;
        getState(): LocalMediaState;
        constructor(external: IExternalLocalMedia, audio: any, video: any, screen?: boolean);
        start(): Future<PluginLocalMedia>;
        stop(): Future<PluginLocalMedia>;
        getHandle(): number;
        addOnAudioStarted(value: IAction0): void;
        addOnVideoStarted(value: IAction0): void;
        addOnAudioStopped(value: IAction0): void;
        addOnVideoStopped(value: IAction0): void;
        addOnAudioDestroyed(value: IAction0): void;
        addOnVideoDestroyed(value: IAction0): void;
        removeOnAudioStarted(value: IAction0): void;
        removeOnVideoStarted(value: IAction0): void;
        removeOnAudioStopped(value: IAction0): void;
        removeOnVideoStopped(value: IAction0): void;
        removeOnAudioDestroyed(value: IAction0): void;
        removeOnVideoDestroyed(value: IAction0): void;
        changeAudioSourceInput(audioSourceInput: SourceInput): Future<Object>;
        changeVideoSourceInput(videoSourceInput: SourceInput): Future<Object>;
        getAudioSourceInput(): SourceInput;
        getAudioSourceInputs(): Future<SourceInput[]>;
        getVideoSourceInput(): SourceInput;
        getVideoSourceInputs(): Future<SourceInput[]>;
        setAudioSourceInput(value: SourceInput): void;
        setVideoSourceInput(value: SourceInput): void;
        destroy(): void;
        getAudioGain(): number;
        getAudioMuted(): boolean;
        getId(): string;
        getVideoMuted(): boolean;
        setAudioGain(value: number): void;
        setAudioMuted(value: boolean): void;
        setVideoMuted(value: boolean): void;
        private checkifLoaded(object);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginRemoteMedia {
        AttachView(viewHandle: number): void;
        ChangeAudioSinkOutput(promise: Object, audioSinkOutput: string): void;
        ChangeVideoSinkOutput(promise: Object, videoSinkOutput: string): void;
        Destroy(): void;
        GetAudioGain(): number;
        GetAudioMuted(): boolean;
        GetAudioSinkOutput(): string;
        GetAudioSinkOutputs(promise: Object): void;
        GetAudioVolume(): number;
        GetHandle(): number;
        GetId(): string;
        GetVideoMuted(): boolean;
        GetVideoSinkOutput(): string;
        GetVideoSinkOutputs(promise: Object): void;
        GetVideoSize(): string;
        GrabVideoFrame(promise: Object): void;
        Initialize(disableAudio: boolean, disableVideo: boolean): void;
        SetAudioGain(gain: number): void;
        SetAudioMuted(muted: boolean): void;
        SetAudioSinkOutput(value: string): void;
        SetAudioVolume(volume: number): void;
        SetOnAudioDestroyed(callback: Object): void;
        SetOnAudioLevel(callback: Object): void;
        SetOnVideoDestroyed(callback: Object): void;
        SetOnVideoSize(callback: Object): void;
        SetVideoMuted(muted: boolean): void;
        SetVideoSinkOutput(value: string): void;
    }
}
interface RemoteMediaActiveXObject extends ActiveXObject, fm.icelink.IPluginRemoteMedia {
}
declare namespace fm.icelink {
    class PluginRemoteMedia extends PluginMedia implements IRemoteMedia<PluginAudioTrack, PluginVideoTrack>, IInternalRemoteMedia {
        getTypeString(): string;
        constructor(external: IExternalRemoteMedia);
        private checkifLoaded(object);
        getHandle(): number;
        addOnAudioDestroyed(value: IAction0): void;
        addOnVideoDestroyed(value: IAction0): void;
        removeOnAudioDestroyed(value: IAction0): void;
        removeOnVideoDestroyed(value: IAction0): void;
        changeAudioSinkOutput(audioSinkOutput: SinkOutput): Future<Object>;
        changeVideoSinkOutput(videoSinkOutput: SinkOutput): Future<Object>;
        getAudioSinkOutput(): SinkOutput;
        getAudioSinkOutputs(): Future<SinkOutput[]>;
        getVideoSinkOutput(): SinkOutput;
        getVideoSinkOutputs(): Future<SinkOutput[]>;
        setAudioSinkOutput(value: SinkOutput): void;
        setVideoSinkOutput(value: SinkOutput): void;
        destroy(): void;
        getAudioGain(): number;
        getAudioMuted(): boolean;
        getId(): string;
        getVideoMuted(): boolean;
        setAudioGain(value: number): void;
        setAudioMuted(value: boolean): void;
        setVideoMuted(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An interface for COM usage.
     </div>

    */
    interface IPluginVideoStream {
        ChangeDirection(newDirection: number): string;
        GetDirection(): number;
        GetHandle(): number;
        GetId(): string;
        GetLabel(): string;
        GetLocalBandwidth(): number;
        GetLocalDirection(): number;
        GetLocalReceive(): boolean;
        GetLocalSend(): boolean;
        GetMuted(): boolean;
        GetRemoteBandwidth(): number;
        GetRemoteDirection(): number;
        GetRemoteReceive(): boolean;
        GetRemoteSend(): boolean;
        GetState(): number;
        GetTag(): string;
        Initialize(localMediaHandle: number, remoteMediaHandle: number): void;
        SetLocalBandwidth(bandwidth: number): void;
        SetLocalDirection(direction: number): void;
        SetLocalReceive(localReceiveEnabled: boolean): void;
        SetLocalSend(localSendEnabled: boolean): void;
        SetMuted(muted: boolean): void;
        SetOnDirectionChange(callback: Object): void;
        SetOnStateChange(callback: Object): void;
        SetTag(tag: string): void;
    }
}
interface VideoStreamActiveXObject extends ActiveXObject, fm.icelink.IPluginVideoStream {
}
declare namespace fm.icelink {
    class PluginVideoStream extends PluginMediaStream<PluginVideoTrack> implements IVideoStream, IInternalVideoStream {
        getTypeString(): string;
        constructor(external: IExternalVideoStream, localTrack: PluginVideoTrack, remoteTrack: PluginVideoTrack);
        getState(): StreamState;
        addOnStateChange(value: IAction0): void;
        removeOnStateChange(value: IAction0): void;
        getLocalReceive(): boolean;
        getLocalSend(): boolean;
        getRemoteReceive(): boolean;
        getRemoteSend(): boolean;
        setLocalReceive(value: boolean): void;
        setLocalSend(value: boolean): void;
        getRemoteDirection(): StreamDirection;
        getHandle(): number;
        changeDirection(newDirection: StreamDirection): Error;
        getDirection(): StreamDirection;
        getId(): string;
        getLabel(): string;
        getLocalBandwidth(): number;
        getLocalDirection(): StreamDirection;
        getMuted(): boolean;
        getRemoteBandwidth(): number;
        getTag(): string;
        getType(): StreamType;
        setLocalDirection(value: StreamDirection): void;
        setLocalBandwidth(value: number): void;
        setMuted(value: boolean): void;
        setTag(value: string): void;
        addOnDirectionChange(callback: Object): void;
        removeOnDirectionChange(callback: Object): void;
    }
}
declare namespace fm.icelink {
    class PluginVideoTrack extends PluginMediaTrack implements IVideoTrack, IInternalVideoTrack {
        getTypeString(): string;
        constructor(external: IExternalVideoTrack, media: PluginMedia);
        private isLocal();
        addOnStarted(value: IAction0): void;
        addOnStopped(value: IAction0): void;
        addOnDestroyed(value: IAction0): void;
        removeOnStarted(value: IAction0): void;
        removeOnStopped(value: IAction0): void;
        removeOnDestroyed(value: IAction0): void;
        changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        getSinkOutput(): SinkOutput;
        getSinkOutputs(): Future<SinkOutput[]>;
        setSinkOutput(value: SinkOutput): void;
        changeSourceInput(sourceInput: SourceInput): Future<Object>;
        getSourceInput(): SourceInput;
        getSourceInputs(): Future<SourceInput[]>;
        setSourceInput(value: SourceInput): void;
        addOnSize(value: IAction1<Size>): void;
        getMuted(): boolean;
        getSize(): Size;
        grabFrame(): Future<VideoBuffer>;
        setMuted(value: boolean): void;
        removeOnSize(value: IAction1<Size>): void;
    }
}
declare namespace fm.icelink {
    interface IExternalRemoteMedia extends IRemoteMedia<IExternalAudioTrack, IExternalVideoTrack>, IViewSinkableMedia<HTMLElement, IExternalDomVideoSink>, IExternal<IInternalRemoteMedia> {
    }
    interface IInternalRemoteMedia extends IRemoteMedia<IInternalAudioTrack, IInternalVideoTrack>, IViewSinkableMedia<HTMLElement, IInternalDomVideoSink>, IInternal<IExternalRemoteMedia> {
    }
    class RemoteMedia extends Media implements IRemoteMedia<AudioTrack, VideoTrack>, IExternalRemoteMedia {
        getTypeString(): string;
        constructor();
        changeAudioSinkOutput(audioSinkOutput: SinkOutput): Future<Object>;
        changeVideoSinkOutput(videoSinkOutput: SinkOutput): Future<Object>;
        getAudioSinkOutput(): SinkOutput;
        getAudioSinkOutputs(): Future<SinkOutput[]>;
        getVideoSinkOutput(): SinkOutput;
        getVideoSinkOutputs(): Future<SinkOutput[]>;
        setAudioSinkOutput(value: SinkOutput): void;
        setVideoSinkOutput(value: SinkOutput): void;
    }
}
declare namespace fm.icelink {
    interface IExternalVideoStream extends IVideoStream, IExternal<IInternalVideoStream> {
    }
    interface IInternalVideoStream extends IVideoStream, IInternal<IExternalVideoStream> {
    }
    class VideoStream extends MediaStream<VideoTrack> implements IVideoStream, IExternalVideoStream {
        getTypeString(): string;
        getLocalMedia(): LocalMedia;
        getRemoteMedia(): RemoteMedia;
        constructor(localTrack: VideoTrack);
        constructor(localTrack: VideoTrack, remoteTrack: VideoTrack);
        constructor(localMedia: LocalMedia);
        constructor(localMedia: LocalMedia, remoteMedia: RemoteMedia);
        constructor(remoteMedia: RemoteMedia);
    }
}
declare namespace fm.icelink {
    interface IExternalVideoTrack extends IVideoTrack, IExternal<IInternalVideoTrack> {
    }
    interface IInternalVideoTrack extends IVideoTrack, IInternal<IExternalVideoTrack> {
    }
    class VideoTrack extends MediaTrack implements IVideoTrack, IExternalVideoTrack {
        getTypeString(): string;
        constructor(media: Media, internalMedia?: IInternalMedia);
        addOnSize(value: IAction1<Size>): void;
        getSize(): Size;
        grabFrame(): Future<VideoBuffer>;
        removeOnSize(value: IAction1<Size>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Stream base properties/methods.
     </div>

    */
    abstract class WebRtcStreamBase extends fm.icelink.Dynamic implements fm.icelink.IStream {
        getTypeString(): string;
        private fmicelinkWebRtcStreamBaseInit();
        /**<span id='method-fm.icelink.WebRtcStreamBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.streamBase` class.
         </div>

        @param {fm.icelink.StreamType} type The type.
        @return {}
        */
        constructor(type: fm.icelink.StreamType);
        /**<span id='method-fm.icelink.WebRtcStreamBase-addOnDirectionChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the stream direction change has occurred.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        addOnDirectionChange(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-addOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the stream state changes.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        addOnStateChange(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-changeDirection'>&nbsp;</span>**/
        /**
         <div>
         Changes this stream's direction.
         </div>


        @param {fm.icelink.StreamDirection} newDirection
        @return {fm.icelink.Error}
        */
        abstract changeDirection(newDirection: fm.icelink.StreamDirection): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getConnectedTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Gets the ManagedStopwatch.GetTimestamp() value representing the ticks that
         passed when this stream's connection state changed to connected.
         </div>


        @return {number}
        */
        protected getConnectedTimestamp(): number;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getConnectionId'>&nbsp;</span>**/
        /**
         <div>
         Gets the connection identifier.
         </div>


        @return {string}
        */
        getConnectionId(): string;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the current direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        abstract getDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the stream is currently closed or failed.
         </div>


        @return {boolean}
        */
        getIsTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminating'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the stream is currently closing or failing.
         </div>


        @return {boolean}
        */
        getIsTerminating(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the stream is currently closing, failing, closed, or failed.
         </div>


        @return {boolean}
        */
        getIsTerminatingOrTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets a label that identifies this class.
         </div>


        @return {string}
        */
        abstract getLabel(): string;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets current direction indicated by the local description.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        abstract getLocalDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getLocalReceive'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether receiving media is supported by the local peer on this stream.
         </div>


        @return {boolean}
        */
        getLocalReceive(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getLocalSend'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether sending media is supported by the local peer on this stream.
         </div>


        @return {boolean}
        */
        getLocalSend(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets current direction indicated by the remote description.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        abstract getRemoteDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getRemoteReceive'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
         </div>


        @return {boolean}
        */
        getRemoteReceive(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getRemoteSend'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
         </div>


        @return {boolean}
        */
        getRemoteSend(): boolean;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state of the stream.
         </div>


        @return {fm.icelink.StreamState}
        */
        getState(): fm.icelink.StreamState;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getTag'>&nbsp;</span>**/
        /**
         <div>
         Gets an optional tag to identify this instance.
         </div>


        @return {string}
        */
        getTag(): string;
        /**<span id='method-fm.icelink.WebRtcStreamBase-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.StreamType}
        */
        getType(): fm.icelink.StreamType;
        /**<span id='method-fm.icelink.WebRtcStreamBase-processStateChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state change.
         </div>


        @return {void}
        */
        protected processStateChange(): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-processStateLockChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state lock change.
         </div>


        @return {void}
        */
        protected processStateLockChange(): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-removeOnDirectionChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the stream direction change has occurred.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        removeOnDirectionChange(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-removeOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the stream state changes.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        removeOnStateChange(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-setLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets current direction indicated by the local description.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        abstract setLocalDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-setLocalReceive'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether receiving media is supported by the local peer on this stream.
         </div>


        @param {boolean} value
        @return {void}
        */
        setLocalReceive(value: boolean): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-setLocalSend'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether sending media is supported by the local peer on this stream.
         </div>


        @param {boolean} value
        @return {void}
        */
        setLocalSend(value: boolean): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-setRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets current direction indicated by the remote description.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        protected abstract setRemoteDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-setTag'>&nbsp;</span>**/
        /**
         <div>
         Sets an optional tag to identify this instance.
         </div>


        @param {string} value
        @return {void}
        */
        setTag(value: string): void;
        /**<span id='method-fm.icelink.WebRtcStreamBase-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    abstract class WebRtcStream extends WebRtcStreamBase implements IInternalStream {
        getTypeString(): string;
        getConnection(): WebRtcConnection;
        setConnection(remoteTrack: WebRtcConnection): void;
        processSdpMediaDescription(sdpMessage: sdp.Message, sdpMediaDescription: sdp.MediaDescription, isLocalDescription: boolean, isOffer: boolean, isRenegotiation: boolean): Error;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media stream base properties/methods.
     </div>

    */
    abstract class WebRtcMediaStreamBase extends fm.icelink.WebRtcStream implements fm.icelink.IMediaStream, fm.icelink.IStream {
        getTypeString(): string;
        private fmicelinkWebRtcMediaStreamBaseInit();
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaStreamBase` class.
         </div>

        @param {fm.icelink.StreamType} type The type.
        @return {}
        */
        constructor(type: fm.icelink.StreamType);
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-changeDirection'>&nbsp;</span>**/
        /**
         <div>
         Records the pending direction of this stream. The LocalDirection of this stream will be updated when the connection renegotiation commences.
         </div>


        @param {fm.icelink.StreamDirection} newDirection
        @return {fm.icelink.Error}
        */
        changeDirection(newDirection: fm.icelink.StreamDirection): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets a label that identifies this class.
         </div>


        @return {string}
        */
        getLabel(): string;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLocalBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the local bandwidth in Kbps (Kilobits per second).
         </div>


        @return {number}
        */
        getLocalBandwidth(): number;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets current direction indicated by the local description.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getLocalDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getMaxInputBitrate'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum bitrate that is supported by this stream in Kbps (Kilobits per second).
         Returns -1 if it is not set.
         </div>


        @return {number}
        */
        getMaxInputBitrate(): number;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this instance is muted.
         </div>


        @return {boolean}
        */
        abstract getMuted(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRemoteBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote bandwidth in Kbps (Kilobits per second).
         </div>


        @return {number}
        */
        getRemoteBandwidth(): number;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets current direction indicated by the remote description.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getRemoteDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-getRenegotiationPending'>&nbsp;</span>**/
        /**
         <div>
         Gets whether there exist changes that are pending SDP renegotiation.
         </div>


        @return {boolean}
        */
        protected getRenegotiationPending(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setLocalBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the local bandwidth in Kbps (Kilobits per second).
         </div>


        @param {number} value
        @return {void}
        */
        setLocalBandwidth(value: number): void;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets current direction indicated by the local description.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        setLocalDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setMuted'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether this instance is muted.
         </div>


        @param {boolean} value
        @return {void}
        */
        abstract setMuted(value: boolean): void;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRemoteBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote bandwidth in Kbps (Kilobits per second).
         </div>


        @param {number} value
        @return {void}
        */
        protected setRemoteBandwidth(value: number): void;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets current direction indicated by the remote description.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        protected setRemoteDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.WebRtcMediaStreamBase-setRenegotiationPending'>&nbsp;</span>**/
        /**
         <div>
         Sets whether there exist changes that are pending SDP renegotiation.
         </div>


        @param {boolean} value
        @return {void}
        */
        protected setRenegotiationPending(value: boolean): void;
    }
}
declare namespace fm.icelink {
    abstract class WebRtcMediaStream<TTrack extends WebRtcMediaTrack> extends WebRtcMediaStreamBase implements IInternalMediaStream {
        getTypeString(): string;
        getLocalTrack(): TTrack;
        setLocalTrack(localTrack: TTrack): void;
        getRemoteTrack(): TTrack;
        setRemoteTrack(remoteTrack: TTrack): void;
        setMuted(muted: boolean): void;
        getMuted(): boolean;
        constructor(external: IExternalMediaStream, localTrack: TTrack, remoteTrack: TTrack, type: StreamType);
        processCachedChanges(): void;
        resetRemoteDirection(): void;
        processSdpMediaDescription(sdpMessage: sdp.Message, sdpMediaDescription: sdp.MediaDescription, isLocalDescription: boolean, isOffer: boolean, isRenegotiation: boolean): Error;
        getDirectionCapabilities(): StreamDirection;
    }
}
declare namespace fm.icelink {
    class WebRtcAudioStream extends WebRtcMediaStream<WebRtcAudioTrack> implements IAudioStream, IInternalAudioStream {
        getTypeString(): string;
        constructor(external: IExternalAudioStream, localTrack: WebRtcAudioTrack, remoteTrack: WebRtcAudioTrack);
        addOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        addOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        insertDtmfTone(dtmfTone: dtmf.Tone): boolean;
        insertDtmfTones(dtmfTones: dtmf.Tone[]): boolean;
        removeOnReceiveDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnReceiveDtmfToneChange(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfTone(value: IAction1<dtmf.Tone>): void;
        removeOnSendDtmfToneChange(value: IAction1<dtmf.Tone>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media track base properties/methods.
     </div>

    */
    abstract class WebRtcMediaTrackBase extends fm.icelink.Dynamic implements fm.icelink.IMediaTrack {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-addOnDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract addOnDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-addOnStarted'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the track is started.
         Only applicable for local media tracks.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract addOnStarted(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-addOnStopped'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the track is stopped.
         Only applicable for local media tracks.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract addOnStopped(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-changeSinkOutput'>&nbsp;</span>**/
        /**
         <div>
         Changes the sink output while the media track is active.
         </div>

        @param {fm.icelink.SinkOutput} sinkOutput The sink output.
        @return {fm.icelink.Future<Object>}
        */
        abstract changeSinkOutput(sinkOutput: fm.icelink.SinkOutput): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-changeSourceInput'>&nbsp;</span>**/
        /**
         <div>
         Changes the source input while the media track is active.
         </div>

        @param {fm.icelink.SourceInput} sourceInput The source input.
        @return {fm.icelink.Future<Object>}
        */
        abstract changeSourceInput(sourceInput: fm.icelink.SourceInput): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-destroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this media track.
         </div>


        @return {boolean}
        */
        abstract destroy(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-getMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this
         track is muted.
         </div>


        @return {boolean}
        */
        abstract getMuted(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-getSinkOutput'>&nbsp;</span>**/
        /**
         <div>
         Gets the current sink output.
         </div>


        @return {fm.icelink.SinkOutput}
        */
        abstract getSinkOutput(): fm.icelink.SinkOutput;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-getSinkOutputs'>&nbsp;</span>**/
        /**
         <div>
         Gets the available sink outputs.
         </div>

        @return {fm.icelink.Future<fm.icelink.SinkOutput[]>}
         A future with an array of sink outputs.
 
        */
        abstract getSinkOutputs(): fm.icelink.Future<fm.icelink.SinkOutput[]>;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-getSourceInput'>&nbsp;</span>**/
        /**
         <div>
         Gets the current source input.
         </div>


        @return {fm.icelink.SourceInput}
        */
        abstract getSourceInput(): fm.icelink.SourceInput;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-getSourceInputs'>&nbsp;</span>**/
        /**
         <div>
         Gets the available source inputs.
         </div>

        @return {fm.icelink.Future<fm.icelink.SourceInput[]>}
         A future with an array of source inputs.
 
        */
        abstract getSourceInputs(): fm.icelink.Future<fm.icelink.SourceInput[]>;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-removeOnDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract removeOnDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-removeOnStarted'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the track is started.
         Only applicable for local media tracks.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract removeOnStarted(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-removeOnStopped'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the track is stopped.
         Only applicable for local media tracks.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract removeOnStopped(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-setMuted'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether this
         track is muted.
         </div>


        @param {boolean} value
        @return {void}
        */
        abstract setMuted(value: boolean): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-setSinkOutput'>&nbsp;</span>**/
        /**
         <div>
         Sets the current sink output.
         </div>


        @param {fm.icelink.SinkOutput} value
        @return {void}
        */
        abstract setSinkOutput(value: fm.icelink.SinkOutput): void;
        /**<span id='method-fm.icelink.WebRtcMediaTrackBase-setSourceInput'>&nbsp;</span>**/
        /**
         <div>
         Sets the current source input.
         </div>


        @param {fm.icelink.SourceInput} value
        @return {void}
        */
        abstract setSourceInput(value: fm.icelink.SourceInput): void;
    }
}
interface MediaStreamTrack {
}
declare var MediaStreamTrack: {
    prototype: MediaStreamTrack;
    new (): MediaStreamTrack;
};
declare namespace fm.icelink {
    abstract class WebRtcMediaTrack extends WebRtcMediaTrackBase implements IMediaTrack, IInternalMediaTrack {
        getTypeString(): string;
        addOnStarted(value: IAction0): void;
        addOnStopped(value: IAction0): void;
        addOnDestroyed(value: IAction0): void;
        removeOnStarted(value: IAction0): void;
        removeOnStopped(value: IAction0): void;
        removeOnDestroyed(value: IAction0): void;
        getMedia(): WebRtcMedia<WebRtcAudioTrack, WebRtcVideoTrack>;
        constructor(external: IExternalMediaTrack, media: WebRtcMedia<WebRtcAudioTrack, WebRtcVideoTrack>);
        getMuted(): boolean;
        setMuted(muted: boolean): void;
        getOnEnded(): EventListener;
        setOnEnded(onEnded: EventListener): void;
        stop(): void;
        destroy(): boolean;
    }
}
declare namespace fm.icelink {
    class WebRtcAudioTrack extends WebRtcMediaTrack implements IAudioTrack, IInternalAudioTrack {
        getTypeString(): string;
        constructor(external: IExternalAudioTrack, media: WebRtcMedia<WebRtcAudioTrack, WebRtcVideoTrack>);
        private isLocal();
        changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        getSinkOutput(): SinkOutput;
        getSinkOutputs(): Future<SinkOutput[]>;
        setSinkOutput(value: SinkOutput): void;
        changeSourceInput(sourceInput: SourceInput): Future<Object>;
        getSourceInput(): SourceInput;
        getSourceInputs(): Future<SourceInput[]>;
        setSourceInput(value: SourceInput): void;
        addOnLevel(value: IAction1<number>): void;
        getGain(): number;
        getVolume(): number;
        removeOnLevel(value: IAction1<number>): void;
        setGain(value: number): void;
        setVolume(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Connection base properties/methods.
     </div>

    */
    abstract class WebRtcConnectionBase<TConnection extends fm.icelink.WebRtcConnectionBase<TConnection, TStream, TAudioStream, TVideoStream, TDataStream, TDataChannel>, TStream extends fm.icelink.WebRtcStreamBase, TAudioStream extends fm.icelink.IAudioStream, TVideoStream extends fm.icelink.IVideoStream, TDataStream extends fm.icelink.IDataStream<TDataChannel>, TDataChannel extends fm.icelink.IDataChannel<TDataChannel>> extends fm.icelink.Dynamic implements fm.icelink.IConnection<TConnection, TStream, TAudioStream, TVideoStream, TDataStream> {
        getTypeString(): string;
        private fmicelinkWebRtcConnectionBaseInit();
        /**<span id='method-fm.icelink.WebRtcConnectionBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.connectionBase` class.
         </div>


        @param {Object} sharedLock
        @return {}
        */
        constructor(sharedLock: Object);
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addIceServer'>&nbsp;</span>**/
        /**
         <div>
         Adds an ICE server.
         </div>

        @param {fm.icelink.IceServer} iceServer The ICE server.
        @return {void}
        */
        addIceServer(iceServer: fm.icelink.IceServer): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addIceServers'>&nbsp;</span>**/
        /**
         <div>
         Adds some ICE servers.
         </div>

        @param {fm.icelink.IceServer[]} iceServers The ICE servers.
        @return {void}
        */
        addIceServers(iceServers: fm.icelink.IceServer[]): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnExternalIdChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
         </div>


        @param {fm.icelink.IAction2<string,string>} value
        @return {void}
        */
        addOnExternalIdChange(value: fm.icelink.IAction2<string, string>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnGatheringStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the gathering state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        addOnGatheringStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnIceConnectionStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the ice connection state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        addOnIceConnectionStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnLocalCandidate'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when a local candidate is added.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
        @return {void}
        */
        addOnLocalCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnLocalDescription'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when a local description is set.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
        @return {void}
        */
        addOnLocalDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnRemoteCandidate'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when a remote description is added.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
        @return {void}
        */
        addOnRemoteCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnRemoteDescription'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when a remote description is set.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
        @return {void}
        */
        addOnRemoteDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnSignallingStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the signalling state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        addOnSignallingStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the connection state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        addOnStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-addRemoteCandidate'>&nbsp;</span>**/
        /**
         <div>
         Adds the remote candidate.
         </div>

        @param {fm.icelink.Candidate} remoteCandidate The remote candidate.
        @return {fm.icelink.Future<fm.icelink.Candidate>}
        */
        addRemoteCandidate(remoteCandidate: fm.icelink.Candidate): fm.icelink.Future<fm.icelink.Candidate>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-close'>&nbsp;</span>**/
        /**
         <div>
         Closes this instance.
         </div>


        @return {void}
        */
        abstract close(): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-createAnswer'>&nbsp;</span>**/
        /**
         <div>
         Creates an answer.
         </div>


        @return {fm.icelink.Future<fm.icelink.SessionDescription>}
        */
        createAnswer(): fm.icelink.Future<fm.icelink.SessionDescription>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-createOffer'>&nbsp;</span>**/
        /**
         <div>
         Creates an offer.
         </div>


        @return {fm.icelink.Future<fm.icelink.SessionDescription>}
        */
        createOffer(): fm.icelink.Future<fm.icelink.SessionDescription>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doAddRemoteCandidate'>&nbsp;</span>**/
        /**
         <div>
         Adds the remote candidate.
         </div>

        @param {fm.icelink.Promise<fm.icelink.Candidate>} promise The promise.
        @param {fm.icelink.Candidate} remoteCandidate The remote candidate.
        @return {void}
        */
        protected abstract doAddRemoteCandidate(promise: fm.icelink.Promise<fm.icelink.Candidate>, remoteCandidate: fm.icelink.Candidate): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doCreateAnswer'>&nbsp;</span>**/
        /**
         <div>
         Creates an answer.
         </div>


        @param {fm.icelink.Promise<fm.icelink.SessionDescription>} promise
        @return {void}
        */
        protected abstract doCreateAnswer(promise: fm.icelink.Promise<fm.icelink.SessionDescription>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doCreateOffer'>&nbsp;</span>**/
        /**
         <div>
         Creates an offer.
         </div>


        @param {fm.icelink.Promise<fm.icelink.SessionDescription>} promise
        @return {boolean}
        */
        protected abstract doCreateOffer(promise: fm.icelink.Promise<fm.icelink.SessionDescription>): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doProcessDescription'>&nbsp;</span>**/
        /**
         <div>
         Processes a session description.
         </div>

        @param {fm.icelink.SessionDescription} description The session description.
        @param {boolean} isLocalDescription Whether this is a local session description.
        @return {fm.icelink.Error}
        */
        protected doProcessDescription(description: fm.icelink.SessionDescription, isLocalDescription: boolean): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doSendCachedLocalCandidates'>&nbsp;</span>**/
        /**
         <div>
         Dispatches cached local candidates that were gathered while Connection generated session description.
         </div>


        @return {void}
        */
        protected abstract doSendCachedLocalCandidates(): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doSetLocalDescription'>&nbsp;</span>**/
        /**
         <div>
         Sets the local description.
         </div>

        @param {fm.icelink.Promise<fm.icelink.SessionDescription>} promise The promise.
        @param {fm.icelink.SessionDescription} localDescription The local description.
        @return {void}
        */
        protected abstract doSetLocalDescription(promise: fm.icelink.Promise<fm.icelink.SessionDescription>, localDescription: fm.icelink.SessionDescription): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-doSetRemoteDescription'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote description.
         </div>

        @param {fm.icelink.Promise<fm.icelink.SessionDescription>} promise The promise.
        @param {fm.icelink.SessionDescription} remoteDescription The remote description.
        @return {void}
        */
        protected abstract doSetRemoteDescription(promise: fm.icelink.Promise<fm.icelink.SessionDescription>, remoteDescription: fm.icelink.SessionDescription): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getAudioStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first audio stream.
         </div>


        @return {TAudioStream}
        */
        getAudioStream(): TAudioStream;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getAudioStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the audio streams.
         </div>


        @return {TAudioStream[]}
        */
        abstract getAudioStreams(): TAudioStream[];
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getDataStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first data stream.
         </div>


        @return {TDataStream}
        */
        getDataStream(): TDataStream;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getDataStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the data streams.
         </div>


        @return {TDataStream[]}
        */
        abstract getDataStreams(): TDataStream[];
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getDeadStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the amount of time (in milliseconds)
         to wait for connectivity checks to re-establish
         after they start to fail on a live connection.
         Defaults to 15,000.
         </div>


        @return {number}
        */
        getDeadStreamTimeout(): number;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getError'>&nbsp;</span>**/
        /**
         <div>
         Gets the error.
         </div>


        @return {fm.icelink.Error}
        */
        getError(): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getExternalId'>&nbsp;</span>**/
        /**
         <div>
         Gets the external identifier.
         </div>


        @return {string}
        */
        getExternalId(): string;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getGatheringState'>&nbsp;</span>**/
        /**
         <div>
         Gets the ICE gathering state.
         </div>


        @return {fm.icelink.IceGatheringState}
        */
        abstract getGatheringState(): fm.icelink.IceGatheringState;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasAudio'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this connection has an audio stream.
         </div>


        @return {boolean}
        */
        getHasAudio(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasData'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this connection has a data stream.
         </div>


        @return {boolean}
        */
        getHasData(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getHasVideo'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this connection has a video stream.
         </div>


        @return {boolean}
        */
        getHasVideo(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceConnectionState'>&nbsp;</span>**/
        /**
         <div>
         Gets the ICE connection state.
         </div>


        @return {fm.icelink.IceConnectionState}
        */
        abstract getIceConnectionState(): fm.icelink.IceConnectionState;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceGatherPolicy'>&nbsp;</span>**/
        /**
         <div>
         Gets the ICE gather policy.
         </div>


        @return {fm.icelink.IceGatherPolicy}
        */
        getIceGatherPolicy(): fm.icelink.IceGatherPolicy;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceServer'>&nbsp;</span>**/
        /**
         <div>
         Gets the ICE server.
         </div>


        @return {fm.icelink.IceServer}
        */
        getIceServer(): fm.icelink.IceServer;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIceServers'>&nbsp;</span>**/
        /**
         <div>
         Gets the ICE servers.
         </div>


        @return {fm.icelink.IceServer[]}
        */
        getIceServers(): fm.icelink.IceServer[];
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getInstance'>&nbsp;</span>**/
        /**
         <div>
         Gets the current instance.
         </div>


        @return {TConnection}
        */
        protected abstract getInstance(): TConnection;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the connection is currently closed or failed.
         </div>


        @return {boolean}
        */
        getIsTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminating'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the connection is currently closing or failing.
         </div>


        @return {boolean}
        */
        getIsTerminating(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the connection is currently closing, failing, closed, or failed.
         </div>


        @return {boolean}
        */
        getIsTerminatingOrTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getLocalDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the local description.
         </div>


        @return {fm.icelink.SessionDescription}
        */
        abstract getLocalDescription(): fm.icelink.SessionDescription;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getRemoteDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote description.
         </div>


        @return {fm.icelink.SessionDescription}
        */
        abstract getRemoteDescription(): fm.icelink.SessionDescription;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getSignallingState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state of the signalling.
         </div>


        @return {fm.icelink.SignallingState}
        */
        getSignallingState(): fm.icelink.SignallingState;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state of the connection.
         </div>


        @return {fm.icelink.ConnectionState}
        */
        getState(): fm.icelink.ConnectionState;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getStats'>&nbsp;</span>**/
        /**
         <div>
         Gets the current connection stats.
         </div>

        @return {fm.icelink.Future<fm.icelink.ConnectionStats>}
        */
        abstract getStats(): fm.icelink.Future<fm.icelink.ConnectionStats>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first stream.
         </div>


        @return {TStream}
        */
        getStream(): TStream;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the streams.
         </div>


        @return {TStream[]}
        */
        abstract getStreams(): TStream[];
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getTieBreaker'>&nbsp;</span>**/
        /**
         <div>
         Gets the tie breaker.
         </div>


        @return {string}
        */
        getTieBreaker(): string;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the amount of time (in milliseconds)
         to wait for a connection to establish before
         giving up and closing it. Defaults to 30,000.
         </div>


        @return {number}
        */
        getTimeout(): number;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getTrickleIcePolicy'>&nbsp;</span>**/
        /**
         <div>
         Gets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
         </div>


        @return {fm.icelink.TrickleIcePolicy}
        */
        getTrickleIcePolicy(): fm.icelink.TrickleIcePolicy;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getVideoStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first video stream.
         </div>


        @return {TVideoStream}
        */
        getVideoStream(): TVideoStream;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-getVideoStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the video streams.
         </div>


        @return {TVideoStream[]}
        */
        abstract getVideoStreams(): TVideoStream[];
        /**<span id='method-fm.icelink.WebRtcConnectionBase-processDescription'>&nbsp;</span>**/
        /**
         <div>
         Processes a session description.
         </div>

        @param {fm.icelink.SessionDescription} description The session description.
        @param {boolean} isLocalDescription Whether this is a local session description.
        @return {fm.icelink.Error}
        */
        protected processDescription(description: fm.icelink.SessionDescription, isLocalDescription: boolean): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-processSdpMediaDescription'>&nbsp;</span>**/
        /**
         <div>
         Processes a media description.
         </div>

        @param {TStream} stream The stream.
        @param {fm.icelink.sdp.MediaDescription} sdpMediaDescription The SDP media description.
        @param {number} sdpMediaIndex The SDP media index.
        @param {boolean} isLocalDescription Flag indicating if this is a local Sdp description.
        @param {boolean} isRenegotiation Flag indicating whether SDP renegotiation is currently in progress.
        @return {fm.icelink.Error}
        */
        protected abstract processSdpMediaDescription(stream: TStream, sdpMediaDescription: fm.icelink.sdp.MediaDescription, sdpMediaIndex: number, isLocalDescription: boolean, isRenegotiation: boolean): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-processStateChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state change.
         </div>


        @return {void}
        */
        protected processStateChange(): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseGatheringStateChange'>&nbsp;</span>**/
        /**
         <div>
         Raises gathering state change.
         </div>


        @param {TConnection} connection
        @return {void}
        */
        protected raiseGatheringStateChange(connection: TConnection): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseIceConnectionStateChange'>&nbsp;</span>**/
        /**
         <div>
         Raises ICE connection state change.
         </div>


        @param {TConnection} connection
        @return {void}
        */
        protected raiseIceConnectionStateChange(connection: TConnection): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-raiseLocalCandidate'>&nbsp;</span>**/
        /**
         <div>
         Raises a local candidate but only if it has not been already raised.
         </div>

        @param {fm.icelink.Candidate} localCandidate The local candidate.
        @return {void}
        */
        protected raiseLocalCandidate(localCandidate: fm.icelink.Candidate): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeIceServer'>&nbsp;</span>**/
        /**
         <div>
         Removes an ICE server.
         </div>

        @param {fm.icelink.IceServer} iceServer The ICE server.
        @return {void}
        */
        removeIceServer(iceServer: fm.icelink.IceServer): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeIceServers'>&nbsp;</span>**/
        /**
         <div>
         Removes some ICE servers.
         </div>

        @param {fm.icelink.IceServer[]} iceServers The ICE servers.
        @return {void}
        */
        removeIceServers(iceServers: fm.icelink.IceServer[]): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnExternalIdChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
         </div>


        @param {fm.icelink.IAction2<string,string>} value
        @return {void}
        */
        removeOnExternalIdChange(value: fm.icelink.IAction2<string, string>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnGatheringStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the gathering state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        removeOnGatheringStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnIceConnectionStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the ice connection state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        removeOnIceConnectionStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnLocalCandidate'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when a local candidate is added.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
        @return {void}
        */
        removeOnLocalCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnLocalDescription'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when a local description is set.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
        @return {void}
        */
        removeOnLocalDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnRemoteCandidate'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when a remote description is added.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.Candidate>} value
        @return {void}
        */
        removeOnRemoteCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnRemoteDescription'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when a remote description is set.
         </div>


        @param {fm.icelink.IAction2<TConnection,fm.icelink.SessionDescription>} value
        @return {void}
        */
        removeOnRemoteDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnSignallingStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the signalling state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        removeOnSignallingStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-removeOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the connection state changes.
         </div>


        @param {fm.icelink.IAction1<TConnection>} value
        @return {void}
        */
        removeOnStateChange(value: fm.icelink.IAction1<TConnection>): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setDeadStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the amount of time (in milliseconds)
         to wait for connectivity checks to re-establish
         after they start to fail on a live connection.
         Defaults to 15,000.
         </div>


        @param {number} value
        @return {void}
        */
        setDeadStreamTimeout(value: number): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setExternalId'>&nbsp;</span>**/
        /**
         <div>
         Sets the external identifier.
         </div>


        @param {string} value
        @return {void}
        */
        setExternalId(value: string): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setGatheringState'>&nbsp;</span>**/
        /**
         <div>
         Sets the ICE gathering state.
         </div>


        @param {fm.icelink.IceGatheringState} value
        @return {void}
        */
        protected abstract setGatheringState(value: fm.icelink.IceGatheringState): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceConnectionState'>&nbsp;</span>**/
        /**
         <div>
         Sets the ICE connection state.
         </div>


        @param {fm.icelink.IceConnectionState} value
        @return {void}
        */
        protected abstract setIceConnectionState(value: fm.icelink.IceConnectionState): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceGatherPolicy'>&nbsp;</span>**/
        /**
         <div>
         Sets the ICE gather policy.
         </div>


        @param {fm.icelink.IceGatherPolicy} value
        @return {void}
        */
        setIceGatherPolicy(value: fm.icelink.IceGatherPolicy): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceServer'>&nbsp;</span>**/
        /**
         <div>
         Sets the ICE server.
         </div>


        @param {fm.icelink.IceServer} value
        @return {void}
        */
        setIceServer(value: fm.icelink.IceServer): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setIceServers'>&nbsp;</span>**/
        /**
         <div>
         Sets the ICE servers.
         </div>


        @param {fm.icelink.IceServer[]} value
        @return {void}
        */
        setIceServers(value: fm.icelink.IceServer[]): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setLocalDescription'>&nbsp;</span>**/
        /**
         <div>
         Sets the local description.
         </div>

        @param {fm.icelink.SessionDescription} localDescription The local description.
        @return {fm.icelink.Future<fm.icelink.SessionDescription>}
        */
        setLocalDescription(localDescription: fm.icelink.SessionDescription): fm.icelink.Future<fm.icelink.SessionDescription>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setRemoteDescription'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote description.
         </div>

        @param {fm.icelink.SessionDescription} remoteDescription The remote description.
        @return {fm.icelink.Future<fm.icelink.SessionDescription>}
        */
        setRemoteDescription(remoteDescription: fm.icelink.SessionDescription): fm.icelink.Future<fm.icelink.SessionDescription>;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setSignallingState'>&nbsp;</span>**/
        /**
         <div>
         Sets the state of the signalling.
         </div>


        @param {fm.icelink.SignallingState} value
        @return {void}
        */
        protected setSignallingState(value: fm.icelink.SignallingState): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setTieBreaker'>&nbsp;</span>**/
        /**
         <div>
         Sets the tie breaker.
         </div>


        @param {string} value
        @return {void}
        */
        setTieBreaker(value: string): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the amount of time (in milliseconds)
         to wait for a connection to establish before
         giving up and closing it. Defaults to 30,000.
         </div>


        @param {number} value
        @return {void}
        */
        setTimeout(value: number): void;
        /**<span id='method-fm.icelink.WebRtcConnectionBase-setTrickleIcePolicy'>&nbsp;</span>**/
        /**
         <div>
         Sets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
         </div>


        @param {fm.icelink.TrickleIcePolicy} value
        @return {void}
        */
        setTrickleIcePolicy(value: fm.icelink.TrickleIcePolicy): void;
    }
}
declare function makeMediaStream(): MediaStream;
declare namespace fm.icelink {
    class WebRtcConnection extends WebRtcConnectionBase<WebRtcConnection, WebRtcStream, WebRtcAudioStream, WebRtcVideoStream, WebRtcDataStream, WebRtcDataChannel> implements IInternalConnection {
        getTypeString(): string;
        getRemoteMedia(): WebRtcRemoteMedia;
        getNativePeerConnection(): RTCPeerConnection;
        private _remoteMediaTrackCount;
        private _dataStreamsReady;
        private _mediaStreamsReady;
        getNativeIceGatherers(): RTCIceGatherer[];
        getNativeIceTransports(): RTCIceTransport[];
        getNativeDtlsTransports(): RTCDtlsTransport[];
        getNativeRtpSenders(): RTCRtpSender[];
        getNativeRtpReceivers(): RTCRtpReceiver[];
        constructor(external: IExternalConnection, streams: WebRtcStream[], remoteMedia: WebRtcRemoteMedia);
        getInstance(): WebRtcConnection;
        private addStreamInternal(stream);
        private addStreamsInternal(streams);
        processStateChange(): void;
        getStreams(): WebRtcStream[];
        getMediaStreams(): WebRtcMediaStream<WebRtcMediaTrack>[];
        getAudioStreams(): WebRtcAudioStream[];
        getVideoStreams(): WebRtcVideoStream[];
        getDataStreams(): WebRtcDataStream[];
        getStats(): Future<ConnectionStats>;
        private getMediaSenderStats(mediaSenderId, report);
        private getMediaReceiverStats(mediaReceiverId, report);
        private getTransportStats(transportId, report, mediaSenderStats, mediaReceiverStats);
        private getCertificateStats(certificateId, report);
        private getCandidateStats(candidateId, report);
        private getCandidatePairStats(candidatePairId, report);
        private getCodecStats(codecId, report, sender);
        private getMediaTrackStats(mediaTrackId, report);
        private initialize();
        private initializeTrack(element, rtcServers);
        private validateCandidate(candidate);
        private createIceGatherer(rtcServers);
        private sessionDescriptionTypeToString(typeEnum);
        private sessionDescriptionTypeToEnum(typeString);
        private webrtcCandidateToCandidate(webrtcCandidate);
        private webrtcCandidateFromCandidate(candidate);
        private webrtcSessionDescriptionToSessionDescription(webrtcSessionDescription);
        private webrtcSessionDescriptionFromSessionDescription(sessionDescription);
        private rtcCandidateToSdpCandidateAttribute(rtcCandidate);
        private rtcCandidateFromSdpCandidateAttribute(sdpCandidateAttribute);
        private ortcCandidateToCandidate(ortcCandidate);
        private ortcCandidateFromCandidate(candidate);
        private ortcSessionDescriptionToSessionDescription(ortcSessionDescription);
        private ortcSessionDescriptionFromSessionDescription(sessionDescription);
        private applyMediaFormatParametersAttributes(codecCap, mediaFormatParametersList);
        private applyMediaFeedbackAttributes(codecCap, mediaFeedbackAttributeList);
        /**<span id='method-fm.icelink.Connection-getIceCandidateProcessingTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the amount of time (in milliseconds) to wait
         before halting gathering efforts for early candidates.
         Only applies when TrickleIceSupport is set to NotSupported.
         Defaults to 1000.
         </div>


        @return {number}
        */
        getIceCandidateProcessingTimeout(): number;
        /**<span id='method-fm.icelink.ConnectionBase-setIceCandidateProcessingTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the amount of time (in milliseconds) to wait
         before halting gathering efforts for early candidates.
         Only applies when TrickleIceSupport is set to NotSupported.
         Defaults to 1000.
         </div>


        @param {number} value
        @return {void}
        */
        setIceCandidateProcessingTimeout(value: number): void;
        protected doCreateOffer(promise: Promise<SessionDescription>): boolean;
        protected doCreateAnswer(promise: Promise<SessionDescription>): void;
        private setNativeDescriptionSuccess(sessionDescription, promise);
        private doCreate(promise);
        getLocalDescription(): SessionDescription;
        getGatheringState(): IceGatheringState;
        getIceConnectionState(): IceConnectionState;
        protected setGatheringState(state: IceGatheringState): void;
        protected setIceConnectionState(state: IceConnectionState): void;
        getRemoteDescription(): SessionDescription;
        private updateLocalDescription(localDescription);
        protected doSetLocalDescription(promise: Promise<SessionDescription>, localDescription: SessionDescription): void;
        private processRemoteDescriptionOnRenegotiation(promise, remoteDescription);
        private removeSdesAttributesIfNeeded(remoteDescription);
        protected doSetRemoteDescription(promise: Promise<SessionDescription>, remoteDescription: SessionDescription): void;
        protected doSendCachedLocalCandidates(): void;
        protected processSdpMediaDescription(stream: WebRtcStream, sdpMediaDescription: sdp.MediaDescription, sdpMediaIndex: number, isLocalDescription: boolean, isRenegotiation: boolean): Error;
        private startOrtc();
        private startOrtcTrack(iceGatherer, iceTransport, dtlsTransport, localMediaDescription, remoteMediaDescription);
        private selectCodecs(mediaIndex);
        private selectEncodings(mediaIndex, send);
        private selectRtcp(mediaIndex, send);
        protected doAddRemoteCandidate(promise: Promise<Candidate>, remoteCandidate: Candidate): void;
        private setRemoteCandidatesDoneTimer();
        protected assignRemoteDescriptionInternal(sessionDescription: SessionDescription): void;
        close(): void;
        private doClose();
        private dtmfSender;
        getDtmfSender(): RTCDtmfSender;
        replaceLocalTrack(localTrack: WebRtcMediaTrack, mediaStream: WebRtcMediaStream<WebRtcMediaTrack>): Future<object>;
        replaceRemoteTrack(remoteTrack: WebRtcMediaTrack, mediaStream: WebRtcMediaStream<WebRtcMediaTrack>): Future<object>;
        private getRtpSender(mediaStreamIndex);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data channel base properties/methods.
     </div>

    */
    abstract class WebRtcDataChannelBase<TDataChannel> extends fm.icelink.Dynamic implements fm.icelink.IDataChannel<TDataChannel> {
        getTypeString(): string;
        private fmicelinkWebRtcDataChannelBaseInit();
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataChannelBase` class.
         </div>

        @param {string} label The label.
        @param {boolean} ordered Whether messages will be delivered in the order they are sent.
        @param {string} subprotocol The subprotocol.
        @return {}
        */
        constructor(label: string, ordered: boolean, subprotocol: string);
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-addOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the data channel state changes.
         </div>


        @param {fm.icelink.IAction1<TDataChannel>} value
        @return {void}
        */
        addOnStateChange(value: fm.icelink.IAction1<TDataChannel>): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getConnectionId'>&nbsp;</span>**/
        /**
         <div>
         Gets the connection identifier.
         </div>


        @return {string}
        */
        getConnectionId(): string;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getInstance'>&nbsp;</span>**/
        /**
         <div>
         Gets the current instance.
         </div>


        @return {TDataChannel}
        */
        protected abstract getInstance(): TDataChannel;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the data channel is currently closed or failed.
         </div>


        @return {boolean}
        */
        getIsTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminating'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the data channel is currently closing.
         </div>


        @return {boolean}
        */
        getIsTerminating(): boolean;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getIsTerminatingOrTerminated'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the data channel is currently closing, closed, or failed.
         </div>


        @return {boolean}
        */
        getIsTerminatingOrTerminated(): boolean;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets the label.
         </div>


        @return {string}
        */
        getLabel(): string;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getOnReceive'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to execute when a message is received.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>}
        */
        getOnReceive(): fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getOrdered'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether messages will be delivered in the order they are sent.
         </div>


        @return {boolean}
        */
        getOrdered(): boolean;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state.
         </div>


        @return {fm.icelink.DataChannelState}
        */
        getState(): fm.icelink.DataChannelState;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getStreamId'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream identifier.
         </div>


        @return {string}
        */
        getStreamId(): string;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-getSubprotocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the subprotocol.
         </div>


        @return {string}
        */
        getSubprotocol(): string;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-processStateChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state change.
         </div>


        @return {void}
        */
        protected processStateChange(): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-processStateLockChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state lock change.
         </div>


        @return {void}
        */
        protected processStateLockChange(): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-raiseDataBytes'>&nbsp;</span>**/
        /**
         <div>
         Raises the OnReceive callback with data bytes.
         </div>

        @param {fm.icelink.DataBuffer} dataBytes The data bytes.
        @return {void}
        */
        protected raiseDataBytes(dataBytes: fm.icelink.DataBuffer): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-raiseDataString'>&nbsp;</span>**/
        /**
         <div>
         Raises the OnReceive callback with a data string.
         </div>

        @param {string} dataString The data string.
        @return {void}
        */
        protected raiseDataString(dataString: string): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-removeOnStateChange'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the data channel state changes.
         </div>


        @param {fm.icelink.IAction1<TDataChannel>} value
        @return {void}
        */
        removeOnStateChange(value: fm.icelink.IAction1<TDataChannel>): void;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-sendDataBytes'>&nbsp;</span>**/
        /**
         <div>
         Sends some bytes.
         </div>

        @param {fm.icelink.DataBuffer} dataBytes The data bytes.
        @return {fm.icelink.Future<Object>}
        */
        abstract sendDataBytes(dataBytes: fm.icelink.DataBuffer): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-sendDataString'>&nbsp;</span>**/
        /**
         <div>
         Sends a string.
         </div>

        @param {string} dataString The data string.
        @return {fm.icelink.Future<Object>}
        */
        abstract sendDataString(dataString: string): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.WebRtcDataChannelBase-setOnReceive'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to execute when a message is received.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>} value
        @return {void}
        */
        setOnReceive(value: fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>): void;
    }
}
interface RTCMessageEvent {
    data: any;
}
interface RTCDataChannel extends EventTarget {
    label: string;
    reliable: boolean;
    readyState: string;
    bufferedAmount: number;
    binaryType: string;
    onopen: (event: Event) => void;
    onerror: (event: Event) => void;
    onclose: (event: Event) => void;
    onmessage: (event: RTCMessageEvent) => void;
    close(): void;
    send(data: string): void;
    send(data: ArrayBuffer): void;
    send(data: ArrayBufferView): void;
    send(data: Blob): void;
}
declare var RTCDataChannel: {
    prototype: RTCDataChannel;
    new (): RTCDataChannel;
};
declare namespace fm.icelink {
    class WebRtcDataChannel extends WebRtcDataChannelBase<WebRtcDataChannel> implements IInternalDataChannel {
        getTypeString(): string;
        getNativeDataChannel(): RTCDataChannel;
        setNativeDataChannel(nativeDataChannel: RTCDataChannel): void;
        constructor(external: IExternalDataChannel, label: string, ordered?: boolean, subprotocol?: string);
        getInstance(): WebRtcDataChannel;
        sendDataString(dataString: string): fm.icelink.Future<Object>;
        sendDataBytes(dataBytes: DataBuffer): fm.icelink.Future<Object>;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data stream base properties/methods.
     </div>

    */
    abstract class WebRtcDataStreamBase<TDataChannel extends fm.icelink.WebRtcDataChannelBase<TDataChannel>> extends fm.icelink.WebRtcStream implements fm.icelink.IDataStream<TDataChannel>, fm.icelink.IStream {
        getTypeString(): string;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataStreamBase` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-changeDirection'>&nbsp;</span>**/
        /**
         <div>
         Changes this stream's direction
         </div>


        @param {fm.icelink.StreamDirection} newDirection
        @return {fm.icelink.Error}
        */
        changeDirection(newDirection: fm.icelink.StreamDirection): fm.icelink.Error;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-getChannels'>&nbsp;</span>**/
        /**
         <div>
         Gets the channels.
         </div>


        @return {TDataChannel[]}
        */
        abstract getChannels(): TDataChannel[];
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the current direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets a label that identifies this class.
         </div>


        @return {string}
        */
        getLabel(): string;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-getLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the current direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getLocalDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-getRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the current direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getRemoteDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-processStateChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state change.
         </div>


        @return {void}
        */
        protected processStateChange(): void;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-processStateLockChange'>&nbsp;</span>**/
        /**
         <div>
         Processes a state lock change.
         </div>


        @return {void}
        */
        protected processStateLockChange(): void;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-setLocalDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets the current direction.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        setLocalDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.WebRtcDataStreamBase-setRemoteDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets the current direction.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        protected setRemoteDirection(value: fm.icelink.StreamDirection): void;
    }
}
declare namespace fm.icelink {
    class WebRtcDataStream extends WebRtcDataStreamBase<WebRtcDataChannel> implements IInternalDataStream {
        getTypeString(): string;
        constructor(external: IExternalDataStream, channels: WebRtcDataChannel[]);
        getChannels(): WebRtcDataChannel[];
    }
}
declare namespace fm.icelink {
    class WebRtcDomAudioSink extends Dynamic implements IInternal<DomAudioSink> {
        getTypeString(): string;
        getTrack(): WebRtcAudioTrack;
        getLocal(): boolean;
        getAudio(): HTMLAudioElement;
        getVolume(): number;
        setVolume(volume: number): void;
        getMuted(): boolean;
        setMuted(muted: boolean): void;
        constructor(external: DomAudioSink, track: WebRtcAudioTrack);
        setTrack(track: WebRtcAudioTrack): boolean;
    }
}
declare namespace fm.icelink {
    class WebRtcDomVideoSink extends Dynamic implements IInternalDomVideoSink {
        getTypeString(): string;
        getTrack(): WebRtcVideoTrack;
        getLocal(): boolean;
        getView(): HTMLElement;
        getViewScale(): LayoutScale;
        setViewScale(viewScale: LayoutScale): void;
        getViewMirror(): boolean;
        setViewMirror(viewMirror: boolean): void;
        getVideo(): HTMLVideoElement;
        getVideoWidth(): number;
        getVideoHeight(): number;
        getVolume(): number;
        setVolume(volume: number): void;
        getMuted(): boolean;
        setMuted(muted: boolean): void;
        constructor(external: IExternalDomVideoSink, track: WebRtcVideoTrack);
        setTrack(track: WebRtcVideoTrack): boolean;
        private applyScale(scale);
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of audio/video track base methods/properties.
     </div>

    */
    abstract class WebRtcMediaBase<TIAudioTrack extends fm.icelink.IAudioTrack, TIVideoTrack extends fm.icelink.IVideoTrack> extends fm.icelink.Dynamic implements fm.icelink.IMedia<TIAudioTrack, TIVideoTrack> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebRtcMediaBase-addOnAudioDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the first audio track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract addOnAudioDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-addOnAudioLevel'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised whenever the level of
         the first audio track is calculated.
         </div>


        @param {fm.icelink.IAction1<number>} value
        @return {void}
        */
        abstract addOnAudioLevel(value: fm.icelink.IAction1<number>): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-addOnVideoDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised when the first video track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract addOnVideoDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-addOnVideoSize'>&nbsp;</span>**/
        /**
         <div>
         Adds a handler that is raised whenever the size of
         the first video track is calculated.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.Size>} value
        @return {void}
        */
        abstract addOnVideoSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-destroy'>&nbsp;</span>**/
        /**
         <div>
         Destroys this media.
         </div>


        @return {void}
        */
        abstract destroy(): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioGain'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating the gain
         (input amplification) of the first audio track.
         </div>


        @return {number}
        */
        getAudioGain(): number;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the
         first audio track is muted.
         </div>


        @return {boolean}
        */
        getAudioMuted(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioTrack'>&nbsp;</span>**/
        /**
         <div>
         Gets the first audio track.
         </div>


        @return {TIAudioTrack}
        */
        getAudioTrack(): TIAudioTrack;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioTracks'>&nbsp;</span>**/
        /**
         <div>
         Gets the audio tracks.
         </div>


        @return {TIAudioTrack[]}
        */
        abstract getAudioTracks(): TIAudioTrack[];
        /**<span id='method-fm.icelink.WebRtcMediaBase-getAudioVolume'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating the volume
         (output resistance) of the first audio track.
         </div>


        @return {number}
        */
        getAudioVolume(): number;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether the
         first video track is muted.
         </div>


        @return {boolean}
        */
        getVideoMuted(): boolean;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoSize'>&nbsp;</span>**/
        /**
         <div>
         Gets the size of the first video track.
         </div>


        @return {fm.icelink.Size}
        */
        abstract getVideoSize(): fm.icelink.Size;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoTrack'>&nbsp;</span>**/
        /**
         <div>
         Gets the first video track.
         </div>


        @return {TIVideoTrack}
        */
        getVideoTrack(): TIVideoTrack;
        /**<span id='method-fm.icelink.WebRtcMediaBase-getVideoTracks'>&nbsp;</span>**/
        /**
         <div>
         Gets the video tracks.
         </div>


        @return {TIVideoTrack[]}
        */
        abstract getVideoTracks(): TIVideoTrack[];
        /**<span id='method-fm.icelink.WebRtcMediaBase-grabVideoFrame'>&nbsp;</span>**/
        /**
         <div>
         Grabs a frame from the first video track.
         </div>

        @return {fm.icelink.Future<fm.icelink.VideoBuffer>}
        */
        abstract grabVideoFrame(): fm.icelink.Future<fm.icelink.VideoBuffer>;
        /**<span id='method-fm.icelink.WebRtcMediaBase-removeOnAudioDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the first audio track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract removeOnAudioDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-removeOnAudioLevel'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised whenever the level of
         the first audio track is calculated.
         </div>


        @param {fm.icelink.IAction1<number>} value
        @return {void}
        */
        abstract removeOnAudioLevel(value: fm.icelink.IAction1<number>): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-removeOnVideoDestroyed'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised when the first video track is destroyed.
         </div>


        @param {fm.icelink.IAction0} value
        @return {void}
        */
        abstract removeOnVideoDestroyed(value: fm.icelink.IAction0): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-removeOnVideoSize'>&nbsp;</span>**/
        /**
         <div>
         Removes a handler that is raised whenever the size of
         the first video track is calculated.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.Size>} value
        @return {void}
        */
        abstract removeOnVideoSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioGain'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating the gain
         (input amplification) of the first audio track.
         </div>


        @param {number} value
        @return {void}
        */
        setAudioGain(value: number): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioMuted'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether the
         first audio track is muted.
         </div>


        @param {boolean} value
        @return {void}
        */
        setAudioMuted(value: boolean): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-setAudioVolume'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating the volume
         (output resistance) of the first audio track.
         </div>


        @param {number} value
        @return {void}
        */
        setAudioVolume(value: number): void;
        /**<span id='method-fm.icelink.WebRtcMediaBase-setVideoMuted'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether the
         first video track is muted.
         </div>


        @param {boolean} value
        @return {void}
        */
        setVideoMuted(value: boolean): void;
    }
}
declare type fmicelinkGlobalMediaStream = MediaStream;
declare namespace fm.icelink {
    abstract class WebRtcMedia<TAudioTrack extends WebRtcAudioTrack, TVideoTrack extends WebRtcVideoTrack> extends WebRtcMediaBase<WebRtcAudioTrack, WebRtcVideoTrack> implements IMedia<WebRtcAudioTrack, WebRtcVideoTrack>, IInternalMedia {
        getTypeString(): string;
        protected _setAudioMediaStream(audioMediaStream: fmicelinkGlobalMediaStream): boolean;
        protected _setVideoMediaStream(videoMediaStream: fmicelinkGlobalMediaStream): boolean;
        constructor(external: any | IExternalMedia);
        addOnAudioDestroyed(value: IAction0): void;
        addOnVideoDestroyed(value: IAction0): void;
        removeOnAudioDestroyed(value: IAction0): void;
        removeOnVideoDestroyed(value: IAction0): void;
        addOnAudioLevel(value: IAction1<number>): void;
        addOnVideoSize(value: IAction1<Size>): void;
        destroy(): void;
        getAudioGain(): number;
        getAudioTracks(): WebRtcAudioTrack[];
        getAudioVolume(): number;
        getVideoSize(): Size;
        getVideoTracks(): WebRtcVideoTrack[];
        getView(): HTMLElement;
        getViewSink(): WebRtcDomVideoSink;
        grabVideoFrame(): Future<VideoBuffer>;
        removeOnAudioLevel(value: IAction1<number>): void;
        removeOnVideoSize(value: IAction1<Size>): void;
        setAudioGain(value: number): void;
        setAudioVolume(value: number): void;
        protected initializeAudioContext(): void;
        protected destroyAudioContext(): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of local audio/video track base methods.
     </div>

    */
    abstract class WebRtcLocalMediaBase<TLocalMedia extends fm.icelink.WebRtcLocalMediaBase<TLocalMedia, TAudioTrack, TVideoTrack>, TAudioTrack extends fm.icelink.WebRtcAudioTrack, TVideoTrack extends fm.icelink.WebRtcVideoTrack> extends fm.icelink.WebRtcMedia<TAudioTrack, TVideoTrack> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.localMediaBase` class.
         </div>

        @param {Object} external The external.
        @return {}
        */
        constructor(external: Object);
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-abortStart'>&nbsp;</span>**/
        /**
         <div>
         Aborts the start.
         </div>

        @param {fm.icelink.Promise<TLocalMedia>} promise The promise.
        @param {fm.icelink.Exception} exception The exception.
        @return {void}
        */
        protected abortStart(promise: fm.icelink.Promise<TLocalMedia>, exception: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-doStart'>&nbsp;</span>**/
        /**
         <div>
         Starts the local media.
         </div>

        @return {fm.icelink.Future<TLocalMedia>}
        */
        protected abstract doStart(): fm.icelink.Future<TLocalMedia>;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-doStop'>&nbsp;</span>**/
        /**
         <div>
         Stops the local media.
         </div>

        @return {fm.icelink.Future<TLocalMedia>}
        */
        protected abstract doStop(): fm.icelink.Future<TLocalMedia>;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state.
         </div>


        @return {fm.icelink.LocalMediaState}
        */
        getState(): fm.icelink.LocalMediaState;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-start'>&nbsp;</span>**/
        /**
         <div>
         Starts the media track sources.
         </div>


        @return {fm.icelink.Future<TLocalMedia>}
        */
        start(): fm.icelink.Future<TLocalMedia>;
        /**<span id='method-fm.icelink.WebRtcLocalMediaBase-stop'>&nbsp;</span>**/
        /**
         <div>
         Stops the media track sources.
         </div>


        @return {fm.icelink.Future<TLocalMedia>}
        */
        stop(): fm.icelink.Future<TLocalMedia>;
    }
}
declare namespace fm.icelink {
    class WebRtcLocalMedia extends WebRtcLocalMediaBase<WebRtcLocalMedia, WebRtcAudioTrack, WebRtcVideoTrack> implements ILocalMedia<WebRtcLocalMedia, WebRtcAudioTrack, WebRtcVideoTrack>, IInternalLocalMedia {
        getTypeString(): string;
        addOnAudioStarted(value: IAction0): void;
        addOnAudioStopped(value: IAction0): void;
        addOnVideoStarted(value: IAction0): void;
        addOnVideoStopped(value: IAction0): void;
        removeOnAudioStarted(value: IAction0): void;
        removeOnAudioStopped(value: IAction0): void;
        removeOnVideoStarted(value: IAction0): void;
        removeOnVideoStopped(value: IAction0): void;
        getAudioSourceInputs(): Future<SourceInput[]>;
        getVideoSourceInputs(): Future<SourceInput[]>;
        private getSourceInputs(kind);
        private _audioInput;
        getAudioSourceInput(): SourceInput;
        setAudioSourceInput(audioInput: SourceInput): void;
        private _videoInput;
        getVideoSourceInput(): SourceInput;
        setVideoSourceInput(videoInput: SourceInput): void;
        getAudio(): any;
        setAudio(audio: any): void;
        getVideo(): any;
        setVideo(video: any): void;
        getScreen(): boolean;
        setScreen(screen: boolean): void;
        getAudioConstraints(): MediaTrackConstraints;
        getVideoConstraints(): MediaTrackConstraints;
        changeAudioConstraints(audioConstraints: MediaTrackConstraints): Future<Object>;
        changeVideoConstraints(videoConstraints: MediaTrackConstraints): Future<Object>;
        changeAudioSourceInput(audioInput: SourceInput): Future<Object>;
        changeVideoSourceInput(videoInput: SourceInput): Future<Object>;
        constructor(external: IExternalLocalMedia, audio: any, video: any, screen?: boolean);
        doStart(): Future<WebRtcLocalMedia>;
        private doStartInternal(promise);
        doStop(): Future<WebRtcLocalMedia>;
    }
}
declare namespace fm.icelink {
    class WebRtcRemoteMedia extends WebRtcMedia<WebRtcAudioTrack, WebRtcVideoTrack> implements IRemoteMedia<WebRtcAudioTrack, WebRtcVideoTrack>, IInternalRemoteMedia {
        getTypeString(): string;
        constructor(external: IExternalRemoteMedia);
        getAudioSinkOutputs(): Future<SinkOutput[]>;
        getVideoSinkOutputs(): Future<SinkOutput[]>;
        private getSinkOutputs(kind);
        getAudioSinkOutput(): SinkOutput;
        setAudioSinkOutput(audioSinkOutput: SinkOutput): void;
        private attachAudioSinkOutput(audioSinkOutput, element);
        getVideoSinkOutput(): SinkOutput;
        setVideoSinkOutput(videoSinkOutput: SinkOutput): void;
        changeAudioSinkOutput(audioInput: SinkOutput): Future<Object>;
        changeVideoSinkOutput(videoInput: SinkOutput): Future<Object>;
    }
}
declare namespace fm.icelink {
    class WebRtcVideoStream extends WebRtcMediaStream<WebRtcVideoTrack> implements IVideoStream, IInternalVideoStream {
        getTypeString(): string;
        constructor(external: IExternalVideoStream, localTrack: WebRtcVideoTrack, remoteTrack: WebRtcVideoTrack);
    }
}
declare namespace fm.icelink {
    class WebRtcVideoTrack extends WebRtcMediaTrack implements IVideoTrack, IInternalVideoTrack {
        getTypeString(): string;
        constructor(external: IExternalVideoTrack, media: WebRtcMedia<WebRtcAudioTrack, WebRtcVideoTrack>);
        setConfig(config: VideoConfig): void;
        private isLocal();
        changeSinkOutput(sinkOutput: SinkOutput): Future<Object>;
        getSinkOutput(): SinkOutput;
        getSinkOutputs(): Future<SinkOutput[]>;
        setSinkOutput(value: SinkOutput): void;
        changeSourceInput(sourceInput: SourceInput): Future<Object>;
        getSourceInput(): SourceInput;
        getSourceInputs(): Future<SourceInput[]>;
        setSourceInput(value: SourceInput): void;
        addOnSize(value: IAction1<Size>): void;
        getSize(): Size;
        grabFrame(): Future<VideoBuffer>;
        removeOnSize(value: IAction1<Size>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Address types.
     </div>

    */
    enum AddressType {
        /** <span id='prop-fm.icelink.AddressType-IPv4'>&nbsp;</span> **/
        /**
         <div>
         Indicates an IP version 4 address.
         </div>

        @field IPv4
        @type {fm.icelink.AddressType}
        */
        IPv4 = 1,
        /** <span id='prop-fm.icelink.AddressType-IPv6'>&nbsp;</span> **/
        /**
         <div>
         Indicates an IP version 6 address.
         </div>

        @field IPv6
        @type {fm.icelink.AddressType}
        */
        IPv6 = 2,
        /** <span id='prop-fm.icelink.AddressType-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown address type.
         </div>

        @field Unknown
        @type {fm.icelink.AddressType}
        */
        Unknown = 3,
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     An operating system.
     </div>

    */
    enum OperatingSystem {
        /** <span id='prop-fm.icelink.OperatingSystem-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown or default OS.
         </div>

        @field Unknown
        @type {fm.icelink.OperatingSystem}
        */
        Unknown = 1,
        /** <span id='prop-fm.icelink.OperatingSystem-Windows'>&nbsp;</span> **/
        /**
         <div>
         Indicates a Windows operating system.
         </div>

        @field Windows
        @type {fm.icelink.OperatingSystem}
        */
        Windows = 2,
        /** <span id='prop-fm.icelink.OperatingSystem-Android'>&nbsp;</span> **/
        /**
         <div>
         Indicates a Android operating system.
         </div>

        @field Android
        @type {fm.icelink.OperatingSystem}
        */
        Android = 3,
        /** <span id='prop-fm.icelink.OperatingSystem-MacOS'>&nbsp;</span> **/
        /**
         <div>
         Indicates a macOS operating system.
         </div>

        @field MacOS
        @type {fm.icelink.OperatingSystem}
        */
        MacOS = 4,
        /** <span id='prop-fm.icelink.OperatingSystem-IOS'>&nbsp;</span> **/
        /**
         <div>
         Indicates a iOS operating system.
         </div>

        @field IOS
        @type {fm.icelink.OperatingSystem}
        */
        IOS = 5,
        /** <span id='prop-fm.icelink.OperatingSystem-Linux'>&nbsp;</span> **/
        /**
         <div>
         Indicates a Linux operating system.
         </div>

        @field Linux
        @type {fm.icelink.OperatingSystem}
        */
        Linux = 6,
        /** <span id='prop-fm.icelink.OperatingSystem-TvOS'>&nbsp;</span> **/
        /**
         <div>
         Indicates a tvOS operating system.
         </div>

        @field TvOS
        @type {fm.icelink.OperatingSystem}
        */
        TvOS = 7,
        /** <span id='prop-fm.icelink.OperatingSystem-WatchOS'>&nbsp;</span> **/
        /**
         <div>
         Indicates a watchOS operating system.
         </div>

        @field WatchOS
        @type {fm.icelink.OperatingSystem}
        */
        WatchOS = 8,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A CPU architecture.
     </div>

    */
    enum Architecture {
        /** <span id='prop-fm.icelink.Architecture-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown or default CPU architecture.
         </div>

        @field Unknown
        @type {fm.icelink.Architecture}
        */
        Unknown = 1,
        /** <span id='prop-fm.icelink.Architecture-X86'>&nbsp;</span> **/
        /**
         <div>
         Indicates an Intel-based 32-bit CPU architecture.
         </div>

        @field X86
        @type {fm.icelink.Architecture}
        */
        X86 = 2,
        /** <span id='prop-fm.icelink.Architecture-X64'>&nbsp;</span> **/
        /**
         <div>
         Indicates an Intel-based 64-bit CPU architecture.
         </div>

        @field X64
        @type {fm.icelink.Architecture}
        */
        X64 = 3,
        /** <span id='prop-fm.icelink.Architecture-Armv7'>&nbsp;</span> **/
        /**
         <div>
         Indicates an ARMv7-based 32-bit CPU architecture.
         </div>

        @field Armv7
        @type {fm.icelink.Architecture}
        */
        Armv7 = 4,
        /** <span id='prop-fm.icelink.Architecture-Armv8'>&nbsp;</span> **/
        /**
         <div>
         Indicates an ARMv8-based 32-bit CPU architecture.
         </div>

        @field Armv8
        @type {fm.icelink.Architecture}
        */
        Armv8 = 5,
        /** <span id='prop-fm.icelink.Architecture-Arm64'>&nbsp;</span> **/
        /**
         <div>
         Indicates an ARM-based 64-bit CPU architecture.
         </div>

        @field Arm64
        @type {fm.icelink.Architecture}
        */
        Arm64 = 6,
        /** <span id='prop-fm.icelink.Architecture-Mips'>&nbsp;</span> **/
        /**
         <div>
         Indicates a MIPS-based 32-bit CPU architecture.
         </div>

        @field Mips
        @type {fm.icelink.Architecture}
        */
        Mips = 7,
        /** <span id='prop-fm.icelink.Architecture-Mips64'>&nbsp;</span> **/
        /**
         <div>
         Indicates a MIPS-based 64-bit CPU architecture.
         </div>

        @field Mips64
        @type {fm.icelink.Architecture}
        */
        Mips64 = 8,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A source language.
     </div>

    */
    enum SourceLanguage {
        /** <span id='prop-fm.icelink.SourceLanguage-CSharp'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the source language is C#.
         </div>

        @field CSharp
        @type {fm.icelink.SourceLanguage}
        */
        CSharp = 1,
        /** <span id='prop-fm.icelink.SourceLanguage-Java'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the source language is Java.
         </div>

        @field Java
        @type {fm.icelink.SourceLanguage}
        */
        Java = 2,
        /** <span id='prop-fm.icelink.SourceLanguage-ObjectiveC'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the source language is Objective-C.
         </div>

        @field ObjectiveC
        @type {fm.icelink.SourceLanguage}
        */
        ObjectiveC = 3,
        /** <span id='prop-fm.icelink.SourceLanguage-TypeScript'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the source language is TypeScript.
         </div>

        @field TypeScript
        @type {fm.icelink.SourceLanguage}
        */
        TypeScript = 4,
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     The compare result in a sort operation.
     </div>

    */
    enum CompareResult {
        /** <span id='prop-fm.icelink.CompareResult-Equal'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the two elements are equal.
         </div>

        @field Equal
        @type {fm.icelink.CompareResult}
        */
        Equal = 1,
        /** <span id='prop-fm.icelink.CompareResult-Negative'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the first element belongs before the second.
         </div>

        @field Negative
        @type {fm.icelink.CompareResult}
        */
        Negative = 2,
        /** <span id='prop-fm.icelink.CompareResult-Positive'>&nbsp;</span> **/
        /**
         <div>
         Indicates that ths second element belongs before the first.
         </div>

        @field Positive
        @type {fm.icelink.CompareResult}
        */
        Positive = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A hash algorithm.
     </div>

    */
    enum HashType {
        /** <span id='prop-fm.icelink.HashType-Md5'>&nbsp;</span> **/
        /**
         <div>
         Indciates MD5.
         </div>

        @field Md5
        @type {fm.icelink.HashType}
        */
        Md5 = 1,
        /** <span id='prop-fm.icelink.HashType-Sha1'>&nbsp;</span> **/
        /**
         <div>
         Indicates SHA1.
         </div>

        @field Sha1
        @type {fm.icelink.HashType}
        */
        Sha1 = 2,
        /** <span id='prop-fm.icelink.HashType-Sha256'>&nbsp;</span> **/
        /**
         <div>
         Indicates SHA256.
         </div>

        @field Sha256
        @type {fm.icelink.HashType}
        */
        Sha256 = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A message authentication code (MAC) algorithm.
     </div>

    */
    enum MacType {
        /** <span id='prop-fm.icelink.MacType-HmacMd5'>&nbsp;</span> **/
        /**
         <div>
         Indicates HMAC-MD5.
         </div>

        @field HmacMd5
        @type {fm.icelink.MacType}
        */
        HmacMd5 = 1,
        /** <span id='prop-fm.icelink.MacType-HmacSha1'>&nbsp;</span> **/
        /**
         <div>
         Indicates HMAC-SHA1
         </div>

        @field HmacSha1
        @type {fm.icelink.MacType}
        */
        HmacSha1 = 2,
        /** <span id='prop-fm.icelink.MacType-HmacSha256'>&nbsp;</span> **/
        /**
         <div>
         Indicates HMAC-SHA256
         </div>

        @field HmacSha256
        @type {fm.icelink.MacType}
        */
        HmacSha256 = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.
     </div>

    */
    enum ErrorCode {
        /** <span id='prop-fm.icelink.ErrorCode-SocketSendError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the socket encountered an error while sending.
         </div>

        @field SocketSendError
        @type {fm.icelink.ErrorCode}
        */
        SocketSendError = 100000,
        /** <span id='prop-fm.icelink.ErrorCode-SocketReceiveError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the socket encountered an error while receiving.
         </div>

        @field SocketReceiveError
        @type {fm.icelink.ErrorCode}
        */
        SocketReceiveError = 100001,
        /** <span id='prop-fm.icelink.ErrorCode-SocketClosed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the socket is closed.
         </div>

        @field SocketClosed
        @type {fm.icelink.ErrorCode}
        */
        SocketClosed = 100002,
        /** <span id='prop-fm.icelink.ErrorCode-SocketSendBufferFull'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the socket's send buffer is full.
         </div>

        @field SocketSendBufferFull
        @type {fm.icelink.ErrorCode}
        */
        SocketSendBufferFull = 100003,
        /** <span id='prop-fm.icelink.ErrorCode-StunTryAlternate'>&nbsp;</span> **/
        /**
         <div>
         300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
         replying to a request message with an error response message with an error code of 300 (Try Alternate).
         The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
         message MAY be authenticated; however, there are uses cases for
         ALTERNATE-SERVER where authentication of the response is not possible
         or practical.
         </div>

        @field StunTryAlternate
        @type {fm.icelink.ErrorCode}
        */
        StunTryAlternate = 114000,
        /** <span id='prop-fm.icelink.ErrorCode-StunBadRequest'>&nbsp;</span> **/
        /**
         <div>
         400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the
         request without modification from the previous attempt.  The server may not be able
         to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
         a valid MESSAGE-INTEGRITY attribute on this response.
         </div>

        @field StunBadRequest
        @type {fm.icelink.ErrorCode}
        */
        StunBadRequest = 114001,
        /** <span id='prop-fm.icelink.ErrorCode-StunUnauthorized'>&nbsp;</span> **/
        /**
         <div>
         401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
         credentials to proceed.  The client should retry the request with proper credentials.
         </div>

        @field StunUnauthorized
        @type {fm.icelink.ErrorCode}
        */
        StunUnauthorized = 114002,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnForbidden'>&nbsp;</span> **/
        /**
         <div>
         403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
         to perform it, likely due to administrative restrictions. The client considers the current
         transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
         same request with this server until it believes the problem has been fixed.
         </div>

        @field StunTurnForbidden
        @type {fm.icelink.ErrorCode}
        */
        StunTurnForbidden = 114003,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnMobilityForbidden'>&nbsp;</span> **/
        /**
         <div>
         405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
         likely due to administrative restrictions. The client considers the current transaction as having failed.
         The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
         containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
         </div>

        @field StunTurnMobilityForbidden
        @type {fm.icelink.ErrorCode}
        */
        StunTurnMobilityForbidden = 114004,
        /** <span id='prop-fm.icelink.ErrorCode-StunUnknownAttribute'>&nbsp;</span> **/
        /**
         <div>
         420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
         attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
         attribute of its error response.
         </div>

        @field StunUnknownAttribute
        @type {fm.icelink.ErrorCode}
        */
        StunUnknownAttribute = 114005,
        /** <span id='prop-fm.icelink.ErrorCode-StunStaleCredentials'>&nbsp;</span> **/
        /**
         <div>
         430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.
         </div>

        @field StunStaleCredentials
        @type {fm.icelink.ErrorCode}
        */
        StunStaleCredentials = 114006,
        /** <span id='prop-fm.icelink.ErrorCode-StunIntegrityCheckFailure'>&nbsp;</span> **/
        /**
         <div>
         431 Integrity Check Failure.
         </div>

        @field StunIntegrityCheckFailure
        @type {fm.icelink.ErrorCode}
        */
        StunIntegrityCheckFailure = 114007,
        /** <span id='prop-fm.icelink.ErrorCode-StunMissingUsername'>&nbsp;</span> **/
        /**
         <div>
         432 Missing Username; the username attribute is not present in the request.
         </div>

        @field StunMissingUsername
        @type {fm.icelink.ErrorCode}
        */
        StunMissingUsername = 114008,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnAllocationMismatch'>&nbsp;</span> **/
        /**
         <div>
         437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
         One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
         crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
         and retry the Allocate request (using a different transaction id).
         The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
         server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
         </div>

        @field StunTurnAllocationMismatch
        @type {fm.icelink.ErrorCode}
        */
        StunTurnAllocationMismatch = 114009,
        /** <span id='prop-fm.icelink.ErrorCode-StunStaleNonce'>&nbsp;</span> **/
        /**
         <div>
         438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
         NONCE provided in the response.
         </div>

        @field StunStaleNonce
        @type {fm.icelink.ErrorCode}
        */
        StunStaleNonce = 114010,
        /** <span id='prop-fm.icelink.ErrorCode-StunAddressFamilyNotSupported'>&nbsp;</span> **/
        /**
         <div>
         440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
         </div>

        @field StunAddressFamilyNotSupported
        @type {fm.icelink.ErrorCode}
        */
        StunAddressFamilyNotSupported = 114011,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnWrongCredentials'>&nbsp;</span> **/
        /**
         <div>
         441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
         in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
         until it believes the problem has been fixed.
         </div>

        @field StunTurnWrongCredentials
        @type {fm.icelink.ErrorCode}
        */
        StunTurnWrongCredentials = 114012,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnUnsupportedTransportProtocol'>&nbsp;</span> **/
        /**
         <div>
         442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
         client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
         been fixed.
         </div>

        @field StunTurnUnsupportedTransportProtocol
        @type {fm.icelink.ErrorCode}
        */
        StunTurnUnsupportedTransportProtocol = 114013,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnPeerAddressFamilyMismatch'>&nbsp;</span> **/
        /**
         <div>
         443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
         </div>

        @field StunTurnPeerAddressFamilyMismatch
        @type {fm.icelink.ErrorCode}
        */
        StunTurnPeerAddressFamilyMismatch = 114014,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnConnectionAlreadyExists'>&nbsp;</span> **/
        /**
         <div>
         446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
         the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
         and the resulting client and peer data connections are either pending or active
         </div>

        @field StunTurnConnectionAlreadyExists
        @type {fm.icelink.ErrorCode}
        */
        StunTurnConnectionAlreadyExists = 114015,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnConnectionTimeoutOrFailure'>&nbsp;</span> **/
        /**
         <div>
         447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
         XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
         </div>

        @field StunTurnConnectionTimeoutOrFailure
        @type {fm.icelink.ErrorCode}
        */
        StunTurnConnectionTimeoutOrFailure = 114016,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnAllocationQuotaReached'>&nbsp;</span> **/
        /**
         <div>
         486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
         transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.
         </div>

        @field StunTurnAllocationQuotaReached
        @type {fm.icelink.ErrorCode}
        */
        StunTurnAllocationQuotaReached = 114017,
        /** <span id='prop-fm.icelink.ErrorCode-StunIceRoleConflict'>&nbsp;</span> **/
        /**
         <div>
         487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
         The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
         </div>

        @field StunIceRoleConflict
        @type {fm.icelink.ErrorCode}
        */
        StunIceRoleConflict = 114018,
        /** <span id='prop-fm.icelink.ErrorCode-StunServerError'>&nbsp;</span> **/
        /**
         <div>
         500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
         </div>

        @field StunServerError
        @type {fm.icelink.ErrorCode}
        */
        StunServerError = 114019,
        /** <span id='prop-fm.icelink.ErrorCode-StunTurnInsufficientCapacity'>&nbsp;</span> **/
        /**
         <div>
         508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
         reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
         RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
         wait at least 1 minute before trying to create any more allocations on this server.
         </div>

        @field StunTurnInsufficientCapacity
        @type {fm.icelink.ErrorCode}
        */
        StunTurnInsufficientCapacity = 114020,
        /** <span id='prop-fm.icelink.ErrorCode-StunInvalidResponseType'>&nbsp;</span> **/
        /**
         <div>
         Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.
         </div>

        @field StunInvalidResponseType
        @type {fm.icelink.ErrorCode}
        */
        StunInvalidResponseType = 114021,
        /** <span id='prop-fm.icelink.ErrorCode-StunInvalidErrorCode'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a failed response does not contain an error code or when the error code is inconsistent with
         the contents of the response.
         </div>

        @field StunInvalidErrorCode
        @type {fm.icelink.ErrorCode}
        */
        StunInvalidErrorCode = 114022,
        /** <span id='prop-fm.icelink.ErrorCode-StunInvalidTransactionId'>&nbsp;</span> **/
        /**
         <div>
         Indicates Invalid Stun Transaction Id
         </div>

        @field StunInvalidTransactionId
        @type {fm.icelink.ErrorCode}
        */
        StunInvalidTransactionId = 114023,
        /** <span id='prop-fm.icelink.ErrorCode-StunUnknownStunErrorCode'>&nbsp;</span> **/
        /**
         <div>
         Indicates Unknown Stun Error Code
         </div>

        @field StunUnknownStunErrorCode
        @type {fm.icelink.ErrorCode}
        */
        StunUnknownStunErrorCode = 114024,
        /** <span id='prop-fm.icelink.ErrorCode-StunInvalidMessageIntegrity'>&nbsp;</span> **/
        /**
         <div>
         Indicates Invalid Stun Message Integrity
         </div>

        @field StunInvalidMessageIntegrity
        @type {fm.icelink.ErrorCode}
        */
        StunInvalidMessageIntegrity = 114025,
        /** <span id='prop-fm.icelink.ErrorCode-SocketIPError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version
         </div>

        @field SocketIPError
        @type {fm.icelink.ErrorCode}
        */
        SocketIPError = 115001,
        /** <span id='prop-fm.icelink.ErrorCode-IceLocalRelayedDatagramCandidateError'>&nbsp;</span> **/
        /**
         <div>
         Indicates the local relayed candidate could not be processed.
         </div>

        @field IceLocalRelayedDatagramCandidateError
        @type {fm.icelink.ErrorCode}
        */
        IceLocalRelayedDatagramCandidateError = 101000,
        /** <span id='prop-fm.icelink.ErrorCode-IceLocalServerReflexiveCandidateError'>&nbsp;</span> **/
        /**
         <div>
         Indicates the local server reflexive could not be processed.
         </div>

        @field IceLocalServerReflexiveCandidateError
        @type {fm.icelink.ErrorCode}
        */
        IceLocalServerReflexiveCandidateError = 101001,
        /** <span id='prop-fm.icelink.ErrorCode-IceStartError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE gatherer could not be started.
         </div>

        @field IceStartError
        @type {fm.icelink.ErrorCode}
        */
        IceStartError = 102000,
        /** <span id='prop-fm.icelink.ErrorCode-IceUnsuitableSocketAssignment'>&nbsp;</span> **/
        /**
         <div>
         Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.
         </div>

        @field IceUnsuitableSocketAssignment
        @type {fm.icelink.ErrorCode}
        */
        IceUnsuitableSocketAssignment = 102001,
        /** <span id='prop-fm.icelink.ErrorCode-IceAllPortsInUse'>&nbsp;</span> **/
        /**
         <div>
         Indicates that all ports are in use.
         </div>

        @field IceAllPortsInUse
        @type {fm.icelink.ErrorCode}
        */
        IceAllPortsInUse = 102002,
        /** <span id='prop-fm.icelink.ErrorCode-IceLocalAddressUnavailable'>&nbsp;</span> **/
        /**
         <div>
         Indicates that no local addresses were found.
         </div>

        @field IceLocalAddressUnavailable
        @type {fm.icelink.ErrorCode}
        */
        IceLocalAddressUnavailable = 102003,
        /** <span id='prop-fm.icelink.ErrorCode-IceGenericGathererError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an Ice Gatherer error occurred.
         </div>

        @field IceGenericGathererError
        @type {fm.icelink.ErrorCode}
        */
        IceGenericGathererError = 102004,
        /** <span id='prop-fm.icelink.ErrorCode-IceRefreshTimeout'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the relayed candidate refresh request timed out.
         </div>

        @field IceRefreshTimeout
        @type {fm.icelink.ErrorCode}
        */
        IceRefreshTimeout = 103000,
        /** <span id='prop-fm.icelink.ErrorCode-IceRefreshError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the relayed candidate refresh request failed.
         </div>

        @field IceRefreshError
        @type {fm.icelink.ErrorCode}
        */
        IceRefreshError = 103001,
        /** <span id='prop-fm.icelink.ErrorCode-IceCreatePermissionTimeout'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the candidate pair create-permission request timed out.
         </div>

        @field IceCreatePermissionTimeout
        @type {fm.icelink.ErrorCode}
        */
        IceCreatePermissionTimeout = 104000,
        /** <span id='prop-fm.icelink.ErrorCode-IceCreatePermissionError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the candidate pair create-permission request failed.
         </div>

        @field IceCreatePermissionError
        @type {fm.icelink.ErrorCode}
        */
        IceCreatePermissionError = 104001,
        /** <span id='prop-fm.icelink.ErrorCode-IceSendError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE transport encountered an error while sending.
         </div>

        @field IceSendError
        @type {fm.icelink.ErrorCode}
        */
        IceSendError = 105000,
        /** <span id='prop-fm.icelink.ErrorCode-IcePeerReflexiveError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.
         </div>

        @field IcePeerReflexiveError
        @type {fm.icelink.ErrorCode}
        */
        IcePeerReflexiveError = 105001,
        /** <span id='prop-fm.icelink.ErrorCode-IncompatibleIceSetup'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the IcePolicy requirements are not supported by the remote client.
         </div>

        @field IncompatibleIceSetup
        @type {fm.icelink.ErrorCode}
        */
        IncompatibleIceSetup = 105002,
        /** <span id='prop-fm.icelink.ErrorCode-DtlsInternalError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an internal DTLS error occurred.
         </div>

        @field DtlsInternalError
        @type {fm.icelink.ErrorCode}
        */
        DtlsInternalError = 106000,
        /** <span id='prop-fm.icelink.ErrorCode-DtlsKeyExchangeFailed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the DTLS key exchange failed.
         </div>

        @field DtlsKeyExchangeFailed
        @type {fm.icelink.ErrorCode}
        */
        DtlsKeyExchangeFailed = 106001,
        /** <span id='prop-fm.icelink.ErrorCode-DtlsNotReady'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a DTLS message was received before the DTLS endpoint was ready.
         </div>

        @field DtlsNotReady
        @type {fm.icelink.ErrorCode}
        */
        DtlsNotReady = 106002,
        /** <span id='prop-fm.icelink.ErrorCode-SctpNoPayloadData'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an SCTP message had no payload data.
         </div>

        @field SctpNoPayloadData
        @type {fm.icelink.ErrorCode}
        */
        SctpNoPayloadData = 107000,
        /** <span id='prop-fm.icelink.ErrorCode-SctpUnsupportedStream'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an attempt was made to send data on an unsupported stream.
         </div>

        @field SctpUnsupportedStream
        @type {fm.icelink.ErrorCode}
        */
        SctpUnsupportedStream = 107001,
        /** <span id='prop-fm.icelink.ErrorCode-SctpInvalidState'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an operation was attempted while in a state that doesn't allow it.
         </div>

        @field SctpInvalidState
        @type {fm.icelink.ErrorCode}
        */
        SctpInvalidState = 107002,
        /** <span id='prop-fm.icelink.ErrorCode-SctpInternalError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an internal SCTP error occurred.
         </div>

        @field SctpInternalError
        @type {fm.icelink.ErrorCode}
        */
        SctpInternalError = 107003,
        /** <span id='prop-fm.icelink.ErrorCode-MediaTransportFailed'>&nbsp;</span> **/
        /**
         <div>
         Indicates the media transport failed.
         </div>

        @field MediaTransportFailed
        @type {fm.icelink.ErrorCode}
        */
        MediaTransportFailed = 108000,
        /** <span id='prop-fm.icelink.ErrorCode-ReliableDataChannelOpenError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the reliable data channel encountered an error while opening.
         </div>

        @field ReliableDataChannelOpenError
        @type {fm.icelink.ErrorCode}
        */
        ReliableDataChannelOpenError = 109000,
        /** <span id='prop-fm.icelink.ErrorCode-ReliableDataChannelSendError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the reliable data channel encountered an error while sending.
         </div>

        @field ReliableDataChannelSendError
        @type {fm.icelink.ErrorCode}
        */
        ReliableDataChannelSendError = 109001,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionInvalidArchitecture'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection architecture is invalid.
         </div>

        @field ConnectionInvalidArchitecture
        @type {fm.icelink.ErrorCode}
        */
        ConnectionInvalidArchitecture = 110000,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionInternalError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an internal connection error occurred.
         </div>

        @field ConnectionInternalError
        @type {fm.icelink.ErrorCode}
        */
        ConnectionInternalError = 110001,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionTransportStartError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection's inner transport could not be started.
         </div>

        @field ConnectionTransportStartError
        @type {fm.icelink.ErrorCode}
        */
        ConnectionTransportStartError = 110002,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionTransportClosed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection's inner transport is closed.
         </div>

        @field ConnectionTransportClosed
        @type {fm.icelink.ErrorCode}
        */
        ConnectionTransportClosed = 110003,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionDeadStream'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a connection has failed connectivity checks for an extended period.
         </div>

        @field ConnectionDeadStream
        @type {fm.icelink.ErrorCode}
        */
        ConnectionDeadStream = 110004,
        /** <span id='prop-fm.icelink.ErrorCode-ConnectionNotEstablished'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a connection has not been established within allocated timeframe.
         </div>

        @field ConnectionNotEstablished
        @type {fm.icelink.ErrorCode}
        */
        ConnectionNotEstablished = 110005,
        /** <span id='prop-fm.icelink.ErrorCode-StreamDisabled'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream was disabled.
         </div>

        @field StreamDisabled
        @type {fm.icelink.ErrorCode}
        */
        StreamDisabled = 111000,
        /** <span id='prop-fm.icelink.ErrorCode-StreamEncryptionMismatch'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local and remote stream encryption modes are not compatible.
         </div>

        @field StreamEncryptionMismatch
        @type {fm.icelink.ErrorCode}
        */
        StreamEncryptionMismatch = 111001,
        /** <span id='prop-fm.icelink.ErrorCode-StreamDirectionMismatch'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local and remote stream directions are not compatible.
         </div>

        @field StreamDirectionMismatch
        @type {fm.icelink.ErrorCode}
        */
        StreamDirectionMismatch = 111002,
        /** <span id='prop-fm.icelink.ErrorCode-DataStreamDirectionCannotBeChanged'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.
         </div>

        @field DataStreamDirectionCannotBeChanged
        @type {fm.icelink.ErrorCode}
        */
        DataStreamDirectionCannotBeChanged = 111003,
        /** <span id='prop-fm.icelink.ErrorCode-InvalidStreamDirectionChange'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).
         </div>

        @field InvalidStreamDirectionChange
        @type {fm.icelink.ErrorCode}
        */
        InvalidStreamDirectionChange = 111004,
        /** <span id='prop-fm.icelink.ErrorCode-LocalDescriptionError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an error was encountered while processing the local description.
         </div>

        @field LocalDescriptionError
        @type {fm.icelink.ErrorCode}
        */
        LocalDescriptionError = 112000,
        /** <span id='prop-fm.icelink.ErrorCode-RemoteDescriptionError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an error was encountered while processing the remote description.
         </div>

        @field RemoteDescriptionError
        @type {fm.icelink.ErrorCode}
        */
        RemoteDescriptionError = 112001,
        /** <span id='prop-fm.icelink.ErrorCode-IceLocalRelayedStreamCandidateError'>&nbsp;</span> **/
        /**
         <div>
         Indicates the local relayed candidate could not be processed.
         </div>

        @field IceLocalRelayedStreamCandidateError
        @type {fm.icelink.ErrorCode}
        */
        IceLocalRelayedStreamCandidateError = 113000,
        /** <span id='prop-fm.icelink.ErrorCode-IceInvalidServerAssignmentError'>&nbsp;</span> **/
        /**
         <div>
         Indicates the supplied Turn relay server is invalid or not resolved
         </div>

        @field IceInvalidServerAssignmentError
        @type {fm.icelink.ErrorCode}
        */
        IceInvalidServerAssignmentError = 113001,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The method used by an HTTP request.
     </div>

    */
    enum HttpMethod {
        /** <span id='prop-fm.icelink.HttpMethod-Get'>&nbsp;</span> **/
        /**
         <div>
         Indicates a GET request.
         </div>

        @field Get
        @type {fm.icelink.HttpMethod}
        */
        Get = 1,
        /** <span id='prop-fm.icelink.HttpMethod-Head'>&nbsp;</span> **/
        /**
         <div>
         Indicates a HEAD request.
         </div>

        @field Head
        @type {fm.icelink.HttpMethod}
        */
        Head = 2,
        /** <span id='prop-fm.icelink.HttpMethod-Post'>&nbsp;</span> **/
        /**
         <div>
         Indicates a POST request.
         </div>

        @field Post
        @type {fm.icelink.HttpMethod}
        */
        Post = 3,
        /** <span id='prop-fm.icelink.HttpMethod-Put'>&nbsp;</span> **/
        /**
         <div>
         Indicates a PUT request.
         </div>

        @field Put
        @type {fm.icelink.HttpMethod}
        */
        Put = 4,
        /** <span id='prop-fm.icelink.HttpMethod-Patch'>&nbsp;</span> **/
        /**
         <div>
         Indicates a PATCH request.
         </div>

        @field Patch
        @type {fm.icelink.HttpMethod}
        */
        Patch = 5,
        /** <span id='prop-fm.icelink.HttpMethod-Delete'>&nbsp;</span> **/
        /**
         <div>
         Indicates a DELETE request.
         </div>

        @field Delete
        @type {fm.icelink.HttpMethod}
        */
        Delete = 6,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The level at which to log.
     </div>

    */
    enum LogLevel {
        /** <span id='prop-fm.icelink.LogLevel-Verbose'>&nbsp;</span> **/
        /**
         <div>
         Logs extensive messages detailing the program's state for troubleshooting.
         </div>

        @field Verbose
        @type {fm.icelink.LogLevel}
        */
        Verbose = 1,
        /** <span id='prop-fm.icelink.LogLevel-Debug'>&nbsp;</span> **/
        /**
         <div>
         Logs messages relevant to development and troubleshooting.
         </div>

        @field Debug
        @type {fm.icelink.LogLevel}
        */
        Debug = 2,
        /** <span id='prop-fm.icelink.LogLevel-Info'>&nbsp;</span> **/
        /**
         <div>
         Logs messages relevant to expected use.
         </div>

        @field Info
        @type {fm.icelink.LogLevel}
        */
        Info = 3,
        /** <span id='prop-fm.icelink.LogLevel-Warn'>&nbsp;</span> **/
        /**
         <div>
         Logs messages relevant to potential pit-falls.
         </div>

        @field Warn
        @type {fm.icelink.LogLevel}
        */
        Warn = 4,
        /** <span id='prop-fm.icelink.LogLevel-Error'>&nbsp;</span> **/
        /**
         <div>
         Logs messages relevant to errors that allow program execution to continue.
         </div>

        @field Error
        @type {fm.icelink.LogLevel}
        */
        Error = 5,
        /** <span id='prop-fm.icelink.LogLevel-Fatal'>&nbsp;</span> **/
        /**
         <div>
         Logs messages relevant to errors that require the program to terminate.
         </div>

        @field Fatal
        @type {fm.icelink.LogLevel}
        */
        Fatal = 6,
        /** <span id='prop-fm.icelink.LogLevel-None'>&nbsp;</span> **/
        /**
         <div>
         Logs nothing.
         </div>

        @field None
        @type {fm.icelink.LogLevel}
        */
        None = 7,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of a future.
     </div>

    */
    enum FutureState {
        /** <span id='prop-fm.icelink.FutureState-Pending'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the promise has not been resolved or rejected.
         </div>

        @field Pending
        @type {fm.icelink.FutureState}
        */
        Pending = 1,
        /** <span id='prop-fm.icelink.FutureState-Resolved'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the promise has been resolved.
         </div>

        @field Resolved
        @type {fm.icelink.FutureState}
        */
        Resolved = 2,
        /** <span id='prop-fm.icelink.FutureState-Rejected'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the promise has been rejected.
         </div>

        @field Rejected
        @type {fm.icelink.FutureState}
        */
        Rejected = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An enumeration of potential WebSocket status codes.
     </div>

    */
    enum WebSocketStatusCode {
        /** <span id='prop-fm.icelink.WebSocketStatusCode-Normal'>&nbsp;</span> **/
        /**
         <div>
         Indicates normal closure, meaning that the purpose for which
         the connection was established has been fulfilled.
         </div>

        @field Normal
        @type {fm.icelink.WebSocketStatusCode}
        */
        Normal = 1000,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-GoingAway'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is "going away", such as a server
         going down or a browser having navigated away from a page.
         </div>

        @field GoingAway
        @type {fm.icelink.WebSocketStatusCode}
        */
        GoingAway = 1001,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-ProtocolError'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is terminating the connection
         due to a protocol error.
         </div>

        @field ProtocolError
        @type {fm.icelink.WebSocketStatusCode}
        */
        ProtocolError = 1002,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-InvalidType'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is terminating the connection
         because it has received a type of data that it cannot accept.
         </div>

        @field InvalidType
        @type {fm.icelink.WebSocketStatusCode}
        */
        InvalidType = 1003,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-NoStatus'>&nbsp;</span> **/
        /**
         <div>
         Indicates that no status code was present in the Close frame.
         Reserved for use outside Close frames.
         </div>

        @field NoStatus
        @type {fm.icelink.WebSocketStatusCode}
        */
        NoStatus = 1005,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-Abnormal'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection was closed abnormally, without
         sending a Close frame. Reserved for use outside Close frames.
         </div>

        @field Abnormal
        @type {fm.icelink.WebSocketStatusCode}
        */
        Abnormal = 1006,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-InvalidData'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is terminating the connection
         because it has received data within a message that was not
         consistent with the type of message.
         </div>

        @field InvalidData
        @type {fm.icelink.WebSocketStatusCode}
        */
        InvalidData = 1007,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-PolicyViolation'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is terminating the connection
         because it has received a message that violates its policy.
         </div>

        @field PolicyViolation
        @type {fm.icelink.WebSocketStatusCode}
        */
        PolicyViolation = 1008,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-MessageTooLarge'>&nbsp;</span> **/
        /**
         <div>
         Indicates that an endpoint is terminating the connection
         because it has received a message that is too big for it
         to process.
         </div>

        @field MessageTooLarge
        @type {fm.icelink.WebSocketStatusCode}
        */
        MessageTooLarge = 1009,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-UnsupportedExtension'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the client is terminating the connection
         because it has expected the server to negotiate one or
         more extensions, but the server didn't return them in the
         response message of the WebSocket handshake.
         </div>

        @field UnsupportedExtension
        @type {fm.icelink.WebSocketStatusCode}
        */
        UnsupportedExtension = 1010,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-UnexpectedCondition'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the server is terminating the connection
         because it encountered an unexpected condition that
         prevented it from fulfilling the request.
         </div>

        @field UnexpectedCondition
        @type {fm.icelink.WebSocketStatusCode}
        */
        UnexpectedCondition = 1011,
        /** <span id='prop-fm.icelink.WebSocketStatusCode-SecureHandshakeFailure'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection was closed due to a failure
         to perform a TLS handshake. Reserved for use outside Close
         frames.
         </div>

        @field SecureHandshakeFailure
        @type {fm.icelink.WebSocketStatusCode}
        */
        SecureHandshakeFailure = 1015,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of a candidate pair.
     </div>

    */
    enum CandidatePairState {
        /** <span id='prop-fm.icelink.CandidatePairState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the candidate pair has been formed,
         but connectivity checks have not yet started.
         </div>

        @field New
        @type {fm.icelink.CandidatePairState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.CandidatePairState-Waiting'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connectivity check is ready for
         connectivity checks, but checks have not yet started.
         </div>

        @field Waiting
        @type {fm.icelink.CandidatePairState}
        */
        Waiting = 2,
        /** <span id='prop-fm.icelink.CandidatePairState-InProgress'>&nbsp;</span> **/
        /**
         <div>
         Indicates that connectivity checks are in progress.
         </div>

        @field InProgress
        @type {fm.icelink.CandidatePairState}
        */
        InProgress = 3,
        /** <span id='prop-fm.icelink.CandidatePairState-Succeeded'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a connectivity check was successful.
         </div>

        @field Succeeded
        @type {fm.icelink.CandidatePairState}
        */
        Succeeded = 4,
        /** <span id='prop-fm.icelink.CandidatePairState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that all connectivity checks have timed
         out or produced a failure response.
         </div>

        @field Failed
        @type {fm.icelink.CandidatePairState}
        */
        Failed = 5,
        /** <span id='prop-fm.icelink.CandidatePairState-Closed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that connectivity checks have been stopped
         intentionally due to transport closure.
         </div>

        @field Closed
        @type {fm.icelink.CandidatePairState}
        */
        Closed = 6,
        /** <span id='prop-fm.icelink.CandidatePairState-ConnectivityLost'>&nbsp;</span> **/
        /**
         <div>
         Indicates that connectivity checks have succeeded in
         the past, but are currently not responding.
         </div>

        @field ConnectivityLost
        @type {fm.icelink.CandidatePairState}
        */
        ConnectivityLost = 7,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The type of a candidate.
     </div>

    */
    enum CandidateType {
        /** <span id='prop-fm.icelink.CandidateType-Host'>&nbsp;</span> **/
        /**
         <div>
         Indicates a 'host' candidate, discovered by
         querying a local network interface adapter.
         The candidate should contain a private IP
         address of this client.
         </div>

        @field Host
        @type {fm.icelink.CandidateType}
        */
        Host = 1,
        /** <span id='prop-fm.icelink.CandidateType-ServerReflexive'>&nbsp;</span> **/
        /**
         <div>
         Indicates a 'srflx' candidate, discovered by
         using a STUN server to echo back the source
         IP address it sees in a UDP binding request.
         When the STUN server is properly configured,
         the candidate should contain a public IP
         address of this client.
         </div>

        @field ServerReflexive
        @type {fm.icelink.CandidateType}
        */
        ServerReflexive = 2,
        /** <span id='prop-fm.icelink.CandidateType-Relayed'>&nbsp;</span> **/
        /**
         <div>
         Indicates a 'relay' candidate, discovered by
         using a TURN server to set up a public port
         in response to a UDP or TCP allocate request.
         When the TURN server is properly configured,
         the candidate should contain a public IP
         address of the TURN server.
         </div>

        @field Relayed
        @type {fm.icelink.CandidateType}
        */
        Relayed = 3,
        /** <span id='prop-fm.icelink.CandidateType-PeerReflexive'>&nbsp;</span> **/
        /**
         <div>
         Indicates a 'prflx' candidate, discovered by
         sending STUN connectivity checks between peers
         residing behind more restrictive firewalls.
         The candidate should contain a public IP
         address of this client.
         </div>

        @field PeerReflexive
        @type {fm.icelink.CandidateType}
        */
        PeerReflexive = 4,
        /** <span id='prop-fm.icelink.CandidateType-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown candidate type.
         </div>

        @field Unknown
        @type {fm.icelink.CandidateType}
        */
        Unknown = 5,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A value used to indicate whether this codec is used to encode or decode.
     </div>

    */
    enum CodecType {
        /** <span id='prop-fm.icelink.CodecType-Encode'>&nbsp;</span> **/
        /**
         <div>
         The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.
         </div>

        @field Encode
        @type {fm.icelink.CodecType}
        */
        Encode = 1,
        /** <span id='prop-fm.icelink.CodecType-Decode'>&nbsp;</span> **/
        /**
         <div>
         The attached RTCCodecStats represents a media format that the implementation is prepared to decode.
         </div>

        @field Decode
        @type {fm.icelink.CodecType}
        */
        Decode = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of a connection.
     </div>

    */
    enum ConnectionState {
        /** <span id='prop-fm.icelink.ConnectionState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection is new and has not been started.
         </div>

        @field New
        @type {fm.icelink.ConnectionState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.ConnectionState-Initializing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection is being initialized but no connecting attempts have been made.
         </div>

        @field Initializing
        @type {fm.icelink.ConnectionState}
        */
        Initializing = 2,
        /** <span id='prop-fm.icelink.ConnectionState-Connecting'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection is currently connecting.
         </div>

        @field Connecting
        @type {fm.icelink.ConnectionState}
        */
        Connecting = 3,
        /** <span id='prop-fm.icelink.ConnectionState-Connected'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection is currently connected.
         </div>

        @field Connected
        @type {fm.icelink.ConnectionState}
        */
        Connected = 4,
        /** <span id='prop-fm.icelink.ConnectionState-Failing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has encountered an error and is cleaning up.
         </div>

        @field Failing
        @type {fm.icelink.ConnectionState}
        */
        Failing = 5,
        /** <span id='prop-fm.icelink.ConnectionState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has encountered an error and has cleaned up.
         </div>

        @field Failed
        @type {fm.icelink.ConnectionState}
        */
        Failed = 6,
        /** <span id='prop-fm.icelink.ConnectionState-Closing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has been instructed to close and is cleaning up.
         </div>

        @field Closing
        @type {fm.icelink.ConnectionState}
        */
        Closing = 7,
        /** <span id='prop-fm.icelink.ConnectionState-Closed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has been instructed to close and has cleaned up.
         </div>

        @field Closed
        @type {fm.icelink.ConnectionState}
        */
        Closed = 8,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A data channel state.
     </div>

    */
    enum DataChannelState {
        /** <span id='prop-fm.icelink.DataChannelState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` has been created and has not started negotiating yet.
         </div>

        @field New
        @type {fm.icelink.DataChannelState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.DataChannelState-Connecting'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` is in the process of negotiating a secure connection.
         </div>

        @field Connecting
        @type {fm.icelink.DataChannelState}
        */
        Connecting = 2,
        /** <span id='prop-fm.icelink.DataChannelState-Connected'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` has completed negotiation of a secure connection.
         </div>

        @field Connected
        @type {fm.icelink.DataChannelState}
        */
        Connected = 3,
        /** <span id='prop-fm.icelink.DataChannelState-Closing'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` is in the process of closing due to an intentional request.
         </div>

        @field Closing
        @type {fm.icelink.DataChannelState}
        */
        Closing = 4,
        /** <span id='prop-fm.icelink.DataChannelState-Closed'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` has been closed due to an intentional request.
         </div>

        @field Closed
        @type {fm.icelink.DataChannelState}
        */
        Closed = 5,
        /** <span id='prop-fm.icelink.DataChannelState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates the `fm.icelink.dataChannel` has been closed as the result of an error.
         </div>

        @field Failed
        @type {fm.icelink.DataChannelState}
        */
        Failed = 6,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The encryption mode for the stream.
     </div>

    */
    enum EncryptionMode {
        /** <span id='prop-fm.icelink.EncryptionMode-Null'>&nbsp;</span> **/
        /**
         <div>
         No encryption and no integrity checking.
         </div>

        @field Null
        @type {fm.icelink.EncryptionMode}
        */
        Null = 1,
        /** <span id='prop-fm.icelink.EncryptionMode-Aes128Strong'>&nbsp;</span> **/
        /**
         <div>
         AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
         </div>

        @field Aes128Strong
        @type {fm.icelink.EncryptionMode}
        */
        Aes128Strong = 2,
        /** <span id='prop-fm.icelink.EncryptionMode-Aes128Weak'>&nbsp;</span> **/
        /**
         <div>
         AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
         </div>

        @field Aes128Weak
        @type {fm.icelink.EncryptionMode}
        */
        Aes128Weak = 3,
        /** <span id='prop-fm.icelink.EncryptionMode-NullStrong'>&nbsp;</span> **/
        /**
         <div>
         Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
         </div>

        @field NullStrong
        @type {fm.icelink.EncryptionMode}
        */
        NullStrong = 4,
        /** <span id='prop-fm.icelink.EncryptionMode-NullWeak'>&nbsp;</span> **/
        /**
         <div>
         Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
         </div>

        @field NullWeak
        @type {fm.icelink.EncryptionMode}
        */
        NullWeak = 5,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Indicates encryption policy for a connection.
     </div>

    */
    enum EncryptionPolicy {
        /** <span id='prop-fm.icelink.EncryptionPolicy-Required'>&nbsp;</span> **/
        /**
         <div>
         Encryption is required. If encryption is not supported by peer, connection must fail.
         </div>

        @field Required
        @type {fm.icelink.EncryptionPolicy}
        */
        Required = 1,
        /** <span id='prop-fm.icelink.EncryptionPolicy-Negotiated'>&nbsp;</span> **/
        /**
         <div>
         Encryption is preferred but not required. If the other peer does not support encryption, connection will be established without encryption.
         </div>

        @field Negotiated
        @type {fm.icelink.EncryptionPolicy}
        */
        Negotiated = 2,
        /** <span id='prop-fm.icelink.EncryptionPolicy-Disabled'>&nbsp;</span> **/
        /**
         <div>
         Encryption will not be available for the given connection.
         </div>

        @field Disabled
        @type {fm.icelink.EncryptionPolicy}
        */
        Disabled = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of an ICE gatherer.
     </div>

    */
    enum IceConnectionState {
        /** <span id='prop-fm.icelink.IceConnectionState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE agent(s) is(are) gathering addresses or is(are) waiting to be given remote candidates (or both)..
         </div>

        @field New
        @type {fm.icelink.IceConnectionState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.IceConnectionState-Checking'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE agent(s) has(ve) been given one or more remote candidates and is(are) checking pairs of local and remote candidates against one another to try to find a compatible match, but has(ve) not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.
         </div>

        @field Checking
        @type {fm.icelink.IceConnectionState}
        */
        Checking = 2,
        /** <span id='prop-fm.icelink.IceConnectionState-Connected'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a usable pairing of local and remote candidates has been found for all components of the connection, and the connection has been established. It's possible that gathering is still underway, and it's also possible that the ICE agent is still checking candidates against one another looking for a better connection to use.
         </div>

        @field Connected
        @type {fm.icelink.IceConnectionState}
        */
        Connected = 3,
        /** <span id='prop-fm.icelink.IceConnectionState-Completed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.
         </div>

        @field Completed
        @type {fm.icelink.IceConnectionState}
        */
        Completed = 4,
        /** <span id='prop-fm.icelink.IceConnectionState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.
         </div>

        @field Failed
        @type {fm.icelink.IceConnectionState}
        */
        Failed = 5,
        /** <span id='prop-fm.icelink.IceConnectionState-Disconnected'>&nbsp;</span> **/
        /**
         <div>
         Indicates that checks to ensure that components are still connected failed for at least one component of the RTCPeerConnection. This is a less stringent test than "failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks, or during temporary disconnections. When the problem resolves, the connection may return to the "Connected" state.
         </div>

        @field Disconnected
        @type {fm.icelink.IceConnectionState}
        */
        Disconnected = 6,
        /** <span id='prop-fm.icelink.IceConnectionState-Closed'>&nbsp;</span> **/
        /**
         <div>
         The ICE agent(s) for this RTCPeerConnection has shut down and is no longer handling requests
         </div>

        @field Closed
        @type {fm.icelink.IceConnectionState}
        */
        Closed = 7,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of an ICE gatherer.
     </div>

    */
    enum IceGatheringState {
        /** <span id='prop-fm.icelink.IceGatheringState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer has been created and no gathering has occurred yet.
         </div>

        @field New
        @type {fm.icelink.IceGatheringState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.IceGatheringState-Gathering'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer is in the process of gathering candidates.
         </div>

        @field Gathering
        @type {fm.icelink.IceGatheringState}
        */
        Gathering = 2,
        /** <span id='prop-fm.icelink.IceGatheringState-Complete'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer has completed gathering candidates.
         </div>

        @field Complete
        @type {fm.icelink.IceGatheringState}
        */
        Complete = 3,
        /** <span id='prop-fm.icelink.IceGatheringState-Closing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer has started closing intentionally via a call to stop.
         </div>

        @field Closing
        @type {fm.icelink.IceGatheringState}
        */
        Closing = 4,
        /** <span id='prop-fm.icelink.IceGatheringState-Closed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer has been closed intentionally via a call to stop.
         </div>

        @field Closed
        @type {fm.icelink.IceGatheringState}
        */
        Closed = 5,
        /** <span id='prop-fm.icelink.IceGatheringState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the gatherer failed due to an error.
         </div>

        @field Failed
        @type {fm.icelink.IceGatheringState}
        */
        Failed = 6,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The local policy for gathering candidates.
     </div>

    */
    enum IceGatherPolicy {
        /** <span id='prop-fm.icelink.IceGatherPolicy-All'>&nbsp;</span> **/
        /**
         <div>
         All candidates (host, reflexive, and relay) will be gathered.
         </div>

        @field All
        @type {fm.icelink.IceGatherPolicy}
        */
        All = 1,
        /** <span id='prop-fm.icelink.IceGatherPolicy-NoHost'>&nbsp;</span> **/
        /**
         <div>
         Only reflexive and relay candidates will be gathered.
         </div>

        @field NoHost
        @type {fm.icelink.IceGatherPolicy}
        */
        NoHost = 2,
        /** <span id='prop-fm.icelink.IceGatherPolicy-Relay'>&nbsp;</span> **/
        /**
         <div>
         Only relay candidates will be gathered.
         </div>

        @field Relay
        @type {fm.icelink.IceGatherPolicy}
        */
        Relay = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A layout alignment definition.
     </div>

    */
    enum LayoutAlignment {
        /** <span id='prop-fm.icelink.LayoutAlignment-TopLeft'>&nbsp;</span> **/
        /**
         <div>
         Indicates a top-left alignment.
         </div>

        @field TopLeft
        @type {fm.icelink.LayoutAlignment}
        */
        TopLeft = 1,
        /** <span id='prop-fm.icelink.LayoutAlignment-Top'>&nbsp;</span> **/
        /**
         <div>
         Indicates a top-center alignment.
         </div>

        @field Top
        @type {fm.icelink.LayoutAlignment}
        */
        Top = 2,
        /** <span id='prop-fm.icelink.LayoutAlignment-TopRight'>&nbsp;</span> **/
        /**
         <div>
         Indicates a top-right alignment.
         </div>

        @field TopRight
        @type {fm.icelink.LayoutAlignment}
        */
        TopRight = 3,
        /** <span id='prop-fm.icelink.LayoutAlignment-Left'>&nbsp;</span> **/
        /**
         <div>
         Indicates a center-left alignment.
         </div>

        @field Left
        @type {fm.icelink.LayoutAlignment}
        */
        Left = 4,
        /** <span id='prop-fm.icelink.LayoutAlignment-Center'>&nbsp;</span> **/
        /**
         <div>
         Indicates a center-center alignment.
         </div>

        @field Center
        @type {fm.icelink.LayoutAlignment}
        */
        Center = 5,
        /** <span id='prop-fm.icelink.LayoutAlignment-Right'>&nbsp;</span> **/
        /**
         <div>
         Indicates a center-right alignment.
         </div>

        @field Right
        @type {fm.icelink.LayoutAlignment}
        */
        Right = 6,
        /** <span id='prop-fm.icelink.LayoutAlignment-BottomLeft'>&nbsp;</span> **/
        /**
         <div>
         Indicates a bottom-left alignment.
         </div>

        @field BottomLeft
        @type {fm.icelink.LayoutAlignment}
        */
        BottomLeft = 7,
        /** <span id='prop-fm.icelink.LayoutAlignment-Bottom'>&nbsp;</span> **/
        /**
         <div>
         Indicates a bottom-center alignment.
         </div>

        @field Bottom
        @type {fm.icelink.LayoutAlignment}
        */
        Bottom = 8,
        /** <span id='prop-fm.icelink.LayoutAlignment-BottomRight'>&nbsp;</span> **/
        /**
         <div>
         Indicates a bottom-right alignment.
         </div>

        @field BottomRight
        @type {fm.icelink.LayoutAlignment}
        */
        BottomRight = 9,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Specifies the direction of the layout flow.
     </div>

    */
    enum LayoutDirection {
        /** <span id='prop-fm.icelink.LayoutDirection-Horizontal'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the layout should flow
         horizontally, filling rows as needed.
         </div>

        @field Horizontal
        @type {fm.icelink.LayoutDirection}
        */
        Horizontal = 1,
        /** <span id='prop-fm.icelink.LayoutDirection-Vertical'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the layout should flow
         vertically, filling columns as needed.
         </div>

        @field Vertical
        @type {fm.icelink.LayoutDirection}
        */
        Vertical = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Specifies the layout mode that should be used.
     </div>

    */
    enum LayoutMode {
        /** <span id='prop-fm.icelink.LayoutMode-FloatLocal'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local video feed should be displayed as
         a floating element above the remote video feeds.
         </div>

        @field FloatLocal
        @type {fm.icelink.LayoutMode}
        */
        FloatLocal = 1,
        /** <span id='prop-fm.icelink.LayoutMode-FloatRemote'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the remote video feeds should be displayed as
         floating elements above the local video feed.
         </div>

        @field FloatRemote
        @type {fm.icelink.LayoutMode}
        */
        FloatRemote = 2,
        /** <span id='prop-fm.icelink.LayoutMode-Block'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the video feed should be displayed as a block
         element on its own row, separate from other video feeds.
         </div>

        @field Block
        @type {fm.icelink.LayoutMode}
        */
        Block = 3,
        /** <span id='prop-fm.icelink.LayoutMode-Inline'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the video feed should be displayed as an inline
         element that shares a row with other video feeds.
         </div>

        @field Inline
        @type {fm.icelink.LayoutMode}
        */
        Inline = 4,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A layout origin definition.
     </div>

    */
    enum LayoutOrigin {
        /** <span id='prop-fm.icelink.LayoutOrigin-TopLeft'>&nbsp;</span> **/
        /**
         <div>
         Indicates an origin where 0,0 is in the top-left corner.
         </div>

        @field TopLeft
        @type {fm.icelink.LayoutOrigin}
        */
        TopLeft = 1,
        /** <span id='prop-fm.icelink.LayoutOrigin-TopRight'>&nbsp;</span> **/
        /**
         <div>
         Indicates an origin where 0,0 is in the top-right corner.
         </div>

        @field TopRight
        @type {fm.icelink.LayoutOrigin}
        */
        TopRight = 2,
        /** <span id='prop-fm.icelink.LayoutOrigin-BottomRight'>&nbsp;</span> **/
        /**
         <div>
         Indicates an origin where 0,0 is in the bottom-right corner.
         </div>

        @field BottomRight
        @type {fm.icelink.LayoutOrigin}
        */
        BottomRight = 3,
        /** <span id='prop-fm.icelink.LayoutOrigin-BottomLeft'>&nbsp;</span> **/
        /**
         <div>
         Indicates an origin where 0,0 is in the bottom-left corner.
         </div>

        @field BottomLeft
        @type {fm.icelink.LayoutOrigin}
        */
        BottomLeft = 4,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Specifies how an element should be scaled within a layout.
     </div>

    */
    enum LayoutScale {
        /** <span id='prop-fm.icelink.LayoutScale-Contain'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the element should be uniformly scaled
         (maintaining aspect ratio) to the largest size such
         that both its width and its height can fit inside its
         bounding box.
         </div>

        @field Contain
        @type {fm.icelink.LayoutScale}
        */
        Contain = 1,
        /** <span id='prop-fm.icelink.LayoutScale-Cover'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the element should be uniformly scaled
         (maintaining aspect ratio) to be as large as possible
         so that the bounding box is completely covered. Some
         parts of the element may not be in view (cropped).
         </div>

        @field Cover
        @type {fm.icelink.LayoutScale}
        */
        Cover = 2,
        /** <span id='prop-fm.icelink.LayoutScale-Stretch'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the element should be non-uniformly
         scaled (not maintaining aspect ratio) so that the
         bounding box is completely covered, but all parts
         of the element are in view (no cropping).
         </div>

        @field Stretch
        @type {fm.icelink.LayoutScale}
        */
        Stretch = 3,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of local media.
     </div>

    */
    enum LocalMediaState {
        /** <span id='prop-fm.icelink.LocalMediaState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media has not been started yet.
         </div>

        @field New
        @type {fm.icelink.LocalMediaState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.LocalMediaState-Starting'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media is starting.
         </div>

        @field Starting
        @type {fm.icelink.LocalMediaState}
        */
        Starting = 2,
        /** <span id='prop-fm.icelink.LocalMediaState-Started'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media has started.
         </div>

        @field Started
        @type {fm.icelink.LocalMediaState}
        */
        Started = 3,
        /** <span id='prop-fm.icelink.LocalMediaState-Stopping'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media is stopping.
         </div>

        @field Stopping
        @type {fm.icelink.LocalMediaState}
        */
        Stopping = 4,
        /** <span id='prop-fm.icelink.LocalMediaState-Stopped'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media has stopped.
         </div>

        @field Stopped
        @type {fm.icelink.LocalMediaState}
        */
        Stopped = 5,
        /** <span id='prop-fm.icelink.LocalMediaState-Destroying'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media is being destroyed.
         </div>

        @field Destroying
        @type {fm.icelink.LocalMediaState}
        */
        Destroying = 6,
        /** <span id='prop-fm.icelink.LocalMediaState-Destroyed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the local media has been destroyed.
         </div>

        @field Destroyed
        @type {fm.icelink.LocalMediaState}
        */
        Destroyed = 7,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The local policy for the use of generic RTP Negative Acknowledgements (NACK).
     Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26
     </div>

    */
    enum NackPolicy {
        /** <span id='prop-fm.icelink.NackPolicy-Disabled'>&nbsp;</span> **/
        /**
         <div>
         The usage of generic NACKs is disabled.
         </div>

        @field Disabled
        @type {fm.icelink.NackPolicy}
        */
        Disabled = 1,
        /** <span id='prop-fm.icelink.NackPolicy-Negotiated'>&nbsp;</span> **/
        /**
         <div>
         The usage of generic NACKs is negotiated with the peer.
         </div>

        @field Negotiated
        @type {fm.icelink.NackPolicy}
        */
        Negotiated = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A protocol type.
     </div>

    */
    enum ProtocolType {
        /** <span id='prop-fm.icelink.ProtocolType-Udp'>&nbsp;</span> **/
        /**
         <div>
         Indicates the UDP protocol.
         </div>

        @field Udp
        @type {fm.icelink.ProtocolType}
        */
        Udp = 1,
        /** <span id='prop-fm.icelink.ProtocolType-Tcp'>&nbsp;</span> **/
        /**
         <div>
         Indicates the TCP protocol.
         </div>

        @field Tcp
        @type {fm.icelink.ProtocolType}
        */
        Tcp = 2,
        /** <span id='prop-fm.icelink.ProtocolType-Tls'>&nbsp;</span> **/
        /**
         <div>
         Indicates the TLS protocol.
         </div>

        @field Tls
        @type {fm.icelink.ProtocolType}
        */
        Tls = 3,
        /** <span id='prop-fm.icelink.ProtocolType-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown protocol.
         </div>

        @field Unknown
        @type {fm.icelink.ProtocolType}
        */
        Unknown = 4,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The local policy for the RED Forward Error Correction support.
     Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-fec-04
     </div>

    */
    enum RedFecPolicy {
        /** <span id='prop-fm.icelink.RedFecPolicy-Disabled'>&nbsp;</span> **/
        /**
         <div>
         The usage of RED FEC is disabled.
         </div>

        @field Disabled
        @type {fm.icelink.RedFecPolicy}
        */
        Disabled = 1,
        /** <span id='prop-fm.icelink.RedFecPolicy-Negotiated'>&nbsp;</span> **/
        /**
         <div>
         The usage of RED FEC is negotiated with the peer.
         </div>

        @field Negotiated
        @type {fm.icelink.RedFecPolicy}
        */
        Negotiated = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The local policy for the use of Receiver Estimated Maximum Bitrates (goog-remb).
     Cf. https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03
     </div>

    */
    enum RembPolicy {
        /** <span id='prop-fm.icelink.RembPolicy-Disabled'>&nbsp;</span> **/
        /**
         <div>
         The usage of goog-rembs is disabled.
         </div>

        @field Disabled
        @type {fm.icelink.RembPolicy}
        */
        Disabled = 1,
        /** <span id='prop-fm.icelink.RembPolicy-Negotiated'>&nbsp;</span> **/
        /**
         <div>
         The usage of goog-rembs is negotiated with the peer.
         </div>

        @field Negotiated
        @type {fm.icelink.RembPolicy}
        */
        Negotiated = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Indicates Sdes policy for stream.
     </div>

    */
    enum SdesPolicy {
        /** <span id='prop-fm.icelink.SdesPolicy-Negotiated'>&nbsp;</span> **/
        /**
         <div>
         Sdes is preferred but not required. If stream type is compatible (i.e. not a DataStream) Crypto attributes will be included in the session description.
         </div>

        @field Negotiated
        @type {fm.icelink.SdesPolicy}
        */
        Negotiated = 2,
        /** <span id='prop-fm.icelink.SdesPolicy-Disabled'>&nbsp;</span> **/
        /**
         <div>
         Sdes is disabled. Crypto attributes will not be included in the session description.
         </div>

        @field Disabled
        @type {fm.icelink.SdesPolicy}
        */
        Disabled = 3,
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     SDP Attribute types
     </div>

    */
    enum AttributeType {
        /** <span id='prop-fm.icelink.sdp.AttributeType-UnknownAttribute'>&nbsp;</span> **/
        /**
         <div>
         Unknown SDP Attribute
         </div>

        @field UnknownAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        UnknownAttribute = 999666,
        /** <span id='prop-fm.icelink.sdp.AttributeType-DirectionAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Direction Attribute
         </div>

        @field DirectionAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        DirectionAttribute = 1,
        /** <span id='prop-fm.icelink.sdp.AttributeType-CategoryAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Category Attribute
         </div>

        @field CategoryAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        CategoryAttribute = 2,
        /** <span id='prop-fm.icelink.sdp.AttributeType-CharacterSetAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Character Set Attribute
         </div>

        @field CharacterSetAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        CharacterSetAttribute = 3,
        /** <span id='prop-fm.icelink.sdp.AttributeType-ConferenceTypeAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Conference Type Attribute
         </div>

        @field ConferenceTypeAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        ConferenceTypeAttribute = 4,
        /** <span id='prop-fm.icelink.sdp.AttributeType-CryptoAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Crypto Attribute
         </div>

        @field CryptoAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        CryptoAttribute = 5,
        /** <span id='prop-fm.icelink.sdp.AttributeType-FormatParametersAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Format Parameters Attribute
         </div>

        @field FormatParametersAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        FormatParametersAttribute = 6,
        /** <span id='prop-fm.icelink.sdp.AttributeType-FrameRateAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Frame Rate Attribute
         </div>

        @field FrameRateAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        FrameRateAttribute = 7,
        /** <span id='prop-fm.icelink.sdp.AttributeType-KeywordsAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Keywords Attribute
         </div>

        @field KeywordsAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        KeywordsAttribute = 8,
        /** <span id='prop-fm.icelink.sdp.AttributeType-LanguageAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Language Attribute
         </div>

        @field LanguageAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        LanguageAttribute = 9,
        /** <span id='prop-fm.icelink.sdp.AttributeType-MaxPacketTimeAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Max Packet Time Attribute
         </div>

        @field MaxPacketTimeAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        MaxPacketTimeAttribute = 10,
        /** <span id='prop-fm.icelink.sdp.AttributeType-OrientationAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Orientiation Attribute
         </div>

        @field OrientationAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        OrientationAttribute = 11,
        /** <span id='prop-fm.icelink.sdp.AttributeType-PacketTimeAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Packet Time Attribute
         </div>

        @field PacketTimeAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        PacketTimeAttribute = 12,
        /** <span id='prop-fm.icelink.sdp.AttributeType-QualityAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Quality Attribute
         </div>

        @field QualityAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        QualityAttribute = 13,
        /** <span id='prop-fm.icelink.sdp.AttributeType-SdpLanguageAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Sdp Language Attribute
         </div>

        @field SdpLanguageAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        SdpLanguageAttribute = 14,
        /** <span id='prop-fm.icelink.sdp.AttributeType-SetupAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Setup Attribute
         </div>

        @field SetupAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        SetupAttribute = 15,
        /** <span id='prop-fm.icelink.sdp.AttributeType-ToolAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Tool  Attribute
         </div>

        @field ToolAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        ToolAttribute = 16,
        /** <span id='prop-fm.icelink.sdp.AttributeType-MediaStreamIdSemanticAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Media Stream Id Semantic Attribute
         </div>

        @field MediaStreamIdSemanticAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        MediaStreamIdSemanticAttribute = 17,
        /** <span id='prop-fm.icelink.sdp.AttributeType-MediaStreamIdAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Stream Id Attribute
         </div>

        @field MediaStreamIdAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        MediaStreamIdAttribute = 18,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceCandidateAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Candidate Attribute
         </div>

        @field IceCandidateAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceCandidateAttribute = 19,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceFingerprintAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Fingerprint Attribute
         </div>

        @field IceFingerprintAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceFingerprintAttribute = 20,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceLiteAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Lite Attribute
         </div>

        @field IceLiteAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceLiteAttribute = 21,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceMismatchAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Mismatch Attribute
         </div>

        @field IceMismatchAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceMismatchAttribute = 22,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceOptionsAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Options Attribute
         </div>

        @field IceOptionsAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceOptionsAttribute = 23,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IcePasswordAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Password Attribute
         </div>

        @field IcePasswordAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IcePasswordAttribute = 24,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceUfragAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Ufrag Attribute
         </div>

        @field IceUfragAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceUfragAttribute = 25,
        /** <span id='prop-fm.icelink.sdp.AttributeType-IceRemoteCandidatesAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP Ice Remote Candidates Attribute
         </div>

        @field IceRemoteCandidatesAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        IceRemoteCandidatesAttribute = 26,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtpMapAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTP Map Attribute
         </div>

        @field RtpMapAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtpMapAttribute = 27,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtpSsrcAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTP SSRC Attribute
         </div>

        @field RtpSsrcAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtpSsrcAttribute = 28,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtpExtMapAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)
         </div>

        @field RtpExtMapAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtpExtMapAttribute = 29,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTCP Attribute
         </div>

        @field RtcpAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtcpAttribute = 30,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpFeedbackAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTCP Feedback Attribute
         </div>

        @field RtcpFeedbackAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtcpFeedbackAttribute = 31,
        /** <span id='prop-fm.icelink.sdp.AttributeType-RtcpMuxAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP RTCP Mux Attribute
         </div>

        @field RtcpMuxAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        RtcpMuxAttribute = 32,
        /** <span id='prop-fm.icelink.sdp.AttributeType-SctpPortAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP SCTP Port Attribute
         </div>

        @field SctpPortAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        SctpPortAttribute = 33,
        /** <span id='prop-fm.icelink.sdp.AttributeType-SctpMapAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP SCTP Map Attribute
         </div>

        @field SctpMapAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        SctpMapAttribute = 34,
        /** <span id='prop-fm.icelink.sdp.AttributeType-SctpMaxMessageSizeAttribute'>&nbsp;</span> **/
        /**
         <div>
         SDP SCTP Max Message Size Attribute
         </div>

        @field SctpMaxMessageSizeAttribute
        @type {fm.icelink.sdp.AttributeType}
        */
        SctpMaxMessageSizeAttribute = 35,
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     A list of known types for `fm.icelink.sdp.ice.optionTag`.
     </div>

    */
    enum OptionTagType {
        /** <span id='prop-fm.icelink.sdp.ice.OptionTagType-Unknown'>&nbsp;</span> **/
        /**
         <div>
         Indicates an unknown option tag.
         </div>

        @field Unknown
        @type {fm.icelink.sdp.ice.OptionTagType}
        */
        Unknown = 1,
        /** <span id='prop-fm.icelink.sdp.ice.OptionTagType-Trickle'>&nbsp;</span> **/
        /**
         <div>
         Indicates the trickle-ice option tag.
         </div>

        @field Trickle
        @type {fm.icelink.sdp.ice.OptionTagType}
        */
        Trickle = 2,
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Media Stream Id Semantic Tokens
     </div>

    */
    enum MediaStreamIdSemanticToken {
        /** <span id='prop-fm.icelink.sdp.MediaStreamIdSemanticToken-Wms'>&nbsp;</span> **/
        /**
         <div>
         WebRTC Media Stream Semantic
         </div>

        @field Wms
        @type {fm.icelink.sdp.MediaStreamIdSemanticToken}
        */
        Wms = 1,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A session description type.
     </div>

    */
    enum SessionDescriptionType {
        /** <span id='prop-fm.icelink.SessionDescriptionType-Offer'>&nbsp;</span> **/
        /**
         <div>
         Indicates an offer.
         </div>

        @field Offer
        @type {fm.icelink.SessionDescriptionType}
        */
        Offer = 1,
        /** <span id='prop-fm.icelink.SessionDescriptionType-Answer'>&nbsp;</span> **/
        /**
         <div>
         Indicates an answer.
         </div>

        @field Answer
        @type {fm.icelink.SessionDescriptionType}
        */
        Answer = 2,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The signalling state of a connection.
     </div>

    */
    enum SignallingState {
        /** <span id='prop-fm.icelink.SignallingState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that no offer/answer exchange ever occurred.
         </div>

        @field New
        @type {fm.icelink.SignallingState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.SignallingState-HaveLocalOffer'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has a local offer and remote answer is outstanding.
         </div>

        @field HaveLocalOffer
        @type {fm.icelink.SignallingState}
        */
        HaveLocalOffer = 2,
        /** <span id='prop-fm.icelink.SignallingState-HaveRemoteOffer'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the connection has a remote offer and local answer is outstanding.
         </div>

        @field HaveRemoteOffer
        @type {fm.icelink.SignallingState}
        */
        HaveRemoteOffer = 3,
        /** <span id='prop-fm.icelink.SignallingState-Stable'>&nbsp;</span> **/
        /**
         <div>
         Indicates that for each offer there is a matching answer.
         </div>

        @field Stable
        @type {fm.icelink.SignallingState}
        */
        Stable = 4,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A stream direction.
     </div>

    */
    enum StreamDirection {
        /** <span id='prop-fm.icelink.StreamDirection-SendReceive'>&nbsp;</span> **/
        /**
         <div>
         Indicates a stream that can send and can receive.
         </div>

        @field SendReceive
        @type {fm.icelink.StreamDirection}
        */
        SendReceive = 1,
        /** <span id='prop-fm.icelink.StreamDirection-SendOnly'>&nbsp;</span> **/
        /**
         <div>
         Indicates a stream that can send.
         </div>

        @field SendOnly
        @type {fm.icelink.StreamDirection}
        */
        SendOnly = 2,
        /** <span id='prop-fm.icelink.StreamDirection-ReceiveOnly'>&nbsp;</span> **/
        /**
         <div>
         Indicates a stream that can receive.
         </div>

        @field ReceiveOnly
        @type {fm.icelink.StreamDirection}
        */
        ReceiveOnly = 3,
        /** <span id='prop-fm.icelink.StreamDirection-Inactive'>&nbsp;</span> **/
        /**
         <div>
         Indicates a stream that cannot send or receive.
         </div>

        @field Inactive
        @type {fm.icelink.StreamDirection}
        */
        Inactive = 4,
        /** <span id='prop-fm.icelink.StreamDirection-Unset'>&nbsp;</span> **/
        /**
         <div>
         Indicates that a stream direction has not been set.
         </div>

        @field Unset
        @type {fm.icelink.StreamDirection}
        */
        Unset = 5,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The state of a stream.
     </div>

    */
    enum StreamState {
        /** <span id='prop-fm.icelink.StreamState-New'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream is new and has not been started.
         </div>

        @field New
        @type {fm.icelink.StreamState}
        */
        New = 1,
        /** <span id='prop-fm.icelink.StreamState-Initializing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream is being initialized but no connecting attempts have been made.
         </div>

        @field Initializing
        @type {fm.icelink.StreamState}
        */
        Initializing = 2,
        /** <span id='prop-fm.icelink.StreamState-Connecting'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream is currently connecting.
         </div>

        @field Connecting
        @type {fm.icelink.StreamState}
        */
        Connecting = 3,
        /** <span id='prop-fm.icelink.StreamState-Connected'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream is currently connected.
         </div>

        @field Connected
        @type {fm.icelink.StreamState}
        */
        Connected = 4,
        /** <span id='prop-fm.icelink.StreamState-Failing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream has encountered an error and is cleaning up.
         </div>

        @field Failing
        @type {fm.icelink.StreamState}
        */
        Failing = 5,
        /** <span id='prop-fm.icelink.StreamState-Failed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream has encountered an error and has cleaned up.
         </div>

        @field Failed
        @type {fm.icelink.StreamState}
        */
        Failed = 6,
        /** <span id='prop-fm.icelink.StreamState-Closing'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream has been instructed to close and is cleaning up.
         </div>

        @field Closing
        @type {fm.icelink.StreamState}
        */
        Closing = 7,
        /** <span id='prop-fm.icelink.StreamState-Closed'>&nbsp;</span> **/
        /**
         <div>
         Indicates that the stream has been instructed to close and has cleaned up.
         </div>

        @field Closed
        @type {fm.icelink.StreamState}
        */
        Closed = 8,
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A stream type.
     </div>

    */
    enum StreamType {
        /** <span id='prop-fm.icelink.StreamType-Audio'>&nbsp;</span> **/
        /**
         <div>
         Indicates an audio stream.
         </div>

        @field Audio
        @type {fm.icelink.StreamType}
        */
        Audio = 1,
        /** <span id='prop-fm.icelink.StreamType-Video'>&nbsp;</span> **/
        /**
         <div>
         Indicates a video stream.
         </div>

        @field Video
        @type {fm.icelink.StreamType}
        */
        Video = 2,
        /** <span id='prop-fm.icelink.StreamType-Application'>&nbsp;</span> **/
        /**
         <div>
         Indicates an application stream.
         </div>

        @field Application
        @type {fm.icelink.StreamType}
        */
        Application = 3,
        /** <span id='prop-fm.icelink.StreamType-Message'>&nbsp;</span> **/
        /**
         <div>
         Indicates a message stream.
         </div>

        @field Message
        @type {fm.icelink.StreamType}
        */
        Message = 4,
        /** <span id='prop-fm.icelink.StreamType-Text'>&nbsp;</span> **/
        /**
         <div>
         Indicates a text stream.
         </div>

        @field Text
        @type {fm.icelink.StreamType}
        */
        Text = 5,
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     The local policy for TrickleIce support.
     Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-04
     </div>

    */
    enum TrickleIcePolicy {
        /** <span id='prop-fm.icelink.TrickleIcePolicy-NotSupported'>&nbsp;</span> **/
        /**
         <div>
         A Trickle ICE mode of operation where the offerer
         gathers all of the possible candidates strictly before
         creating and sending the offer.
         </div>

        @field NotSupported
        @type {fm.icelink.TrickleIcePolicy}
        */
        NotSupported = 1,
        /** <span id='prop-fm.icelink.TrickleIcePolicy-FullTrickle'>&nbsp;</span> **/
        /**
         <div>
         The regular mode of operation for Trickle ICE agents,
         in which an initial offer can include any number of candidates
         (even zero candidates) and does not need to include the entire
         first generation of candidates as in half trickle.
         </div>

        @field FullTrickle
        @type {fm.icelink.TrickleIcePolicy}
        */
        FullTrickle = 2,
        /** <span id='prop-fm.icelink.TrickleIcePolicy-HalfTrickle'>&nbsp;</span> **/
        /**
         <div>
         A Trickle ICE mode of operation where the offerer
         gathers its first generation of candidates strictly before
         creating and sending the offer. Once sent, that offer can be
         processed by Vanilla ICE agents and does not require support for
         this specification. It also allows Trickle ICE capable answerers
         to still gather candidates and perform connectivity checks in a
         non-blocking way, thus roughly offering "half" the advantages of
         Trickle ICE. The mechanism is mostly meant for use in cases where
         support for Trickle ICE cannot be confirmed prior to sending an
         initial offer.
         </div>

        @field HalfTrickle
        @type {fm.icelink.TrickleIcePolicy}
        */
        HalfTrickle = 3,
    }
}
declare namespace fm.icelink {
    class AddressTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.AddressType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     ASCII encoding/decoding utility.
     </div>

    */
    class Ascii {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Ascii-decode'>&nbsp;</span>**/
        /**
         <div>
         Decodes a UTF-8 byte array to a string.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} index The index to start reading.
        @param {number} length The length.
        @return {string}
        */
        static decode(input: Uint8Array, index: number, length: number): string;
        /**<span id='method-fm.icelink.Ascii-decode'>&nbsp;</span>**/
        /**
         <div>
         Decodes a UTF-8 byte array to a string.
         </div>

        @param {Uint8Array} input The input byte array.
        @return {string}
        */
        static decode(input: Uint8Array): string;
        /**<span id='method-fm.icelink.Ascii-encode'>&nbsp;</span>**/
        /**
         <div>
         Encodes a string to a UTF-8 byte array.
         </div>

        @param {string} input The input string.
        @return {Uint8Array}
        */
        static encode(input: string): Uint8Array;
        /**<span id='method-fm.icelink.Ascii-getByteCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes that would be returned by
         a call to encode.
         </div>

        @param {string} input The input string.
        @return {number}
        */
        static getByteCount(input: string): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A managed mutex.
     </div>

    */
    class AtomicMutex {
        getTypeString(): string;
        /**<span id='method-fm.icelink.AtomicMutex-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of an AtomicMutex.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.AtomicMutex-getIsLocked'>&nbsp;</span>**/
        /**
         <div>
         Gets if the mutex is locked or not.
         </div>


        @return {boolean}
        */
        getIsLocked(): boolean;
        /**<span id='method-fm.icelink.AtomicMutex-release'>&nbsp;</span>**/
        /**
         <div>
         Releases the lock.
         </div>


        @return {void}
        */
        release(): void;
        /**<span id='method-fm.icelink.AtomicMutex-tryLock'>&nbsp;</span>**/
        /**
         <div>
         Tries to obtain a lock with this thread.
         </div>

        @return {boolean}
        */
        tryLock(): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Common binary methods.
     </div>

    */
    class Binary {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Binary-bitStringToBytes'>&nbsp;</span>**/
        /**
         <div>
         Converts a bit-string to bytes.
         </div>

        @param {string} bitString The bit-string.
        @param {boolean} padLeft Whether to pad extra zero-bits to the left.
        @return {Uint8Array}
        */
        static bitStringToBytes(bitString: string, padLeft: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-bitStringToBytes'>&nbsp;</span>**/
        /**
         <div>
         Converts a bit-string to bytes.
         </div>

        @param {string} bitString The bit-string.
        @param {boolean} padLeft Whether to pad extra zero-bits to the left.
        @param {fm.icelink.Holder<number>} numberOfUnusedBits The number of unused bits.
        @return {Uint8Array}
        */
        static bitStringToBytes(bitString: string, padLeft: boolean, numberOfUnusedBits: fm.icelink.Holder<number>): Uint8Array;
        /**<span id='method-fm.icelink.Binary-bitStringToBytes'>&nbsp;</span>**/
        /**
         <div>
         Converts a bit-string to bytes.
         </div>

        @param {string} bitString The bit-string.
        @param {fm.icelink.Holder<number>} numberOfUnusedBits The number of unused bits.
        @return {Uint8Array}
        */
        static bitStringToBytes(bitString: string, numberOfUnusedBits: fm.icelink.Holder<number>): Uint8Array;
        /**<span id='method-fm.icelink.Binary-bitStringToBytes'>&nbsp;</span>**/
        /**
         <div>
         Converts a bit-string to bytes.
         </div>

        @param {string} bitString The bit-string.
        @return {Uint8Array}
        */
        static bitStringToBytes(bitString: string): Uint8Array;
        /**<span id='method-fm.icelink.Binary-bytesToBitString'>&nbsp;</span>**/
        /**
         <div>
         Converts bytes to a bit-string.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} offset The offset.
        @param {number} length The length.
        @param {number} numberOfUnusedBits The number of unused bits.
        @return {string}
        */
        static bytesToBitString(bytes: Uint8Array, offset: number, length: number, numberOfUnusedBits: number): string;
        /**<span id='method-fm.icelink.Binary-bytesToBitString'>&nbsp;</span>**/
        /**
         <div>
         Converts bytes to a bit-string.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} offset The offset.
        @param {number} length The length.
        @param {number} numberOfUnusedBits The number of unused bits.
        @param {boolean} trimLeft Whether to trim unused bits from the left.
        @return {string}
        */
        static bytesToBitString(bytes: Uint8Array, offset: number, length: number, numberOfUnusedBits: number, trimLeft: boolean): string;
        /**<span id='method-fm.icelink.Binary-bytesToBitString'>&nbsp;</span>**/
        /**
         <div>
         Converts bytes to a bit-string.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} offset The offset.
        @param {number} length The length.
        @return {string}
        */
        static bytesToBitString(bytes: Uint8Array, offset: number, length: number): string;
        /**<span id='method-fm.icelink.Binary-bytesToBitString'>&nbsp;</span>**/
        /**
         <div>
         Converts bytes to a bit-string.
         </div>

        @param {Uint8Array} bytes The bytes.
        @return {string}
        */
        static bytesToBitString(bytes: Uint8Array): string;
        /**<span id='method-fm.icelink.Binary-deinterleave'>&nbsp;</span>**/
        /**
         <div>
         Deinterleaves a byte array i.e.
         XYXYXYXY -&gt; XXXXYYYY
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @return {void}
        */
        static deinterleave(inputFrame: Uint8Array, outputFrame: Uint8Array): void;
        /**<span id='method-fm.icelink.Binary-deinterleave'>&nbsp;</span>**/
        /**
         <div>
         Deinterleaves a byte array i.e.
         XYXYXYXY -&gt; XXXXYYYY
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} start The start.
        @param {number} length The length.
        @return {void}
        */
        static deinterleave(inputFrame: Uint8Array, outputFrame: Uint8Array, start: number, length: number): void;
        /**<span id='method-fm.icelink.Binary-deinterleave'>&nbsp;</span>**/
        /**
         <div>
         Deinterleaves a byte array
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} start The start.
        @param {number} length The length.
        @param {boolean} reversePlanes The reversePlanes.
        @return {void}
        */
        static deinterleave(inputFrame: Uint8Array, outputFrame: Uint8Array, start: number, length: number, reversePlanes: boolean): void;
        /**<span id='method-fm.icelink.Binary-deinterleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Deinterleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @param {number} start The start.
        @param {boolean} reversePlanes Reverse output plane order.
        @return {void}
        */
        static deinterleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, start: number, reversePlanes: boolean): void;
        /**<span id='method-fm.icelink.Binary-deinterleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Deinterleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @return {void}
        */
        static deinterleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number): void;
        /**<span id='method-fm.icelink.Binary-deinterleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Deinterleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @param {number} start The start.
        @return {void}
        */
        static deinterleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, start: number): void;
        /**<span id='method-fm.icelink.Binary-fromBytes1'>&nbsp;</span>**/
        /**
         <div>
         Reads a 1-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {boolean} The value.
        */
        static fromBytes1(input: Uint8Array, inputIndex: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.Binary-fromBytes10'>&nbsp;</span>**/
        /**
         <div>
         Reads a 10-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes10(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes11'>&nbsp;</span>**/
        /**
         <div>
         Reads a 11-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes11(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes12'>&nbsp;</span>**/
        /**
         <div>
         Reads a 12-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes12(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes13'>&nbsp;</span>**/
        /**
         <div>
         Reads a 13-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes13(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes14'>&nbsp;</span>**/
        /**
         <div>
         Reads a 14-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes14(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes15'>&nbsp;</span>**/
        /**
         <div>
         Reads a 15-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes15(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes16'>&nbsp;</span>**/
        /**
         <div>
         Reads a 16-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes16(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes17'>&nbsp;</span>**/
        /**
         <div>
         Reads an 17-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes17(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes18'>&nbsp;</span>**/
        /**
         <div>
         Reads an 18-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes18(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes19'>&nbsp;</span>**/
        /**
         <div>
         Reads an 19-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes19(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes2'>&nbsp;</span>**/
        /**
         <div>
         Reads a 2-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes2(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes20'>&nbsp;</span>**/
        /**
         <div>
         Reads an 20-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes20(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes21'>&nbsp;</span>**/
        /**
         <div>
         Reads an 21-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes21(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes22'>&nbsp;</span>**/
        /**
         <div>
         Reads an 22-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes22(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes23'>&nbsp;</span>**/
        /**
         <div>
         Reads an 23-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes23(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes24'>&nbsp;</span>**/
        /**
         <div>
         Reads a 24-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes24(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes3'>&nbsp;</span>**/
        /**
         <div>
         Reads a 3-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes3(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes32'>&nbsp;</span>**/
        /**
         <div>
         Reads a 32-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes32(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes4'>&nbsp;</span>**/
        /**
         <div>
         Reads a 4-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes4(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes40'>&nbsp;</span>**/
        /**
         <div>
         Reads a 40-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes40(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes48'>&nbsp;</span>**/
        /**
         <div>
         Reads a 48-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes48(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes5'>&nbsp;</span>**/
        /**
         <div>
         Reads a 5-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes5(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes56'>&nbsp;</span>**/
        /**
         <div>
         Reads a 56-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes56(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes6'>&nbsp;</span>**/
        /**
         <div>
         Reads a 6-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes6(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes64'>&nbsp;</span>**/
        /**
         <div>
         Reads a 64-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {number} The value.
        */
        static fromBytes64(input: Uint8Array, inputIndex: number, littleEndian: boolean): number;
        /**<span id='method-fm.icelink.Binary-fromBytes7'>&nbsp;</span>**/
        /**
         <div>
         Reads a 7-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes7(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes8'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @return {number} The value.
        */
        static fromBytes8(input: Uint8Array, inputIndex: number): number;
        /**<span id='method-fm.icelink.Binary-fromBytes9'>&nbsp;</span>**/
        /**
         <div>
         Reads a 9-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @return {number} The value.
        */
        static fromBytes9(input: Uint8Array, inputIndex: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.Binary-interleave'>&nbsp;</span>**/
        /**
         <div>
         Interleaves a byte array i.e.
         XXXXYYYY -&gt; XYXYXYXY
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} start The start.
        @param {number} length The length.
        @return {void}
        */
        static interleave(inputFrame: Uint8Array, outputFrame: Uint8Array, start: number, length: number): void;
        /**<span id='method-fm.icelink.Binary-interleave'>&nbsp;</span>**/
        /**
         <div>
         Interleaves a byte array  i.e.
         XXXXYYYY -&gt; XYXYXYXY
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} start The start.
        @param {number} length The length.
        @param {boolean} reversePlanes XXXXYYYY -> YXYXYXYX
        @return {void}
        */
        static interleave(inputFrame: Uint8Array, outputFrame: Uint8Array, start: number, length: number, reversePlanes: boolean): void;
        /**<span id='method-fm.icelink.Binary-interleave'>&nbsp;</span>**/
        /**
         <div>
         Interleaves a byte array i.e.
         XXXXYYYY -&gt; XYXYXYXY
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @return {void}
        */
        static interleave(inputFrame: Uint8Array, outputFrame: Uint8Array): void;
        /**<span id='method-fm.icelink.Binary-interleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Interleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @return {void}
        */
        static interleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number): void;
        /**<span id='method-fm.icelink.Binary-interleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Interleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @param {number} start The start.
        @return {void}
        */
        static interleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, start: number): void;
        /**<span id='method-fm.icelink.Binary-interleaveTransform'>&nbsp;</span>**/
        /**
         <div>
         Interleave and transform (rotate) a byte array containing two planes
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation Values 0, 90, 180, 270.
        @param {number} start The start.
        @param {boolean} reversePlanes Reverse output plane order.
        @return {void}
        */
        static interleaveTransform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, start: number, reversePlanes: boolean): void;
        /**<span id='method-fm.icelink.Binary-toBytes1'>&nbsp;</span>**/
        /**
         <div>
         Converts a 1-bit value to a byte array.
         </div>

        @param {boolean} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes1(value: boolean, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes1'>&nbsp;</span>**/
        /**
         <div>
         Writes a 1-bit value to a byte array.
         </div>

        @param {boolean} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes1(value: boolean, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes10'>&nbsp;</span>**/
        /**
         <div>
         Converts a 10-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes10(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes10'>&nbsp;</span>**/
        /**
         <div>
         Writes a 10-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes10(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes11'>&nbsp;</span>**/
        /**
         <div>
         Converts a 11-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes11(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes11'>&nbsp;</span>**/
        /**
         <div>
         Writes a 11-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes11(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes12'>&nbsp;</span>**/
        /**
         <div>
         Converts a 12-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes12(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes12'>&nbsp;</span>**/
        /**
         <div>
         Writes a 12-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes12(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes13'>&nbsp;</span>**/
        /**
         <div>
         Writes a 13-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes13(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes13'>&nbsp;</span>**/
        /**
         <div>
         Converts a 13-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes13(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes14'>&nbsp;</span>**/
        /**
         <div>
         Converts a 14-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes14(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes14'>&nbsp;</span>**/
        /**
         <div>
         Writes a 14-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes14(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes15'>&nbsp;</span>**/
        /**
         <div>
         Converts a 15-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes15(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes15'>&nbsp;</span>**/
        /**
         <div>
         Writes a 15-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes15(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes16'>&nbsp;</span>**/
        /**
         <div>
         Converts a 16-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes16(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes16'>&nbsp;</span>**/
        /**
         <div>
         Writes a 16-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes16(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes17'>&nbsp;</span>**/
        /**
         <div>
         Converts a 17-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes17(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes17'>&nbsp;</span>**/
        /**
         <div>
         Writes a 17-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes17(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes18'>&nbsp;</span>**/
        /**
         <div>
         Writes an 18-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes18(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes18'>&nbsp;</span>**/
        /**
         <div>
         Converts an 18-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes18(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes19'>&nbsp;</span>**/
        /**
         <div>
         Converts a 19-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes19(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes19'>&nbsp;</span>**/
        /**
         <div>
         Writes a 19-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes19(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes2'>&nbsp;</span>**/
        /**
         <div>
         Writes a 2-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes2(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes2'>&nbsp;</span>**/
        /**
         <div>
         Converts a 2-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes2(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes20'>&nbsp;</span>**/
        /**
         <div>
         Writes a 20-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes20(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes20'>&nbsp;</span>**/
        /**
         <div>
         Converts a 20-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes20(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes21'>&nbsp;</span>**/
        /**
         <div>
         Converts a 21-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes21(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes21'>&nbsp;</span>**/
        /**
         <div>
         Writes a 21-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes21(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes22'>&nbsp;</span>**/
        /**
         <div>
         Writes a 22-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes22(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes22'>&nbsp;</span>**/
        /**
         <div>
         Converts a 22-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes22(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes23'>&nbsp;</span>**/
        /**
         <div>
         Converts a 23-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes23(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes23'>&nbsp;</span>**/
        /**
         <div>
         Writes a 23-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes23(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes24'>&nbsp;</span>**/
        /**
         <div>
         Writes a 24-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes24(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes24'>&nbsp;</span>**/
        /**
         <div>
         Converts a 24-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes24(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes3'>&nbsp;</span>**/
        /**
         <div>
         Converts a 3-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes3(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes3'>&nbsp;</span>**/
        /**
         <div>
         Writes a 3-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes3(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes32'>&nbsp;</span>**/
        /**
         <div>
         Converts a 32-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes32(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes32'>&nbsp;</span>**/
        /**
         <div>
         Writes a 32-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes32(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes4'>&nbsp;</span>**/
        /**
         <div>
         Writes a 4-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes4(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes4'>&nbsp;</span>**/
        /**
         <div>
         Converts a 4-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes4(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes40'>&nbsp;</span>**/
        /**
         <div>
         Converts a 40-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes40(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes40'>&nbsp;</span>**/
        /**
         <div>
         Writes a 40-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes40(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes48'>&nbsp;</span>**/
        /**
         <div>
         Converts a 48-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes48(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes48'>&nbsp;</span>**/
        /**
         <div>
         Writes a 48-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes48(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes5'>&nbsp;</span>**/
        /**
         <div>
         Writes a 5-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes5(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes5'>&nbsp;</span>**/
        /**
         <div>
         Converts a 5-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes5(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes56'>&nbsp;</span>**/
        /**
         <div>
         Converts a 56-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes56(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes56'>&nbsp;</span>**/
        /**
         <div>
         Writes a 56-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes56(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes6'>&nbsp;</span>**/
        /**
         <div>
         Converts a 6-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes6(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes6'>&nbsp;</span>**/
        /**
         <div>
         Writes a 6-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes6(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes64'>&nbsp;</span>**/
        /**
         <div>
         Converts a 64-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes64(value: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes64'>&nbsp;</span>**/
        /**
         <div>
         Writes a 64-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes64(value: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes7'>&nbsp;</span>**/
        /**
         <div>
         Converts a 7-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @return {Uint8Array} The output byte array.
        */
        static toBytes7(value: number, bitOffset: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes7'>&nbsp;</span>**/
        /**
         <div>
         Writes a 7-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes7(value: number, bitOffset: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes8'>&nbsp;</span>**/
        /**
         <div>
         Writes an 8-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes8(value: number, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes8'>&nbsp;</span>**/
        /**
         <div>
         Converts an 8-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @return {Uint8Array} The output byte array.
        */
        static toBytes8(value: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes9'>&nbsp;</span>**/
        /**
         <div>
         Converts a 9-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @return {Uint8Array} The output byte array.
        */
        static toBytes9(value: number, bitOffset: number, littleEndian: boolean): Uint8Array;
        /**<span id='method-fm.icelink.Binary-toBytes9'>&nbsp;</span>**/
        /**
         <div>
         Writes a 9-bit value to a byte array.
         </div>

        @param {number} value The value to write.
        @param {number} bitOffset The offset of the value within the byte.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {Uint8Array} output The output byte array.
        @param {number} outputIndex The index to start writing.
        @return {Uint8Array} The output byte array.
        */
        static toBytes9(value: number, bitOffset: number, littleEndian: boolean, output: Uint8Array, outputIndex: number): Uint8Array;
        /**<span id='method-fm.icelink.Binary-transform'>&nbsp;</span>**/
        /**
         <div>
         Transforms a byte containing a 2D plane (rotates 90, 180, 270).
         When transforming interleaved planes. Set the chunkLength to
         the number of planes.
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation The rotation.
        @param {number} inputStart The inputStart.
        @param {number} outputStart The outputStart.
        @param {number} chunkLength The chunkLength.
        @return {void}
        */
        static transform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, inputStart: number, outputStart: number, chunkLength: number): void;
        /**<span id='method-fm.icelink.Binary-transform'>&nbsp;</span>**/
        /**
         <div>
         Transforms a byte containing a 2D plane (rotates 90, 180, 270)
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation The rotation.
        @return {void}
        */
        static transform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number): void;
        /**<span id='method-fm.icelink.Binary-transform'>&nbsp;</span>**/
        /**
         <div>
         Transforms a byte containing a 2D plane (rotates 90, 180, 270)
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation The rotation.
        @param {number} inputStart The inputStart.
        @param {number} outputStart The outputStart.
        @return {void}
        */
        static transform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, inputStart: number, outputStart: number): void;
        /**<span id='method-fm.icelink.Binary-transform'>&nbsp;</span>**/
        /**
         <div>
         Transforms a byte containing a 2D plane (rotates 90, 180, 270)
         </div>

        @param {Uint8Array} inputFrame The inputFrame.
        @param {Uint8Array} outputFrame The outputFrame.
        @param {number} width The width.
        @param {number} height The height.
        @param {number} stride The stride.
        @param {number} rotation The rotation.
        @param {number} start Start position for both input and output frame
        @return {void}
        */
        static transform(inputFrame: Uint8Array, outputFrame: Uint8Array, width: number, height: number, stride: number, rotation: number, start: number): void;
        /**<span id='method-fm.icelink.Binary-tryFromBytes1'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 1-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<boolean>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes1(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<boolean>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes10'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 10-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes10(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes11'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 11-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes11(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes12'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 12-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes12(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes13'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 13-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes13(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes14'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 14-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes14(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes15'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 15-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes15(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes16'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 16-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes16(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes17'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 17-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes17(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes18'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 18-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes18(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes19'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 19-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes19(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes2'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 2-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes2(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes20'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 20-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes20(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes21'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 21-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes21(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes22'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 22-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes22(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes23'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 23-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes23(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes24'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 24-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes24(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes3'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 3-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes3(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes32'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 32-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes32(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes4'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 4-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes4(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes40'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 40-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes40(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes48'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 48-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes48(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes5'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 5-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes5(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes56'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 56-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes56(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes6'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 6-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes6(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes64'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 64-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {boolean} littleEndian Whether to use little-endian format.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes64(input: Uint8Array, inputIndex: number, littleEndian: boolean, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes7'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 7-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes7(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes8'>&nbsp;</span>**/
        /**
         <div>
         Tries to read an 8-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes8(input: Uint8Array, inputIndex: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.Binary-tryFromBytes9'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 9-bit value from a byte array.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} inputIndex The index to start reading.
        @param {number} bitOffset The offset of the value within the byte.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean} true if the index is valid and the value was read; otherwise, false
        */
        static tryFromBytes9(input: Uint8Array, inputIndex: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a boolean value passed by reference.
     </div>

    */
    class BooleanHolder {
        getTypeString(): string;
        private fmicelinkBooleanHolderInit();
        /**<span id='method-fm.icelink.BooleanHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.booleanHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.BooleanHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.booleanHolder` class.
         </div>

        @param {boolean} value The value.
        @return {}
        */
        constructor(value: boolean);
        /**<span id='method-fm.icelink.BooleanHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {boolean}
        */
        getValue(): boolean;
        /**<span id='method-fm.icelink.BooleanHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {boolean} value
        @return {void}
        */
        setValue(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Details about the current build.
     </div>

    */
    class Build {
        getTypeString(): string;
        /** <span id='prop-fm.icelink.Build-fm_icelink_Build__versionConstant'>&nbsp;</span> **/
        /**
         <div>
         Gets the build version.
         </div>

        @field fm_icelink_Build__versionConstant
        @type {string}
        */
        static fm_icelink_Build__versionConstant: string;
        constructor();
        /**<span id='method-fm.icelink.Build-getDate'>&nbsp;</span>**/
        /**
         <div>
         Gets the build date.
         </div>


        @return {fm.icelink.DateTime}
        */
        static getDate(): fm.icelink.DateTime;
        /**<span id='method-fm.icelink.Build-getDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the build day.
         </div>


        @return {number}
        */
        static getDay(): number;
        /**<span id='method-fm.icelink.Build-getMajorVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the build major version.
         </div>


        @return {number}
        */
        static getMajorVersion(): number;
        /**<span id='method-fm.icelink.Build-getMinorVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the build minor version.
         </div>


        @return {number}
        */
        static getMinorVersion(): number;
        /**<span id='method-fm.icelink.Build-getMonth'>&nbsp;</span>**/
        /**
         <div>
         Gets the build month.
         </div>


        @return {number}
        */
        static getMonth(): number;
        /**<span id='method-fm.icelink.Build-getPatchVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the build patch version.
         </div>


        @return {number}
        */
        static getPatchVersion(): number;
        /**<span id='method-fm.icelink.Build-getRevisionVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the build revision version.
         </div>


        @return {number}
        */
        static getRevisionVersion(): number;
        /**<span id='method-fm.icelink.Build-getVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the full build version.
         </div>


        @return {string}
        */
        static getVersion(): string;
        /**<span id='method-fm.icelink.Build-getYear'>&nbsp;</span>**/
        /**
         <div>
         Gets the build year.
         </div>


        @return {number}
        */
        static getYear(): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a byte value passed by reference.
     </div>

    */
    class ByteHolder {
        getTypeString(): string;
        private fmicelinkByteHolderInit();
        /**<span id='method-fm.icelink.ByteHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.byteHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ByteHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.byteHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.ByteHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.ByteHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a character value passed by reference.
     </div>

    */
    class CharacterHolder {
        getTypeString(): string;
        private fmicelinkCharacterHolderInit();
        /**<span id='method-fm.icelink.CharacterHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.characterHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.CharacterHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.characterHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.CharacterHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.CharacterHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A circular buffer.
     </div>

    */
    class CircularBuffer {
        getTypeString(): string;
        private fmicelinkCircularBufferInit();
        /**<span id='method-fm.icelink.CircularBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.circularBuffer` class.
         </div>

        @param {number} length The length.
        @param {number} latency The latency.
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {}
        */
        constructor(length: number, latency: number, littleEndian: boolean);
        /**<span id='method-fm.icelink.CircularBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.circularBuffer` class.
         </div>

        @param {number} length The length.
        @param {number} latency The latency.
        @return {}
        */
        constructor(length: number, latency: number);
        /**<span id='method-fm.icelink.CircularBuffer-getAvailable'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes available for reading.
         </div>


        @return {number}
        */
        getAvailable(): number;
        /**<span id='method-fm.icelink.CircularBuffer-getLatency'>&nbsp;</span>**/
        /**
         <div>
         Gets the latency.
         </div>


        @return {number}
        */
        getLatency(): number;
        /**<span id='method-fm.icelink.CircularBuffer-getLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the length.
         </div>


        @return {number}
        */
        getLength(): number;
        /**<span id='method-fm.icelink.CircularBuffer-getLittleEndian'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the data is little-endian.
         </div>


        @return {boolean}
        */
        getLittleEndian(): boolean;
        /**<span id='method-fm.icelink.CircularBuffer-getReadOffset'>&nbsp;</span>**/
        /**
         <div>
         Gets the read offset.
         </div>


        @return {number}
        */
        getReadOffset(): number;
        /**<span id='method-fm.icelink.CircularBuffer-getWriteOffset'>&nbsp;</span>**/
        /**
         <div>
         Gets the read offset.
         </div>


        @return {number}
        */
        getWriteOffset(): number;
        /**<span id='method-fm.icelink.CircularBuffer-read'>&nbsp;</span>**/
        /**
         <div>
         Reads data from the buffer.
         </div>

        @param {number} length The number of bytes to read.
        @return {fm.icelink.DataBuffer}
        */
        read(length: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.CircularBuffer-write'>&nbsp;</span>**/
        /**
         <div>
         Writes data to the buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The data to write.
        @return {void}
        */
        write(buffer: fm.icelink.DataBuffer): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A record that calculates the min, max, and average from integer samples.
     </div>

    */
    class DiagnosticSampler {
        getTypeString(): string;
        private fmicelinkDiagnosticSamplerInit();
        /**<span id='method-fm.icelink.DiagnosticSampler-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of the DiagnosticRecord.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.DiagnosticSampler-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of the DiagnosticRecord.
         </div>

        @param {number} averageSampleCount How many samples to include in the average.
        @return {}
        */
        constructor(averageSampleCount: number);
        /**<span id='method-fm.icelink.DiagnosticSampler-addSample'>&nbsp;</span>**/
        /**
         <div>
         Adds a new sample to the calculation.
         </div>

        @param {number} longSample The sample to add.
        @return {void}
        */
        addSample(longSample: number): void;
        /**<span id='method-fm.icelink.DiagnosticSampler-getAverage'>&nbsp;</span>**/
        /**
         <div>
         Gets the average of all samples.
         </div>


        @return {number}
        */
        getAverage(): number;
        /**<span id='method-fm.icelink.DiagnosticSampler-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets how many samples this record has used.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.DiagnosticSampler-getLastValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the last sample recorded.
         </div>


        @return {number}
        */
        getLastValue(): number;
        /**<span id='method-fm.icelink.DiagnosticSampler-getMax'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum sample ever recorded.
         </div>


        @return {number}
        */
        getMax(): number;
        /**<span id='method-fm.icelink.DiagnosticSampler-getMin'>&nbsp;</span>**/
        /**
         <div>
         Gets the minimum sample ever recorded.
         </div>


        @return {number}
        */
        getMin(): number;
        /**<span id='method-fm.icelink.DiagnosticSampler-getSamplesInAverage'>&nbsp;</span>**/
        /**
         <div>
         Gets how many samples are included in the average.
         </div>


        @return {number}
        */
        getSamplesInAverage(): number;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     A countdown latch that will signal when the counter reaches zero.
     </div>

    */
    class ManagedCountdownLatch {
        getTypeString(): string;
        /**<span id='method-fm.icelink.ManagedCountdownLatch-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of the Latch with an count.
         </div>

        @param {number} initialCount The count to start the latch at.
        @return {}
        */
        constructor(initialCount: number);
        /**<span id='method-fm.icelink.ManagedCountdownLatch-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of the Latch with an unknown count.
         This will cause the latch to count into the negatives until SetCount is called.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ManagedCountdownLatch-decrement'>&nbsp;</span>**/
        /**
         <div>
         Decrements the counter by one and signals if it reaches zero.
         </div>


        @return {void}
        */
        decrement(): void;
        /**<span id='method-fm.icelink.ManagedCountdownLatch-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the current count on the latch.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.ManagedCountdownLatch-setCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the counter for the latch.
         This brings the count back up into positive numbers.
         </div>


        @param {number} count
        @return {void}
        */
        setCount(count: number): void;
        /**<span id='method-fm.icelink.ManagedCountdownLatch-waitAsync'>&nbsp;</span>**/
        /**
         <div>
         Returns a promise that resolves once the counter reaches zero.
         </div>

        @return {fm.icelink.Future<Object>}
        */
        waitAsync(): fm.icelink.Future<Object>;
    }
}
declare namespace fm.icelink {
    class OperatingSystemWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.OperatingSystem);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class ArchitectureWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.Architecture);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A pool of objects.
     </div><typeparam name="T"></typeparam>

    */
    class Pool<T> {
        getTypeString(): string;
        private fmicelinkPoolInit();
        /**<span id='method-fm.icelink.Pool-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.pool` class
         with a specified minimum size and a maximum size of 2,147,483,647.
         </div>

        @param {fm.icelink.IFunction0<T>} createObject A function that creates an object.
        @param {number} minSize The minimum size.
        @return {}
        */
        constructor(createObject: fm.icelink.IFunction0<T>, minSize: number);
        /**<span id='method-fm.icelink.Pool-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.pool` class.
         with a specified minimum size and a specified maximum size.
         </div>

        @param {fm.icelink.IFunction0<T>} createObject A function that creates an object.
        @param {number} minSize The minimum size.
        @param {number} maxSize The maximum size.
        @return {}
        */
        constructor(createObject: fm.icelink.IFunction0<T>, minSize: number, maxSize: number);
        /**<span id='method-fm.icelink.Pool-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.pool` class
         with a minimum size of 0 and a maximum size of 2,147,483,647.
         </div>

        @param {fm.icelink.IFunction0<T>} createObject A function that creates an object.
        @return {}
        */
        constructor(createObject: fm.icelink.IFunction0<T>);
        /**<span id='method-fm.icelink.Pool-get'>&nbsp;</span>**/
        /**
         <div>
         Gets an object.
         </div>

        @return {T}
        */
        get(): T;
        /**<span id='method-fm.icelink.Pool-getAvailable'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of available objects.
         </div>


        @return {number}
        */
        getAvailable(): number;
        /**<span id='method-fm.icelink.Pool-getMaxSize'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum size. Value must be &gt;= 0.
         A value of 0 indicates no maximum.
         </div>


        @return {number}
        */
        getMaxSize(): number;
        /**<span id='method-fm.icelink.Pool-getMinSize'>&nbsp;</span>**/
        /**
         <div>
         Gets the minimum size. Value must be &gt;= 0.
         </div>


        @return {number}
        */
        getMinSize(): number;
        /**<span id='method-fm.icelink.Pool-getSize'>&nbsp;</span>**/
        /**
         <div>
         Gets the current size of the pool.
         </div>


        @return {number}
        */
        getSize(): number;
        /**<span id='method-fm.icelink.Pool-put'>&nbsp;</span>**/
        /**
         <div>
         Put an object back.
         </div>

        @param {T} item
        @return {void}
        */
        put(item: T): void;
    }
}
declare namespace fm.icelink {
    class SourceLanguageWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.SourceLanguage);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Provides methods for serializing/deserializing .NET value types to/from JSON
     as well as facilities for converting objects and arrays if appropriate callbacks
     are supplied to assist with the conversion.
     </div>

    */
    class JsonSerializer {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.JsonSerializer-deserializeBoolean'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a boolean value.
         </div>

        @param {string} valueJson The boolean JSON to deserialize.
        @return {boolean} The deserialized boolean value.
        */
        static deserializeBoolean(valueJson: string): boolean;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeBooleanArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a boolean array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized boolean array.
        @return {boolean[]} An array of boolean values.
        */
        static deserializeBooleanArray(arrayJson: string): boolean[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeDecimal'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a decimal value.
         </div>

        @param {string} valueJson The decimal JSON to deserialize.
        @return {number} The deserialized decimal value.
        */
        static deserializeDecimal(valueJson: string): number;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeDecimalArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a decimal array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized decimal array.
        @return {number[]} An array of decimal values.
        */
        static deserializeDecimalArray(arrayJson: string): number[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeDictionary'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a JSON string into a dictionary.
         </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>

        @param {string} dictionaryJson The JSON-encoded dictionary.
        @param {fm.icelink.IFunction0<fm.icelink.Hash<string,T>>} createDictionaryCallback The callback that creates a blank dictionary.
        @param {fm.icelink.IFunction1<string,T>} deserializeValueCallback The callback that deserializes a value.
        @return {fm.icelink.Hash<string,T>}
         The deserialized dictionary.
 
        */
        static deserializeDictionary<T>(dictionaryJson: string, createDictionaryCallback: fm.icelink.IFunction0<fm.icelink.Hash<string, T>>, deserializeValueCallback: fm.icelink.IFunction1<string, T>): fm.icelink.Hash<string, T>;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeDouble'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a double value.
         </div>

        @param {string} valueJson The double JSON to deserialize.
        @return {number} The deserialized double value.
        */
        static deserializeDouble(valueJson: string): number;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeDoubleArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a double array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized double array.
        @return {number[]} An array of double values.
        */
        static deserializeDoubleArray(arrayJson: string): number[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeFloat'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a float value.
         </div>

        @param {string} valueJson The float JSON to deserialize.
        @return {number} The deserialized float value.
        */
        static deserializeFloat(valueJson: string): number;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeFloatArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a float array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized float array.
        @return {number[]} An array of float values.
        */
        static deserializeFloatArray(arrayJson: string): number[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeGuid'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a globally unique identifier.
         </div>

        @param {string} valueJson The GUID JSON to deserialize.
        @return {fm.icelink.Guid} The deserialized GUID.
        */
        static deserializeGuid(valueJson: string): fm.icelink.Guid;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeGuidArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a GUID array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized GUID array.
        @return {fm.icelink.Guid[]} An array of GUID values.
        */
        static deserializeGuidArray(arrayJson: string): fm.icelink.Guid[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeInteger'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an integer value.
         </div>

        @param {string} valueJson The integer JSON to deserialize.
        @return {number} The deserialized integer value.
        */
        static deserializeInteger(valueJson: string): number;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeIntegerArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a integer array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized integer array.
        @return {number[]} An array of integer values.
        */
        static deserializeIntegerArray(arrayJson: string): number[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeLong'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a long value.
         </div>

        @param {string} valueJson The long JSON to deserialize.
        @return {number} The deserialized long value.
        */
        static deserializeLong(valueJson: string): number;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeLongArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a long array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized long array.
        @return {number[]} An array of long values.
        */
        static deserializeLongArray(arrayJson: string): number[];
        /**<span id='method-fm.icelink.JsonSerializer-deserializeObject'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a JSON string into a target object type.
         </div><typeparam name="T">The type of the object to deserialize.</typeparam>

        @param {string} json The JSON-encoded string.
        @param {fm.icelink.IFunction0<T>} creator The method used for creating a new object.
        @param {fm.icelink.IAction3<T,string,string>} callback The method used for deserializing a property.
        @return {T} The deserialized object.
        */
        static deserializeObject<T>(json: string, creator: fm.icelink.IFunction0<T>, callback: fm.icelink.IAction3<T, string, string>): T;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeObjectArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a JSON string into an array of target object types.
         </div><typeparam name="T">The type of the object to deserialize.</typeparam>

        @param {string} json The JSON-encoded string.
        @param {fm.icelink.IFunction1<string,T>} deserializer The callback used to deserialize each item in the array.
        @return {Array<T>} An array of deserialized objects.
        */
        static deserializeObjectArray<T>(json: string, deserializer: fm.icelink.IFunction1<string, T>): Array<T>;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeObjectFast'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a JSON string into a `fm.icelink.serializable` target object type.
         </div><typeparam name="T">The type of the object to deserialize.</typeparam>

        @param {string} json The JSON-encoded string.
        @param {fm.icelink.IFunction0<T>} creator The method used for creating a new object.
        @param {fm.icelink.IAction3<T,string,string>} callback The method used for deserializing a property.
        @return {T} The deserialized object.
        */
        static deserializeObjectFast<T extends fm.icelink.Serializable>(json: string, creator: fm.icelink.IFunction0<T>, callback: fm.icelink.IAction3<T, string, string>): T;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeRaw'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a piece of raw JSON.
         </div>

        @param {string} dataJson The raw data.
        @return {string} The deserialized data.
        */
        static deserializeRaw(dataJson: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeRawArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a raw array from JSON.
         </div>

        @param {string} json A JSON-serialized raw array.
        @return {Array<string>} An array of raw values.
        */
        static deserializeRawArray(json: string): Array<string>;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeString'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a string.
         </div>

        @param {string} valueJson The string to deserialize.
        @return {string} The deserialized string value.
        */
        static deserializeString(valueJson: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-deserializeStringArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a simple string array from JSON.
         </div>

        @param {string} arrayJson A JSON-serialized string array.
        @return {string[]} An array of string values.
        */
        static deserializeStringArray(arrayJson: string): string[];
        /**<span id='method-fm.icelink.JsonSerializer-escapeString'>&nbsp;</span>**/
        /**
         <div>
         Escapes any special characters in a string.
         </div>

        @param {string} text The string without escaped characters.
        @return {string} The escaped string.
        */
        static escapeString(text: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-isValidJson'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified JSON string is valid.
         </div>

        @param {string} json The JSON string to validate.
        @return {boolean} True if the JSON string is valid; false otherwise.
        */
        static isValidJson(json: string): boolean;
        /**<span id='method-fm.icelink.JsonSerializer-serializeBoolean'>&nbsp;</span>**/
        /**
         <div>
         Serializes a boolean value.
         </div>

        @param {boolean} value The boolean to serialize.
        @return {string} The serialized boolean value.
        */
        static serializeBoolean(value: boolean): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeBooleanArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a boolean array to JSON.
         </div>

        @param {boolean[]} array An array of boolean values.
        @return {string} A JSON-serialized boolean array.
        */
        static serializeBooleanArray(array: boolean[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeDecimal'>&nbsp;</span>**/
        /**
         <div>
         Serializes a decimal value.
         </div>

        @param {number} value The decimal to serialize.
        @return {string} The serialized decimal value.
        */
        static serializeDecimal(value: number): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeDecimalArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a decimal array to JSON.
         </div>

        @param {number[]} array An array of decimal values.
        @return {string} A JSON-serialized decimal array.
        */
        static serializeDecimalArray(array: number[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeDictionary'>&nbsp;</span>**/
        /**
         <div>
         Serializes a dictionary into a JSON string.
         </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>

        @param {fm.icelink.Hash<string,T>} dictionary The dictionary being serialized.
        @param {fm.icelink.IFunction1<T,string>} serializeValueCallback The callback that serializes a value.
        @return {string} The dictionary as a JSON string.
        */
        static serializeDictionary<T>(dictionary: fm.icelink.Hash<string, T>, serializeValueCallback: fm.icelink.IFunction1<T, string>): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeDouble'>&nbsp;</span>**/
        /**
         <div>
         Serializes a double value.
         </div>

        @param {number} value The double to serialize.
        @return {string} The serialized double value.
        */
        static serializeDouble(value: number): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeDoubleArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a double array to JSON.
         </div>

        @param {number[]} array An array of double values.
        @return {string} A JSON-serialized double array.
        */
        static serializeDoubleArray(array: number[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeFloat'>&nbsp;</span>**/
        /**
         <div>
         Serializes a float value.
         </div>

        @param {number} value The float to serialize.
        @return {string} The serialized float value.
        */
        static serializeFloat(value: number): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeFloatArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a float array to JSON.
         </div>

        @param {number[]} array An array of float values.
        @return {string} A JSON-serialized float array.
        */
        static serializeFloatArray(array: number[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeGuid'>&nbsp;</span>**/
        /**
         <div>
         Serializes a globally unique identifier.
         </div>

        @param {fm.icelink.Guid} value The GUID to serialize.
        @return {string} The serialized GUID.
        */
        static serializeGuid(value: fm.icelink.Guid): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeGuidArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a GUID array to JSON.
         </div>

        @param {fm.icelink.Guid[]} array An array of GUID values.
        @return {string} A JSON-serialized GUID array.
        */
        static serializeGuidArray(array: fm.icelink.Guid[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeInteger'>&nbsp;</span>**/
        /**
         <div>
         Serializes an integer value.
         </div>

        @param {number} value The integer to serialize.
        @return {string} The serialized integer value.
        */
        static serializeInteger(value: number): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeIntegerArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a integer array to JSON.
         </div>

        @param {number[]} array An array of integer values.
        @return {string} A JSON-serialized integer array.
        */
        static serializeIntegerArray(array: number[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeLong'>&nbsp;</span>**/
        /**
         <div>
         Serializes a long value.
         </div>

        @param {number} value The long to serialize.
        @return {string} The serialized long value.
        */
        static serializeLong(value: number): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeLongArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a long array to JSON.
         </div>

        @param {number[]} array An array of long values.
        @return {string} A JSON-serialized long array.
        */
        static serializeLongArray(array: number[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeObject'>&nbsp;</span>**/
        /**
         <div>
         Serializes an object into a JSON string.
         </div><typeparam name="T">The type of the object to serialize.</typeparam>

        @param {T} source The object being serialized.
        @param {fm.icelink.IAction2<T,fm.icelink.Hash<string,string>>} callback The method used for serializing properties.
        @return {string} The object as a JSON string.
        */
        static serializeObject<T>(source: T, callback: fm.icelink.IAction2<T, fm.icelink.Hash<string, string>>): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeObjectArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an object array into a JSON string.
         </div><typeparam name="T">The type of the object to serialize.</typeparam>

        @param {T[]} objects The object array being serialized.
        @param {fm.icelink.IFunction1<T,string>} serializer The callback used to serialize each item in the array.
        @return {string} The object array as a JSON string.
        */
        static serializeObjectArray<T>(objects: T[], serializer: fm.icelink.IFunction1<T, string>): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeObjectFast'>&nbsp;</span>**/
        /**
         <div>
         Serializes a `fm.icelink.serializable` object into a JSON string.
         </div><typeparam name="T">The type of the object to serialize.</typeparam>

        @param {T} source The object being serialized.
        @param {fm.icelink.IAction2<T,fm.icelink.Hash<string,string>>} callback The method used for serializing properties.
        @return {string} The object as a JSON string.
        */
        static serializeObjectFast<T extends fm.icelink.Serializable>(source: T, callback: fm.icelink.IAction2<T, fm.icelink.Hash<string, string>>): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeRaw'>&nbsp;</span>**/
        /**
         <div>
         Serializes a piece of raw JSON.
         </div>

        @param {string} dataJson The raw data.
        @return {string} The serialized data.
        */
        static serializeRaw(dataJson: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeRawArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a raw array to JSON.
         </div>

        @param {string[]} jsons An array of raw values.
        @return {string} A JSON-serialized raw array.
        */
        static serializeRawArray(jsons: string[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeString'>&nbsp;</span>**/
        /**
         <div>
         Serializes a string.
         </div>

        @param {string} value The string to serialize.
        @return {string} The serialized string value.
        */
        static serializeString(value: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-serializeStringArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes a string array to JSON.
         </div>

        @param {string[]} array An array of string values.
        @return {string} A JSON-serialized string array.
        */
        static serializeStringArray(array: string[]): string;
        /**<span id='method-fm.icelink.JsonSerializer-trimQuotes'>&nbsp;</span>**/
        /**
         <div>
         Trims the quotes from a JavaScript string value.
         </div>

        @param {string} value The JavaScript string value.
        @return {string} The string without quotes.
        */
        static trimQuotes(value: string): string;
        /**<span id='method-fm.icelink.JsonSerializer-unescapeString'>&nbsp;</span>**/
        /**
         <div>
         Unescapes any special characters from a string.
         </div>

        @param {string} text The string with escaped characters.
        @return {string} The unescaped string.
        */
        static unescapeString(text: string): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Provides methods for serializing/deserializing .NET value types to/from JSON
     as well as facilities for converting objects and arrays if appropriate callbacks
     are supplied to assist with the conversion.
     </div>

    */
    class Serializer extends fm.icelink.JsonSerializer {
        getTypeString(): string;
        constructor();
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A simple state machine.
     </div>

    */
    abstract class StateMachine<T> {
        getTypeString(): string;
        private fmicelinkStateMachineInit();
        /**<span id='method-fm.icelink.StateMachine-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.stateMachine` class.
         </div>

        @param {T} initialState The initial state.
        @return {}
        */
        constructor(initialState: T);
        /**<span id='method-fm.icelink.StateMachine-addTransition'>&nbsp;</span>**/
        /**
         <div>
         Adds an allowed transition.
         </div>

        @param {T} fromState The "from" state.
        @param {T} toState The "to" state.
        @return {void}
        */
        addTransition(fromState: T, toState: T): void;
        /**<span id='method-fm.icelink.StateMachine-canTransition'>&nbsp;</span>**/
        /**
         <div>
         Determines whether a transition to the specified state is allowed.
         </div>

        @param {T} toState The "to" state.
        @return {boolean} true if a transition to the specified state is allowed; otherwise, false.
 
        */
        canTransition(toState: T): boolean;
        /**<span id='method-fm.icelink.StateMachine-getLastStateMillis'>&nbsp;</span>**/
        /**
         <div>
         Gets the length of time spent in the last state,
         in milliseconds.
         </div>


        @return {number}
        */
        getLastStateMillis(): number;
        /**<span id='method-fm.icelink.StateMachine-getLastStateTicks'>&nbsp;</span>**/
        /**
         <div>
         Gets the length of time spent in the last state,
         in ticks.
         </div>


        @return {number}
        */
        getLastStateTicks(): number;
        /**<span id='method-fm.icelink.StateMachine-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state.
         </div>


        @return {T}
        */
        getState(): T;
        /**<span id='method-fm.icelink.StateMachine-getStateValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the state value.
         </div>


        @return {number}
        */
        protected getStateValue(): number;
        /**<span id='method-fm.icelink.StateMachine-getSystemTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Gets the system timestamp of the last
         state transition.
         </div>


        @return {number}
        */
        getSystemTimestamp(): number;
        /**<span id='method-fm.icelink.StateMachine-stateToValue'>&nbsp;</span>**/
        /**
         <div>
         Converts a state to an integer value.
         </div>

        @param {T} state The state.
        @return {number}
        */
        protected abstract stateToValue(state: T): number;
        /**<span id='method-fm.icelink.StateMachine-transition'>&nbsp;</span>**/
        /**
         <div>
         Transitions to the specified state.
         </div>

        @param {T} toState The "to" state.
        @return {boolean} true if a transition to the specified state is allowed; otherwise, false.
 
        */
        transition(toState: T): boolean;
        /**<span id='method-fm.icelink.StateMachine-valueToState'>&nbsp;</span>**/
        /**
         <div>
         Converts an integer value to a state.
         </div>

        @param {number} value The integer value.
        @return {T}
        */
        protected abstract valueToState(value: number): T;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     A linked list node.
     </div>

    */
    class LinkedListNode<T> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.LinkedListNode-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.linkedListNode` class.
         </div>

        @param {T} item The item.
        @return {}
        */
        constructor(item: T);
        /**<span id='method-fm.icelink.LinkedListNode-getNext'>&nbsp;</span>**/
        /**
         <div>
         Gets the next node. Will be <c>null</c> if last.
         </div>


        @return {fm.icelink.LinkedListNode<T>}
        */
        getNext(): fm.icelink.LinkedListNode<T>;
        /**<span id='method-fm.icelink.LinkedListNode-getPrevious'>&nbsp;</span>**/
        /**
         <div>
         Gets the previous node. Null if first.
         </div>


        @return {fm.icelink.LinkedListNode<T>}
        */
        getPrevious(): fm.icelink.LinkedListNode<T>;
        /**<span id='method-fm.icelink.LinkedListNode-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the item in the linked list.
         </div>


        @return {T}
        */
        getValue(): T;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A linked list enumerator.
     </div><typeparam name="T"></typeparam>

    */
    class LinkedListEnumerator<T> {
        getTypeString(): string;
        private fmicelinkLinkedListEnumeratorInit();
        /**<span id='method-fm.icelink.LinkedListEnumerator-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.linkedListEnumerator` class.
         </div>

        @param {fm.icelink.LinkedListNode<T>} root The root node.
        @return {}
        */
        constructor(root: fm.icelink.LinkedListNode<T>);
        /**<span id='method-fm.icelink.LinkedListEnumerator-getCurrent'>&nbsp;</span>**/
        /**
         <div>
         Gets the current value.
         </div>


        @return {T}
        */
        getCurrent(): T;
        /**<span id='method-fm.icelink.LinkedListEnumerator-getCurrentNode'>&nbsp;</span>**/
        /**
         <div>
         Gets the current node.
         </div>


        @return {fm.icelink.LinkedListNode<T>}
        */
        getCurrentNode(): fm.icelink.LinkedListNode<T>;
        /**<span id='method-fm.icelink.LinkedListEnumerator-moveNext'>&nbsp;</span>**/
        /**
         <div>
         Moves to the next node.
         </div>


        @return {boolean}
        */
        moveNext(): boolean;
        /**<span id='method-fm.icelink.LinkedListEnumerator-reset'>&nbsp;</span>**/
        /**
         <div>
         Resets this instance.
         </div>


        @return {void}
        */
        reset(): void;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     A ConcurrentDictonary that maps to the appropriate platform version.
     </div>

    */
    class ManagedConcurrentDictionary<TKey, TValue> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new ManagedConcurrentDictionary.
         </div>

        @param {fm.icelink.IFunction1<TKey,string>} hashCallback The hash function to use when the backing dictionary requires the key to be a string.
        @return {}
        */
        constructor(hashCallback: fm.icelink.IFunction1<TKey, string>);
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-addOrUpdate'>&nbsp;</span>**/
        /**
         <div>
         Updates a value in the dictionary or adds it if it does not exist.
         </div>

        @param {TKey} key The key to use for updating for adding.
        @param {TValue} addValue The value to be added for an absent key.
        @param {fm.icelink.IFunction2<TKey,TValue,TValue>} updateValueFactory The function to use for generating a value based on an existing key.
        @return {TValue}
        */
        addOrUpdate(key: TKey, addValue: TValue, updateValueFactory: fm.icelink.IFunction2<TKey, TValue, TValue>): TValue;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-clear'>&nbsp;</span>**/
        /**
         <div>
         Clears the dictionary of all items.
         </div>


        @return {void}
        */
        clear(): void;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-containsKey'>&nbsp;</span>**/
        /**
         <div>
         True if the dictionary contains the key.
         </div>

        @param {TKey} key The key to check.
        @return {boolean}
        */
        containsKey(key: TKey): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of items in the dictionary.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getIsEmpty'>&nbsp;</span>**/
        /**
         <div>
         Gets true if dictionary is empty.
         </div>


        @return {boolean}
        */
        getIsEmpty(): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getKeys'>&nbsp;</span>**/
        /**
         <div>
         Gets an array of keys.
         </div>


        @return {Array<TKey>}
        */
        getKeys(): Array<TKey>;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getOrAdd'>&nbsp;</span>**/
        /**
         <div>
         Gets the value from the dictionary or adds a new one if it does not exist.
         </div>

        @param {TKey} key The key to use when adding to the dictionary.
        @param {fm.icelink.IFunction1<TKey,TValue>} valueFactory The Func that will create a value if needed.
        @return {TValue} The dictionary value if exist, the value returned by the Func if not.
        */
        getOrAdd(key: TKey, valueFactory: fm.icelink.IFunction1<TKey, TValue>): TValue;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-getValues'>&nbsp;</span>**/
        /**
         <div>
         Gets an array of Values.
         </div>


        @return {Array<TValue>}
        */
        getValues(): Array<TValue>;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryAdd'>&nbsp;</span>**/
        /**
         <div>
         Tries to add a new value to the dictionary.
         </div>

        @param {TKey} key The key to use when adding.
        @param {TValue} value The value to be added to the dictionary.
        @return {boolean} True if added, false if key already exists.
        */
        tryAdd(key: TKey, value: TValue): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryGetValue'>&nbsp;</span>**/
        /**
         <div>
         Tries to get a value from the dictionary.
         </div>

        @param {TKey} key They key of the item to get form the dictionary.
        @param {fm.icelink.Holder<TValue>} value The value that was just received or null if failed.
        @return {boolean} True if succeeded.
        */
        tryGetValue(key: TKey, value: fm.icelink.Holder<TValue>): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryRemove'>&nbsp;</span>**/
        /**
         <div>
         Tries and removes a value from the dictionary.
         </div>

        @param {TKey} key The key of the item to remove.
        @param {fm.icelink.Holder<TValue>} value The value that was just removed.
        @return {boolean} True if successful.
        */
        tryRemove(key: TKey, value: fm.icelink.Holder<TValue>): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentDictionary-tryUpdate'>&nbsp;</span>**/
        /**
         <div>
         Tries to update the value in the dictionary.
         </div>

        @param {TKey} key The key to use when updating.
        @param {TValue} newValue The new value.
        @param {TValue} comparisonValue The value to compare with the current value in the dictionary.
        @return {boolean} True if succeeded.
        */
        tryUpdate(key: TKey, newValue: TValue, comparisonValue: TValue): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A thread-safe queue.
     </div><typeparam name="T">The type that the queue holds.</typeparam>

    */
    class ManagedConcurrentQueue<T> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new ConcurrentQueue.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-enqueue'>&nbsp;</span>**/
        /**
         <div>
         Add the item to the end of the queue.
         </div>

        @param {T} item The item to add.
        @return {void}
        */
        enqueue(item: T): void;
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the amount of items in this queue.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-getIsEmpty'>&nbsp;</span>**/
        /**
         <div>
         Gets true if the queue is empty.
         </div>


        @return {boolean}
        */
        getIsEmpty(): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-tryDequeue'>&nbsp;</span>**/
        /**
         <div>
         Removes and returns the item at the front of the queue.
         </div>

        @param {fm.icelink.Holder<T>} item The dequeued item.
        @return {boolean} True if item received, false if no item.
        */
        tryDequeue(item: fm.icelink.Holder<T>): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentQueue-tryPeek'>&nbsp;</span>**/
        /**
         <div>
         Peeks at the first item in the queue.
         </div>

        @param {fm.icelink.Holder<T>} item The item at the front of the queue.
        @return {boolean} False if queue is empty. True if first item peeked at.
        */
        tryPeek(item: fm.icelink.Holder<T>): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A ConcurrentStack that maps to the appropriate platform version.
     </div>

    */
    class ManagedConcurrentStack<TValue> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of a ConcurrentStack.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ManagedConcurrentStack-clear'>&nbsp;</span>**/
        /**
         <div>
         Clears the stack of all items.
         </div>


        @return {void}
        */
        clear(): void;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the amount of items in the stack.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-getIsEmpty'>&nbsp;</span>**/
        /**
         <div>
         Gets true if the stack is empty.
         </div>


        @return {boolean}
        */
        getIsEmpty(): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-push'>&nbsp;</span>**/
        /**
         <div>
         Pushes a new item on top of the stack.
         </div>

        @param {TValue} item The item to push.
        @return {void}
        */
        push(item: TValue): void;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-tryPeek'>&nbsp;</span>**/
        /**
         <div>
         Tries to peek at the top value in stack.
         </div>

        @param {fm.icelink.Holder<TValue>} result The value from the stack if possible, null otherwise.
        @return {boolean} True if peek succeeded, false if not.
        */
        tryPeek(result: fm.icelink.Holder<TValue>): boolean;
        /**<span id='method-fm.icelink.ManagedConcurrentStack-tryPop'>&nbsp;</span>**/
        /**
         <div>
         Tries to pop the top value off of the stack.
         </div>

        @param {fm.icelink.Holder<TValue>} result The value from the top of the stack if possible, null otherwise.
        @return {boolean} True if pop suceeded, false if not.
        */
        tryPop(result: fm.icelink.Holder<TValue>): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A mutable 2-tuple.
     </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>

    */
    class MutablePair<T1, T2> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.MutablePair-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mutablePair` class.
         </div>

        @param {T1} item1 First item the tuple holds.
        @param {T2} item2 Second item the tuple holds.
        @return {}
        */
        constructor(item1: T1, item2: T2);
        /**<span id='method-fm.icelink.MutablePair-getItem1'>&nbsp;</span>**/
        /**
         <div>
         Gets the first item in the tuple.
         </div>


        @return {T1}
        */
        getItem1(): T1;
        /**<span id='method-fm.icelink.MutablePair-getItem2'>&nbsp;</span>**/
        /**
         <div>
         Gets the second item in the tuple.
         </div>


        @return {T2}
        */
        getItem2(): T2;
        /**<span id='method-fm.icelink.MutablePair-setItem1'>&nbsp;</span>**/
        /**
         <div>
         Sets the first item in the tuple.
         </div>


        @param {T1} value
        @return {void}
        */
        setItem1(value: T1): void;
        /**<span id='method-fm.icelink.MutablePair-setItem2'>&nbsp;</span>**/
        /**
         <div>
         Sets the second item in the tuple.
         </div>


        @param {T2} value
        @return {void}
        */
        setItem2(value: T2): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A mutable 1-tuple.
     </div><typeparam name="T">Type the tuple holds.</typeparam>

    */
    class MutableUnit<T> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.MutableUnit-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mutableUnit` class.
         </div>

        @param {T} item The item to hold.
        @return {}
        */
        constructor(item: T);
        /**<span id='method-fm.icelink.MutableUnit-getItem'>&nbsp;</span>**/
        /**
         <div>
         Gets the first item in the tuple.
         </div>


        @return {T}
        */
        getItem(): T;
        /**<span id='method-fm.icelink.MutableUnit-setItem'>&nbsp;</span>**/
        /**
         <div>
         Sets the first item in the tuple.
         </div>


        @param {T} value
        @return {void}
        */
        setItem(value: T): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A 2-tuple.
     </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>

    */
    class Pair<T1, T2> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.Pair-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.pair` class.
         </div>

        @param {T1} item1 First item the tuple holds.
        @param {T2} item2 Second item the tuple holds.
        @return {}
        */
        constructor(item1: T1, item2: T2);
        /**<span id='method-fm.icelink.Pair-getHashCode'>&nbsp;</span>**/
        /**
         <div>
         Calculates the hashcode for this pair.
         </div>


        @return {number}
        */
        getHashCode(): number;
        /**<span id='method-fm.icelink.Pair-getItem1'>&nbsp;</span>**/
        /**
         <div>
         Gets the first item in the tuple.
         </div>


        @return {T1}
        */
        getItem1(): T1;
        /**<span id='method-fm.icelink.Pair-getItem2'>&nbsp;</span>**/
        /**
         <div>
         Gets the second item in the tuple.
         </div>


        @return {T2}
        */
        getItem2(): T2;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A 3-tuple.
     </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam><typeparam name="T3">Third type the tuple holds.</typeparam>

    */
    class Triple<T1, T2, T3> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.Triple-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.triple` class.
         </div>

        @param {T1} item1 First item the tuple holds.
        @param {T2} item2 Second item the tuple holds.
        @param {T3} item3 Third item the tuple holds.
        @return {}
        */
        constructor(item1: T1, item2: T2, item3: T3);
        /**<span id='method-fm.icelink.Triple-getItem1'>&nbsp;</span>**/
        /**
         <div>
         Gets the first item in the tuple.
         </div>


        @return {T1}
        */
        getItem1(): T1;
        /**<span id='method-fm.icelink.Triple-getItem2'>&nbsp;</span>**/
        /**
         <div>
         Gets the second item in the tuple.
         </div>


        @return {T2}
        */
        getItem2(): T2;
        /**<span id='method-fm.icelink.Triple-getItem3'>&nbsp;</span>**/
        /**
         <div>
         Gets the third item in the tuple.
         </div>


        @return {T3}
        */
        getItem3(): T3;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A 1-tuple.
     </div><typeparam name="T">Type the tuple holds.</typeparam>

    */
    class Unit<T> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.Unit-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.unit` class.
         </div>

        @param {T} item The item to hold.
        @return {}
        */
        constructor(item: T);
        /**<span id='method-fm.icelink.Unit-getItem'>&nbsp;</span>**/
        /**
         <div>
         Gets the item in the tuple.
         </div>


        @return {T}
        */
        getItem(): T;
    }
}
declare namespace fm.icelink {
    class CompareResultWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.CompareResult);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of platform-independent constant values.
     </div>

    */
    class Constants {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Constants-getHoursPerDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of hours in one day.
         </div>


        @return {number}
        */
        static getHoursPerDay(): number;
        /**<span id='method-fm.icelink.Constants-getMillisecondsPerDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of milliseconds in one hour.
         </div>


        @return {number}
        */
        static getMillisecondsPerDay(): number;
        /**<span id='method-fm.icelink.Constants-getMillisecondsPerHour'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of milliseconds in one hour.
         </div>


        @return {number}
        */
        static getMillisecondsPerHour(): number;
        /**<span id='method-fm.icelink.Constants-getMillisecondsPerMinute'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of milliseconds in one minute.
         </div>


        @return {number}
        */
        static getMillisecondsPerMinute(): number;
        /**<span id='method-fm.icelink.Constants-getMillisecondsPerSecond'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of milliseconds in one second.
         </div>


        @return {number}
        */
        static getMillisecondsPerSecond(): number;
        /**<span id='method-fm.icelink.Constants-getMinutesPerDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of minutes in one day.
         </div>


        @return {number}
        */
        static getMinutesPerDay(): number;
        /**<span id='method-fm.icelink.Constants-getMinutesPerHour'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of minutes in one hour.
         </div>


        @return {number}
        */
        static getMinutesPerHour(): number;
        /**<span id='method-fm.icelink.Constants-getNanosecondsPerTick'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of nanoseconds in one tick.
         </div>


        @return {number}
        */
        static getNanosecondsPerTick(): number;
        /**<span id='method-fm.icelink.Constants-getSecondsPerDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of seconds in one day.
         </div>


        @return {number}
        */
        static getSecondsPerDay(): number;
        /**<span id='method-fm.icelink.Constants-getSecondsPerHour'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of seconds in one hour.
         </div>


        @return {number}
        */
        static getSecondsPerHour(): number;
        /**<span id='method-fm.icelink.Constants-getSecondsPerMinute'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of seconds in one minute.
         </div>


        @return {number}
        */
        static getSecondsPerMinute(): number;
        /**<span id='method-fm.icelink.Constants-getTicksPerDay'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ticks in one day.
         </div>


        @return {number}
        */
        static getTicksPerDay(): number;
        /**<span id='method-fm.icelink.Constants-getTicksPerHour'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ticks in one hour.
         </div>


        @return {number}
        */
        static getTicksPerHour(): number;
        /**<span id='method-fm.icelink.Constants-getTicksPerMillisecond'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ticks in one millisecond.
         </div>


        @return {number}
        */
        static getTicksPerMillisecond(): number;
        /**<span id='method-fm.icelink.Constants-getTicksPerMinute'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ticks in one minute.
         </div>


        @return {number}
        */
        static getTicksPerMinute(): number;
        /**<span id='method-fm.icelink.Constants-getTicksPerSecond'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ticks in one second.
         </div>


        @return {number}
        */
        static getTicksPerSecond(): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A data buffer stream.
     </div>

    */
    class DataBufferStream {
        getTypeString(): string;
        private fmicelinkDataBufferStreamInit();
        /**<span id='method-fm.icelink.DataBufferStream-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataBufferStream` class.
         </div>

        @param {number} dataBufferSize Size of the data buffer.
        @return {}
        */
        constructor(dataBufferSize: number);
        /**<span id='method-fm.icelink.DataBufferStream-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataBufferStream` class.
         </div>

        @param {number} dataBufferSize Size of the data buffer.
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {}
        */
        constructor(dataBufferSize: number, littleEndian: boolean);
        /**<span id='method-fm.icelink.DataBufferStream-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataBufferStream` class.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {}
        */
        constructor(buffer: fm.icelink.DataBuffer);
        /**<span id='method-fm.icelink.DataBufferStream-getAvailable'>&nbsp;</span>**/
        /**
         <div>
         Gets the available bytes to be read from the DataBuffer.
         </div>


        @return {number}
        */
        getAvailable(): number;
        /**<span id='method-fm.icelink.DataBufferStream-getBitPosition'>&nbsp;</span>**/
        /**
         <div>
         Gets the bit position within a byte.
         </div>


        @return {number}
        */
        getBitPosition(): number;
        /**<span id='method-fm.icelink.DataBufferStream-getBuffer'>&nbsp;</span>**/
        /**
         <div>
         Gets the buffer.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getBuffer(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferStream-getLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the buffer length.
         </div>


        @return {number}
        */
        getLength(): number;
        /**<span id='method-fm.icelink.DataBufferStream-getPosition'>&nbsp;</span>**/
        /**
         <div>
         Gets the position within the stream.
         </div>


        @return {number}
        */
        getPosition(): number;
        /**<span id='method-fm.icelink.DataBufferStream-nextByte'>&nbsp;</span>**/
        /**
         <div>
         Resets the bit count to 0 and advances to the next byte.
         </div>


        @return {void}
        */
        nextByte(): void;
        /**<span id='method-fm.icelink.DataBufferStream-peek'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit value from the DataBuffer without advancing the Position.
         </div>


        @return {number}
        */
        peek(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read'>&nbsp;</span>**/
        /**
         <div>
         Reads the specified length from the DataBuffer and advances the position by the length.
         </div>

        @param {number} length The length.
        @return {fm.icelink.DataBuffer}
        */
        read(length: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferStream-read1'>&nbsp;</span>**/
        /**
         <div>
         Read a single bit and advance the bit position by 1.
         </div>


        @return {boolean}
        */
        read1(): boolean;
        /**<span id='method-fm.icelink.DataBufferStream-read15'>&nbsp;</span>**/
        /**
         <div>
         Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.
         </div>


        @return {number}
        */
        read15(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read16'>&nbsp;</span>**/
        /**
         <div>
         Reads an 16-bit value from the DataBuffer and advances the Position by 2.
         </div>


        @return {number}
        */
        read16(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read2'>&nbsp;</span>**/
        /**
         <div>
         Read a 2-bit value and advance the BitPosition by 2.
         </div>


        @return {number}
        */
        read2(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read24'>&nbsp;</span>**/
        /**
         <div>
         Reads an 24-bit value from the DataBuffer and advances the Position by 3.
         </div>


        @return {number}
        */
        read24(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read3'>&nbsp;</span>**/
        /**
         <div>
         Read a 3-bit value and advance the BitPosition by 3.
         </div>


        @return {number}
        */
        read3(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read32'>&nbsp;</span>**/
        /**
         <div>
         Reads an 32-bit value from the DataBuffer and advances the Position by 4.
         </div>


        @return {number}
        */
        read32(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read4'>&nbsp;</span>**/
        /**
         <div>
         Read a 4-bit value and advance the BitPosition by 4.
         </div>


        @return {number}
        */
        read4(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read40'>&nbsp;</span>**/
        /**
         <div>
         Reads an 40-bit value from the DataBuffer and advances the Position by 5.
         </div>


        @return {number}
        */
        read40(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read48'>&nbsp;</span>**/
        /**
         <div>
         Reads an 48-bit value from the DataBuffer and advances the Position by 6.
         </div>


        @return {number}
        */
        read48(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read56'>&nbsp;</span>**/
        /**
         <div>
         Reads an 56-bit value from the DataBuffer and advances the Position by 7.
         </div>


        @return {number}
        */
        read56(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read64'>&nbsp;</span>**/
        /**
         <div>
         Reads an 64-bit value from the DataBuffer and advances the Position by 8.
         </div>


        @return {number}
        */
        read64(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read7'>&nbsp;</span>**/
        /**
         <div>
         Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.
         </div>


        @return {number}
        */
        read7(): number;
        /**<span id='method-fm.icelink.DataBufferStream-read8'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit value from the DataBuffer and advances the Position by 1.
         </div>


        @return {number}
        */
        read8(): number;
        /**<span id='method-fm.icelink.DataBufferStream-readByte'>&nbsp;</span>**/
        /**
         <div>
         Reads a single byte from the stream and advances the Position by 1.
         </div>


        @return {number}
        */
        readByte(): number;
        /**<span id='method-fm.icelink.DataBufferStream-readBytes'>&nbsp;</span>**/
        /**
         <div>
         Read a specified number of bytes from the DataBuffer and advance the Position by that number.
         </div>

        @param {number} length The number of bytes to read.
        @return {Uint8Array}
        */
        readBytes(length: number): Uint8Array;
        /**<span id='method-fm.icelink.DataBufferStream-setBitPosition'>&nbsp;</span>**/
        /**
         <div>
         Sets the bit position within a byte.
         </div>


        @param {number} value
        @return {void}
        */
        setBitPosition(value: number): void;
        /**<span id='method-fm.icelink.DataBufferStream-setPosition'>&nbsp;</span>**/
        /**
         <div>
         Sets the position within the stream.
         </div>


        @param {number} value
        @return {void}
        */
        setPosition(value: number): void;
        /**<span id='method-fm.icelink.DataBufferStream-write'>&nbsp;</span>**/
        /**
         <div>
         Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {fm.icelink.DataBufferStream}
        */
        write(buffer: fm.icelink.DataBuffer): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-write16'>&nbsp;</span>**/
        /**
         <div>
         Writes an 16-bit value to the DataBuffer and advances the Position by 2.
         </div>

        @param {number} value The value.
        @return {fm.icelink.DataBufferStream}
        */
        write16(value: number): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-write32'>&nbsp;</span>**/
        /**
         <div>
         Writes an 32-bit value to the DataBuffer and advances the Position by 4.
         </div>

        @param {number} value The value.
        @return {fm.icelink.DataBufferStream}
        */
        write32(value: number): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-write64'>&nbsp;</span>**/
        /**
         <div>
         Writes an 64-bit value to the DataBuffer and advances the Position by 8.
         </div>

        @param {number} value The value.
        @return {fm.icelink.DataBufferStream}
        */
        write64(value: number): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-write8'>&nbsp;</span>**/
        /**
         <div>
         Writes an 8-bit value to the DataBuffer and advances the Position by 1.
         </div>

        @param {number} value The value.
        @return {fm.icelink.DataBufferStream}
        */
        write8(value: number): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes the specified data to the DataBuffer and advances the Position by the length of the data.
         </div>

        @param {Uint8Array} data The data.
        @return {fm.icelink.DataBufferStream}
        */
        writeBytes(data: Uint8Array): fm.icelink.DataBufferStream;
        /**<span id='method-fm.icelink.DataBufferStream-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes the specified data to the DataBuffer and advances the Position by the length.
         </div>

        @param {Uint8Array} data The data.
        @param {number} index The index.
        @param {number} length The length.
        @return {fm.icelink.DataBufferStream}
        */
        writeBytes(data: Uint8Array, index: number, length: number): fm.icelink.DataBufferStream;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Binary data buffer implementation
     </div>

    */
    class DataBuffer {
        getTypeString(): string;
        private fmicelinkDataBufferInit();
        constructor();
        constructor(data: Uint8Array, index: number, length: number, littleEndian: boolean);
        /**<span id='method-fm.icelink.DataBuffer-allocate'>&nbsp;</span>**/
        /**
         <div>
         Allocates a new data buffer with a given size (in bytes).
         </div>

        @param {number} count Pre-allocated data buffer size  (in bytes).
        @param {boolean} littleEndian Whether the data is little-endian.
        @param {boolean} pooled Is part of a data pool.
        @return {fm.icelink.DataBuffer}
        */
        static allocate(count: number, littleEndian: boolean, pooled: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-allocate'>&nbsp;</span>**/
        /**
         <div>
         Allocates a new data buffer with a given size (in bytes)
         in big-endian format.
         </div>

        @param {number} count Pre-allocated data buffer size  (in bytes).
        @return {fm.icelink.DataBuffer}
        */
        static allocate(count: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-allocate'>&nbsp;</span>**/
        /**
         <div>
         Allocates a new data buffer with a given size (in bytes).
         </div>

        @param {number} count Pre-allocated data buffer size  (in bytes).
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {fm.icelink.DataBuffer}
        */
        static allocate(count: number, littleEndian: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-areEqual'>&nbsp;</span>**/
        /**
         <div>
         Tests if the two buffers have equal contents.
         </div>

        @param {fm.icelink.DataBuffer} buffer1 First buffer to test.
        @param {fm.icelink.DataBuffer} buffer2 Second buffer to test.
        @return {boolean}
        */
        static areEqual(buffer1: fm.icelink.DataBuffer, buffer2: fm.icelink.DataBuffer): boolean;
        /**<span id='method-fm.icelink.DataBuffer-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} dataBufferJson The data buffer JSON.
        @return {fm.icelink.DataBuffer}
        */
        static fromJson(dataBufferJson: string): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an array of instances from JSON.
         </div>

        @param {string} dataBuffersJson The data buffers JSON.
        @return {fm.icelink.DataBuffer[]}
        */
        static fromJsonArray(dataBuffersJson: string): fm.icelink.DataBuffer[];
        /**<span id='method-fm.icelink.DataBuffer-getEmpty'>&nbsp;</span>**/
        /**
         <div>
         Gets an empty data buffer.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        static getEmpty(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.DataBuffer} dataBuffer The data buffer.
        @return {string}
        */
        static toJson(dataBuffer: fm.icelink.DataBuffer): string;
        /**<span id='method-fm.icelink.DataBuffer-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of instances to JSON.
         </div>

        @param {fm.icelink.DataBuffer[]} dataBuffers The data buffers.
        @return {string}
        */
        static toJsonArray(dataBuffers: fm.icelink.DataBuffer[]): string;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data.
         </div>

        @param {Uint8Array} data The data.
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array, littleEndian: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data
         in big-endian format.
         </div>

        @param {Uint8Array} data The data.
        @param {number} index The index.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array, index: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data
         in big-endian format.
         </div>

        @param {Uint8Array} data The data.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data
         in big-endian format.
         </div>

        @param {Uint8Array} data The data.
        @param {number} index The index.
        @param {number} length The length.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array, index: number, length: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data.
         </div>

        @param {Uint8Array} data The data.
        @param {number} index The index.
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array, index: number, littleEndian: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-wrap'>&nbsp;</span>**/
        /**
         <div>
         Produces a new data buffer containing supplied data.
         </div>

        @param {Uint8Array} data The data.
        @param {number} index The index.
        @param {number} length The length.
        @param {boolean} littleEndian Whether the data is little-endian.
        @return {fm.icelink.DataBuffer}
        */
        static wrap(data: Uint8Array, index: number, length: number, littleEndian: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-and'>&nbsp;</span>**/
        /**
         <div>
         Performs a bitwise "and" operation on a value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        and(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-append'>&nbsp;</span>**/
        /**
         <div>
         Appends some buffers.
         </div>

        @param {fm.icelink.DataBuffer[]} buffers The buffers.
        @return {fm.icelink.DataBuffer}
        */
        append(buffers: fm.icelink.DataBuffer[]): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-append'>&nbsp;</span>**/
        /**
         <div>
         Appends a buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {fm.icelink.DataBuffer}
        */
        append(buffer: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>

        @param {boolean} littleEndian Whether to clone into a little endian buffer.
        @return {fm.icelink.DataBuffer}
        */
        clone(littleEndian: boolean): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        clone(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-copy'>&nbsp;</span>**/
        /**
         <div>
         Copies of this instance.
         </div>

        @return {fm.icelink.DataBuffer}
        */
        copy(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-free'>&nbsp;</span>**/
        /**
         <div>
         Decrements the retain count by one and returns the Buffer to the pool if zero.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        free(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-getData'>&nbsp;</span>**/
        /**
         <div>
         Gets the data.
         </div>


        @return {Uint8Array}
        */
        getData(): Uint8Array;
        /**<span id='method-fm.icelink.DataBuffer-getIndex'>&nbsp;</span>**/
        /**
         <div>
         Gets the index.
         </div>


        @return {number}
        */
        getIndex(): number;
        /**<span id='method-fm.icelink.DataBuffer-getInnerData'>&nbsp;</span>**/
        /**
         <div>
         Gets backing data buffer.
         </div>


        @return {Uint8Array}
        */
        protected getInnerData(): Uint8Array;
        /**<span id='method-fm.icelink.DataBuffer-getIsPooled'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this DataBuffer is from a pool.
         </div>


        @return {boolean}
        */
        getIsPooled(): boolean;
        /**<span id='method-fm.icelink.DataBuffer-getIsSubset'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this DataBuffer is a subset.
         </div>


        @return {boolean}
        */
        getIsSubset(): boolean;
        /**<span id='method-fm.icelink.DataBuffer-getLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the length.
         </div>


        @return {number}
        */
        getLength(): number;
        /**<span id='method-fm.icelink.DataBuffer-getLittleEndian'>&nbsp;</span>**/
        /**
         <div>
         Gets whether `fm.icelink.dataBuffer.data` is little-endian.
         </div>


        @return {boolean}
        */
        getLittleEndian(): boolean;
        /**<span id='method-fm.icelink.DataBuffer-keep'>&nbsp;</span>**/
        /**
         <div>
         Increment the retain count by one.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        keep(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-or'>&nbsp;</span>**/
        /**
         <div>
         Performs a bitwise "or" operation on a value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        or(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-prepend'>&nbsp;</span>**/
        /**
         <div>
         Prepends a buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {fm.icelink.DataBuffer}
        */
        prepend(buffer: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-prepend'>&nbsp;</span>**/
        /**
         <div>
         Prepends some buffers.
         </div>

        @param {fm.icelink.DataBuffer[]} buffers The buffers.
        @return {void}
        */
        prepend(buffers: fm.icelink.DataBuffer[]): void;
        /**<span id='method-fm.icelink.DataBuffer-read1'>&nbsp;</span>**/
        /**
         <div>
         Reads a 1-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        read1(offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-read10'>&nbsp;</span>**/
        /**
         <div>
         Reads a 10-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bitoffset.
        @return {number}
        */
        read10(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read10Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 10-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read10Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read11'>&nbsp;</span>**/
        /**
         <div>
         Reads a 11-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bitoffset.
        @return {number}
        */
        read11(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read11Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 11-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read11Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read12'>&nbsp;</span>**/
        /**
         <div>
         Reads a 12-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bitoffset.
        @return {number}
        */
        read12(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read12Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 12-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read12Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read13'>&nbsp;</span>**/
        /**
         <div>
         Reads a 13-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bitoffset.
        @return {number}
        */
        read13(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read13Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 13-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read13Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read14'>&nbsp;</span>**/
        /**
         <div>
         Reads a 14-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read14(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read14Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 14-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read14Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read15'>&nbsp;</span>**/
        /**
         <div>
         Reads a 15-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read15(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read15Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 15-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read15Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read16'>&nbsp;</span>**/
        /**
         <div>
         Reads a 16-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read16(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read16'>&nbsp;</span>**/
        /**
         <div>
         Reads a 16-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read16(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read16Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 16-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read16Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read16Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 16-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read16Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read17'>&nbsp;</span>**/
        /**
         <div>
         Reads a 17-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read17(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read17Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 17-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read17Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read18'>&nbsp;</span>**/
        /**
         <div>
         Reads an 18-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read18(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read18Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads an 18-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read18Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read19'>&nbsp;</span>**/
        /**
         <div>
         Reads a 19-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read19(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read19Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 19-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read19Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read2'>&nbsp;</span>**/
        /**
         <div>
         Reads a 2-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read2(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read20'>&nbsp;</span>**/
        /**
         <div>
         Reads a 20-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read20(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read20Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 20-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read20Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read21'>&nbsp;</span>**/
        /**
         <div>
         Reads a 21-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read21(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read21Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 21-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read21Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read22'>&nbsp;</span>**/
        /**
         <div>
         Reads a 22-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read22(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read22Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 22-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read22Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read23'>&nbsp;</span>**/
        /**
         <div>
         Reads a 23-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read23(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read23Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 23-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read23Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read24'>&nbsp;</span>**/
        /**
         <div>
         Reads a 24-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read24(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read24'>&nbsp;</span>**/
        /**
         <div>
         Reads a 24-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read24(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read24Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 24-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read24Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read24Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 24-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read24Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read2Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 2-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read2Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read3'>&nbsp;</span>**/
        /**
         <div>
         Reads a 3-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read3(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read32'>&nbsp;</span>**/
        /**
         <div>
         Reads a 32-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read32(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read32'>&nbsp;</span>**/
        /**
         <div>
         Reads a 32-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read32(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read32Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 32-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read32Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read32Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 32-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read32Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read3Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 3-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read3Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read4'>&nbsp;</span>**/
        /**
         <div>
         Reads a 4-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read4(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read40'>&nbsp;</span>**/
        /**
         <div>
         Reads a 40-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read40(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read40'>&nbsp;</span>**/
        /**
         <div>
         Reads a 40-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read40(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read40Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 40-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read40Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read40Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 40-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read40Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read48'>&nbsp;</span>**/
        /**
         <div>
         Reads a 48-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read48(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read48'>&nbsp;</span>**/
        /**
         <div>
         Reads a 48-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read48(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read48Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 48-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read48Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read48Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 48-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read48Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read4Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 4-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read4Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read5'>&nbsp;</span>**/
        /**
         <div>
         Reads a 5-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read5(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read56'>&nbsp;</span>**/
        /**
         <div>
         Reads a 56-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read56(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read56'>&nbsp;</span>**/
        /**
         <div>
         Reads a 56-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read56(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read56Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 56-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read56Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read56Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 56-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read56Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read5Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 5-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read5Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read6'>&nbsp;</span>**/
        /**
         <div>
         Reads a 6-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read6(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read64'>&nbsp;</span>**/
        /**
         <div>
         Reads a 64-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read64(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read64'>&nbsp;</span>**/
        /**
         <div>
         Reads a 64-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read64(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read64Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 64-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read64Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read64Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 64-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read64Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read6Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 6-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read6Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read7'>&nbsp;</span>**/
        /**
         <div>
         Reads a 7-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read7(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read7Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 7-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read7Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read8'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read8(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read8'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read8(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read8Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit signed value.
         </div>

        @param {number} offset The offset.
        @return {number}
        */
        read8Signed(offset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read8Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads an 8-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {number}
        */
        read8Signed(offset: number, offsetPlus: fm.icelink.Holder<number>): number;
        /**<span id='method-fm.icelink.DataBuffer-read9'>&nbsp;</span>**/
        /**
         <div>
         Reads a 9-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bitoffset.
        @return {number}
        */
        read9(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-read9Signed'>&nbsp;</span>**/
        /**
         <div>
         Reads a 9-bit signed value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {number}
        */
        read9Signed(offset: number, bitOffset: number): number;
        /**<span id='method-fm.icelink.DataBuffer-readUtf8String'>&nbsp;</span>**/
        /**
         <div>
         Reads a UTF-8 string.
         </div>

        @param {number} offset The offset.
        @param {number} length The length.
        @return {string}
        */
        readUtf8String(offset: number, length: number): string;
        /**<span id='method-fm.icelink.DataBuffer-readUtf8String'>&nbsp;</span>**/
        /**
         <div>
         Read a UTF-8 string.
         </div>

        @param {number} offset The offset.
        @return {string}
        */
        readUtf8String(offset: number): string;
        /**<span id='method-fm.icelink.DataBuffer-resize'>&nbsp;</span>**/
        /**
         <div>
         Resizes this buffer to a new length with new data being inserted at a given offset.
         </div>

        @param {number} newLength The new length.
        @param {number} offset The offset.
        @param {boolean} setZero Sets empty space to zero.
        @return {void}
        */
        resize(newLength: number, offset: number, setZero: boolean): void;
        /**<span id='method-fm.icelink.DataBuffer-resize'>&nbsp;</span>**/
        /**
         <div>
         Resizes this buffer to a new length with new data being inserted at a given offset.
         </div>

        @param {number} newLength The new length.
        @param {number} offset The offset.
        @return {void}
        */
        resize(newLength: number, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-resize'>&nbsp;</span>**/
        /**
         <div>
         Resizes this buffer to a new length with new data being inserted at the end.
         </div>

        @param {number} newLength The new length.
        @return {void}
        */
        resize(newLength: number): void;
        /**<span id='method-fm.icelink.DataBuffer-sequenceEquals'>&nbsp;</span>**/
        /**
         <div>
         Compares a data buffer for equality.
         </div>

        @param {fm.icelink.DataBuffer} buffer The data buffer.
        @return {boolean} true if the sequences are equal; otherwise, false.
 
        */
        sequenceEquals(buffer: fm.icelink.DataBuffer): boolean;
        /**<span id='method-fm.icelink.DataBuffer-sequenceEqualsConstantTime'>&nbsp;</span>**/
        /**
         <div>
         Compares a data buffer for equality in constant time.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {boolean} true if the sequences are equal; otherwise, false.
 
        */
        sequenceEqualsConstantTime(buffer: fm.icelink.DataBuffer): boolean;
        /**<span id='method-fm.icelink.DataBuffer-set'>&nbsp;</span>**/
        /**
         <div>
         Sets a subset of the data buffer to the specified value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {void}
        */
        set(value: number, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-set'>&nbsp;</span>**/
        /**
         <div>
         Sets a subset of the data buffer to the specified value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} length The length.
        @return {void}
        */
        set(value: number, offset: number, length: number): void;
        /**<span id='method-fm.icelink.DataBuffer-set'>&nbsp;</span>**/
        /**
         <div>
         Sets the data buffer to the specified value.
         </div>

        @param {number} value The value.
        @return {void}
        */
        set(value: number): void;
        /**<span id='method-fm.icelink.DataBuffer-setInnerData'>&nbsp;</span>**/
        /**
         <div>
         Sets backing data buffer.
         </div>


        @param {Uint8Array} value
        @return {void}
        */
        protected setInnerData(value: Uint8Array): void;
        /**<span id='method-fm.icelink.DataBuffer-setLittleEndian'>&nbsp;</span>**/
        /**
         <div>
         Sets whether `fm.icelink.dataBuffer.data` is little-endian.
         </div>


        @param {boolean} value
        @return {void}
        */
        setLittleEndian(value: boolean): void;
        /**<span id='method-fm.icelink.DataBuffer-subset'>&nbsp;</span>**/
        /**
         <div>
         Gets a subset of this instance.
         </div>

        @param {number} offset The offset.
        @return {fm.icelink.DataBuffer}
        */
        subset(offset: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-subset'>&nbsp;</span>**/
        /**
         <div>
         Gets a subset of this instance.
         </div>

        @param {number} offset The offset.
        @param {number} length The length.
        @return {fm.icelink.DataBuffer}
        */
        subset(offset: number, length: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBuffer-toArray'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to an array of bytes.
         </div>


        @return {Uint8Array}
        */
        toArray(): Uint8Array;
        /**<span id='method-fm.icelink.DataBuffer-toHexString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a hexadecimal string.
         </div>


        @return {string}
        */
        toHexString(): string;
        /**<span id='method-fm.icelink.DataBuffer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
        /**<span id='method-fm.icelink.DataBuffer-tryRead1'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 1-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<boolean>} value if set to true [value].
        @return {boolean}
        */
        tryRead1(offset: number, bitOffset: number, value: fm.icelink.Holder<boolean>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead10'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 10-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead10(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead11'>&nbsp;</span>**/
        /**
         <div>
         Tries to read an 11-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead11(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead12'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 12-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead12(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead13'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 13-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead13(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead14'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 14-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead14(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead15'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 15-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead15(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead16'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 16-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead16(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead17'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 17-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead17(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead18'>&nbsp;</span>**/
        /**
         <div>
         Tries to read an 18-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead18(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead19'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 19-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead19(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead2'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 2-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead2(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead20'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 20-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead20(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead21'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 21-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead21(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead22'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 22-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead22(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead23'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 23-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead23(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead24'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 24-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead24(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead3'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 3-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead3(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead32'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 32-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead32(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead4'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 4-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead4(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead40'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 40-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead40(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead48'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 48-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead48(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead5'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 5-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead5(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead56'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 56-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead56(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead6'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 6-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead6(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead64'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 64-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead64(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead7'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 7-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead7(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead8'>&nbsp;</span>**/
        /**
         <div>
         Tries to read an 8-bit value.
         </div>

        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead8(offset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-tryRead9'>&nbsp;</span>**/
        /**
         <div>
         Tries to read a 9-bit value.
         </div>

        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @param {fm.icelink.Holder<number>} value The value.
        @return {boolean}
        */
        tryRead9(offset: number, bitOffset: number, value: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write'>&nbsp;</span>**/
        /**
         <div>
         Writes a data buffer to this instance.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the buffer length.
        @return {void}
        */
        write(buffer: fm.icelink.DataBuffer, offset: number, offsetPlus: fm.icelink.Holder<number>): void;
        /**<span id='method-fm.icelink.DataBuffer-write'>&nbsp;</span>**/
        /**
         <div>
         Writes a data buffer to this instance.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {void}
        */
        write(buffer: fm.icelink.DataBuffer): void;
        /**<span id='method-fm.icelink.DataBuffer-write'>&nbsp;</span>**/
        /**
         <div>
         Writes a data buffer to this instance.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @param {number} offset The offset.
        @return {void}
        */
        write(buffer: fm.icelink.DataBuffer, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-write1'>&nbsp;</span>**/
        /**
         <div>
         Writes a 1-bit value.
         </div>

        @param {boolean} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write1(value: boolean, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write10'>&nbsp;</span>**/
        /**
         <div>
         Writes a 10-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write10(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write11'>&nbsp;</span>**/
        /**
         <div>
         Writes an 11-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write11(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write12'>&nbsp;</span>**/
        /**
         <div>
         Writes a 12-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write12(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write13'>&nbsp;</span>**/
        /**
         <div>
         Writes a 13-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write13(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write14'>&nbsp;</span>**/
        /**
         <div>
         Writes a 14-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write14(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write15'>&nbsp;</span>**/
        /**
         <div>
         Writes a 15-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write15(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write16'>&nbsp;</span>**/
        /**
         <div>
         Writes a 16-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write16(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write16'>&nbsp;</span>**/
        /**
         <div>
         Writes a 16-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write16(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write17'>&nbsp;</span>**/
        /**
         <div>
         Writes a 17-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write17(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write18'>&nbsp;</span>**/
        /**
         <div>
         Writes an 18-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write18(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write19'>&nbsp;</span>**/
        /**
         <div>
         Writes a 19-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write19(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write2'>&nbsp;</span>**/
        /**
         <div>
         Writes a 2-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write2(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write20'>&nbsp;</span>**/
        /**
         <div>
         Writes a 20-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write20(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write21'>&nbsp;</span>**/
        /**
         <div>
         Writes a 21-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write21(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write22'>&nbsp;</span>**/
        /**
         <div>
         Writes a 22-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write22(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write23'>&nbsp;</span>**/
        /**
         <div>
         Writes a 23-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write23(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write24'>&nbsp;</span>**/
        /**
         <div>
         Writes a 24-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write24(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write24'>&nbsp;</span>**/
        /**
         <div>
         Writes a 24-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write24(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write3'>&nbsp;</span>**/
        /**
         <div>
         Writes a 3-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write3(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write32'>&nbsp;</span>**/
        /**
         <div>
         Writes a 32-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write32(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write32'>&nbsp;</span>**/
        /**
         <div>
         Writes a 32-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write32(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write4'>&nbsp;</span>**/
        /**
         <div>
         Writes a 4-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write4(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write40'>&nbsp;</span>**/
        /**
         <div>
         Writes a 40-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write40(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write40'>&nbsp;</span>**/
        /**
         <div>
         Writes a 40-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write40(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write48'>&nbsp;</span>**/
        /**
         <div>
         Writes a 48-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write48(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write48'>&nbsp;</span>**/
        /**
         <div>
         Writes a 48-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write48(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write5'>&nbsp;</span>**/
        /**
         <div>
         Writes a 5-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write5(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write56'>&nbsp;</span>**/
        /**
         <div>
         Writes a 56-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write56(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write56'>&nbsp;</span>**/
        /**
         <div>
         Writes a 56-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write56(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write6'>&nbsp;</span>**/
        /**
         <div>
         Writes a 6-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write6(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write64'>&nbsp;</span>**/
        /**
         <div>
         Writes a 64-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write64(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write64'>&nbsp;</span>**/
        /**
         <div>
         Writes a 64-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write64(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write7'>&nbsp;</span>**/
        /**
         <div>
         Writes a 7-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write7(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write8'>&nbsp;</span>**/
        /**
         <div>
         Writes an 8-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        write8(value: number, offset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write8'>&nbsp;</span>**/
        /**
         <div>
         Writes an 8-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the value length.
        @return {boolean}
        */
        write8(value: number, offset: number, offsetPlus: fm.icelink.Holder<number>): boolean;
        /**<span id='method-fm.icelink.DataBuffer-write9'>&nbsp;</span>**/
        /**
         <div>
         Writes a 9-bit value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @param {number} bitOffset The bit offset.
        @return {boolean}
        */
        write9(value: number, offset: number, bitOffset: number): boolean;
        /**<span id='method-fm.icelink.DataBuffer-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes a byte array to this instance.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} bytesIndex The bytes index.
        @param {number} bytesLength The bytes length.
        @param {number} offset The offset.
        @param {fm.icelink.Holder<number>} offsetPlus The offset plus the buffer length.
        @return {void}
        */
        writeBytes(bytes: Uint8Array, bytesIndex: number, bytesLength: number, offset: number, offsetPlus: fm.icelink.Holder<number>): void;
        /**<span id='method-fm.icelink.DataBuffer-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes a byte array to this instance.
         </div>

        @param {Uint8Array} bytes The bytes.
        @return {void}
        */
        writeBytes(bytes: Uint8Array): void;
        /**<span id='method-fm.icelink.DataBuffer-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes a byte array to this instance.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} offset The offset.
        @return {void}
        */
        writeBytes(bytes: Uint8Array, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes a byte array to this instance.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} bytesIndex The bytes index.
        @param {number} offset The offset.
        @return {void}
        */
        writeBytes(bytes: Uint8Array, bytesIndex: number, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-writeBytes'>&nbsp;</span>**/
        /**
         <div>
         Writes a byte array to this instance.
         </div>

        @param {Uint8Array} bytes The bytes.
        @param {number} bytesIndex The bytes index.
        @param {number} bytesLength The bytes length.
        @param {number} offset The offset.
        @return {void}
        */
        writeBytes(bytes: Uint8Array, bytesIndex: number, bytesLength: number, offset: number): void;
        /**<span id='method-fm.icelink.DataBuffer-xor'>&nbsp;</span>**/
        /**
         <div>
         Performs a bitwise "xor" operation on a value.
         </div>

        @param {number} value The value.
        @param {number} offset The offset.
        @return {boolean}
        */
        xor(value: number, offset: number): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A subset of a DataBuffer.
     </div>

    */
    class DataBufferSubset extends fm.icelink.DataBuffer {
        getTypeString(): string;
        /**<span id='method-fm.icelink.DataBufferSubset-append'>&nbsp;</span>**/
        /**
         <div>
         Appends some buffers.
         </div>

        @param {fm.icelink.DataBuffer[]} buffers The buffers.
        @return {fm.icelink.DataBuffer}
        */
        append(buffers: fm.icelink.DataBuffer[]): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-append'>&nbsp;</span>**/
        /**
         <div>
         Appends a buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {fm.icelink.DataBuffer}
        */
        append(buffer: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-free'>&nbsp;</span>**/
        /**
         <div>
         Decrements the retain count by one and returns the Buffer to the pool if zero.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        free(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-getData'>&nbsp;</span>**/
        /**
         <div>
         Gets the data.
         </div>


        @return {Uint8Array}
        */
        getData(): Uint8Array;
        /**<span id='method-fm.icelink.DataBufferSubset-getIsPooled'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this DataBuffer is from a pool.
         </div>


        @return {boolean}
        */
        getIsPooled(): boolean;
        /**<span id='method-fm.icelink.DataBufferSubset-getIsSubset'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this DataBuffer is a subset.
         </div>


        @return {boolean}
        */
        getIsSubset(): boolean;
        /**<span id='method-fm.icelink.DataBufferSubset-getParent'>&nbsp;</span>**/
        /**
         <div>
         Gets the Subset parent.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getParent(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-keep'>&nbsp;</span>**/
        /**
         <div>
         Increment the retain count by one.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        keep(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-prepend'>&nbsp;</span>**/
        /**
         <div>
         Prepends a buffer.
         </div>

        @param {fm.icelink.DataBuffer} buffer The buffer.
        @return {fm.icelink.DataBuffer}
        */
        prepend(buffer: fm.icelink.DataBuffer): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-prepend'>&nbsp;</span>**/
        /**
         <div>
         Prepends some buffers.
         </div>

        @param {fm.icelink.DataBuffer[]} buffers The buffers.
        @return {void}
        */
        prepend(buffers: fm.icelink.DataBuffer[]): void;
        /**<span id='method-fm.icelink.DataBufferSubset-subset'>&nbsp;</span>**/
        /**
         <div>
         Gets a subset of this instance.
         </div>

        @param {number} offset The offset.
        @param {number} length The length.
        @return {fm.icelink.DataBuffer}
        */
        subset(offset: number, length: number): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataBufferSubset-subset'>&nbsp;</span>**/
        /**
         <div>
         Gets a subset of this instance.
         </div>

        @param {number} offset The offset.
        @return {fm.icelink.DataBuffer}
        */
        subset(offset: number): fm.icelink.DataBuffer;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     LogItem class that contains the log event details.
     </div>

    */
    class LogEvent {
        getTypeString(): string;
        private fmicelinkLogEventInit();
        /**<span id='method-fm.icelink.LogEvent-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception if one exists for this log event.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.LogEvent-getLogLevel'>&nbsp;</span>**/
        /**
         <div>
         Gets the level of this log event.
         </div>


        @return {fm.icelink.LogLevel}
        */
        getLogLevel(): fm.icelink.LogLevel;
        /**<span id='method-fm.icelink.LogEvent-getMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the log message.
         </div>


        @return {string}
        */
        getMessage(): string;
        /**<span id='method-fm.icelink.LogEvent-getScope'>&nbsp;</span>**/
        /**
         <div>
         Gets the scope of this log event.
         </div>


        @return {string}
        */
        getScope(): string;
        /**<span id='method-fm.icelink.LogEvent-getTag'>&nbsp;</span>**/
        /**
         <div>
         Gets the tag of this log event.
         </div>


        @return {string}
        */
        getTag(): string;
        /**<span id='method-fm.icelink.LogEvent-getThreadId'>&nbsp;</span>**/
        /**
         <div>
         Gets the id of the thread this log event occurred on.
         </div>


        @return {number}
        */
        getThreadId(): number;
        /**<span id='method-fm.icelink.LogEvent-getTimeStamp'>&nbsp;</span>**/
        /**
         <div>
         Gets the timestamp when this log event occurred.
         </div>


        @return {fm.icelink.DateTime}
        */
        getTimeStamp(): fm.icelink.DateTime;
    }
}
declare namespace fm.icelink {
    class HashTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.HashType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class MacTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.MacType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Utility class to assist with Unix timestamp conversions.
     </div>

    */
    class UnixTimestamp {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.UnixTimestamp-dateTimeToUnix'>&nbsp;</span>**/
        /**
         <div>
         Converts a date to a Unix timestamp.
         </div>

        @param {fm.icelink.DateTime} dateTime The date to convert.
        @return {number} The equivalent Unix timestamp.
        */
        static dateTimeToUnix(dateTime: fm.icelink.DateTime): number;
        /**<span id='method-fm.icelink.UnixTimestamp-dateTimeToUnixMillis'>&nbsp;</span>**/
        /**
         <div>
         Converts a date to a Unix timestamp with millisecond precision.
         </div>

        @param {fm.icelink.DateTime} dateTime The date to convert.
        @return {number} The equivalent Unix timestamp.
        */
        static dateTimeToUnixMillis(dateTime: fm.icelink.DateTime): number;
        /**<span id='method-fm.icelink.UnixTimestamp-getUtcNow'>&nbsp;</span>**/
        /**
         <div>
         Gets the current UTC time in NTP format.
         </div>


        @return {number}
        */
        static getUtcNow(): number;
        /**<span id='method-fm.icelink.UnixTimestamp-ticksToUnix'>&nbsp;</span>**/
        /**
         <div>
         Converts ticks to a Unix timestamp.
         </div>

        @param {number} ticks The ticks to convert.
        @return {number} The equivalent Unix timestamp.
        */
        static ticksToUnix(ticks: number): number;
        /**<span id='method-fm.icelink.UnixTimestamp-ticksToUnixMillis'>&nbsp;</span>**/
        /**
         <div>
         Converts ticks to a Unix timestamp with millisecond precision.
         </div>

        @param {number} ticks The ticks to convert.
        @return {number} The equivalent Unix timestamp.
        */
        static ticksToUnixMillis(ticks: number): number;
        /**<span id='method-fm.icelink.UnixTimestamp-unixMillisToDateTime'>&nbsp;</span>**/
        /**
         <div>
         Converts a Unix timestamp with millisecond precision to a date.
         </div>

        @param {number} unix The Unix timestamp to convert.
        @return {fm.icelink.DateTime} The equivalent date.
        */
        static unixMillisToDateTime(unix: number): fm.icelink.DateTime;
        /**<span id='method-fm.icelink.UnixTimestamp-unixMillisToTicks'>&nbsp;</span>**/
        /**
         <div>
         Converts a Unix timestamp with millisecond precision to ticks.
         </div>

        @param {number} unix The Unix timestamp to convert.
        @return {number} The equivalent ticks.
        */
        static unixMillisToTicks(unix: number): number;
        /**<span id='method-fm.icelink.UnixTimestamp-unixToDateTime'>&nbsp;</span>**/
        /**
         <div>
         Converts a Unix timestamp to a date.
         </div>

        @param {number} unix The Unix timestamp to convert.
        @return {fm.icelink.DateTime} The equivalent date.
        */
        static unixToDateTime(unix: number): fm.icelink.DateTime;
        /**<span id='method-fm.icelink.UnixTimestamp-unixToTicks'>&nbsp;</span>**/
        /**
         <div>
         Converts a Unix timestamp to ticks.
         </div>

        @param {number} unix The Unix timestamp to convert.
        @return {number} The equivalent ticks.
        */
        static unixToTicks(unix: number): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a double value passed by reference.
     </div>

    */
    class DoubleHolder {
        getTypeString(): string;
        private fmicelinkDoubleHolderInit();
        /**<span id='method-fm.icelink.DoubleHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.doubleHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.DoubleHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.doubleHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.DoubleHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.DoubleHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An error.
     </div>

    */
    class Error {
        getTypeString(): string;
        /**<span id='method-fm.icelink.Error-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.error` class.
         </div>

        @param {fm.icelink.ErrorCode} errorCode The error code.
        @param {fm.icelink.Exception} exception The exception.
        @return {}
        */
        constructor(errorCode: fm.icelink.ErrorCode, exception: fm.icelink.Exception);
        constructor();
        /**<span id='method-fm.icelink.Error-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} errorJson The JSON to deserialize.
        @return {fm.icelink.Error} The deserialized error.
        */
        static fromJson(errorJson: string): fm.icelink.Error;
        /**<span id='method-fm.icelink.Error-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.Error} error The error.
        @return {string}
         The serialized JSON.
 
        */
        static toJson(error: fm.icelink.Error): string;
        /**<span id='method-fm.icelink.Error-getDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the description for this `fm.icelink.error`.
         </div>


        @return {string}
        */
        getDescription(): string;
        /**<span id='method-fm.icelink.Error-getErrorCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the error code.
         </div>


        @return {fm.icelink.ErrorCode}
        */
        getErrorCode(): fm.icelink.ErrorCode;
        /**<span id='method-fm.icelink.Error-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.Error-setErrorCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the error code.
         </div>


        @param {fm.icelink.ErrorCode} value
        @return {void}
        */
        setErrorCode(value: fm.icelink.ErrorCode): void;
        /**<span id='method-fm.icelink.Error-setException'>&nbsp;</span>**/
        /**
         <div>
         Sets the exception.
         </div>


        @param {fm.icelink.Exception} value
        @return {void}
        */
        setException(value: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Error-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
         The serialized JSON.
 
        */
        toJson(): string;
        /**<span id='method-fm.icelink.Error-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns the string representation of this error.
         </div>

        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    class ErrorCodeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.ErrorCode);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a float value passed by reference.
     </div>

    */
    class FloatHolder {
        getTypeString(): string;
        private fmicelinkFloatHolderInit();
        /**<span id='method-fm.icelink.FloatHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.floatHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.FloatHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.floatHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.FloatHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.FloatHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    class HttpMethodWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.HttpMethod);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for sending an HTTP request.
     </div>

    */
    class HttpRequestArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkHttpRequestArgsInit();
        /**<span id='method-fm.icelink.HttpRequestArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.httpRequestArgs` class
         with default values.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.HttpRequestArgs-getBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content to transfer over HTTP.
         Overrides `fm.icelink.httpRequestArgs.textContent`.
         </div>


        @return {Uint8Array}
        */
        getBinaryContent(): Uint8Array;
        /**<span id='method-fm.icelink.HttpRequestArgs-getHeaders'>&nbsp;</span>**/
        /**
         <div>
         Gets the headers to transfer over HTTP.
         </div>


        @return {fm.icelink.NameValueCollection}
        */
        getHeaders(): fm.icelink.NameValueCollection;
        /**<span id='method-fm.icelink.HttpRequestArgs-getMethod'>&nbsp;</span>**/
        /**
         <div>
         Gets the HTTP method.
         </div>


        @return {fm.icelink.HttpMethod}
        */
        getMethod(): fm.icelink.HttpMethod;
        /**<span id='method-fm.icelink.HttpRequestArgs-getOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke once the outgoing HTTP request is created.
         See `fm.icelink.httpRequestCreatedArgs` for callback argument details.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
        */
        getOnRequestCreated(): fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>;
        /**<span id='method-fm.icelink.HttpRequestArgs-getOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke once the incoming HTTP response has been
         received. See `fm.icelink.httpResponseReceivedArgs` for callback argument details.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
        */
        getOnResponseReceived(): fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>;
        /**<span id='method-fm.icelink.HttpRequestArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the content, either a client or publisher.
         </div>


        @return {Object}
        */
        getSender(): Object;
        /**<span id='method-fm.icelink.HttpRequestArgs-getTextContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the text content to transfer over HTTP.
         </div>


        @return {string}
        */
        getTextContent(): string;
        /**<span id='method-fm.icelink.HttpRequestArgs-getTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of milliseconds to wait before timing out the HTTP transfer.
         Defaults to 15000 ms (15 seconds).
         </div>


        @return {number}
        */
        getTimeout(): number;
        /**<span id='method-fm.icelink.HttpRequestArgs-getUrl'>&nbsp;</span>**/
        /**
         <div>
         Gets the target URL for the HTTP request.
         </div>


        @return {string}
        */
        getUrl(): string;
        /**<span id='method-fm.icelink.HttpRequestArgs-setBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Sets the binary content to transfer over HTTP.
         Overrides `fm.icelink.httpRequestArgs.textContent`.
         </div>


        @param {Uint8Array} value
        @return {void}
        */
        setBinaryContent(value: Uint8Array): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setHeaders'>&nbsp;</span>**/
        /**
         <div>
         Sets the headers to transfer over HTTP.
         </div>


        @param {fm.icelink.NameValueCollection} value
        @return {void}
        */
        setHeaders(value: fm.icelink.NameValueCollection): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setMethod'>&nbsp;</span>**/
        /**
         <div>
         Sets the HTTP method.
         </div>


        @param {fm.icelink.HttpMethod} value
        @return {void}
        */
        setMethod(value: fm.icelink.HttpMethod): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke once the outgoing HTTP request is created.
         See `fm.icelink.httpRequestCreatedArgs` for callback argument details.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
        @return {void}
        */
        setOnRequestCreated(value: fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke once the incoming HTTP response has been
         received. See `fm.icelink.httpResponseReceivedArgs` for callback argument details.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
        @return {void}
        */
        setOnResponseReceived(value: fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setSender'>&nbsp;</span>**/
        /**
         <div>
         Sets the sender of the content, either a client or publisher.
         </div>


        @param {Object} value
        @return {void}
        */
        setSender(value: Object): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setTextContent'>&nbsp;</span>**/
        /**
         <div>
         Sets the text content to transfer over HTTP.
         </div>


        @param {string} value
        @return {void}
        */
        setTextContent(value: string): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the number of milliseconds to wait before timing out the HTTP transfer.
         Defaults to 15000 ms (15 seconds).
         </div>


        @param {number} value
        @return {void}
        */
        setTimeout(value: number): void;
        /**<span id='method-fm.icelink.HttpRequestArgs-setUrl'>&nbsp;</span>**/
        /**
         <div>
         Sets the target URL for the HTTP request.
         </div>


        @param {string} value
        @return {void}
        */
        setUrl(value: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments passed into callbacks when an HTTP request is created.
     </div>

    */
    class HttpRequestCreatedArgs {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getRequest'>&nbsp;</span>**/
        /**
         <div>
         Gets the outgoing HTTP request about to be sent to the server.
         </div>


        @return {any}
        */
        getRequest(): any;
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original request arguments.
         </div>


        @return {fm.icelink.HttpRequestArgs}
        */
        getRequestArgs(): fm.icelink.HttpRequestArgs;
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the request, either a client or publisher.
         </div>


        @return {Object}
        */
        getSender(): Object;
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setRequest'>&nbsp;</span>**/
        /**
         <div>
         Sets the outgoing HTTP request about to be sent to the server.
         </div>


        @param {any} value
        @return {void}
        */
        setRequest(value: any): void;
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original request arguments.
         </div>


        @param {fm.icelink.HttpRequestArgs} value
        @return {void}
        */
        setRequestArgs(value: fm.icelink.HttpRequestArgs): void;
        /**<span id='method-fm.icelink.HttpRequestCreatedArgs-setSender'>&nbsp;</span>**/
        /**
         <div>
         Sets the sender of the request, either a client or publisher.
         </div>


        @param {Object} value
        @return {void}
        */
        setSender(value: Object): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for receiving an HTTP response.
     </div>

    */
    class HttpResponseArgs {
        getTypeString(): string;
        private fmicelinkHttpResponseArgsInit();
        constructor();
        /**<span id='method-fm.icelink.HttpResponseArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.httpResponseArgs` class.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request arguments.
        @return {}
        */
        constructor(requestArgs: fm.icelink.HttpRequestArgs);
        /**<span id='method-fm.icelink.HttpResponseArgs-getBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content read from the HTTP response.
         </div>


        @return {Uint8Array}
        */
        getBinaryContent(): Uint8Array;
        /**<span id='method-fm.icelink.HttpResponseArgs-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception generated while completing the request.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.HttpResponseArgs-getHeaders'>&nbsp;</span>**/
        /**
         <div>
         Gets the headers read from the HTTP response.
         </div>


        @return {fm.icelink.NameValueCollection}
        */
        getHeaders(): fm.icelink.NameValueCollection;
        /**<span id='method-fm.icelink.HttpResponseArgs-getRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original `fm.icelink.httpRequestArgs`.
         </div>


        @return {fm.icelink.HttpRequestArgs}
        */
        getRequestArgs(): fm.icelink.HttpRequestArgs;
        /**<span id='method-fm.icelink.HttpResponseArgs-getStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the status code read from the HTTP response.
         </div>


        @return {number}
        */
        getStatusCode(): number;
        /**<span id='method-fm.icelink.HttpResponseArgs-getTextContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the text content read from the HTTP response.
         </div>


        @return {string}
        */
        getTextContent(): string;
        /**<span id='method-fm.icelink.HttpResponseArgs-setBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Sets the binary content read from the HTTP response.
         </div>


        @param {Uint8Array} value
        @return {void}
        */
        setBinaryContent(value: Uint8Array): void;
        /**<span id='method-fm.icelink.HttpResponseArgs-setException'>&nbsp;</span>**/
        /**
         <div>
         Sets the exception generated while completing the request.
         </div>


        @param {fm.icelink.Exception} value
        @return {void}
        */
        setException(value: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.HttpResponseArgs-setRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original `fm.icelink.httpRequestArgs`.
         </div>


        @param {fm.icelink.HttpRequestArgs} value
        @return {void}
        */
        setRequestArgs(value: fm.icelink.HttpRequestArgs): void;
        /**<span id='method-fm.icelink.HttpResponseArgs-setStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the status code read from the HTTP response.
         </div>


        @param {number} value
        @return {void}
        */
        setStatusCode(value: number): void;
        /**<span id='method-fm.icelink.HttpResponseArgs-setTextContent'>&nbsp;</span>**/
        /**
         <div>
         Sets the text content read from the HTTP response.
         </div>


        @param {string} value
        @return {void}
        */
        setTextContent(value: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments passed into callbacks when an HTTP response is received.
     </div>

    */
    class HttpResponseReceivedArgs {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original request arguments.
         </div>


        @return {fm.icelink.HttpRequestArgs}
        */
        getRequestArgs(): fm.icelink.HttpRequestArgs;
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getResponse'>&nbsp;</span>**/
        /**
         <div>
         Gets the incoming HTTP response received from the server.
         </div>


        @return {any}
        */
        getResponse(): any;
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the request, either a client or publisher.
         </div>


        @return {Object}
        */
        getSender(): Object;
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setRequestArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original request arguments.
         </div>


        @param {fm.icelink.HttpRequestArgs} value
        @return {void}
        */
        setRequestArgs(value: fm.icelink.HttpRequestArgs): void;
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setResponse'>&nbsp;</span>**/
        /**
         <div>
         Sets the incoming HTTP response received from the server.
         </div>


        @param {any} value
        @return {void}
        */
        setResponse(value: any): void;
        /**<span id='method-fm.icelink.HttpResponseReceivedArgs-setSender'>&nbsp;</span>**/
        /**
         <div>
         Sets the sender of the request, either a client or publisher.
         </div>


        @param {Object} value
        @return {void}
        */
        setSender(value: Object): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.httpTransfer.addOnSendStart`.
     </div>

    */
    class HttpSendFinishArgs {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getRequestBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content of the request.
         </div>


        @return {Uint8Array}
        */
        getRequestBinaryContent(): Uint8Array;
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getRequestTextContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the text content of the request.
         </div>


        @return {string}
        */
        getRequestTextContent(): string;
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content of the response.
         </div>


        @return {Uint8Array}
        */
        getResponseBinaryContent(): Uint8Array;
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseHeaders'>&nbsp;</span>**/
        /**
         <div>
         Gets the headers of the response.
         </div>


        @return {fm.icelink.NameValueCollection}
        */
        getResponseHeaders(): fm.icelink.NameValueCollection;
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getResponseTextContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content of the response.
         </div>


        @return {string}
        */
        getResponseTextContent(): string;
        /**<span id='method-fm.icelink.HttpSendFinishArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the request, either a client or publisher.
         </div>


        @return {Object}
        */
        getSender(): Object;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.httpTransfer.addOnSendStart`.
     </div>

    */
    class HttpSendStartArgs {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpSendStartArgs-getRequestBinaryContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the binary content of the request.
         </div>


        @return {Uint8Array}
        */
        getRequestBinaryContent(): Uint8Array;
        /**<span id='method-fm.icelink.HttpSendStartArgs-getRequestTextContent'>&nbsp;</span>**/
        /**
         <div>
         Gets the text content of the request.
         </div>


        @return {string}
        */
        getRequestTextContent(): string;
        /**<span id='method-fm.icelink.HttpSendStartArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the request, either a client or publisher.
         </div>


        @return {Object}
        */
        getSender(): Object;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Creates implementations of `fm.icelink.httpTransfer`.
     </div>

    */
    class HttpTransferFactory {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.HttpTransferFactory-getCreateHttpTransfer'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback that creates an HTTP-based transfer class.
         </div>


        @return {fm.icelink.IFunction0<fm.icelink.HttpTransfer>}
        */
        static getCreateHttpTransfer(): fm.icelink.IFunction0<fm.icelink.HttpTransfer>;
        /**<span id='method-fm.icelink.HttpTransferFactory-getHttpTransfer'>&nbsp;</span>**/
        /**
         <div>
         Gets an instance of the HTTP-based transfer class.
         </div>


        @return {fm.icelink.HttpTransfer}
        */
        static getHttpTransfer(): fm.icelink.HttpTransfer;
        /**<span id='method-fm.icelink.HttpTransferFactory-setCreateHttpTransfer'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback that creates an HTTP-based transfer class.
         </div>


        @param {fm.icelink.IFunction0<fm.icelink.HttpTransfer>} value
        @return {void}
        */
        static setCreateHttpTransfer(value: fm.icelink.IFunction0<fm.icelink.HttpTransfer>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An HTTP web request sender.
     </div>

    */
    class HttpWebRequestSender extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkHttpWebRequestSenderInit();
        constructor();
        /**<span id='method-fm.icelink.HttpWebRequestSender-getDisableCors'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether to disable the cross-origin resource sharing (CORS) transport.
         </div>


        @return {boolean}
        */
        getDisableCors(): boolean;
        /**<span id='method-fm.icelink.HttpWebRequestSender-getDisableJsonp'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether to disable the JSON-P transport.
         </div>


        @return {boolean}
        */
        getDisableJsonp(): boolean;
        /**<span id='method-fm.icelink.HttpWebRequestSender-getDisablePostMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether to disable the postMessage transport.
         </div>


        @return {boolean}
        */
        getDisablePostMessage(): boolean;
        /**<span id='method-fm.icelink.HttpWebRequestSender-getForceJsonp'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether to force the JSON-P transport.
         </div>


        @return {boolean}
        */
        getForceJsonp(): boolean;
        /**<span id='method-fm.icelink.HttpWebRequestSender-setDisableCors'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether to disable the cross-origin resource sharing (CORS) transport.
         </div>


        @param {boolean} value
        @return {void}
        */
        setDisableCors(value: boolean): void;
        /**<span id='method-fm.icelink.HttpWebRequestSender-setDisableJsonp'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether to disable the JSON-P transport.
         </div>


        @param {boolean} value
        @return {void}
        */
        setDisableJsonp(value: boolean): void;
        /**<span id='method-fm.icelink.HttpWebRequestSender-setDisablePostMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether to disable the postMessage transport.
         </div>


        @param {boolean} value
        @return {void}
        */
        setDisablePostMessage(value: boolean): void;
        /**<span id='method-fm.icelink.HttpWebRequestSender-setForceJsonp'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether to force the JSON-P transport.
         </div>


        @param {boolean} value
        @return {void}
        */
        setForceJsonp(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     ILog interface for loggers.
     </div>

    */
    interface ILog {
        debug(scope: string, message: string): void;
        debug(message: string, ex: fm.icelink.Exception): void;
        debug(message: string): void;
        debug(scope: string, message: string, ex: fm.icelink.Exception): void;
        error(scope: string, message: string, ex: fm.icelink.Exception): void;
        error(scope: string, message: string): void;
        error(message: string, ex: fm.icelink.Exception): void;
        error(message: string): void;
        fatal(scope: string, message: string, ex: fm.icelink.Exception): void;
        fatal(message: string, ex: fm.icelink.Exception): void;
        fatal(message: string): void;
        fatal(scope: string, message: string): void;
        flush(): void;
        getIsDebugEnabled(): boolean;
        getIsErrorEnabled(): boolean;
        getIsFatalEnabled(): boolean;
        getIsInfoEnabled(): boolean;
        getIsVerboseEnabled(): boolean;
        getIsWarnEnabled(): boolean;
        getTag(): string;
        info(scope: string, message: string, ex: fm.icelink.Exception): void;
        info(message: string, ex: fm.icelink.Exception): void;
        info(scope: string, message: string): void;
        info(message: string): void;
        isLogEnabled(level: fm.icelink.LogLevel): boolean;
        log(scope: string, message: string): void;
        log(message: string): void;
        verbose(scope: string, message: string): void;
        verbose(message: string, ex: fm.icelink.Exception): void;
        verbose(message: string): void;
        verbose(scope: string, message: string, ex: fm.icelink.Exception): void;
        warn(scope: string, message: string, ex: fm.icelink.Exception): void;
        warn(scope: string, message: string): void;
        warn(message: string, ex: fm.icelink.Exception): void;
        warn(message: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold an integer value passed by reference.
     </div>

    */
    class IntegerHolder {
        getTypeString(): string;
        private fmicelinkIntegerHolderInit();
        /**<span id='method-fm.icelink.IntegerHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.integerHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.IntegerHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.integerHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.IntegerHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.IntegerHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Interface for a promise that can be rejected.
     </div>

    */
    interface IPromise {
        reject(exception: fm.icelink.Exception): boolean;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     Base class for all JSON provider implementations.
     </div>

    */
    abstract class JsonProvider {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.JsonProvider-deserialize'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a value from a JSON string.
         </div><typeparam name="T">The type the value to deserialize.</typeparam>

        @param {string} valueJson The JSON string to deserialize.
        @return {T} The deserialized value.
        */
        abstract deserialize<T>(valueJson: string): T;
        /**<span id='method-fm.icelink.JsonProvider-serialize'>&nbsp;</span>**/
        /**
         <div>
         Serializes a value to a JSON string.
         </div><typeparam name="T">The type the value to serialize.</typeparam>

        @param {T} value The value to serialize.
        @return {string} The serialized JSON string.
        */
        abstract serialize<T>(value: T): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Thread-safe class providing access to a single `fm.icelink.lockedRandomizer.Randomizer`.
     </div>

    */
    abstract class LockedRandomizer {
        getTypeString(): string;
        /**<span id='method-fm.icelink.LockedRandomizer-next'>&nbsp;</span>**/
        /**
         <div>
         Returns a random number within a specified range.
         </div>

        @param {number} minValue The minimum value (inclusive).
        @param {number} maxValue The maximum value (exclusive).
        @return {number}
        */
        static next(minValue: number, maxValue: number): number;
        /**<span id='method-fm.icelink.LockedRandomizer-next'>&nbsp;</span>**/
        /**
         <div>
         Returns a nonnegative random number.
         </div>


        @return {number}
        */
        static next(): number;
        /**<span id='method-fm.icelink.LockedRandomizer-next'>&nbsp;</span>**/
        /**
         <div>
         Returns a nonnegative random number less than the specified maximum.
         </div>

        @param {number} maxValue The maximum value (exclusive).
        @return {number}
        */
        static next(maxValue: number): number;
        /**<span id='method-fm.icelink.LockedRandomizer-nextBytes'>&nbsp;</span>**/
        /**
         <div>
         Fills the elements of a specified array of bytes with random numbers.
         </div>

        @param {Uint8Array} buffer The array of bytes to fill.
        @return {void}
        */
        static nextBytes(buffer: Uint8Array): void;
        /**<span id='method-fm.icelink.LockedRandomizer-nextDouble'>&nbsp;</span>**/
        /**
         <div>
         Returns a random number between 0.0 and 1.0.
         </div>


        @return {number}
        */
        static nextDouble(): number;
        /**<span id='method-fm.icelink.LockedRandomizer-nextLong'>&nbsp;</span>**/
        /**
         <div>
         Returns a nonnegative random number.
         </div>


        @return {number}
        */
        static nextLong(): number;
        /**<span id='method-fm.icelink.LockedRandomizer-randomString'>&nbsp;</span>**/
        /**
         <div>
         Generates a random string of a specified size.
         </div>

        @param {number} size The size of the output string.
        @return {string}
        */
        static randomString(size: number): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Log utility class.
     </div>

    */
    class Log {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Log-debug'>&nbsp;</span>**/
        /**
         <div>
         Logs a debug-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static debug(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-debug'>&nbsp;</span>**/
        /**
         <div>
         Logs a debug-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static debug(message: string): void;
        /**<span id='method-fm.icelink.Log-error'>&nbsp;</span>**/
        /**
         <div>
         Logs an error-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static error(message: string): void;
        /**<span id='method-fm.icelink.Log-error'>&nbsp;</span>**/
        /**
         <div>
         Logs an error-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static error(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-fatal'>&nbsp;</span>**/
        /**
         <div>
         Logs a fatal-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static fatal(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-fatal'>&nbsp;</span>**/
        /**
         <div>
         Logs a fatal-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static fatal(message: string): void;
        /**<span id='method-fm.icelink.Log-flush'>&nbsp;</span>**/
        /**
         <div>
         Blocks until all logs are written out.
         </div>


        @return {void}
        */
        static flush(): void;
        /**<span id='method-fm.icelink.Log-getIsDebugEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for debug-level messages.
         </div><value>
         <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsDebugEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getIsErrorEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for error-level messages.
         </div><value>
         <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsErrorEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getIsFatalEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for fatal-level messages.
         </div><value>
         <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsFatalEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getIsInfoEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for info-level messages.
         </div><value>
         <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsInfoEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getIsVerboseEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for verbose-level messages.
         </div><value>
         <c>true</c> if logging is enabled for verbose-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsVerboseEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getIsWarnEnabled'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether logging is enabled for warn-level messages.
         </div><value>
         <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
         </value>


        @return {boolean}
        */
        static getIsWarnEnabled(): boolean;
        /**<span id='method-fm.icelink.Log-getLogger'>&nbsp;</span>**/
        /**
         <div>
         Get a logger for a specific Tag. The tag is taken from the class namespace and name.
         </div>

        @param {fm.icelink.Type} type The type to use as the tag.
        @return {fm.icelink.ILog} A ILog that will log to the specified tag.
        */
        static getLogger(type: fm.icelink.Type): fm.icelink.ILog;
        /**<span id='method-fm.icelink.Log-getLogger'>&nbsp;</span>**/
        /**
         <div>
         Get a logger for a specific Tag.
         </div>

        @param {string} tag The tag to log to.
        @return {fm.icelink.ILog} A ILog that will log to the specified tag.
        */
        static getLogger(tag: string): fm.icelink.ILog;
        /**<span id='method-fm.icelink.Log-getLogger'>&nbsp;</span>**/
        /**
         <div>
         Get a logger for a specific Tag.  The tag is taken from the class namespace and name.
         </div>

        @param {fm.icelink.Type} type The type to use as the tag.
        @param {fm.icelink.LogLevel} level Logger's default log level.
        @return {fm.icelink.ILog} A ILog that will log to the specified tag.
        */
        static getLogger(type: fm.icelink.Type, level: fm.icelink.LogLevel): fm.icelink.ILog;
        /**<span id='method-fm.icelink.Log-getLogger'>&nbsp;</span>**/
        /**
         <div>
         Get a logger for a specific Tag.
         </div>

        @param {string} tag The tag to log to.
        @param {fm.icelink.LogLevel} level Logger's default log level.
        @return {fm.icelink.ILog} A ILog that will log to the specified tag.
        */
        static getLogger(tag: string, level: fm.icelink.LogLevel): fm.icelink.ILog;
        /**<span id='method-fm.icelink.Log-getLogLevel'>&nbsp;</span>**/
        /**
         <div>
         Gets the default log level.
         </div>


        @return {fm.icelink.LogLevel}
        */
        static getLogLevel(): fm.icelink.LogLevel;
        /**<span id='method-fm.icelink.Log-getProvider'>&nbsp;</span>**/
        /**
         <div>
         Gets the first log provider.
         </div>


        @return {fm.icelink.LogProvider}
        */
        static getProvider(): fm.icelink.LogProvider;
        /**<span id='method-fm.icelink.Log-info'>&nbsp;</span>**/
        /**
         <div>
         Logs an info-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static info(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-info'>&nbsp;</span>**/
        /**
         <div>
         Logs an info-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static info(message: string): void;
        /**<span id='method-fm.icelink.Log-registerProvider'>&nbsp;</span>**/
        /**
         <div>
         Register a log provider to be logged to.
         </div>

        @param {fm.icelink.LogProvider} provider The new provider.
        @return {void}
        */
        static registerProvider(provider: fm.icelink.LogProvider): void;
        /**<span id='method-fm.icelink.Log-removeProvider'>&nbsp;</span>**/
        /**
         <div>
         Removes a log provider from the list.
         </div>

        @param {fm.icelink.LogProvider} provider The provider to remove.
        @return {void}
        */
        static removeProvider(provider: fm.icelink.LogProvider): void;
        /**<span id='method-fm.icelink.Log-setLogLevel'>&nbsp;</span>**/
        /**
         <div>
         Sets the default log level.
         </div>


        @param {fm.icelink.LogLevel} value
        @return {void}
        */
        static setLogLevel(value: fm.icelink.LogLevel): void;
        /**<span id='method-fm.icelink.Log-setProvider'>&nbsp;</span>**/
        /**
         <div>
         Sets the first log provider.
         </div>


        @param {fm.icelink.LogProvider} value
        @return {void}
        */
        static setProvider(value: fm.icelink.LogProvider): void;
        /**<span id='method-fm.icelink.Log-setTagOverride'>&nbsp;</span>**/
        /**
         <div>
         Override the default log level for a specific tag.
         </div>

        @param {string} tag The Tag to set the log level to.
        @param {fm.icelink.LogLevel} level The new loglevel to use.
        @return {void}
        */
        static setTagOverride(tag: string, level: fm.icelink.LogLevel): void;
        /**<span id='method-fm.icelink.Log-verbose'>&nbsp;</span>**/
        /**
         <div>
         Logs a verbose-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static verbose(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-verbose'>&nbsp;</span>**/
        /**
         <div>
         Logs a verbose-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static verbose(message: string): void;
        /**<span id='method-fm.icelink.Log-warn'>&nbsp;</span>**/
        /**
         <div>
         Logs a warn-level message.
         </div>

        @param {string} message The message.
        @param {fm.icelink.Exception} ex The exception.
        @return {void}
        */
        static warn(message: string, ex: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.Log-warn'>&nbsp;</span>**/
        /**
         <div>
         Logs a warn-level message.
         </div>

        @param {string} message The message.
        @return {void}
        */
        static warn(message: string): void;
        /**<span id='method-fm.icelink.Log-writeLine'>&nbsp;</span>**/
        /**
         <div>
         Writes a line of text to the log.
         </div>

        @param {string} text The text to write to the log.
        @return {void}
        */
        static writeLine(text: string): void;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    class LogLevelWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LogLevel);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a long value passed by reference.
     </div>

    */
    class LongHolder {
        getTypeString(): string;
        private fmicelinkLongHolderInit();
        /**<span id='method-fm.icelink.LongHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.longHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.LongHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.longHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.LongHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.LongHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An implementation of a JSON provider that does nothing.
     </div>

    */
    class NullJsonProvider extends fm.icelink.JsonProvider {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.NullJsonProvider-deserialize'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a value from a JSON string.
         </div><typeparam name="T">The type the value to deserialize.</typeparam>

        @param {string} valueJson The JSON string to deserialize.
        @return {T}
         The deserialized value.
 
        */
        deserialize<T>(valueJson: string): T;
        /**<span id='method-fm.icelink.NullJsonProvider-serialize'>&nbsp;</span>**/
        /**
         <div>
         Serializes a value to a JSON string.
         </div><typeparam name="T">The type the value to serialize.</typeparam>

        @param {T} value The value to serialize.
        @return {string}
         The serialized JSON string.
 
        */
        serialize<T>(value: T): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An implementation of a logging provider that does nothing.
     </div>

    */
    class NullLogProvider extends fm.icelink.LogProvider {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.NullLogProvider-doLog'>&nbsp;</span>**/
        /**
         <div>
         Logs a message at the specified log level.
         </div>

        @param {fm.icelink.LogEvent} logItem The log event containing the details.
        @return {void}
        */
        protected doLog(logItem: fm.icelink.LogEvent): void;
    }
}
declare namespace fm.icelink {
    class FutureStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.FutureState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class to hold a short value passed by reference.
     </div>

    */
    class ShortHolder {
        getTypeString(): string;
        private fmicelinkShortHolderInit();
        /**<span id='method-fm.icelink.ShortHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.shortHolder` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ShortHolder-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.shortHolder` class.
         </div>

        @param {number} value The value.
        @return {}
        */
        constructor(value: number);
        /**<span id='method-fm.icelink.ShortHolder-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.ShortHolder-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {number} value
        @return {void}
        */
        setValue(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Encapsulates useful sorting utilities.
     </div>

    */
    class Sort {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Sort-quickSort'>&nbsp;</span>**/
        /**
         <div>
         Sorts an array using the in-place quick-sort algorithm.
         </div><typeparam name="T">The type of elements in the array.</typeparam>

        @param {Array<T>} array The array of elements.
        @param {fm.icelink.IFunction2<T,T,fm.icelink.CompareResult>} comparer The function used to compare elements in the array -
         should return less than 0 if item 1 is less than item 2 (item 1 should appear
         before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
         than item 2 (item 1 should appear after item 2).
        @return {void}
        */
        static quickSort<T>(array: Array<T>, comparer: fm.icelink.IFunction2<T, T, fm.icelink.CompareResult>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Utility class for splitting strings.
     </div>

    */
    class Splitter {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Splitter-split'>&nbsp;</span>**/
        /**
         <div>
         Splits a string using a given delimiter.
         </div>

        @param {string} str The string.
        @param {string} delimiter The delimiter.
        @return {string[]}
        */
        static split(str: string, delimiter: string): string[];
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Contains methods for string manipulation.
     </div>

    */
    class StringAssistant {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.StringAssistant-isNullOrWhiteSpace'>&nbsp;</span>**/
        /**
         <div />

        @param {string} s The s.
        @return {boolean}
        */
        static isNullOrWhiteSpace(s: string): boolean;
        /**<span id='method-fm.icelink.StringAssistant-subArray'>&nbsp;</span>**/
        /**
         <div>
         Creates a subarray from an existing array.
         </div>

        @param {string[]} array The source array.
        @param {number} offset The offset into the source array.
        @return {string[]} The subarray.
        */
        static subArray(array: string[], offset: number): string[];
        /**<span id='method-fm.icelink.StringAssistant-subArray'>&nbsp;</span>**/
        /**
         <div>
         Creates a subarray from an existing array.
         </div>

        @param {string[]} array The source array.
        @param {number} offset The offset into the source array.
        @param {number} count The number of elements to copy into the subarray.
        @return {string[]} The subarray.
        */
        static subArray(array: string[], offset: number, count: number): string[];
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Simple log provider that writes to a local string builder.
     </div>

    */
    class TextLogProvider extends fm.icelink.LogProvider {
        getTypeString(): string;
        /**<span id='method-fm.icelink.TextLogProvider-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.textLogProvider` class.
         </div>

        @param {fm.icelink.LogLevel} level The log level.
        @return {}
        */
        constructor(level: fm.icelink.LogLevel);
        /**<span id='method-fm.icelink.TextLogProvider-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.textLogProvider` class using `fm.icelink.logLevel.Info`.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.TextLogProvider-clear'>&nbsp;</span>**/
        /**
         <div>
         Clears all text from the log
         and returns the former contents.
         </div>


        @return {string}
        */
        clear(): string;
        /**<span id='method-fm.icelink.TextLogProvider-doLog'>&nbsp;</span>**/
        /**
         <div>
         Logs a message at the specified log level.
         </div>

        @param {fm.icelink.LogEvent} logItem The log event containing the details.
        @return {void}
        */
        protected doLog(logItem: fm.icelink.LogEvent): void;
        /**<span id='method-fm.icelink.TextLogProvider-getCallback'>&nbsp;</span>**/
        /**
         <div>
         Gets a callback to invoke
         whenever text is written to the log.
         </div>


        @return {fm.icelink.IAction1<string>}
        */
        getCallback(): fm.icelink.IAction1<string>;
        /**<span id='method-fm.icelink.TextLogProvider-getText'>&nbsp;</span>**/
        /**
         <div>
         Gets the logged text.
         </div>


        @return {string}
        */
        getText(): string;
        /**<span id='method-fm.icelink.TextLogProvider-setCallback'>&nbsp;</span>**/
        /**
         <div>
         Sets a callback to invoke
         whenever text is written to the log.
         </div>


        @param {fm.icelink.IAction1<string>} value
        @return {void}
        */
        setCallback(value: fm.icelink.IAction1<string>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Throws exceptions on a separate thread.
     </div>

    */
    class Unhandled {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Unhandled-logException'>&nbsp;</span>**/
        /**
         <div>
         Logs an unhandled exception.
         </div>

        @param {fm.icelink.Exception} ex The exception to throw.
        @param {string} source The source of the exception.
        @return {void}
        */
        static logException(ex: fm.icelink.Exception, source: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for an unhandled exception.
     </div>

    */
    class UnhandledExceptionArgs {
        getTypeString(): string;
        private fmicelinkUnhandledExceptionArgsInit();
        /**<span id='method-fm.icelink.UnhandledExceptionArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.unhandledExceptionArgs` class.
         </div>

        @param {fm.icelink.Exception} exception The exception.
        @return {}
        */
        constructor(exception: fm.icelink.Exception);
        /**<span id='method-fm.icelink.UnhandledExceptionArgs-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the unhandled exception.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.UnhandledExceptionArgs-getHandled'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the exception has been
         appropriately handled. If set to <c>true</c>,
         then the exception will not be thrown.
         </div>


        @return {boolean}
        */
        getHandled(): boolean;
        /**<span id='method-fm.icelink.UnhandledExceptionArgs-setHandled'>&nbsp;</span>**/
        /**
         <div>
         Sets whether the exception has been
         appropriately handled. If set to <c>true</c>,
         then the exception will not be thrown.
         </div>


        @param {boolean} value
        @return {void}
        */
        setHandled(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     UTF-8 encoding/decoding utility.
     </div>

    */
    class Utf8 {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Utf8-decode'>&nbsp;</span>**/
        /**
         <div>
         Decodes a UTF-8 byte array to a string.
         </div>

        @param {Uint8Array} input The input byte array.
        @param {number} index The index to start reading.
        @param {number} length The length.
        @return {string}
        */
        static decode(input: Uint8Array, index: number, length: number): string;
        /**<span id='method-fm.icelink.Utf8-decode'>&nbsp;</span>**/
        /**
         <div>
         Decodes a UTF-8 data buffer to a string.
         </div>

        @param {fm.icelink.DataBuffer} buffer The input byte array.
        @return {string}
        */
        static decode(buffer: fm.icelink.DataBuffer): string;
        /**<span id='method-fm.icelink.Utf8-decode'>&nbsp;</span>**/
        /**
         <div>
         Decodes a UTF-8 byte array to a string.
         </div>

        @param {Uint8Array} input The input byte array.
        @return {string}
        */
        static decode(input: Uint8Array): string;
        /**<span id='method-fm.icelink.Utf8-encode'>&nbsp;</span>**/
        /**
         <div>
         Encodes a string to a UTF-8 byte array.
         </div>

        @param {string} input The input string.
        @return {Uint8Array}
        */
        static encode(input: string): Uint8Array;
        /**<span id='method-fm.icelink.Utf8-getByteCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes that would be returned by
         a call to encode.
         </div>

        @param {string} input The input string.
        @return {number}
        */
        static getByteCount(input: string): number;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     Contract for an implementation of the WebSocket protocol v8.
     </div>

    */
    interface IWebSocket {
        close(): void;
        close(closeArgs: fm.icelink.WebSocketCloseArgs): void;
        getBufferedAmount(): number;
        getIsOpen(): boolean;
        getSecure(): boolean;
        open(openArgs: fm.icelink.WebSocketOpenArgs): void;
        send(sendArgs: fm.icelink.WebSocketSendArgs): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Close arguments for the `fm.icelink.webSocket` class.
     </div>

    */
    class WebSocketCloseArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of `fm.icelink.webSocketCloseArgs`
         with default values.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.WebSocketCloseArgs-getOnComplete'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to execute when the connection is closed.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>}
        */
        getOnComplete(): fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-getReason'>&nbsp;</span>**/
        /**
         <div>
         Gets the reason to send with the close frame.
         </div>


        @return {string}
        */
        getReason(): string;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-getStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the status code to send with the close frame.
         </div>


        @return {fm.icelink.WebSocketStatusCode}
        */
        getStatusCode(): fm.icelink.WebSocketStatusCode;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-setOnComplete'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to execute when the connection is closed.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>} value
        @return {void}
        */
        setOnComplete(value: fm.icelink.IAction1<fm.icelink.WebSocketCloseCompleteArgs>): void;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-setReason'>&nbsp;</span>**/
        /**
         <div>
         Sets the reason to send with the close frame.
         </div>


        @param {string} value
        @return {void}
        */
        setReason(value: string): void;
        /**<span id='method-fm.icelink.WebSocketCloseArgs-setStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the status code to send with the close frame.
         </div>


        @param {fm.icelink.WebSocketStatusCode} value
        @return {void}
        */
        setStatusCode(value: fm.icelink.WebSocketStatusCode): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.webSocketCloseArgs.onComplete`.
     </div>

    */
    class WebSocketCloseCompleteArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getCloseArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original arguments passed to the close method.
         </div>


        @return {fm.icelink.WebSocketCloseArgs}
        */
        getCloseArgs(): fm.icelink.WebSocketCloseArgs;
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getReason'>&nbsp;</span>**/
        /**
         <div>
         Gets the reason given for closing the connection.
         </div>


        @return {string}
        */
        getReason(): string;
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-getStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the status code associated with the close operation.
         </div>


        @return {fm.icelink.WebSocketStatusCode}
        */
        getStatusCode(): fm.icelink.WebSocketStatusCode;
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setCloseArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original arguments passed to the close method.
         </div>


        @param {fm.icelink.WebSocketCloseArgs} value
        @return {void}
        */
        setCloseArgs(value: fm.icelink.WebSocketCloseArgs): void;
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setReason'>&nbsp;</span>**/
        /**
         <div>
         Sets the reason given for closing the connection.
         </div>


        @param {string} value
        @return {void}
        */
        setReason(value: string): void;
        /**<span id='method-fm.icelink.WebSocketCloseCompleteArgs-setStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the status code associated with the close operation.
         </div>


        @param {fm.icelink.WebSocketStatusCode} value
        @return {void}
        */
        setStatusCode(value: fm.icelink.WebSocketStatusCode): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Open arguments for the `fm.icelink.webSocket` class.
     </div>

    */
    class WebSocketOpenArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkWebSocketOpenArgsInit();
        /**<span id='method-fm.icelink.WebSocketOpenArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getHandshakeTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the timeout for the handshake (in ms).
         </div>


        @return {number}
        */
        getHandshakeTimeout(): number;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getHeaders'>&nbsp;</span>**/
        /**
         <div>
         Gets headers to send with the handshake request.
         </div>


        @return {fm.icelink.NameValueCollection}
        */
        getHeaders(): fm.icelink.NameValueCollection;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnFailure'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when a connection could not be established.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>}
        */
        getOnFailure(): fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnReceive'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when a message is received.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>}
        */
        getOnReceive(): fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke before the handshake request is sent.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
        */
        getOnRequestCreated(): fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke after the handshake response is received.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
        */
        getOnResponseReceived(): fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnStreamFailure'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when a successful connection breaks down.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>}
        */
        getOnStreamFailure(): fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getOnSuccess'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when a successful connection has been established.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>}
        */
        getOnSuccess(): fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the request.
         </div>


        @return {Object}
        */
        getSender(): Object;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-getStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the timeout for the stream (in ms).
         </div>


        @return {number}
        */
        getStreamTimeout(): number;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setHandshakeTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the timeout for the handshake (in ms).
         </div>


        @param {number} value
        @return {void}
        */
        setHandshakeTimeout(value: number): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setHeaders'>&nbsp;</span>**/
        /**
         <div>
         Sets headers to send with the handshake request.
         </div>


        @param {fm.icelink.NameValueCollection} value
        @return {void}
        */
        setHeaders(value: fm.icelink.NameValueCollection): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnFailure'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when a connection could not be established.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>} value
        @return {void}
        */
        setOnFailure(value: fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnReceive'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when a message is received.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>} value
        @return {void}
        */
        setOnReceive(value: fm.icelink.IAction1<fm.icelink.WebSocketReceiveArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke before the handshake request is sent.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
        @return {void}
        */
        setOnRequestCreated(value: fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke after the handshake response is received.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
        @return {void}
        */
        setOnResponseReceived(value: fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnStreamFailure'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when a successful connection breaks down.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>} value
        @return {void}
        */
        setOnStreamFailure(value: fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setOnSuccess'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when a successful connection has been established.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>} value
        @return {void}
        */
        setOnSuccess(value: fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setSender'>&nbsp;</span>**/
        /**
         <div>
         Sets the sender of the request.
         </div>


        @param {Object} value
        @return {void}
        */
        setSender(value: Object): void;
        /**<span id='method-fm.icelink.WebSocketOpenArgs-setStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the timeout for the stream (in ms).
         </div>


        @param {number} value
        @return {void}
        */
        setStreamTimeout(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.webSocketOpenArgs.onFailure`.
     </div>

    */
    class WebSocketOpenFailureArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception generated while connecting.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original arguments passed to the open method.
         </div>


        @return {fm.icelink.WebSocketOpenArgs}
        */
        getOpenArgs(): fm.icelink.WebSocketOpenArgs;
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-getStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the status code associated with the failure to connect.
         </div>


        @return {fm.icelink.WebSocketStatusCode}
        */
        getStatusCode(): fm.icelink.WebSocketStatusCode;
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setException'>&nbsp;</span>**/
        /**
         <div>
         Sets the exception generated while connecting.
         </div>


        @param {fm.icelink.Exception} value
        @return {void}
        */
        setException(value: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original arguments passed to the open method.
         </div>


        @param {fm.icelink.WebSocketOpenArgs} value
        @return {void}
        */
        setOpenArgs(value: fm.icelink.WebSocketOpenArgs): void;
        /**<span id='method-fm.icelink.WebSocketOpenFailureArgs-setStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the status code associated with the failure to connect.
         </div>


        @param {fm.icelink.WebSocketStatusCode} value
        @return {void}
        */
        setStatusCode(value: fm.icelink.WebSocketStatusCode): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.webSocketOpenArgs.onSuccess`.
     </div>

    */
    class WebSocketOpenSuccessArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketOpenSuccessArgs-getOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original arguments passed to the open method.
         </div>


        @return {fm.icelink.WebSocketOpenArgs}
        */
        getOpenArgs(): fm.icelink.WebSocketOpenArgs;
        /**<span id='method-fm.icelink.WebSocketOpenSuccessArgs-setOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original arguments passed to the open method.
         </div>


        @param {fm.icelink.WebSocketOpenArgs} value
        @return {void}
        */
        setOpenArgs(value: fm.icelink.WebSocketOpenArgs): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.webSocketOpenArgs.onReceive`.
     </div>

    */
    class WebSocketReceiveArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-getBinaryMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the message received from the server as binary data.
         </div>


        @return {Uint8Array}
        */
        getBinaryMessage(): Uint8Array;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-getIsText'>&nbsp;</span>**/
        /**
         <div>
         Gets whether or not the received message is text.
         </div>


        @return {boolean}
        */
        getIsText(): boolean;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-getOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original arguments passed to the open method.
         </div>


        @return {fm.icelink.WebSocketOpenArgs}
        */
        getOpenArgs(): fm.icelink.WebSocketOpenArgs;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-getTextMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the message received from the server as text data.
         </div>


        @return {string}
        */
        getTextMessage(): string;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-setBinaryMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets the message received from the server as binary data.
         </div>


        @param {Uint8Array} value
        @return {void}
        */
        setBinaryMessage(value: Uint8Array): void;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-setOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original arguments passed to the open method.
         </div>


        @param {fm.icelink.WebSocketOpenArgs} value
        @return {void}
        */
        setOpenArgs(value: fm.icelink.WebSocketOpenArgs): void;
        /**<span id='method-fm.icelink.WebSocketReceiveArgs-setTextMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets the message received from the server as text data.
         </div>


        @param {string} value
        @return {void}
        */
        setTextMessage(value: string): void;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     Send arguments for the `fm.icelink.webSocket` class.
     </div>

    */
    class WebSocketSendArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkWebSocketSendArgsInit();
        /**<span id='method-fm.icelink.WebSocketSendArgs-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new `fm.icelink.webSocketSendArgs` instance.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.WebSocketSendArgs-getBinaryMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the message to send as binary data.
         </div>


        @return {Uint8Array}
        */
        getBinaryMessage(): Uint8Array;
        /**<span id='method-fm.icelink.WebSocketSendArgs-getTextMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the message to send as text data.
         </div>


        @return {string}
        */
        getTextMessage(): string;
        /**<span id='method-fm.icelink.WebSocketSendArgs-getTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the timeout for the request (in ms).
         </div>


        @return {number}
        */
        getTimeout(): number;
        /**<span id='method-fm.icelink.WebSocketSendArgs-setBinaryMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets the message to send as binary data.
         </div>


        @param {Uint8Array} value
        @return {void}
        */
        setBinaryMessage(value: Uint8Array): void;
        /**<span id='method-fm.icelink.WebSocketSendArgs-setTextMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets the message to send as text data.
         </div>


        @param {string} value
        @return {void}
        */
        setTextMessage(value: string): void;
        /**<span id='method-fm.icelink.WebSocketSendArgs-setTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the timeout for the request (in ms).
         </div>


        @param {number} value
        @return {void}
        */
        setTimeout(value: number): void;
    }
}
declare namespace fm.icelink {
    class WebSocketStatusCodeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.WebSocketStatusCode);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for `fm.icelink.webSocketOpenArgs.onStreamFailure`.
     </div>

    */
    class WebSocketStreamFailureArgs extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getException'>&nbsp;</span>**/
        /**
         <div>
         Gets the exception generated by the active connection.
         </div>


        @return {fm.icelink.Exception}
        */
        getException(): fm.icelink.Exception;
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Gets the original arguments passed to the open method.
         </div>


        @return {fm.icelink.WebSocketOpenArgs}
        */
        getOpenArgs(): fm.icelink.WebSocketOpenArgs;
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-getStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Gets the status code associated with the stream failure.
         </div>


        @return {fm.icelink.WebSocketStatusCode}
        */
        getStatusCode(): fm.icelink.WebSocketStatusCode;
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setException'>&nbsp;</span>**/
        /**
         <div>
         Sets the exception generated by the active connection.
         </div>


        @param {fm.icelink.Exception} value
        @return {void}
        */
        setException(value: fm.icelink.Exception): void;
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setOpenArgs'>&nbsp;</span>**/
        /**
         <div>
         Sets the original arguments passed to the open method.
         </div>


        @param {fm.icelink.WebSocketOpenArgs} value
        @return {void}
        */
        setOpenArgs(value: fm.icelink.WebSocketOpenArgs): void;
        /**<span id='method-fm.icelink.WebSocketStreamFailureArgs-setStatusCode'>&nbsp;</span>**/
        /**
         <div>
         Sets the status code associated with the stream failure.
         </div>


        @param {fm.icelink.WebSocketStatusCode} value
        @return {void}
        */
        setStatusCode(value: fm.icelink.WebSocketStatusCode): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Base class that defines methods for transferring content over the WebSocket protocol.
     </div>

    */
    abstract class WebSocketTransfer {
        getTypeString(): string;
        private fmicelinkWebSocketTransferInit();
        /**<span id='method-fm.icelink.WebSocketTransfer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.webSocketTransfer` class.
         </div>

        @param {string} url The URL.
        @return {}
        */
        constructor(url: string);
        /**<span id='method-fm.icelink.WebSocketTransfer-getHandshakeTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the timeout for the initial handshake (in ms).
         </div>


        @return {number}
        */
        getHandshakeTimeout(): number;
        /**<span id='method-fm.icelink.WebSocketTransfer-getOnOpenFailure'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke if the handshake fails.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>}
        */
        getOnOpenFailure(): fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>;
        /**<span id='method-fm.icelink.WebSocketTransfer-getOnOpenSuccess'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke if the handshake succeeds.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>}
        */
        getOnOpenSuccess(): fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>;
        /**<span id='method-fm.icelink.WebSocketTransfer-getOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when the handshake request is created.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>}
        */
        getOnRequestCreated(): fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>;
        /**<span id='method-fm.icelink.WebSocketTransfer-getOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke when the handshake response is received.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>}
        */
        getOnResponseReceived(): fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>;
        /**<span id='method-fm.icelink.WebSocketTransfer-getOnStreamFailure'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback to invoke if the stream errors out.
         </div>


        @return {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>}
        */
        getOnStreamFailure(): fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>;
        /**<span id='method-fm.icelink.WebSocketTransfer-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender of the messages.
         </div>


        @return {Object}
        */
        getSender(): Object;
        /**<span id='method-fm.icelink.WebSocketTransfer-getStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Gets the timeout for the stream (in ms).
         </div>


        @return {number}
        */
        getStreamTimeout(): number;
        /**<span id='method-fm.icelink.WebSocketTransfer-getUrl'>&nbsp;</span>**/
        /**
         <div>
         Gets the URL.
         </div>


        @return {string}
        */
        getUrl(): string;
        /**<span id='method-fm.icelink.WebSocketTransfer-open'>&nbsp;</span>**/
        /**
         <div>
         Opens the socket.
         </div>

        @param {fm.icelink.NameValueCollection} headers The headers to pass in with the initial handshake.
        @return {void}
        */
        abstract open(headers: fm.icelink.NameValueCollection): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-send'>&nbsp;</span>**/
        /**
         <div>
         Sends a request synchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @return {fm.icelink.HttpResponseArgs} The response parameters.
        */
        abstract send(requestArgs: fm.icelink.HttpRequestArgs): fm.icelink.HttpResponseArgs;
        /**<span id='method-fm.icelink.WebSocketTransfer-sendAsync'>&nbsp;</span>**/
        /**
         <div>
         Sends a request asynchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute with the resulting response.
        @return {void}
        */
        abstract sendAsync(requestArgs: fm.icelink.HttpRequestArgs, callback: fm.icelink.IAction1<fm.icelink.HttpResponseArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setHandshakeTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the timeout for the initial handshake (in ms).
         </div>


        @param {number} value
        @return {void}
        */
        setHandshakeTimeout(value: number): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setOnOpenFailure'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke if the handshake fails.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>} value
        @return {void}
        */
        setOnOpenFailure(value: fm.icelink.IAction1<fm.icelink.WebSocketOpenFailureArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setOnOpenSuccess'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke if the handshake succeeds.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>} value
        @return {void}
        */
        setOnOpenSuccess(value: fm.icelink.IAction1<fm.icelink.WebSocketOpenSuccessArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setOnRequestCreated'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when the handshake request is created.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>} value
        @return {void}
        */
        setOnRequestCreated(value: fm.icelink.IAction1<fm.icelink.HttpRequestCreatedArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setOnResponseReceived'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke when the handshake response is received.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>} value
        @return {void}
        */
        setOnResponseReceived(value: fm.icelink.IAction1<fm.icelink.HttpResponseReceivedArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setOnStreamFailure'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback to invoke if the stream errors out.
         </div>


        @param {fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>} value
        @return {void}
        */
        setOnStreamFailure(value: fm.icelink.IAction1<fm.icelink.WebSocketStreamFailureArgs>): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setSender'>&nbsp;</span>**/
        /**
         <div>
         Sets the sender of the messages.
         </div>


        @param {Object} value
        @return {void}
        */
        setSender(value: Object): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setStreamTimeout'>&nbsp;</span>**/
        /**
         <div>
         Sets the timeout for the stream (in ms).
         </div>


        @param {number} value
        @return {void}
        */
        setStreamTimeout(value: number): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-setUrl'>&nbsp;</span>**/
        /**
         <div>
         Sets the URL.
         </div>


        @param {string} value
        @return {void}
        */
        setUrl(value: string): void;
        /**<span id='method-fm.icelink.WebSocketTransfer-shutdown'>&nbsp;</span>**/
        /**
         <div>
         Releases any resources and shuts down.
         </div>


        @return {void}
        */
        abstract shutdown(): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Creates implementations of `fm.icelink.webSocketWebRequestTransfer`.
     </div>

    */
    class WebSocketTransferFactory {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.WebSocketTransferFactory-getCreateWebSocketTransfer'>&nbsp;</span>**/
        /**
         <div>
         Gets the callback that creates a WebSocket-based transfer class.
         </div>


        @return {fm.icelink.IFunction1<string,fm.icelink.WebSocketTransfer>}
        */
        static getCreateWebSocketTransfer(): fm.icelink.IFunction1<string, fm.icelink.WebSocketTransfer>;
        /**<span id='method-fm.icelink.WebSocketTransferFactory-getWebSocketTransfer'>&nbsp;</span>**/
        /**
         <div>
         Gets an instance of the WebSocket-based transfer class.
         </div>


        @param {string} url
        @return {fm.icelink.WebSocketTransfer}
        */
        static getWebSocketTransfer(url: string): fm.icelink.WebSocketTransfer;
        /**<span id='method-fm.icelink.WebSocketTransferFactory-setCreateWebSocketTransfer'>&nbsp;</span>**/
        /**
         <div>
         Sets the callback that creates a WebSocket-based transfer class.
         </div>


        @param {fm.icelink.IFunction1<string,fm.icelink.WebSocketTransfer>} value
        @return {void}
        */
        static setCreateWebSocketTransfer(value: fm.icelink.IFunction1<string, fm.icelink.WebSocketTransfer>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Defines methods for transferring messages using the WebSocket protocol.
     </div>

    */
    class WebSocketWebRequestTransfer extends fm.icelink.WebSocketTransfer {
        getTypeString(): string;
        /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of `fm.icelink.webSocketWebRequestTransfer`.
         </div>

        @param {string} url The URL.
        @return {}
        */
        constructor(url: string);
        /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-open'>&nbsp;</span>**/
        /**
         <div>
         Opens the WebSocket connection.
         </div>


        @param {fm.icelink.NameValueCollection} headers
        @return {void}
        */
        open(headers: fm.icelink.NameValueCollection): void;
        /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-send'>&nbsp;</span>**/
        /**
         <div>
         Sends a request synchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @return {fm.icelink.HttpResponseArgs} The response parameters.
        */
        send(requestArgs: fm.icelink.HttpRequestArgs): fm.icelink.HttpResponseArgs;
        /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-sendAsync'>&nbsp;</span>**/
        /**
         <div>
         Sends a request asynchronously.
         </div>

        @param {fm.icelink.HttpRequestArgs} requestArgs The request parameters.
        @param {fm.icelink.IAction1<fm.icelink.HttpResponseArgs>} callback The callback to execute with the resulting response.
        @return {void}
        */
        sendAsync(requestArgs: fm.icelink.HttpRequestArgs, callback: fm.icelink.IAction1<fm.icelink.HttpResponseArgs>): void;
        /**<span id='method-fm.icelink.WebSocketWebRequestTransfer-shutdown'>&nbsp;</span>**/
        /**
         <div>
         Releases any resources and shuts down.
         </div>


        @return {void}
        */
        shutdown(): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A media buffer.
     </div><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam>

    */
    abstract class MediaBuffer<TFormat extends fm.icelink.MediaFormat<TFormat>, TBuffer extends fm.icelink.MediaBuffer<TFormat, TBuffer>> extends fm.icelink.Dynamic {
        getTypeString(): string;
        private fmicelinkMediaBufferInit();
        /**<span id='method-fm.icelink.MediaBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaBuffer` class.
         </div>

        @param {fm.icelink.DataBuffer[]} dataBuffers The data buffers.
        @param {TFormat} format The format.
        @return {}
        */
        constructor(dataBuffers: fm.icelink.DataBuffer[], format: TFormat);
        /**<span id='method-fm.icelink.MediaBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaBuffer` class.
         </div>

        @param {fm.icelink.DataBuffer} dataBuffer The data buffer.
        @param {TFormat} format The format.
        @return {}
        */
        constructor(dataBuffer: fm.icelink.DataBuffer, format: TFormat);
        /**<span id='method-fm.icelink.MediaBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaBuffer` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.MediaBuffer-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {TBuffer}
        */
        clone(): TBuffer;
        /**<span id='method-fm.icelink.MediaBuffer-createInstance'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {TBuffer}
        */
        protected abstract createInstance(): TBuffer;
        /**<span id='method-fm.icelink.MediaBuffer-free'>&nbsp;</span>**/
        /**
         <div>
         Frees the data buffers referenced by this instance.
         </div>

        @return {TBuffer} This instance.
        */
        free(): TBuffer;
        /**<span id='method-fm.icelink.MediaBuffer-getDataBuffer'>&nbsp;</span>**/
        /**
         <div>
         Gets the data buffer.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getDataBuffer(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.MediaBuffer-getDataBuffers'>&nbsp;</span>**/
        /**
         <div>
         Gets the data buffers.
         </div>


        @return {fm.icelink.DataBuffer[]}
        */
        getDataBuffers(): fm.icelink.DataBuffer[];
        /**<span id='method-fm.icelink.MediaBuffer-getFormat'>&nbsp;</span>**/
        /**
         <div>
         Gets the format.
         </div>


        @return {TFormat}
        */
        getFormat(): TFormat;
        /**<span id='method-fm.icelink.MediaBuffer-getIsMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this instance has been muted.
         </div>


        @return {boolean}
        */
        abstract getIsMuted(): boolean;
        /**<span id='method-fm.icelink.MediaBuffer-getLastSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Gets the last sequence number.
         </div>


        @return {number}
        */
        getLastSequenceNumber(): number;
        /**<span id='method-fm.icelink.MediaBuffer-getRecoveredByFec'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer contains
         data recovered by forward error correction (FEC).
         </div>


        @return {boolean}
        */
        getRecoveredByFec(): boolean;
        /**<span id='method-fm.icelink.MediaBuffer-getRtpHeader'>&nbsp;</span>**/
        /**
         <div>
         Gets the Rtp Packet Header for this media buffer.
         </div>


        @return {fm.icelink.RtpPacketHeader}
        */
        getRtpHeader(): fm.icelink.RtpPacketHeader;
        /**<span id='method-fm.icelink.MediaBuffer-getRtpHeaders'>&nbsp;</span>**/
        /**
         <div>
         Gets the Rtp Packet Headers for this media buffer.
         </div>


        @return {fm.icelink.RtpPacketHeader[]}
        */
        getRtpHeaders(): fm.icelink.RtpPacketHeader[];
        /**<span id='method-fm.icelink.MediaBuffer-getRtpSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTP sequence number.
         </div>


        @return {number}
        */
        getRtpSequenceNumber(): number;
        /**<span id='method-fm.icelink.MediaBuffer-getRtpSequenceNumbers'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTP sequence numbers.
         </div>


        @return {number[]}
        */
        getRtpSequenceNumbers(): number[];
        /**<span id='method-fm.icelink.MediaBuffer-getSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Gets the sequence number.
         </div>


        @return {number}
        */
        getSequenceNumber(): number;
        /**<span id='method-fm.icelink.MediaBuffer-getSequenceNumbers'>&nbsp;</span>**/
        /**
         <div>
         Gets the sequence numbers.
         </div>


        @return {number[]}
        */
        getSequenceNumbers(): number[];
        /**<span id='method-fm.icelink.MediaBuffer-getSourceId'>&nbsp;</span>**/
        /**
         <div>
         Gets the source identifier.
         </div>


        @return {string}
        */
        getSourceId(): string;
        /**<span id='method-fm.icelink.MediaBuffer-keep'>&nbsp;</span>**/
        /**
         <div>
         Keeps the data buffers referenced by this instance.
         </div>

        @return {TBuffer} This instance.
        */
        keep(): TBuffer;
        /**<span id='method-fm.icelink.MediaBuffer-mute'>&nbsp;</span>**/
        /**
         <div>
         Mutes this instance. This is a one-way operation that clears
         the underlying data buffer. If the buffer has an unsupported
         format, this method will return <c>false</c>.
         </div>


        @return {boolean}
        */
        abstract mute(): boolean;
        /**<span id='method-fm.icelink.MediaBuffer-setDataBuffer'>&nbsp;</span>**/
        /**
         <div>
         Sets the data buffer.
         </div>


        @param {fm.icelink.DataBuffer} value
        @return {void}
        */
        setDataBuffer(value: fm.icelink.DataBuffer): void;
        /**<span id='method-fm.icelink.MediaBuffer-setDataBuffers'>&nbsp;</span>**/
        /**
         <div>
         Sets the data buffers.
         </div>


        @param {fm.icelink.DataBuffer[]} value
        @return {void}
        */
        setDataBuffers(value: fm.icelink.DataBuffer[]): void;
        /**<span id='method-fm.icelink.MediaBuffer-setFormat'>&nbsp;</span>**/
        /**
         <div>
         Sets the format.
         </div>


        @param {TFormat} value
        @return {void}
        */
        setFormat(value: TFormat): void;
        /**<span id='method-fm.icelink.MediaBuffer-setRecoveredByFec'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether this buffer contains
         data recovered by forward error correction (FEC).
         </div>


        @param {boolean} value
        @return {void}
        */
        setRecoveredByFec(value: boolean): void;
        /**<span id='method-fm.icelink.MediaBuffer-setRtpHeader'>&nbsp;</span>**/
        /**
         <div>
         Sets the Rtp Packet Header for this media buffer.
         </div>


        @param {fm.icelink.RtpPacketHeader} value
        @return {void}
        */
        setRtpHeader(value: fm.icelink.RtpPacketHeader): void;
        /**<span id='method-fm.icelink.MediaBuffer-setRtpHeaders'>&nbsp;</span>**/
        /**
         <div>
         Sets the Rtp Packet Headers for this media buffer.
         </div>


        @param {fm.icelink.RtpPacketHeader[]} value
        @return {void}
        */
        setRtpHeaders(value: fm.icelink.RtpPacketHeader[]): void;
        /**<span id='method-fm.icelink.MediaBuffer-setSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Sets the sequence number.
         </div>


        @param {number} value
        @return {void}
        */
        setSequenceNumber(value: number): void;
        /**<span id='method-fm.icelink.MediaBuffer-setSequenceNumbers'>&nbsp;</span>**/
        /**
         <div>
         Sets the sequence numbers.
         </div>


        @param {number[]} value
        @return {void}
        */
        setSequenceNumbers(value: number[]): void;
        /**<span id='method-fm.icelink.MediaBuffer-setSourceId'>&nbsp;</span>**/
        /**
         <div>
         Sets the source identifier.
         </div>


        @param {string} value
        @return {void}
        */
        setSourceId(value: string): void;
        /**<span id='method-fm.icelink.MediaBuffer-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of values.
     </div><typeparam name="T"></typeparam><typeparam name="TCollection"></typeparam>

    */
    abstract class Collection<T, TCollection extends fm.icelink.Collection<T, TCollection>> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Collection-add'>&nbsp;</span>**/
        /**
         <div>
         Adds a value.
         </div>

        @param {T} value The value.
        @return {boolean}
        */
        add(value: T): boolean;
        /**<span id='method-fm.icelink.Collection-addMany'>&nbsp;</span>**/
        /**
         <div>
         Adds some values.
         </div>

        @param {T[]} values The values.
        @return {boolean}
        */
        addMany(values: T[]): boolean;
        /**<span id='method-fm.icelink.Collection-addSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is added to the collection.
         </div>

        @param {T} value The value.
        @return {void}
        */
        protected addSuccess(value: T): void;
        /**<span id='method-fm.icelink.Collection-any'>&nbsp;</span>**/
        /**
         <div>
         Determined whether the collection contains at least one value
         that matches the specified predicate.
         </div>

        @param {fm.icelink.IFunction1<T,boolean>} predicate The predicate.
        @return {boolean}
        */
        any(predicate: fm.icelink.IFunction1<T, boolean>): boolean;
        /**<span id='method-fm.icelink.Collection-any'>&nbsp;</span>**/
        /**
         <div>
         Determined whether the collection contains at least one value.
         </div>


        @return {boolean}
        */
        any(): boolean;
        /**<span id='method-fm.icelink.Collection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<T>} list The list.
        @return {T[]}
        */
        protected abstract arrayFromList(list: Array<T>): T[];
        /**<span id='method-fm.icelink.Collection-contains'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the collection contains a value.
         </div>

        @param {T} value The value.
        @return {boolean}
        */
        contains(value: T): boolean;
        /**<span id='method-fm.icelink.Collection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {TCollection}
        */
        protected abstract createCollection(): TCollection;
        /**<span id='method-fm.icelink.Collection-first'>&nbsp;</span>**/
        /**
         <div>
         Gets the first value that matches
         the specified predicate.
         Throws an exception if there are
         no such values in the collection.
         </div>

        @param {fm.icelink.IFunction1<T,boolean>} predicate The predicate.
        @return {T}
        */
        first(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-first'>&nbsp;</span>**/
        /**
         <div>
         Gets the first value.
         Throws an exception if there are
         no values in the collection.
         </div>


        @return {T}
        */
        first(): T;
        /**<span id='method-fm.icelink.Collection-firstOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the first value.
         Returns a default value if there are
         no values in the collection.
         </div>


        @return {T}
        */
        firstOrDefault(): T;
        /**<span id='method-fm.icelink.Collection-firstOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the first value that matches
         the specified predicate.
         Returns a default value if there are
         no such values in the collection.
         </div>

        @param {fm.icelink.IFunction1<T,boolean>} predicate The predicate.
        @return {T}
        */
        firstOrDefault(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-forEach'>&nbsp;</span>**/
        /**
         <div>
         Executes a callback function once per value.
         </div>

        @param {fm.icelink.IAction2<T,number>} callback The callback to execute.
        @return {void}
        */
        forEach(callback: fm.icelink.IAction2<T, number>): void;
        /**<span id='method-fm.icelink.Collection-getCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the count.
         </div>


        @return {number}
        */
        getCount(): number;
        /**<span id='method-fm.icelink.Collection-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value.
         </div>


        @return {T}
        */
        getValue(): T;
        /**<span id='method-fm.icelink.Collection-getValues'>&nbsp;</span>**/
        /**
         <div>
         Gets the values.
         </div>


        @return {T[]}
        */
        getValues(): T[];
        /**<span id='method-fm.icelink.Collection-last'>&nbsp;</span>**/
        /**
         <div>
         Gets the last value that matches
         the specified predicate.
         Throws an exception if there are
         no such values in the collection.
         </div>

        @param {fm.icelink.IFunction1<T,boolean>} predicate The predicate.
        @return {T}
        */
        last(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-last'>&nbsp;</span>**/
        /**
         <div>
         Gets the last value.
         Throws an exception if there are
         no values in the collection.
         </div>


        @return {T}
        */
        last(): T;
        /**<span id='method-fm.icelink.Collection-lastOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the last value that matches
         the specified predicate.
         Returns a default value if there are
         no such values in the collection.
         </div>

        @param {fm.icelink.IFunction1<T,boolean>} predicate The predicate.
        @return {T}
        */
        lastOrDefault(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-lastOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the last value.
         Returns a default value if there are
         no values in the collection.
         </div>


        @return {T}
        */
        lastOrDefault(): T;
        /**<span id='method-fm.icelink.Collection-remove'>&nbsp;</span>**/
        /**
         <div>
         Removes a value.
         </div>

        @param {T} value The value.
        @return {boolean}
        */
        remove(value: T): boolean;
        /**<span id='method-fm.icelink.Collection-removeAll'>&nbsp;</span>**/
        /**
         <div>
         Removes all values.
         </div>


        @return {void}
        */
        removeAll(): void;
        /**<span id='method-fm.icelink.Collection-removeFirst'>&nbsp;</span>**/
        /**
         <div>
         Removes the first value that matches a given condition.
         </div>


        @param {fm.icelink.IFunction1<T,boolean>} condition
        @return {T}
        */
        removeFirst(condition: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-removeFirst'>&nbsp;</span>**/
        /**
         <div>
         Removes the first value.
         </div>


        @return {T}
        */
        removeFirst(): T;
        /**<span id='method-fm.icelink.Collection-removeLast'>&nbsp;</span>**/
        /**
         <div>
         Removes the last value.
         </div>


        @return {T}
        */
        removeLast(): T;
        /**<span id='method-fm.icelink.Collection-removeLast'>&nbsp;</span>**/
        /**
         <div>
         Removes the last value that matches a given condition.
         </div>


        @param {fm.icelink.IFunction1<T,boolean>} condition
        @return {T}
        */
        removeLast(condition: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-removeMany'>&nbsp;</span>**/
        /**
         <div>
         Removes some values.
         </div>

        @param {T[]} values The values.
        @return {boolean}
        */
        removeMany(values: T[]): boolean;
        /**<span id='method-fm.icelink.Collection-removeSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is removed from the collection.
         </div>

        @param {T} value The value.
        @return {void}
        */
        protected removeSuccess(value: T): void;
        /**<span id='method-fm.icelink.Collection-replace'>&nbsp;</span>**/
        /**
         <div>
         Replaces the collection with a new set of values.
         </div>

        @param {T[]} values The values.
        @return {void}
        */
        replace(values: T[]): void;
        /**<span id='method-fm.icelink.Collection-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the value.
         </div>


        @param {T} value
        @return {void}
        */
        setValue(value: T): void;
        /**<span id='method-fm.icelink.Collection-setValues'>&nbsp;</span>**/
        /**
         <div>
         Sets the values.
         </div>


        @param {T[]} value
        @return {void}
        */
        setValues(value: T[]): void;
        /**<span id='method-fm.icelink.Collection-single'>&nbsp;</span>**/
        /**
         <div>
         Gets the only value that matches
         the specified predicate.
         Throws an exception if there are
         no values or more than one value
         in the collection.
         </div>


        @param {fm.icelink.IFunction1<T,boolean>} predicate
        @return {T}
        */
        single(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-single'>&nbsp;</span>**/
        /**
         <div>
         Gets the only value.
         Throws an exception if there are
         no values or more than one value
         in the collection.
         </div>


        @return {T}
        */
        single(): T;
        /**<span id='method-fm.icelink.Collection-singleOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the only value.
         Returns a default value if there are
         no values or more than one value
         in the collection.
         </div>


        @return {T}
        */
        singleOrDefault(): T;
        /**<span id='method-fm.icelink.Collection-singleOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the only value that matches
         the specified predicate.
         Returns a default value if there are
         no values or more than one value
         in the collection.
         </div>


        @param {fm.icelink.IFunction1<T,boolean>} predicate
        @return {T}
        */
        singleOrDefault(predicate: fm.icelink.IFunction1<T, boolean>): T;
        /**<span id='method-fm.icelink.Collection-valueAt'>&nbsp;</span>**/
        /**
         <div>
         Gets the value at the specified index.
         Throws an exception if a value does
         not exist at that index.
         </div>

        @param {number} index The index.
        @return {T}
        */
        valueAt(index: number): T;
        /**<span id='method-fm.icelink.Collection-valueAtOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the value at the specified index.
         Returns a default value if a value does
         not exist at that index.
         </div>

        @param {number} index The index.
        @return {T}
        */
        valueAtOrDefault(index: number): T;
        /**<span id='method-fm.icelink.Collection-where'>&nbsp;</span>**/
        /**
         <div>
         Creates a new collection with values
         that match the specified predicate.
         </div>

        @param {fm.icelink.IFunction2<T,number,boolean>} predicate The predicate.
        @return {TCollection}
        */
        where(predicate: fm.icelink.IFunction2<T, number, boolean>): TCollection;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A media configuration.
     </div>

    */
    abstract class MediaConfig<TConfig extends fm.icelink.MediaConfig<TConfig>> {
        getTypeString(): string;
        private fmicelinkMediaConfigInit();
        /**<span id='method-fm.icelink.MediaConfig-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaConfig` class.
         </div>

        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(clockRate: number);
        /**<span id='method-fm.icelink.MediaConfig-getClockRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the clock rate.
         </div>


        @return {number}
        */
        getClockRate(): number;
        /**<span id='method-fm.icelink.MediaConfig-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified configuration is equivalent.
         </div>

        @param {TConfig} config The configuration.
        @return {boolean}
        */
        isEquivalent(config: TConfig): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An audio configuration.
     </div>

    */
    class AudioConfig extends fm.icelink.MediaConfig<fm.icelink.AudioConfig> {
        getTypeString(): string;
        private fmicelinkAudioConfigInit();
        /**<span id='method-fm.icelink.AudioConfig-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.audioConfig` class.
         </div>

        @param {number} clockRate The clock rate.
        @param {number} channelCount The channel count.
        @return {}
        */
        constructor(clockRate: number, channelCount: number);
        /**<span id='method-fm.icelink.AudioConfig-getChannelCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the channel count.
         </div>


        @return {number}
        */
        getChannelCount(): number;
        /**<span id='method-fm.icelink.AudioConfig-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified configuration is equivalent.
         </div>

        @param {fm.icelink.AudioConfig} config The configuration.
        @return {boolean}
        */
        isEquivalent(config: fm.icelink.AudioConfig): boolean;
        /**<span id='method-fm.icelink.AudioConfig-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A media format.
     </div>

    */
    abstract class MediaFormat<TFormat extends fm.icelink.MediaFormat<TFormat>> {
        getTypeString(): string;
        private fmicelinkMediaFormatInit();
        /**<span id='method-fm.icelink.MediaFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaFormat` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.MediaFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.mediaFormat` class.
         </div>

        @param {string} name The name.
        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(name: string, clockRate: number);
        /**<span id='method-fm.icelink.MediaFormat-getRedName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the RED media format.
         </div>


        @return {string}
        */
        static getRedName(): string;
        /**<span id='method-fm.icelink.MediaFormat-getUlpFecName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the ULPFEC media format.
         </div>


        @return {string}
        */
        static getUlpFecName(): string;
        /**<span id='method-fm.icelink.MediaFormat-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {TFormat}
        */
        clone(): TFormat;
        /**<span id='method-fm.icelink.MediaFormat-createInstance'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {TFormat}
        */
        protected abstract createInstance(): TFormat;
        /**<span id='method-fm.icelink.MediaFormat-getClockRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the clock rate.
         </div>


        @return {number}
        */
        getClockRate(): number;
        /**<span id='method-fm.icelink.MediaFormat-getFullName'>&nbsp;</span>**/
        /**
         <div>
         Gets the full name, including clock rate and encoding parameters.
         </div>


        @return {string}
        */
        getFullName(): string;
        /**<span id='method-fm.icelink.MediaFormat-getIsEncrypted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating that the data is encrypted.
         </div>


        @return {boolean}
        */
        getIsEncrypted(): boolean;
        /**<span id='method-fm.icelink.MediaFormat-getIsInjected'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating that the data is injected
         into the primary media stream (e.g. DTMF).
         </div>


        @return {boolean}
        */
        getIsInjected(): boolean;
        /**<span id='method-fm.icelink.MediaFormat-getIsPacketized'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating that the data is packetized
         for network transmission.
         </div>


        @return {boolean}
        */
        getIsPacketized(): boolean;
        /**<span id='method-fm.icelink.MediaFormat-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.MediaFormat-getParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets the parameters.
         </div>


        @return {string}
        */
        abstract getParameters(): string;
        /**<span id='method-fm.icelink.MediaFormat-getStaticPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the static payload type, if this format
         has a static payload type registered with IANA.
         </div>


        @return {number}
        */
        getStaticPayloadType(): number;
        /**<span id='method-fm.icelink.MediaFormat-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified format is equivalent.
         </div>

        @param {TFormat} format The format.
        @param {boolean} ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
        @return {boolean}
        */
        isEquivalent(format: TFormat, ignoreIsPacketized: boolean): boolean;
        /**<span id='method-fm.icelink.MediaFormat-setClockRate'>&nbsp;</span>**/
        /**
         <div>
         Sets the clock rate.
         </div>


        @param {number} value
        @return {void}
        */
        setClockRate(value: number): void;
        /**<span id='method-fm.icelink.MediaFormat-setIsEncrypted'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating that the data is encrypted.
         </div>


        @param {boolean} value
        @return {void}
        */
        setIsEncrypted(value: boolean): void;
        /**<span id='method-fm.icelink.MediaFormat-setIsInjected'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating that the data is injected
         into the primary media stream (e.g. DTMF).
         </div>


        @param {boolean} value
        @return {void}
        */
        setIsInjected(value: boolean): void;
        /**<span id='method-fm.icelink.MediaFormat-setIsPacketized'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating that the data is packetized
         for network transmission.
         </div>


        @param {boolean} value
        @return {void}
        */
        setIsPacketized(value: boolean): void;
        /**<span id='method-fm.icelink.MediaFormat-setName'>&nbsp;</span>**/
        /**
         <div>
         Sets the name.
         </div>


        @param {string} value
        @return {void}
        */
        setName(value: string): void;
        /**<span id='method-fm.icelink.MediaFormat-setStaticPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Sets the static payload type, if this format
         has a static payload type registered with IANA.
         </div>


        @param {number} value
        @return {void}
        */
        protected setStaticPayloadType(value: number): void;
        /**<span id='method-fm.icelink.MediaFormat-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An audio format.
     </div>

    */
    class AudioFormat extends fm.icelink.MediaFormat<fm.icelink.AudioFormat> {
        getTypeString(): string;
        private fmicelinkAudioFormatInit();
        /**<span id='method-fm.icelink.AudioFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.audioFormat` class.
         </div>

        @param {string} name The name.
        @param {number} clockRate The clock rate.
        @param {number} channelCount The channel count.
        @return {}
        */
        constructor(name: string, clockRate: number, channelCount: number);
        /**<span id='method-fm.icelink.AudioFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.audioFormat` class.
         </div>

        @param {string} name The name.
        @param {fm.icelink.AudioConfig} config The configuration.
        @return {}
        */
        constructor(name: string, config: fm.icelink.AudioConfig);
        /**<span id='method-fm.icelink.AudioFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.audioFormat` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.AudioFormat-getDtmfName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the DTMF audio format ("telephone-event").
         </div>


        @return {string}
        */
        static getDtmfName(): string;
        /**<span id='method-fm.icelink.AudioFormat-getOpusName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the Opus audio format ("opus").
         </div>


        @return {string}
        */
        static getOpusName(): string;
        /**<span id='method-fm.icelink.AudioFormat-getPcmaName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the PCMA audio format ("PCMA").
         </div>


        @return {string}
        */
        static getPcmaName(): string;
        /**<span id='method-fm.icelink.AudioFormat-getPcmName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the PCM audio format ("PCM").
         </div>


        @return {string}
        */
        static getPcmName(): string;
        /**<span id='method-fm.icelink.AudioFormat-getPcmuName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the PCMU audio format ("PCMU").
         </div>


        @return {string}
        */
        static getPcmuName(): string;
        /**<span id='method-fm.icelink.AudioFormat-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {fm.icelink.AudioFormat}
        */
        clone(): fm.icelink.AudioFormat;
        /**<span id='method-fm.icelink.AudioFormat-createInstance'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {fm.icelink.AudioFormat}
        */
        protected createInstance(): fm.icelink.AudioFormat;
        /**<span id='method-fm.icelink.AudioFormat-getChannelCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the channel count.
         </div>


        @return {number}
        */
        getChannelCount(): number;
        /**<span id='method-fm.icelink.AudioFormat-getConfig'>&nbsp;</span>**/
        /**
         <div>
         Gets the clock rate and channel count as a configuration.
         </div>


        @return {fm.icelink.AudioConfig}
        */
        getConfig(): fm.icelink.AudioConfig;
        /**<span id='method-fm.icelink.AudioFormat-getIsDtmf'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is DTMF.
         </div>


        @return {boolean}
        */
        getIsDtmf(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getIsOpus'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is Opus.
         </div>


        @return {boolean}
        */
        getIsOpus(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getIsPcm'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is PCM.
         </div>


        @return {boolean}
        */
        getIsPcm(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getIsPcma'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is PCMA.
         </div>


        @return {boolean}
        */
        getIsPcma(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getIsPcmu'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is PCMU.
         </div>


        @return {boolean}
        */
        getIsPcmu(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getLittleEndian'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the format uses little endian byte order.
         </div>


        @return {boolean}
        */
        getLittleEndian(): boolean;
        /**<span id='method-fm.icelink.AudioFormat-getParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets the parameters.
         </div>


        @return {string}
        */
        getParameters(): string;
        /**<span id='method-fm.icelink.AudioFormat-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified format is equivalent.
         </div>

        @param {fm.icelink.AudioFormat} format The format.
        @param {boolean} ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
        @return {boolean}
        */
        isEquivalent(format: fm.icelink.AudioFormat, ignoreIsPacketized: boolean): boolean;
        /**<span id='method-fm.icelink.AudioFormat-setChannelCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the channel count.
         </div>


        @param {number} value
        @return {void}
        */
        setChannelCount(value: number): void;
        /**<span id='method-fm.icelink.AudioFormat-setLittleEndian'>&nbsp;</span>**/
        /**
         <div>
         Sets whether the format uses little endian byte order.
         </div>


        @param {boolean} value
        @return {void}
        */
        setLittleEndian(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media sink base properties/methods.
     </div>

    */
    abstract class MediaSinkBase extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.MediaSinkBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.MediaSinkBase-getTag'>&nbsp;</span>**/
        /**
         <div>
         Gets an optional tag to identify this instance.
         </div>


        @return {string}
        */
        getTag(): string;
        /**<span id='method-fm.icelink.MediaSinkBase-setTag'>&nbsp;</span>**/
        /**
         <div>
         Sets an optional tag to identify this instance.
         </div>


        @param {string} value
        @return {void}
        */
        setTag(value: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media source base properties/methods.
     </div>

    */
    abstract class MediaSourceBase extends fm.icelink.Dynamic {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.MediaSourceBase-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.MediaSourceBase-getTag'>&nbsp;</span>**/
        /**
         <div>
         Gets an optional tag to identify this instance.
         </div>


        @return {string}
        */
        getTag(): string;
        /**<span id='method-fm.icelink.MediaSourceBase-setTag'>&nbsp;</span>**/
        /**
         <div>
         Sets an optional tag to identify this instance.
         </div>


        @param {string} value
        @return {void}
        */
        setTag(value: string): void;
        /**<span id='method-fm.icelink.MediaSourceBase-start'>&nbsp;</span>**/
        /**
         <div>
         Starts this instance.
         </div>


        @return {fm.icelink.Future<Object>}
        */
        abstract start(): fm.icelink.Future<Object>;
        /**<span id='method-fm.icelink.MediaSourceBase-stop'>&nbsp;</span>**/
        /**
         <div>
         Stops this instance.
         </div>


        @return {fm.icelink.Future<Object>}
        */
        abstract stop(): fm.icelink.Future<Object>;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Stream interface.
     </div>

    */
    interface IStream {
        addOnDirectionChange(value: fm.icelink.IAction0): void;
        addOnStateChange(value: fm.icelink.IAction0): void;
        changeDirection(newDirection: fm.icelink.StreamDirection): fm.icelink.Error;
        getDirection(): fm.icelink.StreamDirection;
        getId(): string;
        getLabel(): string;
        getLocalDirection(): fm.icelink.StreamDirection;
        getLocalReceive(): boolean;
        getLocalSend(): boolean;
        getRemoteDirection(): fm.icelink.StreamDirection;
        getRemoteReceive(): boolean;
        getRemoteSend(): boolean;
        getState(): fm.icelink.StreamState;
        getTag(): string;
        getType(): fm.icelink.StreamType;
        removeOnDirectionChange(value: fm.icelink.IAction0): void;
        removeOnStateChange(value: fm.icelink.IAction0): void;
        setLocalDirection(value: fm.icelink.StreamDirection): void;
        setLocalReceive(value: boolean): void;
        setLocalSend(value: boolean): void;
        setTag(value: string): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media stream interface.
     </div>

    */
    interface IMediaStream extends fm.icelink.IStream {
        getLocalBandwidth(): number;
        getMuted(): boolean;
        getRemoteBandwidth(): number;
        setLocalBandwidth(value: number): void;
        setMuted(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Audio stream interface.
     </div>

    */
    interface IAudioStream extends fm.icelink.IMediaStream, fm.icelink.IStream {
        addOnReceiveDtmfTone(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        addOnReceiveDtmfToneChange(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        addOnSendDtmfTone(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        addOnSendDtmfToneChange(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        insertDtmfTone(dtmfTone: fm.icelink.dtmf.Tone): boolean;
        insertDtmfTones(dtmfTones: fm.icelink.dtmf.Tone[]): boolean;
        removeOnReceiveDtmfTone(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        removeOnReceiveDtmfToneChange(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        removeOnSendDtmfTone(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
        removeOnSendDtmfToneChange(value: fm.icelink.IAction1<fm.icelink.dtmf.Tone>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media track interface.
     </div>

    */
    interface IMediaTrack {
        addOnDestroyed(value: fm.icelink.IAction0): void;
        addOnStarted(value: fm.icelink.IAction0): void;
        addOnStopped(value: fm.icelink.IAction0): void;
        changeSinkOutput(sinkOutput: fm.icelink.SinkOutput): fm.icelink.Future<Object>;
        changeSourceInput(sourceInput: fm.icelink.SourceInput): fm.icelink.Future<Object>;
        destroy(): boolean;
        getMuted(): boolean;
        getSinkOutput(): fm.icelink.SinkOutput;
        getSinkOutputs(): fm.icelink.Future<fm.icelink.SinkOutput[]>;
        getSourceInput(): fm.icelink.SourceInput;
        getSourceInputs(): fm.icelink.Future<fm.icelink.SourceInput[]>;
        removeOnDestroyed(value: fm.icelink.IAction0): void;
        removeOnStarted(value: fm.icelink.IAction0): void;
        removeOnStopped(value: fm.icelink.IAction0): void;
        setMuted(value: boolean): void;
        setSinkOutput(value: fm.icelink.SinkOutput): void;
        setSourceInput(value: fm.icelink.SourceInput): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Audio track interface.
     </div>

    */
    interface IAudioTrack extends fm.icelink.IMediaTrack {
        addOnLevel(value: fm.icelink.IAction1<number>): void;
        getGain(): number;
        getVolume(): number;
        removeOnLevel(value: fm.icelink.IAction1<number>): void;
        setGain(value: number): void;
        setVolume(value: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A candidate.
     </div>

    */
    class Candidate {
        getTypeString(): string;
        private fmicelinkCandidateInit();
        constructor();
        /**<span id='method-fm.icelink.Candidate-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} candidateJson The JSON to deserialize.
        @return {fm.icelink.Candidate}
         The deserialized candidate.
 
        */
        static fromJson(candidateJson: string): fm.icelink.Candidate;
        /**<span id='method-fm.icelink.Candidate-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.Candidate} candidate The candidate to serialize.
        @return {string}
         The serialized JSON.
 
        */
        static toJson(candidate: fm.icelink.Candidate): string;
        /**<span id='method-fm.icelink.Candidate-getDispatched'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this candidate has been
         already been dispatched as a part of a session description.
         </div>


        @return {boolean}
        */
        getDispatched(): boolean;
        /**<span id='method-fm.icelink.Candidate-getSdpCandidateAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP candidate attribute.
         </div>


        @return {fm.icelink.sdp.ice.CandidateAttribute}
        */
        getSdpCandidateAttribute(): fm.icelink.sdp.ice.CandidateAttribute;
        /**<span id='method-fm.icelink.Candidate-getSdpMediaIndex'>&nbsp;</span>**/
        /**
         <div>
         Gets the media index.
         </div>


        @return {number}
        */
        getSdpMediaIndex(): number;
        /**<span id='method-fm.icelink.Candidate-getTurnTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol used by this candidate when communicating with the TURN (relay) server.
         </div>


        @return {fm.icelink.ProtocolType}
        */
        getTurnTransportProtocol(): fm.icelink.ProtocolType;
        /**<span id='method-fm.icelink.Candidate-setDispatched'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether this candidate has been
         already been dispatched as a part of a session description.
         </div>


        @param {boolean} value
        @return {void}
        */
        setDispatched(value: boolean): void;
        /**<span id='method-fm.icelink.Candidate-setSdpCandidateAttribute'>&nbsp;</span>**/
        /**
         <div>
         Sets the SDP candidate attribute.
         </div>


        @param {fm.icelink.sdp.ice.CandidateAttribute} value
        @return {void}
        */
        setSdpCandidateAttribute(value: fm.icelink.sdp.ice.CandidateAttribute): void;
        /**<span id='method-fm.icelink.Candidate-setSdpMediaIndex'>&nbsp;</span>**/
        /**
         <div>
         Sets the media index.
         </div>


        @param {number} value
        @return {void}
        */
        setSdpMediaIndex(value: number): void;
        /**<span id='method-fm.icelink.Candidate-setTurnTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Sets the protocol used by this candidate when communicating with the TURN (relay) server.
         </div>


        @param {fm.icelink.ProtocolType} value
        @return {void}
        */
        setTurnTransportProtocol(value: fm.icelink.ProtocolType): void;
        /**<span id='method-fm.icelink.Candidate-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>


        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    class CandidatePairStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.CandidatePairState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class CandidateTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.CandidateType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class CodecTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.CodecType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A color.
     </div>

    */
    class Color {
        getTypeString(): string;
        private fmicelinkColorInit();
        /**<span id='method-fm.icelink.Color-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.color` class.
         </div>

        @param {number} r The red value (0-255).
        @param {number} g The green value (0-255).
        @param {number} b The blue value (0-255).
        @return {}
        */
        constructor(r: number, g: number, b: number);
        /**<span id='method-fm.icelink.Color-fromHsb'>&nbsp;</span>**/
        /**
         <div>
         Creates a `fm.icelink.color` using hue, saturation, and brightness.
         </div>

        @param {number} hue The hue value (0-359).
        @param {number} saturation The saturation value (0.0-1.0).
        @param {number} brightness The brightness value (0.0-1.0).
        @return {fm.icelink.Color}
        */
        static fromHsb(hue: number, saturation: number, brightness: number): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getBlack'>&nbsp;</span>**/
        /**
         <div>
         Gets a black color.
         </div>


        @return {fm.icelink.Color}
        */
        static getBlack(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getBlue'>&nbsp;</span>**/
        /**
         <div>
         Gets a blue color.
         </div>


        @return {fm.icelink.Color}
        */
        static getBlue(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getCyan'>&nbsp;</span>**/
        /**
         <div>
         Gets a cyan color.
         </div>


        @return {fm.icelink.Color}
        */
        static getCyan(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getDarkBlue'>&nbsp;</span>**/
        /**
         <div>
         Gets a dark-blue color.
         </div>


        @return {fm.icelink.Color}
        */
        static getDarkBlue(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getDarkGreen'>&nbsp;</span>**/
        /**
         <div>
         Gets a dark-green color.
         </div>


        @return {fm.icelink.Color}
        */
        static getDarkGreen(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getDarkRed'>&nbsp;</span>**/
        /**
         <div>
         Gets a dark-red color.
         </div>


        @return {fm.icelink.Color}
        */
        static getDarkRed(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getGray'>&nbsp;</span>**/
        /**
         <div>
         Gets a gray color.
         </div>


        @return {fm.icelink.Color}
        */
        static getGray(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getGreen'>&nbsp;</span>**/
        /**
         <div>
         Gets a green color.
         </div>


        @return {fm.icelink.Color}
        */
        static getGreen(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getMagenta'>&nbsp;</span>**/
        /**
         <div>
         Gets a magenta color.
         </div>


        @return {fm.icelink.Color}
        */
        static getMagenta(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getOlive'>&nbsp;</span>**/
        /**
         <div>
         Gets an olive color.
         </div>


        @return {fm.icelink.Color}
        */
        static getOlive(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getPurple'>&nbsp;</span>**/
        /**
         <div>
         Gets a purple color.
         </div>


        @return {fm.icelink.Color}
        */
        static getPurple(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getRed'>&nbsp;</span>**/
        /**
         <div>
         Gets a red color.
         </div>


        @return {fm.icelink.Color}
        */
        static getRed(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getTeal'>&nbsp;</span>**/
        /**
         <div>
         Gets a teal color.
         </div>


        @return {fm.icelink.Color}
        */
        static getTeal(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getWhite'>&nbsp;</span>**/
        /**
         <div>
         Gets a white color.
         </div>


        @return {fm.icelink.Color}
        */
        static getWhite(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getYellow'>&nbsp;</span>**/
        /**
         <div>
         Gets a yellow color.
         </div>


        @return {fm.icelink.Color}
        */
        static getYellow(): fm.icelink.Color;
        /**<span id='method-fm.icelink.Color-getB'>&nbsp;</span>**/
        /**
         <div>
         Gets the blue value (0-255).
         </div>


        @return {number}
        */
        getB(): number;
        /**<span id='method-fm.icelink.Color-getG'>&nbsp;</span>**/
        /**
         <div>
         Gets the green value (0-255).
         </div>


        @return {number}
        */
        getG(): number;
        /**<span id='method-fm.icelink.Color-getR'>&nbsp;</span>**/
        /**
         <div>
         Gets the red value (0-255).
         </div>


        @return {number}
        */
        getR(): number;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Connection interface.
     </div>

    */
    interface IConnection<TConnection, TStream, TAudioStream, TVideoStream, TDataStream> {
        addIceServer(iceServer: fm.icelink.IceServer): void;
        addIceServers(iceServers: fm.icelink.IceServer[]): void;
        addOnExternalIdChange(value: fm.icelink.IAction2<string, string>): void;
        addOnGatheringStateChange(value: fm.icelink.IAction1<TConnection>): void;
        addOnIceConnectionStateChange(value: fm.icelink.IAction1<TConnection>): void;
        addOnLocalCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        addOnLocalDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        addOnRemoteCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        addOnRemoteDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        addOnSignallingStateChange(value: fm.icelink.IAction1<TConnection>): void;
        addOnStateChange(value: fm.icelink.IAction1<TConnection>): void;
        addRemoteCandidate(remoteCandidate: fm.icelink.Candidate): fm.icelink.Future<fm.icelink.Candidate>;
        close(): void;
        createAnswer(): fm.icelink.Future<fm.icelink.SessionDescription>;
        createOffer(): fm.icelink.Future<fm.icelink.SessionDescription>;
        getAudioStream(): TAudioStream;
        getAudioStreams(): TAudioStream[];
        getDataStream(): TDataStream;
        getDataStreams(): TDataStream[];
        getDeadStreamTimeout(): number;
        getError(): fm.icelink.Error;
        getExternalId(): string;
        getGatheringState(): fm.icelink.IceGatheringState;
        getHasAudio(): boolean;
        getHasData(): boolean;
        getHasVideo(): boolean;
        getIceConnectionState(): fm.icelink.IceConnectionState;
        getIceGatherPolicy(): fm.icelink.IceGatherPolicy;
        getIceServer(): fm.icelink.IceServer;
        getIceServers(): fm.icelink.IceServer[];
        getId(): string;
        getLocalDescription(): fm.icelink.SessionDescription;
        getRemoteDescription(): fm.icelink.SessionDescription;
        getSignallingState(): fm.icelink.SignallingState;
        getState(): fm.icelink.ConnectionState;
        getStats(): fm.icelink.Future<fm.icelink.ConnectionStats>;
        getStreams(): TStream[];
        getTieBreaker(): string;
        getTimeout(): number;
        getTrickleIcePolicy(): fm.icelink.TrickleIcePolicy;
        getVideoStream(): TVideoStream;
        getVideoStreams(): TVideoStream[];
        removeIceServer(iceServer: fm.icelink.IceServer): void;
        removeIceServers(iceServers: fm.icelink.IceServer[]): void;
        removeOnExternalIdChange(value: fm.icelink.IAction2<string, string>): void;
        removeOnGatheringStateChange(value: fm.icelink.IAction1<TConnection>): void;
        removeOnIceConnectionStateChange(value: fm.icelink.IAction1<TConnection>): void;
        removeOnLocalCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        removeOnLocalDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        removeOnRemoteCandidate(value: fm.icelink.IAction2<TConnection, fm.icelink.Candidate>): void;
        removeOnRemoteDescription(value: fm.icelink.IAction2<TConnection, fm.icelink.SessionDescription>): void;
        removeOnSignallingStateChange(value: fm.icelink.IAction1<TConnection>): void;
        removeOnStateChange(value: fm.icelink.IAction1<TConnection>): void;
        setDeadStreamTimeout(value: number): void;
        setExternalId(value: string): void;
        setIceGatherPolicy(value: fm.icelink.IceGatherPolicy): void;
        setIceServer(value: fm.icelink.IceServer): void;
        setIceServers(value: fm.icelink.IceServer[]): void;
        setLocalDescription(localDescription: fm.icelink.SessionDescription): fm.icelink.Future<fm.icelink.SessionDescription>;
        setRemoteDescription(remoteDescription: fm.icelink.SessionDescription): fm.icelink.Future<fm.icelink.SessionDescription>;
        setTieBreaker(value: string): void;
        setTimeout(value: number): void;
        setTrickleIcePolicy(value: fm.icelink.TrickleIcePolicy): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of connections.
     </div>

    */
    class ConnectionCollection extends fm.icelink.Collection<fm.icelink.Connection, fm.icelink.ConnectionCollection> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.ConnectionCollection-addSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is added to the collection.
         </div>

        @param {fm.icelink.Connection} value The value.
        @return {void}
        */
        protected addSuccess(value: fm.icelink.Connection): void;
        /**<span id='method-fm.icelink.ConnectionCollection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<fm.icelink.Connection>} list The list.
        @return {fm.icelink.Connection[]}
        */
        protected arrayFromList(list: Array<fm.icelink.Connection>): fm.icelink.Connection[];
        /**<span id='method-fm.icelink.ConnectionCollection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {fm.icelink.ConnectionCollection}
        */
        protected createCollection(): fm.icelink.ConnectionCollection;
        /**<span id='method-fm.icelink.ConnectionCollection-getByExternalId'>&nbsp;</span>**/
        /**
         <div>
         Gets a connection by extenral connection ID.
         </div>

        @param {string} id The external connection identifier.
        @return {fm.icelink.Connection} The connection, or null if the connection does not exist.
        */
        getByExternalId(id: string): fm.icelink.Connection;
        /**<span id='method-fm.icelink.ConnectionCollection-getById'>&nbsp;</span>**/
        /**
         <div>
         Gets a connection by internal connection ID.
         </div>

        @param {string} id The internal connection identifier.
        @return {fm.icelink.Connection} The connection, or null if the connection does not exist.
        */
        getById(id: string): fm.icelink.Connection;
        /**<span id='method-fm.icelink.ConnectionCollection-removeSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is removed from the collection.
         </div>

        @param {fm.icelink.Connection} value The value.
        @return {void}
        */
        protected removeSuccess(value: fm.icelink.Connection): void;
        /**<span id='method-fm.icelink.ConnectionCollection-tryGetByExternalId'>&nbsp;</span>**/
        /**
         <div>
         Tries to get a connection by external connection ID.
         </div>

        @param {string} id The internal Connection identifier.
        @param {fm.icelink.Holder<fm.icelink.Connection>} connection The connection.
        @return {boolean} The connection, or null if the connection does not exist.
        */
        tryGetByExternalId(id: string, connection: fm.icelink.Holder<fm.icelink.Connection>): boolean;
        /**<span id='method-fm.icelink.ConnectionCollection-tryGetById'>&nbsp;</span>**/
        /**
         <div>
         Tries to get a connection by internal connection ID.
         </div>

        @param {string} id The internal Connection identifier.
        @param {fm.icelink.Holder<fm.icelink.Connection>} connection The connection.
        @return {boolean} The connection, or null if the connection does not exist.
        */
        tryGetById(id: string, connection: fm.icelink.Holder<fm.icelink.Connection>): boolean;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A state machine for data channel states.
     </div>

    */
    class DataChannelStateMachine extends fm.icelink.StateMachine<fm.icelink.DataChannelState> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.DataChannelStateMachine-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.dataChannelStateMachine` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.DataChannelStateMachine-stateToValue'>&nbsp;</span>**/
        /**
         <div>
         Converts a state to an integer value.
         </div>

        @param {fm.icelink.DataChannelState} state The state.
        @return {number}
        */
        protected stateToValue(state: fm.icelink.DataChannelState): number;
        /**<span id='method-fm.icelink.DataChannelStateMachine-valueToState'>&nbsp;</span>**/
        /**
         <div>
         Converts an integer value to a state.
         </div>

        @param {number} value The integer value.
        @return {fm.icelink.DataChannelState}
        */
        protected valueToState(value: number): fm.icelink.DataChannelState;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     View sink interface.
     </div>

    */
    interface IViewSink<TView> {
        getView(): TView;
        getViewMirror(): boolean;
        getViewScale(): fm.icelink.LayoutScale;
        setViewMirror(value: boolean): void;
        setViewScale(value: fm.icelink.LayoutScale): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A state machine for stream states.
     </div>

    */
    class StreamStateMachine extends fm.icelink.StateMachine<fm.icelink.StreamState> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.StreamStateMachine-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.streamStateMachine` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.StreamStateMachine-stateToValue'>&nbsp;</span>**/
        /**
         <div>
         Converts a state to an integer value.
         </div>

        @param {fm.icelink.StreamState} state The state.
        @return {number}
        */
        protected stateToValue(state: fm.icelink.StreamState): number;
        /**<span id='method-fm.icelink.StreamStateMachine-valueToState'>&nbsp;</span>**/
        /**
         <div>
         Converts an integer value to a state.
         </div>

        @param {number} value The integer value.
        @return {fm.icelink.StreamState}
        */
        protected valueToState(value: number): fm.icelink.StreamState;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A state machine for connection states.
     </div>

    */
    class ConnectionStateMachine extends fm.icelink.StateMachine<fm.icelink.ConnectionState> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.ConnectionStateMachine-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.connectionStateMachine` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.ConnectionStateMachine-stateToValue'>&nbsp;</span>**/
        /**
         <div>
         Converts a state to an integer value.
         </div>

        @param {fm.icelink.ConnectionState} state The state.
        @return {number}
        */
        protected stateToValue(state: fm.icelink.ConnectionState): number;
        /**<span id='method-fm.icelink.ConnectionStateMachine-valueToState'>&nbsp;</span>**/
        /**
         <div>
         Converts an integer value to a state.
         </div>

        @param {number} value The integer value.
        @return {fm.icelink.ConnectionState}
        */
        protected valueToState(value: number): fm.icelink.ConnectionState;
    }
}
declare namespace fm.icelink {
    class ConnectionStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.ConnectionState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data channel interface.
     </div>

    */
    interface IDataChannel<TDataChannel> {
        addOnStateChange(value: fm.icelink.IAction1<TDataChannel>): void;
        getId(): string;
        getLabel(): string;
        getOnReceive(): fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>;
        getOrdered(): boolean;
        getState(): fm.icelink.DataChannelState;
        getSubprotocol(): string;
        removeOnStateChange(value: fm.icelink.IAction1<TDataChannel>): void;
        sendDataBytes(dataBytes: fm.icelink.DataBuffer): fm.icelink.Future<Object>;
        sendDataString(dataString: string): fm.icelink.Future<Object>;
        setOnReceive(value: fm.icelink.IAction1<fm.icelink.DataChannelReceiveArgs>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of data channels.
     </div>

    */
    class DataChannelCollection extends fm.icelink.Collection<fm.icelink.DataChannel, fm.icelink.DataChannelCollection> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.DataChannelCollection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<fm.icelink.DataChannel>} list The list.
        @return {fm.icelink.DataChannel[]}
        */
        protected arrayFromList(list: Array<fm.icelink.DataChannel>): fm.icelink.DataChannel[];
        /**<span id='method-fm.icelink.DataChannelCollection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {fm.icelink.DataChannelCollection}
        */
        protected createCollection(): fm.icelink.DataChannelCollection;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Arguments for the data channel receive event.
     </div>

    */
    class DataChannelReceiveArgs {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.DataChannelReceiveArgs-getDataBytes'>&nbsp;</span>**/
        /**
         <div>
         Gets the data buffer.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getDataBytes(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.DataChannelReceiveArgs-getDataString'>&nbsp;</span>**/
        /**
         <div>
         Gets the data string.
         </div>


        @return {string}
        */
        getDataString(): string;
        /**<span id='method-fm.icelink.DataChannelReceiveArgs-setDataBytes'>&nbsp;</span>**/
        /**
         <div>
         Sets the data buffer.
         </div>


        @param {fm.icelink.DataBuffer} value
        @return {void}
        */
        setDataBytes(value: fm.icelink.DataBuffer): void;
        /**<span id='method-fm.icelink.DataChannelReceiveArgs-setDataString'>&nbsp;</span>**/
        /**
         <div>
         Sets the data string.
         </div>


        @param {string} value
        @return {void}
        */
        setDataString(value: string): void;
    }
}
declare namespace fm.icelink {
    class DataChannelStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.DataChannelState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data stream interface.
     </div>

    */
    interface IDataStream<TDataChannel> extends fm.icelink.IStream {
        getChannels(): TDataChannel[];
    }
}
declare namespace fm.icelink {
    class EncryptionModeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.EncryptionMode);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class EncryptionPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.EncryptionPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A video format.
     </div>

    */
    class VideoFormat extends fm.icelink.MediaFormat<fm.icelink.VideoFormat> {
        getTypeString(): string;
        /**<span id='method-fm.icelink.VideoFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoFormat` class.
         </div>

        @param {string} name The name.
        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(name: string, clockRate: number);
        /**<span id='method-fm.icelink.VideoFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoFormat` class.
         </div>

        @param {string} name The name.
        @return {}
        */
        constructor(name: string);
        /**<span id='method-fm.icelink.VideoFormat-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoFormat` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.VideoFormat-formatNameToFourCC'>&nbsp;</span>**/
        /**
         <div>
         Converts a format name to its FourCC value.
         </div>

        @param {string} formatName The format name.
        @return {number} The FourCC value, or 0 if the format name is not recognized.
        */
        static formatNameToFourCC(formatName: string): number;
        /**<span id='method-fm.icelink.VideoFormat-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} videoFormatJson The video format JSON.
        @return {fm.icelink.VideoFormat}
        */
        static fromJson(videoFormatJson: string): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getAbgr'>&nbsp;</span>**/
        /**
         <div>
         Gets an ABGR video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getAbgr(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getAbgrName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the ABGR video format ("ABGR").
         Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).
         </div>


        @return {string}
        */
        static getAbgrName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getArgb'>&nbsp;</span>**/
        /**
         <div>
         Gets an ARGB video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getArgb(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getArgbName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the ARGB video format ("ARGB").
         Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).
         </div>


        @return {string}
        */
        static getArgbName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getBgr'>&nbsp;</span>**/
        /**
         <div>
         Gets a BGR video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getBgr(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getBgra'>&nbsp;</span>**/
        /**
         <div>
         Gets an BGRA video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getBgra(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getBgraName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the BGRA video format ("BGRA").
         Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).
         </div>


        @return {string}
        */
        static getBgraName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getBgrName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the BGR video format ("BGR").
         Indicates that each pixel occupies 24 bits (8 bits for blue, then8 bits for green, then 8 bits for red).
         </div>


        @return {string}
        */
        static getBgrName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getH264'>&nbsp;</span>**/
        /**
         <div>
         Gets an H.264 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getH264(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getH264Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the H.264 video format ("H264").
         </div>


        @return {string}
        */
        static getH264Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getI420'>&nbsp;</span>**/
        /**
         <div>
         Gets an I420 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getI420(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getI420Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the I420 video format ("I420").
         Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
         Y plane is followed by U plane and then V plane.
         </div>


        @return {string}
        */
        static getI420Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getNv12'>&nbsp;</span>**/
        /**
         <div>
         Gets an NV12 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getNv12(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getNv12Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the NV12 video format ("NV12").
         Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
         Y plane is followed by interleaved U/V plane.
         </div>


        @return {string}
        */
        static getNv12Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getNv21'>&nbsp;</span>**/
        /**
         <div>
         Gets an NV21 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getNv21(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getNv21Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the NV21 video format ("NV21").
         Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
         Y plane is followed by interleaved V/U plane.
         </div>


        @return {string}
        */
        static getNv21Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getRgb'>&nbsp;</span>**/
        /**
         <div>
         Gets an RGB video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getRgb(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getRgba'>&nbsp;</span>**/
        /**
         <div>
         Gets an RGBA video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getRgba(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getRgbaName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the RGBA video format ("RGBA").
         Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).
         </div>


        @return {string}
        */
        static getRgbaName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getRgbName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the RGB video format ("RGB").
         Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).
         </div>


        @return {string}
        */
        static getRgbName(): string;
        /**<span id='method-fm.icelink.VideoFormat-getVp8'>&nbsp;</span>**/
        /**
         <div>
         Gets a VP8 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getVp8(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getVp8Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the VP8 video format ("VP8").
         </div>


        @return {string}
        */
        static getVp8Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getVp9'>&nbsp;</span>**/
        /**
         <div>
         Gets a VP9 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getVp9(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getVp9Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the VP9 video format ("VP9").
         </div>


        @return {string}
        */
        static getVp9Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-getYv12'>&nbsp;</span>**/
        /**
         <div>
         Gets a YV12 video format.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        static getYv12(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-getYv12Name'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the YV12 video format ("YV12").
         Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
         Y plane is followed by V plane and then U plane.
         </div>


        @return {string}
        */
        static getYv12Name(): string;
        /**<span id='method-fm.icelink.VideoFormat-toFourCC'>&nbsp;</span>**/
        /**
         <div>
         Converts a FourCC string to a int.
         </div>

        @param {string} fourcc The fourcc.
        @return {number}
        */
        static toFourCC(fourcc: string): number;
        /**<span id='method-fm.icelink.VideoFormat-toFourCC'>&nbsp;</span>**/
        /**
         <div>
         Converts 4 FourCC characters to an int.
         </div>


        @param {number} a
        @param {number} b
        @param {number} c
        @param {number} d
        @return {number}
        */
        static toFourCC(a: number, b: number, c: number, d: number): number;
        /**<span id='method-fm.icelink.VideoFormat-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.VideoFormat} videoFormat The video format.
        @return {string}
        */
        static toJson(videoFormat: fm.icelink.VideoFormat): string;
        /**<span id='method-fm.icelink.VideoFormat-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        clone(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-createInstance'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {fm.icelink.VideoFormat}
        */
        protected createInstance(): fm.icelink.VideoFormat;
        /**<span id='method-fm.icelink.VideoFormat-fourCCToFormatName'>&nbsp;</span>**/
        /**
         <div>
         Converts a FourCC value to its format name.
         </div>

        @param {number} fourcc The FourCC value.
        @return {string} The format name, or an empty string if the FourCC value is not recognized.
        */
        fourCCToFormatName(fourcc: number): string;
        /**<span id='method-fm.icelink.VideoFormat-getFourCC'>&nbsp;</span>**/
        /**
         <div>
         Gets the FourCC value for this format.
         </div>


        @return {number}
        */
        getFourCC(): number;
        /**<span id='method-fm.icelink.VideoFormat-getIsAbgr'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is ABGR.
         </div>


        @return {boolean}
        */
        getIsAbgr(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsArgb'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is ARGB.
         </div>


        @return {boolean}
        */
        getIsArgb(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsBgr'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is BGR.
         </div>


        @return {boolean}
        */
        getIsBgr(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsBgra'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is BGRA.
         </div>


        @return {boolean}
        */
        getIsBgra(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsH264'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is H.264.
         </div>


        @return {boolean}
        */
        getIsH264(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsI420'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is I420.
         </div>


        @return {boolean}
        */
        getIsI420(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsNv12'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is NV12.
         </div>


        @return {boolean}
        */
        getIsNv12(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsNv21'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is NV21.
         </div>


        @return {boolean}
        */
        getIsNv21(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsRaw'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is RGB, BGR,
         I420, YV12, NV12, NV21, RGBA, BGRA, ARGB, or ABGR.
         </div>


        @return {boolean}
        */
        getIsRaw(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsRgb'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is RGB.
         </div>


        @return {boolean}
        */
        getIsRgb(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsRgba'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is RGBA.
         </div>


        @return {boolean}
        */
        getIsRgba(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsRgbaType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is
         RGBA, BGRA, ARGB, or ABGR.
         </div>


        @return {boolean}
        */
        getIsRgbaType(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsRgbType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is RGB or BGR.
         </div>


        @return {boolean}
        */
        getIsRgbType(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsVp8'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is VP8.
         </div>


        @return {boolean}
        */
        getIsVp8(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsVp9'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is VP9.
         </div>


        @return {boolean}
        */
        getIsVp9(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsYuvType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is
         I420, YV12, NV12, or NV21.
         </div>


        @return {boolean}
        */
        getIsYuvType(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getIsYv12'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this format is YV12.
         </div>


        @return {boolean}
        */
        getIsYv12(): boolean;
        /**<span id='method-fm.icelink.VideoFormat-getParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets the parameters.
         </div>


        @return {string}
        */
        getParameters(): string;
        /**<span id='method-fm.icelink.VideoFormat-setFourCC'>&nbsp;</span>**/
        /**
         <div>
         Sets the FourCC value for this format.
         </div>


        @param {number} value
        @return {void}
        */
        setFourCC(value: number): void;
        /**<span id='method-fm.icelink.VideoFormat-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink.h264 {
    /**
     <div>
     An H.264 format.
     </div>

    */
    class Format extends fm.icelink.VideoFormat {
        getTypeString(): string;
        /**<span id='method-fm.icelink.h264.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.h264.format` class.
         </div>

        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(clockRate: number);
        /**<span id='method-fm.icelink.h264.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.h264.format` class.
         </div>


        @return {}
        */
        constructor();
    }
}
declare namespace fm.icelink {
    class IceConnectionStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.IceConnectionState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class IceGatheringStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.IceGatheringState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class IceGatherPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.IceGatherPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An ICE server.
     </div>

    */
    class IceServer {
        getTypeString(): string;
        /**<span id='method-fm.icelink.IceServer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.iceServer` class.
         </div>

        @param {string} url The URL.
        @return {}
        */
        constructor(url: string);
        /**<span id='method-fm.icelink.IceServer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.iceServer` class.
         </div>

        @param {string} url The URL.
        @param {string} username The username.
        @param {string} password The password.
        @return {}
        */
        constructor(url: string, username: string, password: string);
        constructor();
        /**<span id='method-fm.icelink.IceServer-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} iceServerJson The JSON to deserialize.
        @return {fm.icelink.IceServer} The deserialized ICE server.
        */
        static fromJson(iceServerJson: string): fm.icelink.IceServer;
        /**<span id='method-fm.icelink.IceServer-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an array of instances from JSON.
         </div>

        @param {string} iceServersJson The JSON to deserialize.
        @return {fm.icelink.IceServer[]} The deserialized ICE server array.
        */
        static fromJsonArray(iceServersJson: string): fm.icelink.IceServer[];
        /**<span id='method-fm.icelink.IceServer-getDefaultPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the default port.
         </div>


        @return {number}
        */
        static getDefaultPort(): number;
        /**<span id='method-fm.icelink.IceServer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.IceServer} iceServer The ICE server.
        @return {string}
         The serialized JSON.
 
        */
        static toJson(iceServer: fm.icelink.IceServer): string;
        /**<span id='method-fm.icelink.IceServer-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of instances to JSON.
         </div>

        @param {fm.icelink.IceServer[]} iceServers The ICE servers.
        @return {string}
         The serialized JSON.
 
        */
        static toJsonArray(iceServers: fm.icelink.IceServer[]): string;
        /**<span id='method-fm.icelink.IceServer-getHost'>&nbsp;</span>**/
        /**
         <div>
         Gets the host.
         </div>


        @return {string}
        */
        getHost(): string;
        /**<span id='method-fm.icelink.IceServer-getIsSecure'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this represents a secure STUN or TURN server.
         </div>


        @return {boolean}
        */
        getIsSecure(): boolean;
        /**<span id='method-fm.icelink.IceServer-getIsStun'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this represents a STUN server.
         </div>


        @return {boolean}
        */
        getIsStun(): boolean;
        /**<span id='method-fm.icelink.IceServer-getIsTcp'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this represents a TCP server.
         </div>


        @return {boolean}
        */
        getIsTcp(): boolean;
        /**<span id='method-fm.icelink.IceServer-getIsTurn'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this represents a TURN server.
         </div>


        @return {boolean}
        */
        getIsTurn(): boolean;
        /**<span id='method-fm.icelink.IceServer-getIsUdp'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this represents a UDP server.
         </div>


        @return {boolean}
        */
        getIsUdp(): boolean;
        /**<span id='method-fm.icelink.IceServer-getPassword'>&nbsp;</span>**/
        /**
         <div>
         Gets the password.
         </div>


        @return {string}
        */
        getPassword(): string;
        /**<span id='method-fm.icelink.IceServer-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the port.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.IceServer-getUrl'>&nbsp;</span>**/
        /**
         <div>
         Gets the URL.
         </div>


        @return {string}
        */
        getUrl(): string;
        /**<span id='method-fm.icelink.IceServer-getUsername'>&nbsp;</span>**/
        /**
         <div>
         Gets the username.
         </div>


        @return {string}
        */
        getUsername(): string;
        /**<span id='method-fm.icelink.IceServer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
         The serialized JSON.
 
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     An ICE server collection.
     </div>

    */
    class IceServerCollection extends fm.icelink.Collection<fm.icelink.IceServer, fm.icelink.IceServerCollection> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.IceServerCollection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<fm.icelink.IceServer>} list The list.
        @return {fm.icelink.IceServer[]}
        */
        protected arrayFromList(list: Array<fm.icelink.IceServer>): fm.icelink.IceServer[];
        /**<span id='method-fm.icelink.IceServerCollection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {fm.icelink.IceServerCollection}
        */
        protected createCollection(): fm.icelink.IceServerCollection;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media interface.
     </div>

    */
    interface IMedia<TIAudioTrack extends fm.icelink.IAudioTrack, TIVideoTrack extends fm.icelink.IVideoTrack> {
        addOnAudioDestroyed(value: fm.icelink.IAction0): void;
        addOnAudioLevel(value: fm.icelink.IAction1<number>): void;
        addOnVideoDestroyed(value: fm.icelink.IAction0): void;
        addOnVideoSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
        destroy(): void;
        getAudioGain(): number;
        getAudioMuted(): boolean;
        getAudioTrack(): TIAudioTrack;
        getAudioTracks(): TIAudioTrack[];
        getAudioVolume(): number;
        getId(): string;
        getVideoMuted(): boolean;
        getVideoSize(): fm.icelink.Size;
        getVideoTrack(): TIVideoTrack;
        getVideoTracks(): TIVideoTrack[];
        grabVideoFrame(): fm.icelink.Future<fm.icelink.VideoBuffer>;
        removeOnAudioDestroyed(value: fm.icelink.IAction0): void;
        removeOnAudioLevel(value: fm.icelink.IAction1<number>): void;
        removeOnVideoDestroyed(value: fm.icelink.IAction0): void;
        removeOnVideoSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
        setAudioGain(value: number): void;
        setAudioMuted(value: boolean): void;
        setAudioVolume(value: number): void;
        setVideoMuted(value: boolean): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Local media interface.
     </div>

    */
    interface ILocalMedia<TLocalMedia, TIAudioTrack extends fm.icelink.IAudioTrack, TIVideoTrack extends fm.icelink.IVideoTrack> extends fm.icelink.IMedia<TIAudioTrack, TIVideoTrack> {
        addOnAudioStarted(value: fm.icelink.IAction0): void;
        addOnAudioStopped(value: fm.icelink.IAction0): void;
        addOnVideoStarted(value: fm.icelink.IAction0): void;
        addOnVideoStopped(value: fm.icelink.IAction0): void;
        changeAudioSourceInput(audioSourceInput: fm.icelink.SourceInput): fm.icelink.Future<Object>;
        changeVideoSourceInput(videoSourceInput: fm.icelink.SourceInput): fm.icelink.Future<Object>;
        getAudioSourceInput(): fm.icelink.SourceInput;
        getAudioSourceInputs(): fm.icelink.Future<fm.icelink.SourceInput[]>;
        getState(): fm.icelink.LocalMediaState;
        getVideoSourceInput(): fm.icelink.SourceInput;
        getVideoSourceInputs(): fm.icelink.Future<fm.icelink.SourceInput[]>;
        removeOnAudioStarted(value: fm.icelink.IAction0): void;
        removeOnAudioStopped(value: fm.icelink.IAction0): void;
        removeOnVideoStarted(value: fm.icelink.IAction0): void;
        removeOnVideoStopped(value: fm.icelink.IAction0): void;
        setAudioSourceInput(value: fm.icelink.SourceInput): void;
        setVideoSourceInput(value: fm.icelink.SourceInput): void;
        start(): fm.icelink.Future<TLocalMedia>;
        stop(): fm.icelink.Future<TLocalMedia>;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Viewable media interface.
     </div>

    */
    interface IViewableMedia<TView> {
        getId(): string;
        getView(): TView;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Viewable media interface with a view sink.
     </div>

    */
    interface IViewSinkableMedia<TView, TViewSink extends fm.icelink.IViewSink<TView>> extends fm.icelink.IViewableMedia<TView> {
        getViewSink(): TViewSink;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Remote media interface.
     </div>

    */
    interface IRemoteMedia<TIAudioTrack extends fm.icelink.IAudioTrack, TIVideoTrack extends fm.icelink.IVideoTrack> extends fm.icelink.IMedia<TIAudioTrack, TIVideoTrack> {
        changeAudioSinkOutput(audioSinkOutput: fm.icelink.SinkOutput): fm.icelink.Future<Object>;
        changeVideoSinkOutput(videoSinkOutput: fm.icelink.SinkOutput): fm.icelink.Future<Object>;
        getAudioSinkOutput(): fm.icelink.SinkOutput;
        getAudioSinkOutputs(): fm.icelink.Future<fm.icelink.SinkOutput[]>;
        getVideoSinkOutput(): fm.icelink.SinkOutput;
        getVideoSinkOutputs(): fm.icelink.Future<fm.icelink.SinkOutput[]>;
        setAudioSinkOutput(value: fm.icelink.SinkOutput): void;
        setVideoSinkOutput(value: fm.icelink.SinkOutput): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Video stream interface.
     </div>

    */
    interface IVideoStream extends fm.icelink.IMediaStream, fm.icelink.IStream {
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Video track interface.
     </div>

    */
    interface IVideoTrack extends fm.icelink.IMediaTrack {
        addOnSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
        getSize(): fm.icelink.Size;
        grabFrame(): fm.icelink.Future<fm.icelink.VideoBuffer>;
        removeOnSize(value: fm.icelink.IAction1<fm.icelink.Size>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A layout definition, including local
     and remote frame definitions.
     </div>

    */
    class Layout {
        getTypeString(): string;
        private fmicelinkLayoutInit();
        constructor();
        /**<span id='method-fm.icelink.Layout-getAllFrames'>&nbsp;</span>**/
        /**
         <div>
         Gets all frames (local and remote).
         </div>


        @return {fm.icelink.LayoutFrame[]}
        */
        getAllFrames(): fm.icelink.LayoutFrame[];
        /**<span id='method-fm.icelink.Layout-getHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the layout height.
         </div>


        @return {number}
        */
        getHeight(): number;
        /**<span id='method-fm.icelink.Layout-getLocalFrame'>&nbsp;</span>**/
        /**
         <div>
         Gets the local frame.
         </div>


        @return {fm.icelink.LayoutFrame}
        */
        getLocalFrame(): fm.icelink.LayoutFrame;
        /**<span id='method-fm.icelink.Layout-getOrigin'>&nbsp;</span>**/
        /**
         <div>
         Gets the layout origin.
         </div>


        @return {fm.icelink.LayoutOrigin}
        */
        getOrigin(): fm.icelink.LayoutOrigin;
        /**<span id='method-fm.icelink.Layout-getRemoteFrames'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote frames.
         </div>


        @return {fm.icelink.LayoutFrame[]}
        */
        getRemoteFrames(): fm.icelink.LayoutFrame[];
        /**<span id='method-fm.icelink.Layout-getWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the layout width.
         </div>


        @return {number}
        */
        getWidth(): number;
        /**<span id='method-fm.icelink.Layout-setHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the layout height.
         </div>


        @param {number} value
        @return {void}
        */
        setHeight(value: number): void;
        /**<span id='method-fm.icelink.Layout-setLocalFrame'>&nbsp;</span>**/
        /**
         <div>
         Sets the local frame.
         </div>


        @param {fm.icelink.LayoutFrame} value
        @return {void}
        */
        setLocalFrame(value: fm.icelink.LayoutFrame): void;
        /**<span id='method-fm.icelink.Layout-setOrigin'>&nbsp;</span>**/
        /**
         <div>
         Sets the layout origin.
         </div>


        @param {fm.icelink.LayoutOrigin} value
        @return {void}
        */
        setOrigin(value: fm.icelink.LayoutOrigin): void;
        /**<span id='method-fm.icelink.Layout-setRemoteFrames'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote frames.
         </div>


        @param {fm.icelink.LayoutFrame[]} value
        @return {void}
        */
        setRemoteFrames(value: fm.icelink.LayoutFrame[]): void;
        /**<span id='method-fm.icelink.Layout-setWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the layout width.
         </div>


        @param {number} value
        @return {void}
        */
        setWidth(value: number): void;
        /**<span id='method-fm.icelink.Layout-swapFrames'>&nbsp;</span>**/
        /**
         <div>
         Swaps the properties of two frames.
         </div>

        @param {fm.icelink.LayoutFrame} frame1 The first frame.
        @param {fm.icelink.LayoutFrame} frame2 The second frame.
        @return {void}
        */
        swapFrames(frame1: fm.icelink.LayoutFrame, frame2: fm.icelink.LayoutFrame): void;
        /**<span id='method-fm.icelink.Layout-swapLocalFrame'>&nbsp;</span>**/
        /**
         <div>
         Swaps the local frame with a remote frame.
         </div>

        @param {number} remoteFrameIndex The index of the remote frame.
        @return {void}
        */
        swapLocalFrame(remoteFrameIndex: number): void;
        /**<span id='method-fm.icelink.Layout-swapRemoteFrames'>&nbsp;</span>**/
        /**
         <div>
         Swaps two remote frames.
         </div>

        @param {number} remoteFrameIndex1 The index of the first remote frame.
        @param {number} remoteFrameIndex2 The index of the second remote frame.
        @return {void}
        */
        swapRemoteFrames(remoteFrameIndex1: number, remoteFrameIndex2: number): void;
    }
}
declare namespace fm.icelink {
    class LayoutAlignmentWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LayoutAlignment);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class LayoutDirectionWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LayoutDirection);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A layout frame definition, including X/Y coordinates and width/height values.
     </div>

    */
    class LayoutFrame {
        getTypeString(): string;
        private fmicelinkLayoutFrameInit();
        /**<span id='method-fm.icelink.LayoutFrame-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.layoutFrame` class.
         </div>

        @param {number} x The X coordinate.
        @param {number} y The Y coordinate.
        @param {number} width The width value.
        @param {number} height The height value.
        @return {}
        */
        constructor(x: number, y: number, width: number, height: number);
        constructor();
        /**<span id='method-fm.icelink.LayoutFrame-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes a layout frame from JSON.
         </div>

        @param {string} layoutFrameJson The layout frame JSON.
        @return {fm.icelink.LayoutFrame}
        */
        static fromJson(layoutFrameJson: string): fm.icelink.LayoutFrame;
        /**<span id='method-fm.icelink.LayoutFrame-getScaledFrame'>&nbsp;</span>**/
        /**
         <div>
         Gets a scaled frame.
         </div>

        @param {fm.icelink.LayoutScale} scale The scaling algorithm to use.
        @param {number} outerWidth The width of the outer container.
        @param {number} outerHeight The height of the outer container.
        @param {number} innerWidth The width of the inner element.
        @param {number} innerHeight The height of the inner element.
        @return {fm.icelink.LayoutFrame}
        */
        static getScaledFrame(scale: fm.icelink.LayoutScale, outerWidth: number, outerHeight: number, innerWidth: number, innerHeight: number): fm.icelink.LayoutFrame;
        /**<span id='method-fm.icelink.LayoutFrame-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes a layout frame to JSON.
         </div>

        @param {fm.icelink.LayoutFrame} layoutFrame The layout frame.
        @return {string}
        */
        static toJson(layoutFrame: fm.icelink.LayoutFrame): string;
        /**<span id='method-fm.icelink.LayoutFrame-getHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height value.
         </div>


        @return {number}
        */
        getHeight(): number;
        /**<span id='method-fm.icelink.LayoutFrame-getWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width value.
         </div>


        @return {number}
        */
        getWidth(): number;
        /**<span id='method-fm.icelink.LayoutFrame-getX'>&nbsp;</span>**/
        /**
         <div>
         Gets the X coordinate.
         </div>


        @return {number}
        */
        getX(): number;
        /**<span id='method-fm.icelink.LayoutFrame-getY'>&nbsp;</span>**/
        /**
         <div>
         Gets the Y coordinate.
         </div>


        @return {number}
        */
        getY(): number;
        /**<span id='method-fm.icelink.LayoutFrame-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified layout frame is equivalent.
         </div>

        @param {fm.icelink.LayoutFrame} layoutFrame The layout frame.
        @return {boolean}
        */
        isEquivalent(layoutFrame: fm.icelink.LayoutFrame): boolean;
        /**<span id='method-fm.icelink.LayoutFrame-setHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the height value.
         </div>


        @param {number} value
        @return {void}
        */
        setHeight(value: number): void;
        /**<span id='method-fm.icelink.LayoutFrame-setWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the width value.
         </div>


        @param {number} value
        @return {void}
        */
        setWidth(value: number): void;
        /**<span id='method-fm.icelink.LayoutFrame-setX'>&nbsp;</span>**/
        /**
         <div>
         Sets the X coordinate.
         </div>


        @param {number} value
        @return {void}
        */
        setX(value: number): void;
        /**<span id='method-fm.icelink.LayoutFrame-setY'>&nbsp;</span>**/
        /**
         <div>
         Sets the Y coordinate.
         </div>


        @param {number} value
        @return {void}
        */
        setY(value: number): void;
        /**<span id='method-fm.icelink.LayoutFrame-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>


        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    class LayoutModeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LayoutMode);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class LayoutOriginWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LayoutOrigin);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class LayoutScaleWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LayoutScale);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Defines the results of a layout calculation.
     </div>

    */
    class LayoutTable {
        getTypeString(): string;
        private fmicelinkLayoutTableInit();
        /**<span id='method-fm.icelink.LayoutTable-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.layoutTable` class.
         </div>

        @param {number} columnCount The column count.
        @param {number} rowCount The row count.
        @param {number} cellWidth The width of each cell.
        @param {number} cellHeight The height of each cell.
        @return {}
        */
        constructor(columnCount: number, rowCount: number, cellWidth: number, cellHeight: number);
        /**<span id='method-fm.icelink.LayoutTable-getCellHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height of each cell.
         </div>


        @return {number}
        */
        getCellHeight(): number;
        /**<span id='method-fm.icelink.LayoutTable-getCellWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width of each cell.
         </div>


        @return {number}
        */
        getCellWidth(): number;
        /**<span id='method-fm.icelink.LayoutTable-getColumnCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the column count.
         </div>


        @return {number}
        */
        getColumnCount(): number;
        /**<span id='method-fm.icelink.LayoutTable-getRowCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the row count.
         </div>


        @return {number}
        */
        getRowCount(): number;
        /**<span id='method-fm.icelink.LayoutTable-setCellHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the height of each cell.
         </div>


        @param {number} value
        @return {void}
        */
        setCellHeight(value: number): void;
        /**<span id='method-fm.icelink.LayoutTable-setCellWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the width of each cell.
         </div>


        @param {number} value
        @return {void}
        */
        setCellWidth(value: number): void;
        /**<span id='method-fm.icelink.LayoutTable-setColumnCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the column count.
         </div>


        @param {number} value
        @return {void}
        */
        setColumnCount(value: number): void;
        /**<span id='method-fm.icelink.LayoutTable-setRowCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the row count.
         </div>


        @param {number} value
        @return {void}
        */
        setRowCount(value: number): void;
    }
}
declare namespace fm.icelink {
    class LocalMediaStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.LocalMediaState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A video buffer.
     </div>

    */
    class VideoBuffer extends fm.icelink.MediaBuffer<fm.icelink.VideoFormat, fm.icelink.VideoBuffer> {
        getTypeString(): string;
        private fmicelinkVideoBufferInit();
        /**<span id='method-fm.icelink.VideoBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoBuffer` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.VideoBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoBuffer` class.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {fm.icelink.DataBuffer} dataBuffer The data buffer.
        @param {fm.icelink.VideoFormat} format The format.
        @return {}
        */
        constructor(width: number, height: number, dataBuffer: fm.icelink.DataBuffer, format: fm.icelink.VideoFormat);
        /**<span id='method-fm.icelink.VideoBuffer-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoBuffer` class.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {fm.icelink.DataBuffer[]} dataBuffers The data buffers.
        @param {fm.icelink.VideoFormat} format The format.
        @return {}
        */
        constructor(width: number, height: number, dataBuffers: fm.icelink.DataBuffer[], format: fm.icelink.VideoFormat);
        /**<span id='method-fm.icelink.VideoBuffer-createBlack'>&nbsp;</span>**/
        /**
         <div>
         Creates a black (0, 0, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createBlack(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createBlue'>&nbsp;</span>**/
        /**
         <div>
         Creates a blue (0, 0, 255) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createBlue(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createCustom'>&nbsp;</span>**/
        /**
         <div>
         Creates a custom video buffer with the specified width/height and red/green/blue values
         for the specified format name. If the format is not supported, returns null.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {number} red The red value.
        @param {number} green The green value.
        @param {number} blue The blue value.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createCustom(width: number, height: number, red: number, green: number, blue: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createCustom'>&nbsp;</span>**/
        /**
         <div>
         Creates a custom video buffer with the specified width/height and red/green/blue values
         for the specified format name. If the format is not supported, returns null.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {number} red The red value.
        @param {number} green The green value.
        @param {number} blue The blue value.
        @param {string} formatName Name of the format.
        @param {fm.icelink.DataBuffer} buffer The output data buffer.
        @return {fm.icelink.VideoBuffer}
        */
        static createCustom(width: number, height: number, red: number, green: number, blue: number, formatName: string, buffer: fm.icelink.DataBuffer): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createCyan'>&nbsp;</span>**/
        /**
         <div>
         Creates a cyan (0, 255, 255) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createCyan(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createDarkBlue'>&nbsp;</span>**/
        /**
         <div>
         Creates a dark blue (0, 0, 128) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createDarkBlue(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createDarkGreen'>&nbsp;</span>**/
        /**
         <div>
         Creates a dark green (0, 128, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createDarkGreen(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createDarkRed'>&nbsp;</span>**/
        /**
         <div>
         Creates a dark red (128, 0, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createDarkRed(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createGray'>&nbsp;</span>**/
        /**
         <div>
         Creates a gray (255, 255, 255) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createGray(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createGreen'>&nbsp;</span>**/
        /**
         <div>
         Creates a green (0, 255, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createGreen(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createMagenta'>&nbsp;</span>**/
        /**
         <div>
         Creates a magenta (255, 0, 255) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createMagenta(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createOlive'>&nbsp;</span>**/
        /**
         <div>
         Creates an olive (128, 128, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createOlive(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createPurple'>&nbsp;</span>**/
        /**
         <div>
         Creates a purple (128, 0, 128) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createPurple(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createRed'>&nbsp;</span>**/
        /**
         <div>
         Creates a red (255, 0, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createRed(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createTeal'>&nbsp;</span>**/
        /**
         <div>
         Creates a teal (0, 128, 128) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createTeal(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createWhite'>&nbsp;</span>**/
        /**
         <div>
         Creates a white (255, 255, 255) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createWhite(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createYellow'>&nbsp;</span>**/
        /**
         <div>
         Creates a yellow (255, 255, 0) video buffer with the specified width/height.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {fm.icelink.VideoBuffer}
        */
        static createYellow(width: number, height: number, formatName: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} videoBufferJson The video buffer JSON.
        @return {fm.icelink.VideoBuffer}
        */
        static fromJson(videoBufferJson: string): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an array of instances from JSON.
         </div>

        @param {string} videoBuffersJson The video buffers JSON.
        @return {fm.icelink.VideoBuffer[]}
        */
        static fromJsonArray(videoBuffersJson: string): fm.icelink.VideoBuffer[];
        /**<span id='method-fm.icelink.VideoBuffer-getMinimumBufferLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the minimum data buffer length for a given width, height, and format.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {string} formatName Name of the format.
        @return {number}
        */
        static getMinimumBufferLength(width: number, height: number, formatName: string): number;
        /**<span id='method-fm.icelink.VideoBuffer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.VideoBuffer} videoBuffer The video buffer.
        @return {string}
        */
        static toJson(videoBuffer: fm.icelink.VideoBuffer): string;
        /**<span id='method-fm.icelink.VideoBuffer-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of instances to JSON.
         </div>

        @param {fm.icelink.VideoBuffer[]} videoBuffers The video buffers.
        @return {string}
        */
        static toJsonArray(videoBuffers: fm.icelink.VideoBuffer[]): string;
        /**<span id='method-fm.icelink.VideoBuffer-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this instance.
         </div>


        @return {fm.icelink.VideoBuffer}
        */
        clone(): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-convert'>&nbsp;</span>**/
        /**
         <div>
         Creates a new video buffer using the specified format.
         </div>

        @param {fm.icelink.VideoFormat} format The format.
        @param {fm.icelink.DataBuffer} dataBuffer The data buffer.
        @return {fm.icelink.VideoBuffer}
        */
        convert(format: fm.icelink.VideoFormat, dataBuffer: fm.icelink.DataBuffer): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-convert'>&nbsp;</span>**/
        /**
         <div>
         Creates a new video buffer using the specified format.
         </div>

        @param {fm.icelink.VideoFormat} format The format.
        @return {fm.icelink.VideoBuffer}
        */
        convert(format: fm.icelink.VideoFormat): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-createInstance'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance.
         </div>


        @return {fm.icelink.VideoBuffer}
        */
        protected createInstance(): fm.icelink.VideoBuffer;
        /**<span id='method-fm.icelink.VideoBuffer-getHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height.
         </div>


        @return {number}
        */
        getHeight(): number;
        /**<span id='method-fm.icelink.VideoBuffer-getIsAbgr'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has ABGR video.
         </div>


        @return {boolean}
        */
        getIsAbgr(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsArgb'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has ARGB video.
         </div>


        @return {boolean}
        */
        getIsArgb(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsBgr'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has BGR video.
         </div>


        @return {boolean}
        */
        getIsBgr(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsBgra'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has BGRA video.
         </div>


        @return {boolean}
        */
        getIsBgra(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsH264'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has H.264 video.
         </div>


        @return {boolean}
        */
        getIsH264(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsI420'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has I420 video.
         </div>


        @return {boolean}
        */
        getIsI420(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsMuted'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this instance has been muted.
         </div>


        @return {boolean}
        */
        getIsMuted(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsNv12'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has NV12 video.
         </div>


        @return {boolean}
        */
        getIsNv12(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsNv21'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has NV21 video.
         </div>


        @return {boolean}
        */
        getIsNv21(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsRaw'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has raw video.
         </div>


        @return {boolean}
        */
        getIsRaw(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsRgb'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has RGB video.
         </div>


        @return {boolean}
        */
        getIsRgb(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsRgba'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has RGBA video.
         </div>


        @return {boolean}
        */
        getIsRgba(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsRgbaType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has raw RGBA, BGRA, ARGB, or ABGR video.
         </div>


        @return {boolean}
        */
        getIsRgbaType(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsRgbType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has raw RGB or BGR video.
         </div>


        @return {boolean}
        */
        getIsRgbType(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsVp8'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has VP8 video.
         </div>


        @return {boolean}
        */
        getIsVp8(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsVp9'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has VP9 video.
         </div>


        @return {boolean}
        */
        getIsVp9(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsYuvType'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has raw I420, YV12, NV12, or NV21 video.
         </div>


        @return {boolean}
        */
        getIsYuvType(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getIsYv12'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this buffer has YV12 video.
         </div>


        @return {boolean}
        */
        getIsYv12(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-getOrientation'>&nbsp;</span>**/
        /**
         <div>
         Gets the orientation.
         </div>


        @return {number}
        */
        getOrientation(): number;
        /**<span id='method-fm.icelink.VideoBuffer-getStride'>&nbsp;</span>**/
        /**
         <div>
         Gets the stride.
         </div>


        @return {number}
        */
        getStride(): number;
        /**<span id='method-fm.icelink.VideoBuffer-getStrides'>&nbsp;</span>**/
        /**
         <div>
         Gets the strides.
         </div>


        @return {number[]}
        */
        getStrides(): number[];
        /**<span id='method-fm.icelink.VideoBuffer-getWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width.
         </div>


        @return {number}
        */
        getWidth(): number;
        /**<span id='method-fm.icelink.VideoBuffer-mute'>&nbsp;</span>**/
        /**
         <div>
         Mutes this instance. This is a one-way operation that clears
         the underlying data buffer.
         </div>


        @return {boolean}
        */
        mute(): boolean;
        /**<span id='method-fm.icelink.VideoBuffer-setHeight'>&nbsp;</span>**/
        /**
         <div>
         Sets the height.
         </div>


        @param {number} value
        @return {void}
        */
        setHeight(value: number): void;
        /**<span id='method-fm.icelink.VideoBuffer-setOrientation'>&nbsp;</span>**/
        /**
         <div>
         Sets the orientation.
         </div>


        @param {number} value
        @return {void}
        */
        setOrientation(value: number): void;
        /**<span id='method-fm.icelink.VideoBuffer-setStride'>&nbsp;</span>**/
        /**
         <div>
         Sets the stride.
         </div>


        @param {number} value
        @return {void}
        */
        setStride(value: number): void;
        /**<span id='method-fm.icelink.VideoBuffer-setStrides'>&nbsp;</span>**/
        /**
         <div>
         Sets the strides.
         </div>


        @param {number[]} value
        @return {void}
        */
        setStrides(value: number[]): void;
        /**<span id='method-fm.icelink.VideoBuffer-setWidth'>&nbsp;</span>**/
        /**
         <div>
         Sets the width.
         </div>


        @param {number} value
        @return {void}
        */
        setWidth(value: number): void;
        /**<span id='method-fm.icelink.VideoBuffer-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
        /**<span id='method-fm.icelink.VideoBuffer-toPlanar'>&nbsp;</span>**/
        /**
         <div>
         Converts a planar representation of this
         packed buffer, if in YUV-packed format.
         Otherwise, returns the current buffer.
         </div>

        @return {fm.icelink.VideoBuffer}
        */
        toPlanar(): fm.icelink.VideoBuffer;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of remote medias.
     </div>

    */
    class RemoteMediaCollection extends fm.icelink.Collection<fm.icelink.RemoteMedia, fm.icelink.RemoteMediaCollection> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.RemoteMediaCollection-addSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is added to the collection.
         </div>

        @param {fm.icelink.RemoteMedia} value The value.
        @return {void}
        */
        protected addSuccess(value: fm.icelink.RemoteMedia): void;
        /**<span id='method-fm.icelink.RemoteMediaCollection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<fm.icelink.RemoteMedia>} list The list.
        @return {fm.icelink.RemoteMedia[]}
        */
        protected arrayFromList(list: Array<fm.icelink.RemoteMedia>): fm.icelink.RemoteMedia[];
        /**<span id='method-fm.icelink.RemoteMediaCollection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {fm.icelink.RemoteMediaCollection}
        */
        protected createCollection(): fm.icelink.RemoteMediaCollection;
        /**<span id='method-fm.icelink.RemoteMediaCollection-getById'>&nbsp;</span>**/
        /**
         <div>
         Gets a media by ID.
         </div>

        @param {string} id The identifier.
        @return {fm.icelink.RemoteMedia}
        */
        getById(id: string): fm.icelink.RemoteMedia;
        /**<span id='method-fm.icelink.RemoteMediaCollection-removeSuccess'>&nbsp;</span>**/
        /**
         <div>
         Invoked when an element is removed from the collection.
         </div>

        @param {fm.icelink.RemoteMedia} value The value.
        @return {void}
        */
        protected removeSuccess(value: fm.icelink.RemoteMedia): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A collection of remote medias.
     </div>

    */
    class MediaCollection extends fm.icelink.RemoteMediaCollection {
        getTypeString(): string;
        constructor();
    }
}
declare namespace fm.icelink {
    class NackPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.NackPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class ProtocolTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.ProtocolType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class RedFecPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.RedFecPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class RembPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.RembPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The header of an Rtp packet.
     </div>

    */
    class RtpPacketHeader {
        getTypeString(): string;
        private fmicelinkRtpPacketHeaderInit();
        /**<span id='method-fm.icelink.RtpPacketHeader-constructor'>&nbsp;</span>**/
        /**
         <div>
         Creates a new instance of the Packet Header.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.RtpPacketHeader-getFixedHeaderLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the length of the fixed header.
         </div>


        @return {number}
        */
        static getFixedHeaderLength(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-calculateHeaderLength'>&nbsp;</span>**/
        /**
         <div>
         Calculates the length of the header. At least 12 bytes.
         </div>


        @return {number}
        */
        calculateHeaderLength(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones this RtpPacketHeader instance.
         </div>


        @return {fm.icelink.RtpPacketHeader}
        */
        clone(): fm.icelink.RtpPacketHeader;
        /**<span id='method-fm.icelink.RtpPacketHeader-getContributingSourceCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of contributing sources added to this rtp packet.
         </div>


        @return {number}
        */
        getContributingSourceCount(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getContributingSources'>&nbsp;</span>**/
        /**
         <div>
         Gets the contributing sources in this rtp packet.
         </div>


        @return {number[]}
        */
        getContributingSources(): number[];
        /**<span id='method-fm.icelink.RtpPacketHeader-getExtension'>&nbsp;</span>**/
        /**
         <div>
         Gets if there is an extension added to this rtp packet.
         </div>


        @return {boolean}
        */
        getExtension(): boolean;
        /**<span id='method-fm.icelink.RtpPacketHeader-getHeaderExtension'>&nbsp;</span>**/
        /**
         <div>
         Gets the header extension.
         </div>


        @return {fm.icelink.IRtpHeaderExtension}
        */
        getHeaderExtension(): fm.icelink.IRtpHeaderExtension;
        /**<span id='method-fm.icelink.RtpPacketHeader-getMarker'>&nbsp;</span>**/
        /**
         <div>
         Gets if the marker bit is set.
         </div>


        @return {boolean}
        */
        getMarker(): boolean;
        /**<span id='method-fm.icelink.RtpPacketHeader-getPadding'>&nbsp;</span>**/
        /**
         <div>
         Gets if this rtp packet has padding.
         </div>


        @return {boolean}
        */
        getPadding(): boolean;
        /**<span id='method-fm.icelink.RtpPacketHeader-getPaddingLength'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes of padding of the decoded rtp packet.
         </div>


        @return {number}
        */
        getPaddingLength(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload type of this rtp packet.
         </div>


        @return {number}
        */
        getPayloadType(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Gets the sequence number of the packet.
         </div>


        @return {number}
        */
        getSequenceNumber(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Gets the synchronization source source of the packet.
         </div>


        @return {number}
        */
        getSynchronizationSource(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Gets the timestamp of the packet.
         </div>


        @return {number}
        */
        getTimestamp(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-getVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the version of the rtp packet. Should be 2.
         </div>


        @return {number}
        */
        getVersion(): number;
        /**<span id='method-fm.icelink.RtpPacketHeader-setContributingSourceCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the number of contributing sources added to this rtp packet.
         </div>


        @param {number} value
        @return {void}
        */
        setContributingSourceCount(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setContributingSources'>&nbsp;</span>**/
        /**
         <div>
         Sets the contributing sources in this rtp packet.
         </div>


        @param {number[]} value
        @return {void}
        */
        setContributingSources(value: number[]): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setHeaderExtension'>&nbsp;</span>**/
        /**
         <div>
         Sets the header extension.
         </div>


        @param {fm.icelink.IRtpHeaderExtension} value
        @return {void}
        */
        setHeaderExtension(value: fm.icelink.IRtpHeaderExtension): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setMarker'>&nbsp;</span>**/
        /**
         <div>
         Sets if the marker bit is set.
         </div>


        @param {boolean} value
        @return {void}
        */
        setMarker(value: boolean): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setPadding'>&nbsp;</span>**/
        /**
         <div>
         Sets if this rtp packet has padding.
         </div>


        @param {boolean} value
        @return {void}
        */
        setPadding(value: boolean): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Sets the payload type of this rtp packet.
         </div>


        @param {number} value
        @return {void}
        */
        setPayloadType(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setSequenceNumber'>&nbsp;</span>**/
        /**
         <div>
         Sets the sequence number of the packet.
         </div>


        @param {number} value
        @return {void}
        */
        setSequenceNumber(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Sets the synchronization source source of the packet.
         </div>


        @param {number} value
        @return {void}
        */
        setSynchronizationSource(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Sets the timestamp of the packet.
         </div>


        @param {number} value
        @return {void}
        */
        setTimestamp(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-setVersion'>&nbsp;</span>**/
        /**
         <div>
         Sets the version of the rtp packet. Should be 2.
         </div>


        @param {number} value
        @return {void}
        */
        setVersion(value: number): void;
        /**<span id='method-fm.icelink.RtpPacketHeader-writeTo'>&nbsp;</span>**/
        /**
         <div>
         Writes this Rtp packet to a DataBuffer starting at the offset.
         </div>

        @param {fm.icelink.DataBuffer} buffer
        @param {number} offset
        @return {void}
        */
        writeTo(buffer: fm.icelink.DataBuffer, offset: number): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     The interface that all rtp header extensions must implement.
     </div>

    */
    interface IRtpHeaderExtension {
        fillBuffer(buffer: fm.icelink.DataBuffer, offset: number): void;
        free(): void;
        getId(): Uint8Array;
        getLength(): number;
    }
}
declare namespace fm.icelink.rtp {
}
declare namespace fm.icelink {
    class SdesPolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.SdesPolicy);
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP address types.
     </div>

    */
    abstract class AddressType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.AddressType-getAddressTypeForAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP address type for the specified IP address.
         </div>

        @param {string} ipAddress The IP address.
        @return {string}
        */
        static getAddressTypeForAddress(ipAddress: string): string;
        /**<span id='method-fm.icelink.sdp.AddressType-getIP4'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP address type meaning "IP version 4".
         </div>


        @return {string}
        */
        static getIP4(): string;
        /**<span id='method-fm.icelink.sdp.AddressType-getIP6'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP address type meaning "IP version 6".
         </div>


        @return {string}
        */
        static getIP6(): string;
    }
}
declare namespace fm.icelink.sdp {
}
declare namespace fm.icelink.sdp {
    class AttributeTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.sdp.AttributeType);
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
}
declare namespace fm.icelink.sdp {
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP attribute.
     </div>

    */
    abstract class Attribute {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.Attribute-createAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates an attribute.
         </div>

        @param {string} name The name.
        @param {string} value The value.
        @return {fm.icelink.sdp.Attribute}
        */
        static createAttribute(name: string, value: string): fm.icelink.sdp.Attribute;
        /**<span id='method-fm.icelink.sdp.Attribute-getTypeName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the attribute type.
         </div>

        @param {fm.icelink.Type} type The attribute type.
        @return {string}
        */
        static getTypeName(type: fm.icelink.Type): string;
        /**<span id='method-fm.icelink.sdp.Attribute-isMediaLevel'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the type applies to media streams.
         </div>

        @param {fm.icelink.Type} type The type.
        @return {boolean}
        */
        static isMediaLevel(type: fm.icelink.Type): boolean;
        /**<span id='method-fm.icelink.sdp.Attribute-isSessionLevel'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the type applies to sessions.
         </div>

        @param {fm.icelink.Type} type The type.
        @return {boolean}
        */
        static isSessionLevel(type: fm.icelink.Type): boolean;
        /**<span id='method-fm.icelink.sdp.Attribute-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.connectionData` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Attribute}
        */
        static parse(s: string): fm.icelink.sdp.Attribute;
        /**<span id='method-fm.icelink.sdp.Attribute-getAttributeType'>&nbsp;</span>**/
        /**
         <div>
         Gets this Attribute's Type.
         </div>


        @return {fm.icelink.sdp.AttributeType}
        */
        getAttributeType(): fm.icelink.sdp.AttributeType;
        /**<span id='method-fm.icelink.sdp.Attribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected abstract getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.Attribute-setAttributeType'>&nbsp;</span>**/
        /**
         <div>
         Sets this Attribute's Type.
         </div>


        @param {fm.icelink.sdp.AttributeType} value
        @return {void}
        */
        setAttributeType(value: fm.icelink.sdp.AttributeType): void;
        /**<span id='method-fm.icelink.sdp.Attribute-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP bandwidth element.
     </div>

    */
    class Bandwidth {
        getTypeString(): string;
        private fmicelinksdpBandwidthInit();
        /**<span id='method-fm.icelink.sdp.Bandwidth-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.bandwidth` class.
         </div>

        @param {string} bandwidthType The type of bandwidth. See `fm.icelink.sdp.bandwidth.bandwidthType` for possible values.
        @param {number} value The bandwidth, typically in kilobits per second.
        @return {}
        */
        constructor(bandwidthType: string, value: number);
        /**<span id='method-fm.icelink.sdp.Bandwidth-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.bandwidth` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Bandwidth}
        */
        static parse(s: string): fm.icelink.sdp.Bandwidth;
        /**<span id='method-fm.icelink.sdp.Bandwidth-getBandwidthType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of bandwidth. See `fm.icelink.sdp.bandwidth.bandwidthType` for possible values.
         </div>


        @return {string}
        */
        getBandwidthType(): string;
        /**<span id='method-fm.icelink.sdp.Bandwidth-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the bandwidth, typically in kilobits per second.
         </div>


        @return {number}
        */
        getValue(): number;
        /**<span id='method-fm.icelink.sdp.Bandwidth-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP bandwidth types.
     </div>

    */
    abstract class BandwidthType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.BandwidthType-getApplicationSpecific'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP bandwidth type meaning "Application Specific".
         </div>


        @return {string}
        */
        static getApplicationSpecific(): string;
        /**<span id='method-fm.icelink.sdp.BandwidthType-getConferenceTotal'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP bandwidth type meaning "Conference Total".
         </div>


        @return {string}
        */
        static getConferenceTotal(): string;
        /**<span id='method-fm.icelink.sdp.BandwidthType-getRtcpReceivers'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP bandwidth type meaning "RTCP Receivers".
         </div>


        @return {string}
        */
        static getRtcpReceivers(): string;
        /**<span id='method-fm.icelink.sdp.BandwidthType-getRtcpSenders'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP bandwidth type meaning "RTCP Senders".
         </div>


        @return {string}
        */
        static getRtcpSenders(): string;
        /**<span id='method-fm.icelink.sdp.BandwidthType-getTransportIndependentApplicationSpecificMaximum'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
         </div>


        @return {string}
        */
        static getTransportIndependentApplicationSpecificMaximum(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP encryption key element.
     </div>

    */
    abstract class EncryptionKey {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.EncryptionKey-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.encryptionKey` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.EncryptionKey}
        */
        static parse(s: string): fm.icelink.sdp.EncryptionKey;
        /**<span id='method-fm.icelink.sdp.EncryptionKey-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP encryption key with a method of "base64".
     </div>

    */
    class Base64EncryptionKey extends fm.icelink.sdp.EncryptionKey {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.Base64EncryptionKey-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.base64EncryptionKey` class.
         </div>

        @param {string} encodedEncryptionKey The base64-encoded encryption key.
        @return {}
        */
        constructor(encodedEncryptionKey: string);
        /**<span id='method-fm.icelink.sdp.Base64EncryptionKey-getEncodedEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Gets the base64-encoded encryption key.
         </div>


        @return {string}
        */
        getEncodedEncryptionKey(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This attribute gives the dot-separated hierarchical category of
     the session.  This is to enable a receiver to filter unwanted
     sessions by category.  There is no central registry of
     categories.  It is a session-level attribute, and it is not
     dependent on charset.
     </div>

    */
    class CategoryAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.CategoryAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.categoryAttribute` class.
         </div>

        @param {string} category The dot-separated hierarchical category of the session.
        @return {}
        */
        constructor(category: string);
        /**<span id='method-fm.icelink.sdp.CategoryAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.categoryAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.CategoryAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.CategoryAttribute;
        /**<span id='method-fm.icelink.sdp.CategoryAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.CategoryAttribute-getCategory'>&nbsp;</span>**/
        /**
         <div>
         Gets the dot-separated hierarchical category of the session.
         </div>


        @return {string}
        */
        getCategory(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies the character set to be used to display the
     session name and information data.  By default, the ISO-10646
     character set in UTF-8 encoding is used.  If a more compact
     representation is required, other character sets may be used.
     For example, the ISO 8859-1 is specified with the following SDP
     attribute:
 
     a=charset:ISO-8859-1
     </div>

    */
    class CharacterSetAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.characterSetAttribute` class.
         </div>

        @param {string} characterSet The character set to be used to display the session name and information data.
        @return {}
        */
        constructor(characterSet: string);
        /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.characterSetAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.CharacterSetAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.CharacterSetAttribute;
        /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.CharacterSetAttribute-getCharacterSet'>&nbsp;</span>**/
        /**
         <div>
         Gets the character set to be used to display the session name and information data.
         </div>


        @return {string}
        */
        getCharacterSet(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP encryption key with a method of "clear".
     </div>

    */
    class ClearEncryptionKey extends fm.icelink.sdp.EncryptionKey {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ClearEncryptionKey-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.clearEncryptionKey` class.
         </div>

        @param {string} encryptionKey The untransformed encryption key.
        @return {}
        */
        constructor(encryptionKey: string);
        /**<span id='method-fm.icelink.sdp.ClearEncryptionKey-getEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Gets the untransformed encryption key.
         </div>


        @return {string}
        */
        getEncryptionKey(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP conference types.
     </div>

    */
    abstract class ConferenceType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceType-getBroadcast'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
         </div>


        @return {string}
        */
        static getBroadcast(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceType-getH332'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP conference type meaning "H332", which should imply receive-only and
         indicate that this loosely coupled session is part of an H.332 session.
         </div>


        @return {string}
        */
        static getH332(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceType-getMeeting'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP conference type meaning "Meeting", which should imply send-receive.
         </div>


        @return {string}
        */
        static getMeeting(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceType-getModerated'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP conference type meaning "Moderated", which should indicate the use of
         a floor control tool and that the media tools are started so as to mute
         new sites joining the conference.
         </div>


        @return {string}
        */
        static getModerated(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceType-getTest'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP conference type meaning "Test", which should imply that unless
         explicitly requested otherwise, receivers can safely avoid displaying
         this session description to users.
         </div>


        @return {string}
        */
        static getTest(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies the type of the conference.  Suggested values
     are "broadcast", "meeting", "moderated", "test", and "H332".
     "recvonly" should be the default for "type:broadcast" sessions,
     "type:meeting" should imply "sendrecv", and "type:moderated"
     should indicate the use of a floor control tool and that the
     media tools are started so as to mute new sites joining the
     conference.
     </div>

    */
    class ConferenceTypeAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.conferenceTypeAttribute` class.
         </div>

        @param {string} conferenceType The type of the conference. See `fm.icelink.sdp.conferenceTypeAttribute.conferenceType` for possible values.
        @return {}
        */
        constructor(conferenceType: string);
        /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.conferenceTypeAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ConferenceTypeAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ConferenceTypeAttribute;
        /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ConferenceTypeAttribute-getConferenceType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of the conference. See `fm.icelink.sdp.conferenceTypeAttribute.conferenceType` for possible values.
         </div>


        @return {string}
        */
        getConferenceType(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP connection data element.
     </div>

    */
    class ConnectionData {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ConnectionData-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.connectionData` class.
         </div>

        @param {string} connectionAddress The connection address.
        @return {}
        */
        constructor(connectionAddress: string);
        /**<span id='method-fm.icelink.sdp.ConnectionData-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.connectionData` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.ConnectionData}
        */
        static parse(s: string): fm.icelink.sdp.ConnectionData;
        /**<span id='method-fm.icelink.sdp.ConnectionData-getAddressType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of the address. See `fm.icelink.sdp.connectionData.addressType` for possible values.
         </div>


        @return {string}
        */
        getAddressType(): string;
        /**<span id='method-fm.icelink.sdp.ConnectionData-getConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the connection address.
         </div>


        @return {string}
        */
        getConnectionAddress(): string;
        /**<span id='method-fm.icelink.sdp.ConnectionData-getNetworkType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of network. See `fm.icelink.sdp.connectionData.networkType` for possible values.
         </div>


        @return {string}
        */
        getNetworkType(): string;
        /**<span id='method-fm.icelink.sdp.ConnectionData-setAddressType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of the address. See `fm.icelink.sdp.connectionData.addressType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setAddressType(value: string): void;
        /**<span id='method-fm.icelink.sdp.ConnectionData-setConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Sets the connection address.
         </div>


        @param {string} value
        @return {void}
        */
        setConnectionAddress(value: string): void;
        /**<span id='method-fm.icelink.sdp.ConnectionData-setNetworkType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of network. See `fm.icelink.sdp.connectionData.networkType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setNetworkType(value: string): void;
        /**<span id='method-fm.icelink.sdp.ConnectionData-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
        /**<span id='method-fm.icelink.sdp.ConnectionData-update'>&nbsp;</span>**/
        /**
         <div>
         Updates the connection address.
         </div>

        @param {string} connectionAddress The connection address.
        @return {void}
        */
        update(connectionAddress: string): void;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives the maximum amount of media that can be encapsulated
     in each packet, expressed as time in milliseconds.  The time
     SHALL be calculated as the sum of the time the media present in
     the packet represents.  For frame-based codecs, the time SHOULD
     be an integer multiple of the frame size.  This attribute is
     probably only meaningful for audio data, but may be used with
     other media types if it makes sense.  It is a media-level
     attribute, and it is not dependent on charset.  Note that this
     attribute was introduced after RFC 2327, and non-updated
     implementations will ignore this attribute.
     </div>

    */
    class CryptoAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpCryptoAttributeInit();
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.cryptoAttribute` class.
         </div>

        @param {number} tag The tag.
        @param {string} cryptoSuite The crypto suite.
        @return {}
        */
        constructor(tag: number, cryptoSuite: string);
        constructor();
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.cryptoAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.CryptoAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.CryptoAttribute;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getCryptoSuite'>&nbsp;</span>**/
        /**
         <div>
         Gets the crypto suite. See `fm.icelink.sdp.cryptoAttribute.cryptoSuite` for possible values.
         </div>


        @return {string}
        */
        getCryptoSuite(): string;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getKey'>&nbsp;</span>**/
        /**
         <div>
         Gets the key from the "inline" key parameter.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getKey(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getKeyParams'>&nbsp;</span>**/
        /**
         <div>
         Gets the key parameters.
         </div>


        @return {fm.icelink.Hash<string,string>}
        */
        getKeyParams(): fm.icelink.Hash<string, string>;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getSalt'>&nbsp;</span>**/
        /**
         <div>
         Gets the salt from the "inline" key parameter.
         </div>


        @return {fm.icelink.DataBuffer}
        */
        getSalt(): fm.icelink.DataBuffer;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getSessionParams'>&nbsp;</span>**/
        /**
         <div>
         Gets the session parameters.
         </div>


        @return {Array<string>}
        */
        getSessionParams(): Array<string>;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-getTag'>&nbsp;</span>**/
        /**
         <div>
         Gets the tag.
         </div>


        @return {number}
        */
        getTag(): number;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-setKeySalt'>&nbsp;</span>**/
        /**
         <div>
         Sets the key and salt for the "inline" key parameter.
         </div>

        @param {Uint8Array} key The key.
        @param {Uint8Array} salt The salt.
        @return {fm.icelink.sdp.CryptoAttribute}
        */
        setKeySalt(key: Uint8Array, salt: Uint8Array): fm.icelink.sdp.CryptoAttribute;
        /**<span id='method-fm.icelink.sdp.CryptoAttribute-setTag'>&nbsp;</span>**/
        /**
         <div>
         Sets the tag.
         </div>


        @param {number} value
        @return {void}
        */
        setTag(value: number): void;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP crypto key methods.
     </div>

    */
    abstract class CryptoKeyMethod {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.CryptoKeyMethod-getInline'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto key method meaning "inline".
         </div>


        @return {string}
        */
        static getInline(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP crypto session parameters.
     </div>

    */
    abstract class CryptoSessionParam {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnauthenticatedSRTP'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
         </div>


        @return {string}
        */
        static getUnauthenticatedSRTP(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnencryptedSRTCP'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
         </div>


        @return {string}
        */
        static getUnencryptedSRTCP(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSessionParam-getUnencryptedSRTP'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto session parameter meaning "unencrypted SRTP".
         </div>


        @return {string}
        */
        static getUnencryptedSRTP(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP crypto suites.
     </div>

    */
    abstract class CryptoSuite {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getAesCm128HmacSha132'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
         </div>


        @return {string}
        */
        static getAesCm128HmacSha132(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getAesCM128HmacSha180'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
         </div>


        @return {string}
        */
        static getAesCM128HmacSha180(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getCryptoSuite'>&nbsp;</span>**/
        /**
         <div>
         Converts an EncryptionMode enum to a crypto-suite string.
         </div>

        @param {fm.icelink.EncryptionMode} encryptionMode The EncryptionMode enum.
        @return {string} The crypto-suite string.
        */
        static getCryptoSuite(encryptionMode: fm.icelink.EncryptionMode): string;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getEncryptionMode'>&nbsp;</span>**/
        /**
         <div>
         Converts a crypto-suite string to an EncryptionMode enum.
         </div>

        @param {string} cryptoSuite The crypto-suite string.
        @return {fm.icelink.EncryptionMode} The EncryptionMode enum.
        */
        static getEncryptionMode(cryptoSuite: string): fm.icelink.EncryptionMode;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getNullHmacSha132'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
         </div>


        @return {string}
        */
        static getNullHmacSha132(): string;
        /**<span id='method-fm.icelink.sdp.CryptoSuite-getNullHmacSha180'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
         </div>


        @return {string}
        */
        static getNullHmacSha180(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies the mode in which tools should be started.
     </div>

    */
    abstract class DirectionAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.DirectionAttribute-generateDirectionAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a DirectionAttribute for a required direction.
         </div>

        @param {fm.icelink.StreamDirection} direction Direction.
        @return {fm.icelink.sdp.DirectionAttribute}
        */
        static generateDirectionAttribute(direction: fm.icelink.StreamDirection): fm.icelink.sdp.DirectionAttribute;
        /**<span id='method-fm.icelink.sdp.DirectionAttribute-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        abstract getStreamDirection(): fm.icelink.StreamDirection;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This attribute allows parameters that are specific to a
     particular format to be conveyed in a way that SDP does not
     have to understand them.  The format must be one of the formats
     specified for the media.  Format-specific parameters may be any
     set of parameters required to be conveyed by SDP and given
     unchanged to the media tool that will use this format.  At most
     one instance of this attribute is allowed for each format.
     </div>

    */
    class FormatParametersAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpFormatParametersAttributeInit();
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.formatParametersAttribute` class.
         </div>

        @param {number} format The format.
        @return {}
        */
        constructor(format: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.formatParametersAttribute` class.
         </div>

        @param {number} format The format.
        @param {string} formatSpecificParameters The format-specific parameters.
        @return {}
        */
        constructor(format: number, formatSpecificParameters: string);
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.formatParametersAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.FormatParametersAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.FormatParametersAttribute;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-deserializeFormatSpecificParameters'>&nbsp;</span>**/
        /**
         <div>
         Creates a dictionary map from the format specific parameters.
         </div>


        @return {fm.icelink.Hash<string,string>}
        */
        deserializeFormatSpecificParameters(): fm.icelink.Hash<string, string>;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormat'>&nbsp;</span>**/
        /**
         <div>
         Gets the format.
         </div>


        @return {number}
        */
        getFormat(): number;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormatSpecificParameter'>&nbsp;</span>**/
        /**
         <div>
         Gets a format specific parameter.
         </div>

        @param {string} key The key.
        @return {string}
        */
        getFormatSpecificParameter(key: string): string;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-getFormatSpecificParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets the format-specific parameters.
         </div>


        @return {string}
        */
        getFormatSpecificParameters(): string;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-serializeFormatSpecificParameters'>&nbsp;</span>**/
        /**
         <div>
         Updates the format specific parameters based on a dictionary map.
         </div>

        @param {fm.icelink.Hash<string,string>} map The map.
        @return {void}
        */
        serializeFormatSpecificParameters(map: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-setFormatSpecificParameter'>&nbsp;</span>**/
        /**
         <div>
         Sets a format specific parameter.
         </div>

        @param {string} key The key.
        @param {string} value The value.
        @return {void}
        */
        setFormatSpecificParameter(key: string, value: string): void;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-tryGetFormatSpecificParameter'>&nbsp;</span>**/
        /**
         <div>
         Tries to get a format specific parameter.
         </div>

        @param {string} key The key.
        @param {fm.icelink.Holder<string>} value The value.
        @return {boolean}
        */
        tryGetFormatSpecificParameter(key: string, value: fm.icelink.Holder<string>): boolean;
        /**<span id='method-fm.icelink.sdp.FormatParametersAttribute-unsetFormatSpecificParameter'>&nbsp;</span>**/
        /**
         <div>
         Unsets a format specific parameter.
         </div>

        @param {string} key The key.
        @return {boolean}
        */
        unsetFormatSpecificParameter(key: string): boolean;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives the maximum video frame rate in frames/sec.  It is
     intended as a recommendation for the encoding of video data.
     Decimal representations of fractional values using the notation
     "integer.fraction" are allowed.  It is a media-level
     attribute, defined only for video media, and it is not
     dependent on charset.
     </div>

    */
    class FrameRateAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.FrameRateAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.frameRateAttribute` class.
         </div>

        @param {string} frameRate The maximum video frame rate in frames/second.
        @return {}
        */
        constructor(frameRate: string);
        /**<span id='method-fm.icelink.sdp.FrameRateAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.frameRateAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.FrameRateAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.FrameRateAttribute;
        /**<span id='method-fm.icelink.sdp.FrameRateAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.FrameRateAttribute-getFrameRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum video frame rate in frames/second.
         </div>


        @return {string}
        */
        getFrameRate(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The candidate attribute is a media-level attribute only.  It contains
     a transport address for a candidate that can be used for connectivity
     checks.
     </div>

    */
    class CandidateAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpiceCandidateAttributeInit();
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.candidateAttribute` class.
         </div>

        @param {string} foundation The candidate's foundation.
        @param {number} priority The priority of the candidate.
        @param {string} connectionAddress The IP address of the candidate.
        @param {number} port The port of the candidate.
        @param {string} candidateType The type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
        @param {number} componentId The component identifier.
        @return {}
        */
        constructor(foundation: string, priority: number, connectionAddress: string, port: number, candidateType: string, componentId: number);
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.candidateAttribute` class.
         </div>

        @param {string} foundation The candidate's foundation.
        @param {number} priority The priority of the candidate.
        @param {string} connectionAddress The IP address of the candidate.
        @param {number} port The port of the candidate.
        @param {string} candidateType The type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
        @param {string} relatedAddress The IP address related to the candidate.
        @param {number} relatedPort The port related to the candidate.
        @param {string} protocol The protocol.
        @param {number} componentId The ID of the component for which this is a candidate.
        @return {}
        */
        constructor(foundation: string, priority: number, connectionAddress: string, port: number, candidateType: string, relatedAddress: string, relatedPort: number, protocol: string, componentId: number);
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.candidateAttribute` class.
         </div>

        @param {string} value The attribute as a string.
        @return {fm.icelink.sdp.ice.CandidateAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.CandidateAttribute;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getCandidateType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
         </div>


        @return {string}
        */
        getCandidateType(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getComponentId'>&nbsp;</span>**/
        /**
         <div>
         Gets the ID of the component for which this is a candidate.
         </div>


        @return {number}
        */
        getComponentId(): number;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the IP address of the candidate.
         </div>


        @return {string}
        */
        getConnectionAddress(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getExtensions'>&nbsp;</span>**/
        /**
         <div>
         Gets the extensions.
         </div>


        @return {fm.icelink.Hash<string,string>}
        */
        getExtensions(): fm.icelink.Hash<string, string>;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getFoundation'>&nbsp;</span>**/
        /**
         <div>
         Gets the candidate's foundation.
         </div>


        @return {string}
        */
        getFoundation(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the port of the candidate.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getPriority'>&nbsp;</span>**/
        /**
         <div>
         Gets the priority of the candidate.
         </div>


        @return {number}
        */
        getPriority(): number;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol of this candidate.
         </div>


        @return {string}
        */
        getProtocol(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getRelatedAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the IP address related to the candidate.
         </div>


        @return {string}
        */
        getRelatedAddress(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-getRelatedPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the port related to the candidate.
         </div>


        @return {number}
        */
        getRelatedPort(): number;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setCandidateType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of the candidate. See `fm.icelink.sdp.ice.candidateAttribute.candidateType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setCandidateType(value: string): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setComponentId'>&nbsp;</span>**/
        /**
         <div>
         Sets the ID of the component for which this is a candidate.
         </div>


        @param {number} value
        @return {void}
        */
        setComponentId(value: number): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Sets the IP address of the candidate.
         </div>


        @param {string} value
        @return {void}
        */
        setConnectionAddress(value: string): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setFoundation'>&nbsp;</span>**/
        /**
         <div>
         Sets the candidate's foundation.
         </div>


        @param {string} value
        @return {void}
        */
        setFoundation(value: string): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setPort'>&nbsp;</span>**/
        /**
         <div>
         Sets the port of the candidate.
         </div>


        @param {number} value
        @return {void}
        */
        setPort(value: number): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setPriority'>&nbsp;</span>**/
        /**
         <div>
         Sets the priority of the candidate.
         </div>


        @param {number} value
        @return {void}
        */
        setPriority(value: number): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setProtocol'>&nbsp;</span>**/
        /**
         <div>
         Sets the protocol of this candidate.
         </div>


        @param {string} value
        @return {void}
        */
        setProtocol(value: string): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setRelatedAddress'>&nbsp;</span>**/
        /**
         <div>
         Sets the IP address related to the candidate.
         </div>


        @param {string} value
        @return {void}
        */
        setRelatedAddress(value: string): void;
        /**<span id='method-fm.icelink.sdp.ice.CandidateAttribute-setRelatedPort'>&nbsp;</span>**/
        /**
         <div>
         Sets the port related to the candidate.
         </div>


        @param {number} value
        @return {void}
        */
        setRelatedPort(value: number): void;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     Defines valid SDP candidate types.
     </div>

    */
    abstract class CandidateType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateType-getHost'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP candidate type meaning "Host".
         </div>


        @return {string}
        */
        static getHost(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateType-getPeerReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP candidate type meaning "Peer Reflexive".
         </div>


        @return {string}
        */
        static getPeerReflexive(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateType-getRelayed'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP candidate type meaning "Relayed".
         </div>


        @return {string}
        */
        static getRelayed(): string;
        /**<span id='method-fm.icelink.sdp.ice.CandidateType-getServerReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP candidate type meaning "Server Reflexive".
         </div>


        @return {string}
        */
        static getServerReflexive(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The SDP session attribute "fingerprint" provides an encryption
     certificate fingerprint to a remote peer for use with DTLS.
     </div>

    */
    class FingerprintAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.fingerprintAttribute` class.
         </div>

        @param {string} hashFunction The hash function.
        @param {string} fingerprint The fingerprint.
        @return {}
        */
        constructor(hashFunction: string, fingerprint: string);
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.fingerprintAttribute` class.
         </div>

        @param {string} value The attribute as a string.
        @return {fm.icelink.sdp.ice.FingerprintAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.FingerprintAttribute;
        /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getFingerprint'>&nbsp;</span>**/
        /**
         <div>
         Gets the fingerprint.
         </div>


        @return {string}
        */
        getFingerprint(): string;
        /**<span id='method-fm.icelink.sdp.ice.FingerprintAttribute-getHashFunction'>&nbsp;</span>**/
        /**
         <div>
         Gets the hash function (i.e. sha-256).
         </div>


        @return {string}
        */
        getHashFunction(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     "ice-lite" is a session-level attribute only, and indicates that an
     agent is a lite implementation.
     </div>

    */
    class LiteAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.liteAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.liteAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.LiteAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.LiteAttribute;
        /**<span id='method-fm.icelink.sdp.ice.LiteAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     "ice-mismatch" is a media-level
     attribute only, and when present in an answer, indicates that the
     offer arrived with a default destination for a media component that
     didn't have a corresponding candidate attribute.
     </div>

    */
    class MismatchAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.mismatchAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.mismatchAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.MismatchAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.MismatchAttribute;
        /**<span id='method-fm.icelink.sdp.ice.MismatchAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    class OptionTagTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.sdp.ice.OptionTagType);
        toString(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     A tag for an `fm.icelink.sdp.ice.optionsAttribute`.
     </div>

    */
    abstract class OptionTag {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.OptionTag-getTrickle'>&nbsp;</span>**/
        /**
         <div>
         Gets the "trickle" option string.
         </div>


        @return {string}
        */
        static getTrickle(): string;
        /**<span id='method-fm.icelink.sdp.ice.OptionTag-parse'>&nbsp;</span>**/
        /**
         <div>
         Generates a tag object from a string.
         </div>

        @param {string} tagString The tag string.
        @return {fm.icelink.sdp.ice.OptionTag}
        */
        static parse(tagString: string): fm.icelink.sdp.ice.OptionTag;
        /**<span id='method-fm.icelink.sdp.ice.OptionTag-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of this tag.
         </div>


        @return {fm.icelink.sdp.ice.OptionTagType}
        */
        getType(): fm.icelink.sdp.ice.OptionTagType;
        /**<span id='method-fm.icelink.sdp.ice.OptionTag-setType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of this tag.
         </div>


        @param {fm.icelink.sdp.ice.OptionTagType} value
        @return {void}
        */
        protected setType(value: fm.icelink.sdp.ice.OptionTagType): void;
        /**<span id='method-fm.icelink.sdp.ice.OptionTag-toString'>&nbsp;</span>**/
        /**
         <div>
         Gets the string representation of this tag.
         </div>


        @return {string}
        */
        abstract toString(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     An unknown tag for an `fm.icelink.sdp.ice.optionsAttribute`</div>

    */
    class UnknownIceOptionTag extends fm.icelink.sdp.ice.OptionTag {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.unknownIceOptionTag` class.
         </div>


        @param {string} tagString
        @return {}
        */
        constructor(tagString: string);
        /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-getTagString'>&nbsp;</span>**/
        /**
         <div>
         Gets the tag string.
         </div>


        @return {string}
        */
        getTagString(): string;
        /**<span id='method-fm.icelink.sdp.ice.UnknownIceOptionTag-toString'>&nbsp;</span>**/
        /**
         <div>
         Gets the string representation of this tag.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     A trickle-ice tag for an `fm.icelink.sdp.ice.optionsAttribute`</div>

    */
    class TrickleIceOptionTag extends fm.icelink.sdp.ice.OptionTag {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.TrickleIceOptionTag-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.trickleIceOptionTag` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.TrickleIceOptionTag-toString'>&nbsp;</span>**/
        /**
         <div>
         Gets the string representation of this tag
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The "ice-options" attribute is a session-level attribute.  It
     contains a series of tokens that identify the options supported by
     the agent.
     </div>

    */
    class OptionsAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.optionsAttribute` class.
         </div>

        @param {Array<fm.icelink.sdp.ice.OptionTag>} tags The tokens that identify options supported by the agent.
        @return {}
        */
        constructor(tags: Array<fm.icelink.sdp.ice.OptionTag>);
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.optionsAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.OptionsAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.OptionsAttribute;
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getTags'>&nbsp;</span>**/
        /**
         <div>
         Gets the tokens that identify options supported by the agent.
         </div>


        @return {Array<fm.icelink.sdp.ice.OptionTag>}
        */
        getTags(): Array<fm.icelink.sdp.ice.OptionTag>;
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-getTrickleOptionSet'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether trickle-ice is supported.
         </div>


        @return {boolean}
        */
        getTrickleOptionSet(): boolean;
        /**<span id='method-fm.icelink.sdp.ice.OptionsAttribute-setTrickleOptionSet'>&nbsp;</span>**/
        /**
         <div>
         Sets a value indicating whether trickle-ice is supported.
         </div>


        @param {boolean} value
        @return {void}
        */
        setTrickleOptionSet(value: boolean): void;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The "ice-pwd" attribute conveys the password used by
     ICE for message integrity.
     </div>

    */
    class PasswordAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.passwordAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.passwordAttribute` class.
         </div>

        @param {string} password The password used by ICE for message integrity.
        @return {}
        */
        constructor(password: string);
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.passwordAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.PasswordAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.PasswordAttribute;
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-generatePassword'>&nbsp;</span>**/
        /**
         <div>
         Generates a random password.
         </div>


        @return {string}
        */
        static generatePassword(): string;
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.PasswordAttribute-getPassword'>&nbsp;</span>**/
        /**
         <div>
         Gets the password used by ICE for message integrity.
         </div>


        @return {string}
        */
        getPassword(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     An SDP remote candidate element.
     </div>

    */
    class RemoteCandidate {
        getTypeString(): string;
        private fmicelinksdpiceRemoteCandidateInit();
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.remoteCandidate` class.
         </div>

        @param {number} componentId The ID of the component for which this is a remote candidate.
        @param {string} connectionAddress The IP address of the remote candidate.
        @param {number} port The port of the remote candidate.
        @return {}
        */
        constructor(componentId: number, connectionAddress: string, port: number);
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.ice.remoteCandidate` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.ice.RemoteCandidate}
        */
        static parse(s: string): fm.icelink.sdp.ice.RemoteCandidate;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getComponentId'>&nbsp;</span>**/
        /**
         <div>
         Gets the ID of the component for which this is a remote candidate.
         </div>


        @return {number}
        */
        getComponentId(): number;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the IP address of the remote candidate.
         </div>


        @return {string}
        */
        getConnectionAddress(): string;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the port of the remote candidate.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidate-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The attribute contains a connection-address and port for each
     component.  The ordering of components is irrelevant.  However, a
     value MUST be present for each component of a media stream.  This
     attribute MUST be included in an offer by a controlling agent for a
     media stream that is Completed, and MUST NOT be included in any other
     case.
     </div>

    */
    class RemoteCandidatesAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.remoteCandidatesAttribute` class.
         </div>

        @param {fm.icelink.sdp.ice.RemoteCandidate[]} candidates The array of remote candidates.
        @return {}
        */
        constructor(candidates: fm.icelink.sdp.ice.RemoteCandidate[]);
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.remoteCandidatesAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.RemoteCandidatesAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.RemoteCandidatesAttribute;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.RemoteCandidatesAttribute-getCandidates'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of remote candidates.
         </div>


        @return {fm.icelink.sdp.ice.RemoteCandidate[]}
        */
        getCandidates(): fm.icelink.sdp.ice.RemoteCandidate[];
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     Defines valid SDP transport protocols.
     </div>

    */
    abstract class TransportProtocol {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.TransportProtocol-getTcp'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP transport protocol meaning "tcp".
         </div>


        @return {string}
        */
        static getTcp(): string;
        /**<span id='method-fm.icelink.sdp.ice.TransportProtocol-getUdp'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP transport protocol meaning "udp".
         </div>


        @return {string}
        */
        static getUdp(): string;
    }
}
declare namespace fm.icelink.sdp.ice {
    /**
     <div>
     The "ice-ufrag" attribute conveys the username fragment
     used by ICE for message integrity.
     </div>

    */
    class UfragAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.ufragAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.ufragAttribute` class.
         </div>

        @param {string} ufrag The username fragment used by ICE for message integrity.
        @return {}
        */
        constructor(ufrag: string);
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.ice.ufragAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ice.UfragAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ice.UfragAttribute;
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-generateUfrag'>&nbsp;</span>**/
        /**
         <div>
         Generates a username fragment.
         </div>


        @return {string}
        */
        static generateUfrag(): string;
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ice.UfragAttribute-getUfrag'>&nbsp;</span>**/
        /**
         <div>
         Gets the username fragment used by ICE for message integrity.
         </div>


        @return {string}
        */
        getUfrag(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies that the tools should be started in inactive
     mode.  This is necessary for interactive conferences where
     users can put other users on hold.  No media is sent over an
     inactive media stream.  Note that an RTP-based system SHOULD
     still send RTCP, even if started inactive.  It can be either a
     session or media-level attribute, and it is not dependent on
     charset.
     </div>

    */
    class InactiveAttribute extends fm.icelink.sdp.DirectionAttribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.InactiveAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.inactiveAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.InactiveAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.inactiveAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.InactiveAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.InactiveAttribute;
        /**<span id='method-fm.icelink.sdp.InactiveAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.InactiveAttribute-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getStreamDirection(): fm.icelink.StreamDirection;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Like the cat attribute, this is to assist identifying wanted
     sessions at the receiver.  This allows a receiver to select
     interesting session based on keywords describing the purpose of
     the session; there is no central registry of keywords.  It is a
     session-level attribute.  It is a charset-dependent attribute,
     meaning that its value should be interpreted in the charset
     specified for the session description if one is specified, or
     by default in ISO 10646/UTF-8.
     </div>

    */
    class KeywordsAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.KeywordsAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.keywordsAttribute` class.
         </div>

        @param {string} keywords The keywords describing the purpose of the session.
        @return {}
        */
        constructor(keywords: string);
        /**<span id='method-fm.icelink.sdp.KeywordsAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.keywordsAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.KeywordsAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.KeywordsAttribute;
        /**<span id='method-fm.icelink.sdp.KeywordsAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.KeywordsAttribute-getKeywords'>&nbsp;</span>**/
        /**
         <div>
         Gets the keywords describing the purpose of the session.
         </div>


        @return {string}
        */
        getKeywords(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This can be a session-level attribute or a media-level
     attribute.  As a session-level attribute, it specifies the
     default language for the session being described.  As a media-
     level attribute, it specifies the language for that media,
     overriding any session-level language specified.  Multiple lang
     attributes can be provided either at session or media level if
     the session description or media use multiple languages, in
     which case the order of the attributes indicates the order of
     importance of the various languages in the session or media
     from most important to least important.
     </div>

    */
    class LanguageAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.LanguageAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.languageAttribute` class.
         </div>

        @param {string} languageTag The default language for the session being described
         (if used as a session-level attribute) or the language for a media
         stream (if used as a media-level attribute).
        @return {}
        */
        constructor(languageTag: string);
        /**<span id='method-fm.icelink.sdp.LanguageAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.languageAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.LanguageAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.LanguageAttribute;
        /**<span id='method-fm.icelink.sdp.LanguageAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.LanguageAttribute-getLanguageTag'>&nbsp;</span>**/
        /**
         <div>
         Gets the default language for the session being described
         (if used as a session-level attribute) or the language for a media
         stream (if used as a media-level attribute).
         </div>


        @return {string}
        */
        getLanguageTag(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives the maximum amount of media that can be encapsulated
     in each packet, expressed as time in milliseconds.  The time
     SHALL be calculated as the sum of the time the media present in
     the packet represents.  For frame-based codecs, the time SHOULD
     be an integer multiple of the frame size.  This attribute is
     probably only meaningful for audio data, but may be used with
     other media types if it makes sense.  It is a media-level
     attribute, and it is not dependent on charset.  Note that this
     attribute was introduced after RFC 2327, and non-updated
     implementations will ignore this attribute.
     </div>

    */
    class MaxPacketTimeAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpMaxPacketTimeAttributeInit();
        /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.maxPacketTimeAttribute` class.
         </div>

        @param {number} maxPacketTime The maximum amount of media that can be encapsulated,
         in each packet, expressed as time in milliseconds.
        @return {}
        */
        constructor(maxPacketTime: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.maxPacketTimeAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.MaxPacketTimeAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.MaxPacketTimeAttribute;
        /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.MaxPacketTimeAttribute-getMaxPacketTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum amount of media that can be encapsulated,
         in each packet, expressed as time in milliseconds.
         </div>


        @return {number}
        */
        getMaxPacketTime(): number;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP media element.
     </div>

    */
    class Media {
        getTypeString(): string;
        private fmicelinksdpMediaInit();
        /**<span id='method-fm.icelink.sdp.Media-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.media` class.
         </div>

        @param {string} mediaType The media type. See `fm.icelink.sdp.media.mediaType` for possible values.
        @param {number} transportPort The transport port.
        @param {string} transportProtocol The transport protocol.
        @return {}
        */
        constructor(mediaType: string, transportPort: number, transportProtocol: string);
        /**<span id='method-fm.icelink.sdp.Media-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.media` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.Media-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.media` class.
         </div>

        @param {string} mediaType The media type. See `fm.icelink.sdp.media.mediaType` for possible values.
        @param {number} transportPort The transport port.
        @param {string} transportProtocol The transport protocol.
        @param {string} formatDescription The format description.
        @return {}
        */
        constructor(mediaType: string, transportPort: number, transportProtocol: string, formatDescription: string);
        /**<span id='method-fm.icelink.sdp.Media-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.media` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Media}
        */
        static parse(s: string): fm.icelink.sdp.Media;
        /**<span id='method-fm.icelink.sdp.Media-getFormatDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the format description.
         </div>


        @return {string}
        */
        getFormatDescription(): string;
        /**<span id='method-fm.icelink.sdp.Media-getMediaType'>&nbsp;</span>**/
        /**
         <div>
         Gets the media type. See `fm.icelink.sdp.media.mediaType` for possible values.
         </div>


        @return {string}
        */
        getMediaType(): string;
        /**<span id='method-fm.icelink.sdp.Media-getNumberOfPorts'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of ports.
         </div>


        @return {number}
        */
        getNumberOfPorts(): number;
        /**<span id='method-fm.icelink.sdp.Media-getTransportPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the transport port.
         </div>


        @return {number}
        */
        getTransportPort(): number;
        /**<span id='method-fm.icelink.sdp.Media-getTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the transport protocol.
         </div>


        @return {string}
        */
        getTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.Media-setFormatDescription'>&nbsp;</span>**/
        /**
         <div>
         Sets the format description.
         </div>


        @param {string} value
        @return {void}
        */
        setFormatDescription(value: string): void;
        /**<span id='method-fm.icelink.sdp.Media-setMediaType'>&nbsp;</span>**/
        /**
         <div>
         Sets the media type. See `fm.icelink.sdp.media.mediaType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setMediaType(value: string): void;
        /**<span id='method-fm.icelink.sdp.Media-setNumberOfPorts'>&nbsp;</span>**/
        /**
         <div>
         Sets the number of ports.
         </div>


        @param {number} value
        @return {void}
        */
        setNumberOfPorts(value: number): void;
        /**<span id='method-fm.icelink.sdp.Media-setTransportPort'>&nbsp;</span>**/
        /**
         <div>
         Sets the transport port.
         </div>


        @param {number} value
        @return {void}
        */
        setTransportPort(value: number): void;
        /**<span id='method-fm.icelink.sdp.Media-setTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Sets the transport protocol.
         </div>


        @param {string} value
        @return {void}
        */
        setTransportProtocol(value: string): void;
        /**<span id='method-fm.icelink.sdp.Media-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP media description element.
     </div>

    */
    class MediaDescription {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.MediaDescription-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaDescription` class.
         </div>

        @param {fm.icelink.sdp.Media} media The media name and transport address.
        @return {}
        */
        constructor(media: fm.icelink.sdp.Media);
        /**<span id='method-fm.icelink.sdp.MediaDescription-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.mediaDescription` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.MediaDescription}
        */
        static parse(s: string): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.MediaDescription-addBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Adds a proposed bandwidth.
         </div>

        @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to add.
        @return {void}
        */
        addBandwidth(bandwidth: fm.icelink.sdp.Bandwidth): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-addMediaAttribute'>&nbsp;</span>**/
        /**
         <div>
         Adds a media-level attribute.
         </div>

        @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
        @return {void}
        */
        addMediaAttribute(attribute: fm.icelink.sdp.Attribute): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getBandwidths'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of proposed bandwidths to be used by the media.
         </div>


        @return {fm.icelink.sdp.Bandwidth[]}
        */
        getBandwidths(): fm.icelink.sdp.Bandwidth[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getCandidateAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains Ice Candidate attributes associated with this media description.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getCandidateAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getCcmFirFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "ccm fir" feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getCcmFirFeedbackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getConnectionData'>&nbsp;</span>**/
        /**
         <div>
         Gets media-level connection data.
         </div>


        @return {fm.icelink.sdp.ConnectionData}
        */
        getConnectionData(): fm.icelink.sdp.ConnectionData;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getCryptoAttributes'>&nbsp;</span>**/
        /**
         <div>
         Gets CryptoAttributes associated with this MediaDescription.
         </div>


        @return {fm.icelink.sdp.CryptoAttribute[]}
        */
        getCryptoAttributes(): fm.icelink.sdp.CryptoAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Gets the media-level encryption key.
         </div>


        @return {fm.icelink.sdp.EncryptionKey}
        */
        getEncryptionKey(): fm.icelink.sdp.EncryptionKey;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getFingerprintAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the Fingerprint Attribute from this MediaDescription
         </div>


        @return {fm.icelink.sdp.ice.FingerprintAttribute}
        */
        getFingerprintAttribute(): fm.icelink.sdp.ice.FingerprintAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getFormatParametersAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the format parameters attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.FormatParametersAttribute}
        */
        getFormatParametersAttribute(payloadType: number): fm.icelink.sdp.FormatParametersAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIceOptionAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains Ice Options attributes associated with this media description.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getIceOptionAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIcePasswordAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the IcePasswordAttribute associated with this MediaDescription
         </div>


        @return {fm.icelink.sdp.ice.PasswordAttribute}
        */
        getIcePasswordAttribute(): fm.icelink.sdp.ice.PasswordAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIceUfragAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the IceUfragAttribute associated with this MediaDescription
         </div>


        @return {fm.icelink.sdp.ice.UfragAttribute}
        */
        getIceUfragAttribute(): fm.icelink.sdp.ice.UfragAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIsApplication'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this media description represents an application stream
         (media type == "application").
         </div>


        @return {boolean}
        */
        getIsApplication(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIsAudio'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this media description represents an audio stream
         (media type == "audio").
         </div>


        @return {boolean}
        */
        getIsAudio(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIsMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this media description represents a message stream
         (media type == "message").
         </div>


        @return {boolean}
        */
        getIsMessage(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIsText'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this media description represents a text stream
         (media type == "text").
         </div>


        @return {boolean}
        */
        getIsText(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getIsVideo'>&nbsp;</span>**/
        /**
         <div>
         Gets whether this media description represents a video stream
         (media type == "video").
         </div>


        @return {boolean}
        */
        getIsVideo(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getMaxPacketTimeAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains the maximum packet time attribute.
         </div>


        @return {fm.icelink.sdp.MaxPacketTimeAttribute}
        */
        getMaxPacketTimeAttribute(): fm.icelink.sdp.MaxPacketTimeAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getMedia'>&nbsp;</span>**/
        /**
         <div>
         Gets the media name and transport address.
         </div>


        @return {fm.icelink.sdp.Media}
        */
        getMedia(): fm.icelink.sdp.Media;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getMediaAttributes'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of media-level attributes.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getMediaAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getMediaTitle'>&nbsp;</span>**/
        /**
         <div>
         Gets the media title.
         </div>


        @return {string}
        */
        getMediaTitle(): string;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getNackFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack" feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getNackFeedbackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getNackPliFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack pli" feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getNackPliFeedbackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getNackRpsiFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack rpsi" feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getNackRpsiFeedbackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getNackSliFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack sli" feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getNackSliFeedbackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getPacketTimeAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains the packet time attribute.
         </div>


        @return {fm.icelink.sdp.PacketTimeAttribute}
        */
        getPacketTimeAttribute(): fm.icelink.sdp.PacketTimeAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getQualityAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the QualityAttribute associated with this MediaDescription.
         </div>


        @return {fm.icelink.sdp.QualityAttribute}
        */
        getQualityAttribute(): fm.icelink.sdp.QualityAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets Rtcp Attributes associated with this media description.
         </div>


        @return {fm.icelink.sdp.rtcp.Attribute}
        */
        getRtcpAttribute(): fm.icelink.sdp.rtcp.Attribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP feedback attribute for the given payload type.
         </div>

        @param {number} payloadType The payload type.
        @param {string} type The type.
        @param {string} subType The sub-type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRtcpFeedbackAttribute(payloadType: number, type: string, subType: string): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtcpMultiplexingSupported'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating support for RTCP Multiplexing.
         </div>


        @return {boolean}
        */
        getRtcpMultiplexingSupported(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpExtMapAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP ext-map attributes.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getRtpExtMapAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpMapAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP map attribute for a given format.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @param {fm.icelink.Holder<number>} rtpMapAttributeIndex The index of the `fm.icelink.sdp.rtp.mapAttribute`.
        @return {fm.icelink.sdp.rtp.MapAttribute}
        */
        getRtpMapAttribute(formatName: string, clockRate: number, formatParameters: string, rtpMapAttributeIndex: fm.icelink.Holder<number>): fm.icelink.sdp.rtp.MapAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpMapAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP map attribute for a given format.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @return {fm.icelink.sdp.rtp.MapAttribute}
        */
        getRtpMapAttribute(formatName: string, clockRate: number, formatParameters: string): fm.icelink.sdp.rtp.MapAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpMapAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP map attributes.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getRtpMapAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpMapAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP map attributes for a given format.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @param {fm.icelink.Holder<number[]>} rtpMapAttributeIndices The indeces of the `fm.icelink.sdp.rtp.mapAttribute`.
        @return {fm.icelink.sdp.rtp.MapAttribute[]}
        */
        getRtpMapAttributes(formatName: string, clockRate: number, formatParameters: string, rtpMapAttributeIndices: fm.icelink.Holder<number[]>): fm.icelink.sdp.rtp.MapAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getRtpMapAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the RTP map attributes for a given format.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @return {fm.icelink.sdp.rtp.MapAttribute[]}
        */
        getRtpMapAttributes(formatName: string, clockRate: number, formatParameters: string): fm.icelink.sdp.rtp.MapAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSctpMapAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the Sctp Map Attribute, if it is present in the Media Description.
         </div>


        @return {fm.icelink.sdp.sctp.MapAttribute}
        */
        getSctpMapAttribute(): fm.icelink.sdp.sctp.MapAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSctpMaxMessageSizeAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.
         </div>


        @return {fm.icelink.sdp.sctp.MaxMessageSizeAttribute}
        */
        getSctpMaxMessageSizeAttribute(): fm.icelink.sdp.sctp.MaxMessageSizeAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSetupAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the SetupAttribute associated with this MediaDescription.
         </div>


        @return {fm.icelink.sdp.SetupAttribute}
        */
        getSetupAttribute(): fm.icelink.sdp.SetupAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSsrcAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains the SSRC attribute matching a given synchronization source, name, and value.
         </div>

        @param {number} ssrc The synchronization source.
        @param {string} name The attribute name.
        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtp.SsrcAttribute}
        */
        getSsrcAttribute(ssrc: number, name: string, value: string): fm.icelink.sdp.rtp.SsrcAttribute;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSsrcAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the SSRC attributes.
         </div>


        @return {fm.icelink.sdp.rtp.SsrcAttribute[]}
        */
        getSsrcAttributes(): fm.icelink.sdp.rtp.SsrcAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSsrcAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the SSRC attributes matching a given synchronization source.
         </div>

        @param {number} ssrc The synchronization source.
        @return {fm.icelink.sdp.rtp.SsrcAttribute[]}
        */
        getSsrcAttributes(ssrc: number): fm.icelink.sdp.rtp.SsrcAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSsrcAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains the SSRC attributes matching a given synchronization source and name.
         </div>

        @param {number} ssrc The synchronization source.
        @param {string} name The attribute name.
        @return {fm.icelink.sdp.rtp.SsrcAttribute[]}
        */
        getSsrcAttributes(ssrc: number, name: string): fm.icelink.sdp.rtp.SsrcAttribute[];
        /**<span id='method-fm.icelink.sdp.MediaDescription-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getStreamDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.sdp.MediaDescription-getSupportsRtcpMultiplexing'>&nbsp;</span>**/
        /**
         <div>
         Gets a value stating whether this media description indicates RTCP Multiplexing support
         </div>


        @return {boolean}
        */
        getSupportsRtcpMultiplexing(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-insertCcmFirAttribute'>&nbsp;</span>**/
        /**
         <div>
         Inserts a CCM-FIR attribute for the given format
         if it doesn't already exist.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @return {boolean}
        */
        insertCcmFirAttribute(formatName: string, clockRate: number, formatParameters: string): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-insertMediaAttribute'>&nbsp;</span>**/
        /**
         <div>
         DEPRECATED: Use AddMediaAttribute instead.
         Inserts a media-level attribute at the given index.
         </div>

        @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
        @param {number} index The index.
        @return {void}
        */
        insertMediaAttribute(attribute: fm.icelink.sdp.Attribute, index: number): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-insertNackPliAttribute'>&nbsp;</span>**/
        /**
         <div>
         Inserts a NACK-PLI attribute for the given format
         if it doesn't already exist.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @return {boolean}
        */
        insertNackPliAttribute(formatName: string, clockRate: number, formatParameters: string): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-insertRembAttribute'>&nbsp;</span>**/
        /**
         <div>
         Inserts a REMB attribute for the given format if it doesn't already exist.
         </div>

        @param {string} formatName Format name.
        @param {number} clockRate Clock rate.
        @param {string} formatParameters Format parameters.
        @return {boolean}
        */
        insertRembAttribute(formatName: string, clockRate: number, formatParameters: string): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-removeBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Removes a proposed bandwidth.
         </div>

        @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to remove.
        @return {boolean}
        */
        removeBandwidth(bandwidth: fm.icelink.sdp.Bandwidth): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-removeMediaAttribute'>&nbsp;</span>**/
        /**
         <div>
         Removes a media-level attribute.
         </div>

        @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to remove.
        @return {boolean}
        */
        removeMediaAttribute(attribute: fm.icelink.sdp.Attribute): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setConnectionData'>&nbsp;</span>**/
        /**
         <div>
         Sets media-level connection data.
         </div>


        @param {fm.icelink.sdp.ConnectionData} value
        @return {void}
        */
        setConnectionData(value: fm.icelink.sdp.ConnectionData): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Sets the media-level encryption key.
         </div>


        @param {fm.icelink.sdp.EncryptionKey} value
        @return {void}
        */
        setEncryptionKey(value: fm.icelink.sdp.EncryptionKey): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setMediaTitle'>&nbsp;</span>**/
        /**
         <div>
         Sets the media title.
         </div>


        @param {string} value
        @return {void}
        */
        setMediaTitle(value: string): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setQualityAttribute'>&nbsp;</span>**/
        /**
         <div>
         Sets the QualityAttribute associated with this MediaDescription.
         </div>


        @param {fm.icelink.sdp.QualityAttribute} value
        @return {void}
        */
        setQualityAttribute(value: fm.icelink.sdp.QualityAttribute): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setRtcpAttribute'>&nbsp;</span>**/
        /**
         <div>
         Sets Rtcp Attributes associated with this media description.
         </div>


        @param {fm.icelink.sdp.rtcp.Attribute} value
        @return {void}
        */
        setRtcpAttribute(value: fm.icelink.sdp.rtcp.Attribute): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setSetupAttribute'>&nbsp;</span>**/
        /**
         <div>
         Sets the SetupAttribute associated with this MediaDescription.
         </div>


        @param {fm.icelink.sdp.SetupAttribute} value
        @return {void}
        */
        setSetupAttribute(value: fm.icelink.sdp.SetupAttribute): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-setStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        setStreamDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.sdp.MediaDescription-supportsIce'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this SDP MediaDescription suggests support for ICE.
         </div>

        @return {boolean}
        */
        supportsIce(): boolean;
        /**<span id='method-fm.icelink.sdp.MediaDescription-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
        /**<span id='method-fm.icelink.sdp.MediaDescription-updateQualityAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Updates SDP Quality Attribute associated with this media description if one is present. Otherwise,
         creates a new one and inserts it into this media description.
         </div>

        @param {number} quality
        @return {void}
        */
        updateQualityAttributeValue(quality: number): void;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     https://tools.ietf.org/html/rfc5888#page-4
     "Media stream identification" media attribute, which is used for identifying media streams within a session description.
     Its formatting in SDP [RFC4566] is described by
     the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
 
     mid-attribute      = "a=mid:" identification-tag
     identification-tag = token
     ; token is defined in RFC 4566
     The identification-tag MUST be unique within an SDP session description.
     </div>

    */
    class MediaStreamIdAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdAttribute` class.
         </div>

        @param {string} id The identifier.
        @return {}
        */
        constructor(id: string);
        /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.MediaStreamIdAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.MediaStreamIdAttribute;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdAttribute-getIdentificationTag'>&nbsp;</span>**/
        /**
         <div>
         Gets the identification tag.
         </div>


        @return {string}
        */
        getIdentificationTag(): string;
    }
}
declare namespace fm.icelink.sdp {
    class MediaStreamIdSemanticTokenWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.sdp.MediaStreamIdSemanticToken);
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
     Used here for compatibility with Google Chrome and Mozilla Firefox.
 
     A session-level attribute is defined for signalling the semantics
     associated with an msid grouping.This allows msid groupings with
     different semantics to coexist.
 
     This OPTIONAL attribute gives the group identifier and its group
     semantic; it carries the same meaning as the ssrc-group-attr of RFC
     5576 section 4.2, but uses the identifier of the group rather than a
     list of SSRC values.
 
     This attribute MUST be present if "a=msid" is used.
 
     An empty list of identifiers is an indication that the sender
     supports the indicated semantic, but has no msid groupings of the
     given type in the present SDP.
 
     An identifier of "*" is an indication that all "a=msid" lines in the
     SDP have this specific semantic.  If "*" is not used, each msid-id in
     the SDP MUST appear in one and only one "msid-semantic" line.
     The name of the attribute is "msid-semantic".
     The value of the attribute is given by the following ABNF:
 
     msid-semantic-value = msid - semantic msid-list
     msid-semantic = token ; see RFC 4566
     msid-list = *(" " msid-id) / " *"
 
     The semantic field holds values from the IANA registriy "Semantics
     for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
 
     An example msid-semantic might look like this, if a semantic LS was
     registered by IANA for the same purpose as the existing LS grouping
     semantic:
 
     a= msid-semantic:LS xyzzy forolow
 
     This means that the SDP description has two lip sync groups, with the
     group identifiers xyzzy and forolow, respectively.
 
     The msid-semantic attribute can occur more than once, but MUST NOT
     occur more than once with the same msid-semantic value.
     </div><seealso cref="fm.icelink.sdp.attribute" />

    */
    class MediaStreamIdSemanticAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdSemanticAttribute` class.
         </div>

        @param {fm.icelink.sdp.MediaStreamIdSemanticToken} semanticToken The semantic token.
        @return {}
        */
        constructor(semanticToken: fm.icelink.sdp.MediaStreamIdSemanticToken);
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdSemanticAttribute` class.
         </div>

        @param {fm.icelink.sdp.MediaStreamIdSemanticToken} semanticToken The semantic token.
        @param {string} msidList The msid list for the given semantic token.
        @return {}
        */
        constructor(semanticToken: fm.icelink.sdp.MediaStreamIdSemanticToken, msidList: string);
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.mediaStreamIdSemanticAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.MediaStreamIdSemanticAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.MediaStreamIdSemanticAttribute;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-getMsIdList'>&nbsp;</span>**/
        /**
         <div>
         Gets the space-delimited list of msids for which a given semantic is used.
         An empty list of identifiers is an indication that the sender
         supports the indicated semantic, but has no msid groupings of the
         given type in the present SDP.
 
         An identifier of "*" is an indication that all "a=msid" lines in the
         SDP have this specific semantic.  If "*" is not used, each msid-id in
         the SDP MUST appear in one and only one "msid-semantic" line.
         </div>


        @return {string}
        */
        getMsIdList(): string;
        /**<span id='method-fm.icelink.sdp.MediaStreamIdSemanticAttribute-setMsIdList'>&nbsp;</span>**/
        /**
         <div>
         Sets the space-delimited list of msids for which a given semantic is used.
         An empty list of identifiers is an indication that the sender
         supports the indicated semantic, but has no msid groupings of the
         given type in the present SDP.
 
         An identifier of "*" is an indication that all "a=msid" lines in the
         SDP have this specific semantic.  If "*" is not used, each msid-id in
         the SDP MUST appear in one and only one "msid-semantic" line.
         </div>


        @param {string} value
        @return {void}
        */
        setMsIdList(value: string): void;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP media types.
     </div>

    */
    abstract class MediaType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-fromStreamType'>&nbsp;</span>**/
        /**
         <div>
         Convert a StreamType enum to an SDP media type.
         </div>

        @param {fm.icelink.StreamType} streamType The StreamType enum.
        @return {string}
        */
        static fromStreamType(streamType: fm.icelink.StreamType): string;
        /**<span id='method-fm.icelink.sdp.MediaType-getApplication'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP media type meaning "Application".
         </div>


        @return {string}
        */
        static getApplication(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-getAudio'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP media type meaning "Audio".
         </div>


        @return {string}
        */
        static getAudio(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-getMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP media type meaning "Message".
         </div>


        @return {string}
        */
        static getMessage(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-getText'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP media type meaning "Text".
         </div>


        @return {string}
        */
        static getText(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-getVideo'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP media type meaning "Video".
         </div>


        @return {string}
        */
        static getVideo(): string;
        /**<span id='method-fm.icelink.sdp.MediaType-toStreamType'>&nbsp;</span>**/
        /**
         <div>
         Converts an SDP media type to a StreamType enum.
         </div>

        @param {string} mediaType The SDP media type.
        @return {fm.icelink.StreamType}
        */
        static toStreamType(mediaType: string): fm.icelink.StreamType;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP message.
     </div>

    */
    class Message {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.Message-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.message` class.
         </div>

        @param {fm.icelink.sdp.Origin} origin The originator of the session plus a session identifier and version number.
        @param {string} sessionName The textual session name.
        @param {fm.icelink.sdp.TimeDescription[]} timeDescriptions The array of start, stop, and repeat times for the session.
        @return {}
        */
        constructor(origin: fm.icelink.sdp.Origin, sessionName: string, timeDescriptions: fm.icelink.sdp.TimeDescription[]);
        /**<span id='method-fm.icelink.sdp.Message-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.message` class.
         </div>

        @param {fm.icelink.sdp.Origin} origin The originator of the session plus a session identifier and version number.
        @param {string} sessionName The textual session name.
        @return {}
        */
        constructor(origin: fm.icelink.sdp.Origin, sessionName: string);
        /**<span id='method-fm.icelink.sdp.Message-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.message` class.
         </div>

        @param {fm.icelink.sdp.Origin} origin The originator of the session plus a session identifier and version number.
        @return {}
        */
        constructor(origin: fm.icelink.sdp.Origin);
        /**<span id='method-fm.icelink.sdp.Message-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.message` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Message}
        */
        static parse(s: string): fm.icelink.sdp.Message;
        /**<span id='method-fm.icelink.sdp.Message-addBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Adds a proposed bandwidth.
         </div>

        @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to add.
        @return {void}
        */
        addBandwidth(bandwidth: fm.icelink.sdp.Bandwidth): void;
        /**<span id='method-fm.icelink.sdp.Message-addMediaDescription'>&nbsp;</span>**/
        /**
         <div>
         Adds a media description.
         </div>

        @param {fm.icelink.sdp.MediaDescription} mediaDescription The media description to add.
        @return {void}
        */
        addMediaDescription(mediaDescription: fm.icelink.sdp.MediaDescription): void;
        /**<span id='method-fm.icelink.sdp.Message-addSessionAttribute'>&nbsp;</span>**/
        /**
         <div>
         Adds a session-level attribute.
         </div>

        @param {fm.icelink.sdp.Attribute} attribute The session-level attribute to add.
        @return {void}
        */
        addSessionAttribute(attribute: fm.icelink.sdp.Attribute): void;
        /**<span id='method-fm.icelink.sdp.Message-addTimeDescription'>&nbsp;</span>**/
        /**
         <div>
         Adds a start, stop, and repeat time.
         </div>

        @param {fm.icelink.sdp.TimeDescription} timeDescription The start, stop, and repeat time to add.
        @return {void}
        */
        addTimeDescription(timeDescription: fm.icelink.sdp.TimeDescription): void;
        /**<span id='method-fm.icelink.sdp.Message-getApplicationDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media description of type "application".
         </div>


        @return {fm.icelink.sdp.MediaDescription}
        */
        getApplicationDescription(): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.Message-getApplicationDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets any media descriptions of type "application".
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getApplicationDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getAudioDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media description of type "audio".
         </div>


        @return {fm.icelink.sdp.MediaDescription}
        */
        getAudioDescription(): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.Message-getAudioDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets any media descriptions of type "audio".
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getAudioDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getBandwidths'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of proposed bandwidths to be used by the session.
         </div>


        @return {fm.icelink.sdp.Bandwidth[]}
        */
        getBandwidths(): fm.icelink.sdp.Bandwidth[];
        /**<span id='method-fm.icelink.sdp.Message-getConnectionData'>&nbsp;</span>**/
        /**
         <div>
         Gets session-level connection data.
         </div>


        @return {fm.icelink.sdp.ConnectionData}
        */
        getConnectionData(): fm.icelink.sdp.ConnectionData;
        /**<span id='method-fm.icelink.sdp.Message-getEmailAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the email address for the person responsible for the conference.
         </div>


        @return {string}
        */
        getEmailAddress(): string;
        /**<span id='method-fm.icelink.sdp.Message-getEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Gets the session-level encryption key.
         </div>


        @return {fm.icelink.sdp.EncryptionKey}
        */
        getEncryptionKey(): fm.icelink.sdp.EncryptionKey;
        /**<span id='method-fm.icelink.sdp.Message-getMediaDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of media descriptions.
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getMediaDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getMessageDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media description of type "message".
         </div>


        @return {fm.icelink.sdp.MediaDescription}
        */
        getMessageDescription(): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.Message-getMessageDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets any media descriptions of type "message".
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getMessageDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getOrigin'>&nbsp;</span>**/
        /**
         <div>
         Gets the originator of the session plus a session identifier and version number.
         </div>


        @return {fm.icelink.sdp.Origin}
        */
        getOrigin(): fm.icelink.sdp.Origin;
        /**<span id='method-fm.icelink.sdp.Message-getPhoneNumber'>&nbsp;</span>**/
        /**
         <div>
         Gets the phone number for the person responsible for the conference.
         </div>


        @return {string}
        */
        getPhoneNumber(): string;
        /**<span id='method-fm.icelink.sdp.Message-getProtocolVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the version of the Session Description Protocol.
         </div>


        @return {string}
        */
        getProtocolVersion(): string;
        /**<span id='method-fm.icelink.sdp.Message-getSessionAttributes'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of session-level attributes.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getSessionAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.Message-getSessionInformation'>&nbsp;</span>**/
        /**
         <div>
         Gets textual information about the session.
         </div>


        @return {string}
        */
        getSessionInformation(): string;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelCryptoAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains Crypto attributes from the session-level attributes in this message.
         Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.sdp.CryptoAttribute[]}
        */
        getSessionLevelCryptoAttributes(): fm.icelink.sdp.CryptoAttribute[];
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelDirection'>&nbsp;</span>**/
        /**
         <div>
         Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
         Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getSessionLevelDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelFingerprintAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains Fingerprint attribute from the session-level attributes in this message.
         Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.sdp.ice.FingerprintAttribute}
        */
        getSessionLevelFingerprintAttribute(): fm.icelink.sdp.ice.FingerprintAttribute;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIceOptionAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains session-level Ice Options attributes associated with the Sdp Message.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getSessionLevelIceOptionAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIcePasswordAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains Ice Password Attribute from the session-level attributes in this message.
         Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.sdp.ice.PasswordAttribute}
        */
        getSessionLevelIcePasswordAttribute(): fm.icelink.sdp.ice.PasswordAttribute;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelIceUfragAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains Ice Ufrag Attribute from the session-level attributes in this message.
         Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.sdp.ice.UfragAttribute}
        */
        getSessionLevelIceUfragAttribute(): fm.icelink.sdp.ice.UfragAttribute;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelRtcpMultiplexingSupport'>&nbsp;</span>**/
        /**
         <div>
         Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
         Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {boolean}
        */
        getSessionLevelRtcpMultiplexingSupport(): boolean;
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelRtpExtMapAttributes'>&nbsp;</span>**/
        /**
         <div>
         Obtains session-level RTP ext-map attributes associated with the Sdp Message.
         </div>


        @return {fm.icelink.sdp.Attribute[]}
        */
        getSessionLevelRtpExtMapAttributes(): fm.icelink.sdp.Attribute[];
        /**<span id='method-fm.icelink.sdp.Message-getSessionLevelSetupAttribute'>&nbsp;</span>**/
        /**
         <div>
         Obtains Setup Attribute from the session-level attributes in this message.
         Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
         </div>


        @return {fm.icelink.sdp.SetupAttribute}
        */
        getSessionLevelSetupAttribute(): fm.icelink.sdp.SetupAttribute;
        /**<span id='method-fm.icelink.sdp.Message-getSessionName'>&nbsp;</span>**/
        /**
         <div>
         Gets the textual session name.
         </div>


        @return {string}
        */
        getSessionName(): string;
        /**<span id='method-fm.icelink.sdp.Message-getTextDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media description of type "text".
         </div>


        @return {fm.icelink.sdp.MediaDescription}
        */
        getTextDescription(): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.Message-getTextDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets any media descriptions of type "text".
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getTextDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getTimeDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of start, stop, and repeat times for the session.
         </div>


        @return {fm.icelink.sdp.TimeDescription[]}
        */
        getTimeDescriptions(): fm.icelink.sdp.TimeDescription[];
        /**<span id='method-fm.icelink.sdp.Message-getTimeZoneAdjustments'>&nbsp;</span>**/
        /**
         <div>
         Gets the time zone adjustments.
         </div>


        @return {fm.icelink.sdp.TimeZones}
        */
        getTimeZoneAdjustments(): fm.icelink.sdp.TimeZones;
        /**<span id='method-fm.icelink.sdp.Message-getUri'>&nbsp;</span>**/
        /**
         <div>
         Gets the pointer to additional information about the session.
         </div>


        @return {fm.icelink.Uri}
        */
        getUri(): fm.icelink.Uri;
        /**<span id='method-fm.icelink.sdp.Message-getVideoDescription'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media description of type "video".
         </div>


        @return {fm.icelink.sdp.MediaDescription}
        */
        getVideoDescription(): fm.icelink.sdp.MediaDescription;
        /**<span id='method-fm.icelink.sdp.Message-getVideoDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Gets any media descriptions of type "video".
         </div>


        @return {fm.icelink.sdp.MediaDescription[]}
        */
        getVideoDescriptions(): fm.icelink.sdp.MediaDescription[];
        /**<span id='method-fm.icelink.sdp.Message-removeBandwidth'>&nbsp;</span>**/
        /**
         <div>
         Removes a proposed bandwidth.
         </div>

        @param {fm.icelink.sdp.Bandwidth} bandwidth The proposed bandwidth to remove.
        @return {boolean}
        */
        removeBandwidth(bandwidth: fm.icelink.sdp.Bandwidth): boolean;
        /**<span id='method-fm.icelink.sdp.Message-removeMediaDescription'>&nbsp;</span>**/
        /**
         <div>
         Removes a media description.
         </div>

        @param {fm.icelink.sdp.MediaDescription} mediaDescription The media description to remove.
        @return {boolean}
        */
        removeMediaDescription(mediaDescription: fm.icelink.sdp.MediaDescription): boolean;
        /**<span id='method-fm.icelink.sdp.Message-removeSessionAttribute'>&nbsp;</span>**/
        /**
         <div>
         Removes a session-level attribute.
         </div>

        @param {fm.icelink.sdp.AttributeType} attributeType The session-level attribute type to remove.
        @return {boolean}
        */
        removeSessionAttribute(attributeType: fm.icelink.sdp.AttributeType): boolean;
        /**<span id='method-fm.icelink.sdp.Message-removeTimeDescription'>&nbsp;</span>**/
        /**
         <div>
         Removes a start, stop, and repeat time.
         </div>

        @param {fm.icelink.sdp.TimeDescription} timeDescription The start, stop, and repeat time to remove.
        @return {boolean}
        */
        removeTimeDescription(timeDescription: fm.icelink.sdp.TimeDescription): boolean;
        /**<span id='method-fm.icelink.sdp.Message-removeTimeDescriptions'>&nbsp;</span>**/
        /**
         <div>
         Removes all time descriptions.
         </div>


        @return {void}
        */
        removeTimeDescriptions(): void;
        /**<span id='method-fm.icelink.sdp.Message-setConnectionData'>&nbsp;</span>**/
        /**
         <div>
         Sets session-level connection data.
         </div>


        @param {fm.icelink.sdp.ConnectionData} value
        @return {void}
        */
        setConnectionData(value: fm.icelink.sdp.ConnectionData): void;
        /**<span id='method-fm.icelink.sdp.Message-setEmailAddress'>&nbsp;</span>**/
        /**
         <div>
         Sets the email address for the person responsible for the conference.
         </div>


        @param {string} value
        @return {void}
        */
        setEmailAddress(value: string): void;
        /**<span id='method-fm.icelink.sdp.Message-setEncryptionKey'>&nbsp;</span>**/
        /**
         <div>
         Sets the session-level encryption key.
         </div>


        @param {fm.icelink.sdp.EncryptionKey} value
        @return {void}
        */
        setEncryptionKey(value: fm.icelink.sdp.EncryptionKey): void;
        /**<span id='method-fm.icelink.sdp.Message-setPhoneNumber'>&nbsp;</span>**/
        /**
         <div>
         Sets the phone number for the person responsible for the conference.
         </div>


        @param {string} value
        @return {void}
        */
        setPhoneNumber(value: string): void;
        /**<span id='method-fm.icelink.sdp.Message-setSessionInformation'>&nbsp;</span>**/
        /**
         <div>
         Sets textual information about the session.
         </div>


        @param {string} value
        @return {void}
        */
        setSessionInformation(value: string): void;
        /**<span id='method-fm.icelink.sdp.Message-setTimeZoneAdjustments'>&nbsp;</span>**/
        /**
         <div>
         Sets the time zone adjustments.
         </div>


        @param {fm.icelink.sdp.TimeZones} value
        @return {void}
        */
        setTimeZoneAdjustments(value: fm.icelink.sdp.TimeZones): void;
        /**<span id='method-fm.icelink.sdp.Message-setUri'>&nbsp;</span>**/
        /**
         <div>
         Sets the pointer to additional information about the session.
         </div>


        @param {fm.icelink.Uri} value
        @return {void}
        */
        setUri(value: fm.icelink.Uri): void;
        /**<span id='method-fm.icelink.sdp.Message-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
        /**<span id='method-fm.icelink.sdp.Message-updateSetupValue'>&nbsp;</span>**/
        /**
         <div>
         Updates SDP Setup Value associated with the session description.
         </div>

        @param {string} setupValue
        @return {void}
        */
        updateSetupValue(setupValue: string): void;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP network types.
     </div>

    */
    abstract class NetworkType {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.NetworkType-getInternet'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP network type meaning "Internet".
         </div>


        @return {string}
        */
        static getInternet(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP orientations.
     </div>

    */
    abstract class Orientation {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.Orientation-getLandscape'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP orientation meaning "Landscape".
         </div>


        @return {string}
        */
        static getLandscape(): string;
        /**<span id='method-fm.icelink.sdp.Orientation-getPortrait'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP orientation meaning "Portrait".
         </div>


        @return {string}
        */
        static getPortrait(): string;
        /**<span id='method-fm.icelink.sdp.Orientation-getSeascape'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP orientation meaning "Upside-Down Landscape".
         </div>


        @return {string}
        */
        static getSeascape(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Normally this is only used for a whiteboard or presentation
     tool.  It specifies the orientation of a the workspace on the
     screen.  It is a media-level attribute.  Permitted values are
     "portrait", "landscape", and "seascape" (upside-down
     landscape).  It is not dependent on charset.
     </div>

    */
    class OrientationAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.OrientationAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.orientationAttribute` class.
         </div>

        @param {string} orientation The orientation of a workspace on the screen. See `fm.icelink.sdp.orientationAttribute.orientation` for possible values.
        @return {}
        */
        constructor(orientation: string);
        /**<span id='method-fm.icelink.sdp.OrientationAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.orientationAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.OrientationAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.OrientationAttribute;
        /**<span id='method-fm.icelink.sdp.OrientationAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.OrientationAttribute-getOrientation'>&nbsp;</span>**/
        /**
         <div>
         Gets the orientation of a workspace on the screen. See `fm.icelink.sdp.orientationAttribute.orientation` for possible values.
         </div>


        @return {string}
        */
        getOrientation(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP origin element.
     </div>

    */
    class Origin {
        getTypeString(): string;
        private fmicelinksdpOriginInit();
        /**<span id='method-fm.icelink.sdp.Origin-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.origin` class.
         </div>

        @param {string} unicastAddress The address of the machine from which the session was created.
        @param {string} username The user's login on the originating host.
        @return {}
        */
        constructor(unicastAddress: string, username: string);
        /**<span id='method-fm.icelink.sdp.Origin-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.origin` class.
         </div>

        @param {string} unicastAddress The address of the machine from which the session was created.
        @return {}
        */
        constructor(unicastAddress: string);
        /**<span id='method-fm.icelink.sdp.Origin-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.origin` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Origin}
        */
        static parse(s: string): fm.icelink.sdp.Origin;
        /**<span id='method-fm.icelink.sdp.Origin-getAddressType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of the address. See `fm.icelink.sdp.origin.addressType` for possible values.
         </div>


        @return {string}
        */
        getAddressType(): string;
        /**<span id='method-fm.icelink.sdp.Origin-getNetworkType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of network. See `fm.icelink.sdp.origin.networkType` for possible values.
         </div>


        @return {string}
        */
        getNetworkType(): string;
        /**<span id='method-fm.icelink.sdp.Origin-getSessionId'>&nbsp;</span>**/
        /**
         <div>
         Gets the globally unique identifier for the session.
         </div>


        @return {number}
        */
        getSessionId(): number;
        /**<span id='method-fm.icelink.sdp.Origin-getSessionVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the version number for the session.
         </div>


        @return {number}
        */
        getSessionVersion(): number;
        /**<span id='method-fm.icelink.sdp.Origin-getUnicastAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the address of the machine from which the session was created.
         </div>


        @return {string}
        */
        getUnicastAddress(): string;
        /**<span id='method-fm.icelink.sdp.Origin-getUsername'>&nbsp;</span>**/
        /**
         <div>
         Gets the user's login on the originating host.
         </div>


        @return {string}
        */
        getUsername(): string;
        /**<span id='method-fm.icelink.sdp.Origin-setAddressType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of the address. See `fm.icelink.sdp.origin.addressType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setAddressType(value: string): void;
        /**<span id='method-fm.icelink.sdp.Origin-setNetworkType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type of network. See `fm.icelink.sdp.origin.networkType` for possible values.
         </div>


        @param {string} value
        @return {void}
        */
        setNetworkType(value: string): void;
        /**<span id='method-fm.icelink.sdp.Origin-setSessionId'>&nbsp;</span>**/
        /**
         <div>
         Sets the globally unique identifier for the session.
         </div>


        @param {number} value
        @return {void}
        */
        setSessionId(value: number): void;
        /**<span id='method-fm.icelink.sdp.Origin-setSessionVersion'>&nbsp;</span>**/
        /**
         <div>
         Sets the version number for the session.
         </div>


        @param {number} value
        @return {void}
        */
        setSessionVersion(value: number): void;
        /**<span id='method-fm.icelink.sdp.Origin-setUnicastAddress'>&nbsp;</span>**/
        /**
         <div>
         Sets the address of the machine from which the session was created.
         </div>


        @param {string} value
        @return {void}
        */
        setUnicastAddress(value: string): void;
        /**<span id='method-fm.icelink.sdp.Origin-setUsername'>&nbsp;</span>**/
        /**
         <div>
         Sets the user's login on the originating host.
         </div>


        @param {string} value
        @return {void}
        */
        setUsername(value: string): void;
        /**<span id='method-fm.icelink.sdp.Origin-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives the length of time in milliseconds represented by
     the media in a packet.  This is probably only meaningful for
     audio data, but may be used with other media types if it makes
     sense.  It should not be necessary to know ptime to decode RTP
     or vat audio, and it is intended as a recommendation for the
     encoding/packetisation of audio.  It is a media-level
     attribute, and it is not dependent on charset.
     </div>

    */
    class PacketTimeAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpPacketTimeAttributeInit();
        /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.packetTimeAttribute` class.
         </div>

        @param {number} packetTime The length of time in milliseconds represented by
         the media in a packet.
        @return {}
        */
        constructor(packetTime: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.packetTimeAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.PacketTimeAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.PacketTimeAttribute;
        /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.PacketTimeAttribute-getPacketTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the length of time in milliseconds represented by
         the media in a packet.
         </div>


        @return {number}
        */
        getPacketTime(): number;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP encryption key with a method of "prompt".
     </div>

    */
    class PromptEncryptionKey extends fm.icelink.sdp.EncryptionKey {
        getTypeString(): string;
        constructor();
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives a suggestion for the quality of the encoding as an
     integer value.  The intention of the quality attribute for
     video is to specify a non-default trade-off between frame-rate
     and still-image quality.  For video, the value is in the range
     0 to 10, with the following suggested meaning:
 
     10 - the best still-image quality the compression scheme can
     give.
     5  - the default behaviour given no quality suggestion.
     0  - the worst still-image quality the codec designer thinks
     is still usable.
 
     It is a media-level attribute, and it is not dependent on
     charset.
     </div>

    */
    class QualityAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpQualityAttributeInit();
        /**<span id='method-fm.icelink.sdp.QualityAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.qualityAttribute` class.
         </div>

        @param {number} quality The suggested quality of the encoding as an integer value from 0-10.
        @return {}
        */
        constructor(quality: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.QualityAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.qualityAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.QualityAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.QualityAttribute;
        /**<span id='method-fm.icelink.sdp.QualityAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.QualityAttribute-getQuality'>&nbsp;</span>**/
        /**
         <div>
         Gets the suggested quality of the encoding as an integer value from 0-10.
         </div>


        @return {number}
        */
        getQuality(): number;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies that the tools should be started in receive-only
     mode where applicable.  It can be either a session- or media-
     level attribute, and it is not dependent on charset.  Note that
     recvonly applies to the media only, not to any associated
     control protocol (e.g., an RTP-based system in recvonly mode
     SHOULD still send RTCP packets).
     </div>

    */
    class ReceiveOnlyAttribute extends fm.icelink.sdp.DirectionAttribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.receiveOnlyAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.receiveOnlyAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ReceiveOnlyAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ReceiveOnlyAttribute;
        /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ReceiveOnlyAttribute-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getStreamDirection(): fm.icelink.StreamDirection;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP repeat time element.
     </div>

    */
    class RepeatTime {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.RepeatTime-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.repeatTime` class.
         </div>

        @param {fm.icelink.TimeSpan} repeatInterval The repeat interval.
        @param {fm.icelink.TimeSpan} activeDuration The active duration.
        @param {fm.icelink.TimeSpan[]} offsets The offsets from the start time.
        @return {}
        */
        constructor(repeatInterval: fm.icelink.TimeSpan, activeDuration: fm.icelink.TimeSpan, offsets: fm.icelink.TimeSpan[]);
        /**<span id='method-fm.icelink.sdp.RepeatTime-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.repeatTime` class.
         </div>

        @param {fm.icelink.TimeSpan} repeatInterval The repeat interval.
        @param {fm.icelink.TimeSpan} activeDuration The active duration.
        @return {}
        */
        constructor(repeatInterval: fm.icelink.TimeSpan, activeDuration: fm.icelink.TimeSpan);
        /**<span id='method-fm.icelink.sdp.RepeatTime-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.repeatTime` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.RepeatTime}
        */
        static parse(s: string): fm.icelink.sdp.RepeatTime;
        /**<span id='method-fm.icelink.sdp.RepeatTime-addOffset'>&nbsp;</span>**/
        /**
         <div>
         Adds an offset from the start time.
         </div>

        @param {fm.icelink.TimeSpan} offset The offset from the start time to add.
        @return {void}
        */
        addOffset(offset: fm.icelink.TimeSpan): void;
        /**<span id='method-fm.icelink.sdp.RepeatTime-getActiveDuration'>&nbsp;</span>**/
        /**
         <div>
         Gets the active duration.
         </div>


        @return {fm.icelink.TimeSpan}
        */
        getActiveDuration(): fm.icelink.TimeSpan;
        /**<span id='method-fm.icelink.sdp.RepeatTime-getOffsets'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of offsets from the start time.
         </div>


        @return {fm.icelink.TimeSpan[]}
        */
        getOffsets(): fm.icelink.TimeSpan[];
        /**<span id='method-fm.icelink.sdp.RepeatTime-getRepeatInterval'>&nbsp;</span>**/
        /**
         <div>
         Gets the repeat interval.
         </div>


        @return {fm.icelink.TimeSpan}
        */
        getRepeatInterval(): fm.icelink.TimeSpan;
        /**<span id='method-fm.icelink.sdp.RepeatTime-removeOffset'>&nbsp;</span>**/
        /**
         <div>
         Removes an offset from the start time.
         </div>

        @param {fm.icelink.TimeSpan} offset The offset from the start time to remove.
        @return {boolean}
        */
        removeOffset(offset: fm.icelink.TimeSpan): boolean;
        /**<span id='method-fm.icelink.sdp.RepeatTime-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp.rtcp {
    /**
     <div>
     The RTCP attribute is used to document the RTCP port used for media
     stream, when that port is not the next higher (odd) port number
     following the RTP port described in the media line.
     </div>

    */
    class Attribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdprtcpAttributeInit();
        constructor();
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.attribute` class.
         </div>

        @param {number} port The RTCP port number.
        @param {string} connectionAddress The RTCP connection address.
        @return {}
        */
        constructor(port: number, connectionAddress: string);
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.attribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtcp.Attribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtcp.Attribute;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getAddressType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of the address. See `fm.icelink.sdp.rtcp.attribute.addressType` for possible values.
         </div>


        @return {string}
        */
        getAddressType(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getConnectionAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP connection address.
         </div>


        @return {string}
        */
        getConnectionAddress(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getNetworkType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type of network. See `fm.icelink.sdp.rtcp.attribute.networkType` for possible values.
         </div>


        @return {string}
        */
        getNetworkType(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP port number.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.sdp.rtcp.Attribute-update'>&nbsp;</span>**/
        /**
         <div>
         Updates the port and connection address.
         </div>

        @param {number} port The port.
        @param {string} connectionAddress The connection address.
        @return {void}
        */
        update(port: number, connectionAddress: string): void;
    }
}
declare namespace fm.icelink.sdp.rtcp {
    /**
     <div>
     This attribute is used to indicate the capability of
     using RTCP feedback.
     </div>

    */
    class FeedbackAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdprtcpFeedbackAttributeInit();
        constructor();
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.feedbackAttribute` class.
         </div>

        @param {number} payloadType The payload type.
        @param {string} type The type.
        @param {string} subtype The subtype.
        @return {}
        */
        constructor(payloadType: number, type: string, subtype: string);
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.feedbackAttribute` class.
         </div>

        @param {number} payloadType The payload type.
        @param {string} type The type.
        @return {}
        */
        constructor(payloadType: number, type: string);
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-ccmFirAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "ccm fir" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static ccmFirAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.feedbackAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getWildcardPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload type that represents
         wildcard feedback attributes ('*').
         </div>


        @return {number}
        */
        static getWildcardPayloadType(): number;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "nack" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static nackAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackPliAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "nack pli" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static nackPliAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackRpsiAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "nack rpsi" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static nackRpsiAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-nackSliAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "nack sli" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static nackSliAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-rembAttribute'>&nbsp;</span>**/
        /**
         <div>
         Creates a "goog-remb" feedback attribute.
         </div>

        @param {number} payloadType The payload type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        static rembAttribute(payloadType: number): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload type.
         </div>


        @return {number}
        */
        getPayloadType(): number;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getSubType'>&nbsp;</span>**/
        /**
         <div>
         Gets the sub-type.
         </div>


        @return {string}
        */
        getSubType(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {string}
        */
        getType(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Sets the payload type.
         </div>


        @param {number} value
        @return {void}
        */
        setPayloadType(value: number): void;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setSubType'>&nbsp;</span>**/
        /**
         <div>
         Sets the sub-type.
         </div>


        @param {string} value
        @return {void}
        */
        setSubType(value: string): void;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttribute-setType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type.
         </div>


        @param {string} value
        @return {void}
        */
        setType(value: string): void;
    }
}
declare namespace fm.icelink.sdp.rtcp {
    /**
     <div>
     A feedback attribute sub type.
     </div>

    */
    class FeedbackAttributeSubType {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getFir'>&nbsp;</span>**/
        /**
         <div>
         Gets the "full intraframe refresh" sub-type.
         </div>


        @return {string}
        */
        static getFir(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getPli'>&nbsp;</span>**/
        /**
         <div>
         Gets the "picture loss indication" sub-type.
         </div>


        @return {string}
        */
        static getPli(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getRpsi'>&nbsp;</span>**/
        /**
         <div>
         Gets the "reference picture selection indication" sub-type.
         </div>


        @return {string}
        */
        static getRpsi(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeSubType-getSli'>&nbsp;</span>**/
        /**
         <div>
         Gets the "slice loss indication" sub-type.
         </div>


        @return {string}
        */
        static getSli(): string;
    }
}
declare namespace fm.icelink.sdp.rtcp {
    /**
     <div>
     A feedback attribute type.
     </div>

    */
    class FeedbackAttributeType {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getAck'>&nbsp;</span>**/
        /**
         <div>
         Gets the "positive acknowledgement" type.
         </div>


        @return {string}
        */
        static getAck(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getApp'>&nbsp;</span>**/
        /**
         <div>
         Gets the application-defined type.
         </div>


        @return {string}
        */
        static getApp(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getCcm'>&nbsp;</span>**/
        /**
         <div>
         Gets the "codec control message" type.
         </div>


        @return {string}
        */
        static getCcm(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getNack'>&nbsp;</span>**/
        /**
         <div>
         Gets the "negative acknowledgement" type.
         </div>


        @return {string}
        */
        static getNack(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.FeedbackAttributeType-getRemb'>&nbsp;</span>**/
        /**
         <div>
         Gets the "receiver estimated maximum bitrate" type.
         </div>


        @return {string}
        */
        static getRemb(): string;
    }
}
declare namespace fm.icelink.sdp.rtcp {
    /**
     <div>
     This attribute is used to signal that RTP and RTCP traffic should be
     multiplexed on a single port.  It is a property attribute, which does
     not take a value.
     </div>

    */
    class MuxAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.muxAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtcp.muxAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtcp.MuxAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtcp.MuxAttribute;
        /**<span id='method-fm.icelink.sdp.rtcp.MuxAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
    }
}
declare namespace fm.icelink.sdp.rtp {
    /**
     <div>
     https://tools.ietf.org/html/rfc5285#section-5
     Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
     local identifiers used in the header extension to a larger namespace.
 
     A usable mapping MUST use IDs in the valid range, and each ID in this
     range MUST be used only once for each media (or only once if the
     mappings are session level).  Mappings that do not conform to these
     rules MAY be presented, for instance, during offer/answer negotiation
     as described in the next section, but remapping to conformant values
     is necessary before they can be applied.
 
     Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
     string using an attribute of the form:
     a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
     Where URI is a URI, as above, VALUE is the local identifier (ID)
     of this extension and is an integer in the valid range inclusive (0
     is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
     and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
     Example:
 
     a=extmap:1 http://example.com/082005/ext.htm#ttime
     a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short
     </div>

    */
    class ExtMapAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdprtpExtMapAttributeInit();
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         RTP Extension Map Attribute.
         </div>

        @param {number} id Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
        @param {string} uri Well known extension identifier.
        @return {}
        */
        constructor(id: number, uri: string);
        constructor();
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         RTP Extension Map Attribute.
         </div>

        @param {number} id Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
        @param {string} uri Well known extension identifier.
        @param {fm.icelink.StreamDirection} direction Disered direction of this RTP Extension Header.
        @return {}
        */
        constructor(id: number, uri: string, direction: fm.icelink.StreamDirection);
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtp.ExtMapAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtp.ExtMapAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>

        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getExtensionAttributes'>&nbsp;</span>**/
        /**
         <div>
         Gets extension attributes (optional).
         </div>


        @return {string}
        */
        getExtensionAttributes(): string;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the local identifier of this extension.
         </div>


        @return {number}
        */
        getId(): number;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-getUri'>&nbsp;</span>**/
        /**
         <div>
         Gets the well-known URI of this extension
         </div>


        @return {string}
        */
        getUri(): string;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-setDirection'>&nbsp;</span>**/
        /**
         <div>
         Sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
         </div>


        @param {fm.icelink.StreamDirection} value
        @return {void}
        */
        setDirection(value: fm.icelink.StreamDirection): void;
        /**<span id='method-fm.icelink.sdp.rtp.ExtMapAttribute-setExtensionAttributes'>&nbsp;</span>**/
        /**
         <div>
         Sets extension attributes (optional).
         </div>


        @param {string} value
        @return {void}
        */
        setExtensionAttributes(value: string): void;
    }
}
declare namespace fm.icelink.sdp.rtp {
}
declare namespace fm.icelink.sdp.rtp {
    /**
     <div>
     This attribute maps from an RTP payload type number (as used in
     an "m=" line) to an format name denoting the payload format
     to be used.  It also provides information on the clock rate and
     format parameters.  It is a media-level attribute that is not
     dependent on charset.
     </div>

    */
    class MapAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdprtpMapAttributeInit();
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
         </div>

        @param {number} payloadType The RTP payload type number.
        @param {string} formatName The format name denoting the payload format to be used.
        @param {number} clockRate The payload clock rate.
        @return {}
        */
        constructor(payloadType: number, formatName: string, clockRate: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
         </div>

        @param {number} payloadType The RTP payload type number.
        @param {string} formatName The format name denoting the payload format to be used.
        @param {number} clockRate The payload clock rate.
        @param {string} formatParameters The format parameters for the payload.
        @return {}
        */
        constructor(payloadType: number, formatName: string, clockRate: number, formatParameters: string);
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.mapAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtp.MapAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtp.MapAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-addRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Adds an Rtcp Feedback attribute associated with this Map Attribute.
         </div>

        @param {fm.icelink.sdp.rtcp.FeedbackAttribute} attribute
        @return {void}
        */
        addRelatedRtcpFeedbackAttribute(attribute: fm.icelink.sdp.rtcp.FeedbackAttribute): void;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getClockRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload clock rate.
         </div>


        @return {number}
        */
        getClockRate(): number;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getFormatName'>&nbsp;</span>**/
        /**
         <div>
         Gets the format name denoting the payload format to be used.
         </div>


        @return {string}
        */
        getFormatName(): string;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getFormatParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets format parameters for the payload.
         </div>


        @return {string}
        */
        getFormatParameters(): string;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTP payload type number.
         </div>


        @return {number}
        */
        getPayloadType(): number;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedCcmFirFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "ccm fir" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedCcmFirFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedFormatParametersAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets Format Parameters attribute associated with this Map Attribute
         </div>


        @return {fm.icelink.sdp.FormatParametersAttribute}
        */
        getRelatedFormatParametersAttribute(): fm.icelink.sdp.FormatParametersAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedNackFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackPliFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack pli" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedNackPliFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackRpsiFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedNackRpsiFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedNackSliFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "nack sli" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedNackSliFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRembFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP "goog-remb" feedback attribute associated with this payload type.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedRembFeedbackAttribute(): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP feedback attribute for the given payload type, type and subtype associated with this payload type.
         </div>

        @param {number} payloadType The payload type.
        @param {string} type The type.
        @param {string} subType The sub-type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedRtcpFeedbackAttribute(payloadType: number, type: string, subType: string): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP feedback attribute for the given type and subtype associated with this payload type.
         </div>

        @param {string} type The type.
        @param {string} subType The sub-type.
        @return {fm.icelink.sdp.rtcp.FeedbackAttribute}
        */
        getRelatedRtcpFeedbackAttribute(type: string, subType: string): fm.icelink.sdp.rtcp.FeedbackAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-getRelatedRtcpFeedbackAttributes'>&nbsp;</span>**/
        /**
         <div>
         Gets Rtcp Feedback attributes associated with this Map Attribute.
         </div>


        @return {fm.icelink.sdp.rtcp.FeedbackAttribute[]}
        */
        getRelatedRtcpFeedbackAttributes(): fm.icelink.sdp.rtcp.FeedbackAttribute[];
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-removeRelatedRtcpFeedbackAttribute'>&nbsp;</span>**/
        /**
         <div>
         Removes an Rtcp Feedback attribute associated with this Map Attribute.
         Returns true if the attribute was reomved; if the attribute was not present, returns false.
         </div>

        @param {fm.icelink.sdp.rtcp.FeedbackAttribute} attribute
        @return {boolean}
        */
        removeRelatedRtcpFeedbackAttribute(attribute: fm.icelink.sdp.rtcp.FeedbackAttribute): boolean;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-resetRtcpFeedbackAttributes'>&nbsp;</span>**/
        /**
         <div>
         Resets Rtcp Feedback attributes associated with this Map Attribute.
         </div>


        @param {fm.icelink.sdp.rtcp.FeedbackAttribute[]} attributes
        @return {void}
        */
        resetRtcpFeedbackAttributes(attributes: fm.icelink.sdp.rtcp.FeedbackAttribute[]): void;
        /**<span id='method-fm.icelink.sdp.rtp.MapAttribute-setRelatedFormatParametersAttribute'>&nbsp;</span>**/
        /**
         <div>
         Sets Format Parameters attribute associated with this Map Attribute
         </div>


        @param {fm.icelink.sdp.FormatParametersAttribute} value
        @return {void}
        */
        setRelatedFormatParametersAttribute(value: fm.icelink.sdp.FormatParametersAttribute): void;
    }
}
declare namespace fm.icelink.sdp.rtp {
    /**
     <div>
     An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
     </div>

    */
    class Media extends fm.icelink.sdp.Media {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.media` class.
         </div>

        @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
        @param {number} transportPort The transport port.
        @param {string} transportProtocol The transport protocol.
        @param {number[]} rtpPayloadTypeNumbers The RTP payload type numbers.
        @return {}
        */
        constructor(mediaType: string, transportPort: number, transportProtocol: string, rtpPayloadTypeNumbers: number[]);
        /**<span id='method-fm.icelink.sdp.rtp.Media-generateRtpProfile'>&nbsp;</span>**/
        /**
         <div>
         Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.
         </div>

        @param {fm.icelink.StreamType} type Stream type.
        @param {boolean} rtcpFeedbackSupported Indicates whether Rtcp-based feedback is supported.
        @param {boolean} useDtls Indicates whether (D)TLS is in use.
        @param {boolean} useEncryption Indicates whether encryption is in use.
        @return {string}
        */
        static generateRtpProfile(type: fm.icelink.StreamType, rtcpFeedbackSupported: boolean, useDtls: boolean, useEncryption: boolean): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getPayloadTypes'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload types.
         </div>

        @param {string} formatDesciption The media format desciption.
        @return {number[]}
        */
        static getPayloadTypes(formatDesciption: string): number[];
        /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpAvpfTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the extended RTP audio/video profile.
         </div>


        @return {string}
        */
        static getRtpAvpfTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpAvpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the RTP audio/video profile.
         </div>


        @return {string}
        */
        static getRtpAvpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpSavpfTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the extended Secure RTP audio/video profile.
         </div>


        @return {string}
        */
        static getRtpSavpfTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getRtpSavpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the Secure RTP audio/video profile.
         </div>


        @return {string}
        */
        static getRtpSavpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getUdpTlsRtpSavpfTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.
         </div>


        @return {string}
        */
        static getUdpTlsRtpSavpfTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getUdpTlsRtpSavpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.
         </div>


        @return {string}
        */
        static getUdpTlsRtpSavpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getWellKnownPayloadClockRate'>&nbsp;</span>**/
        /**
         <div>
         Returns the clockrate of a well-known payload type.
         </div>

        @param {number} payloadType The well-known payload type to get the clockrate of.
        @return {number}
        */
        static getWellKnownPayloadClockRate(payloadType: number): number;
        /**<span id='method-fm.icelink.sdp.rtp.Media-getWellKnownPayloadName'>&nbsp;</span>**/
        /**
         <div>
         Returns the name of a well-known payload type.
         </div>

        @param {number} payloadType The well-known payload type to get the name of.
        @return {string}
        */
        static getWellKnownPayloadName(payloadType: number): string;
        /**<span id='method-fm.icelink.sdp.rtp.Media-supportsEncryption'>&nbsp;</span>**/
        /**
         <div>
         Returns a value indicating whther a given protocol supports encryption.
         </div>

        @param {string} protocol Protocol keyword.
        @return {boolean} Value indicating whther a given protocol supports encryption.
        */
        static supportsEncryption(protocol: string): boolean;
        /**<span id='method-fm.icelink.sdp.rtp.Media-supportsRtcpBasedFeedback'>&nbsp;</span>**/
        /**
         <div>
         Returns a value indicating whther a given protocol supports encryption.
         </div>

        @param {string} protocol Protocol keyword.
        @return {boolean} Value indicating whther a given protocol supports encryption.
        */
        static supportsRtcpBasedFeedback(protocol: string): boolean;
    }
}
declare namespace fm.icelink.sdp.rtp {
    /**
     <div>
     The SDP media attribute "ssrc" indicates a property (known as a
     "source-level attribute") of a media source (RTP stream) within an
     RTP session.
     </div>

    */
    class SsrcAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdprtpSsrcAttributeInit();
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.ssrcAttribute` class.
         </div>

        @param {number} synchronizationSource The synchronization source.
        @param {string} attributeName Name of the attribute.
        @return {}
        */
        constructor(synchronizationSource: number, attributeName: string);
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.ssrcAttribute` class.
         </div>

        @param {number} synchronizationSource The synchronization source.
        @param {string} attributeName Name of the attribute.
        @param {string} attributeValue The attribute value.
        @return {}
        */
        constructor(synchronizationSource: number, attributeName: string, attributeValue: string);
        constructor();
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.rtp.ssrcAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.rtp.SsrcAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.rtp.SsrcAttribute;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name of the attribute.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Gets the synchronization source.
         </div>


        @return {number}
        */
        getSynchronizationSource(): number;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the attribute value.
         </div>


        @return {string}
        */
        getValue(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttribute-setValue'>&nbsp;</span>**/
        /**
         <div>
         Sets the attribute value.
         </div>


        @param {string} value
        @return {void}
        */
        setValue(value: string): void;
    }
}
declare namespace fm.icelink.sdp.rtp {
    /**
     <div>
     SSRC atribute names.
     </div>

    */
    class SsrcAttributeName {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getCName'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating canonical name.
         </div>


        @return {string}
        */
        static getCName(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getFormatParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating format parameters.
         </div>


        @return {string}
        */
        static getFormatParameters(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating label.
         </div>


        @return {string}
        */
        static getLabel(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getMediaStreamId'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating media stream ID.
         </div>


        @return {string}
        */
        static getMediaStreamId(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getMediaStreamLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating media stream label.
         </div>


        @return {string}
        */
        static getMediaStreamLabel(): string;
        /**<span id='method-fm.icelink.sdp.rtp.SsrcAttributeName-getPreviousSsrc'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating previous SSRC.
         </div>


        @return {string}
        */
        static getPreviousSsrc(): string;
    }
}
declare namespace fm.icelink.sdp.sctp {
    /**
     <div>
     AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
     The sctpmap attribute maps from a port number (as used in an "m="
     line) to an encoding name denoting the payload format to be used on
     top of the SCTP association or the actual protocol running on top of it.
     Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
     Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
     </div>

    */
    class MapAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpsctpMapAttributeInit();
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
         </div>

        @param {number} port The SCTP port.
        @param {string} protocol The protocol.
        @param {number} streams The streams.
        @return {}
        */
        constructor(port: number, protocol: string, streams: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.sctp.MapAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.sctp.MapAttribute;
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the SCTP port.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getSctpProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the SCTP sub-protocol (association usage).
         </div>


        @return {string}
        */
        getSctpProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.MapAttribute-getStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of incoming streams.
         </div>


        @return {number}
        */
        getStreams(): number;
    }
}
declare namespace fm.icelink.sdp.sctp {
    /**
     <div>
     The attribute can be associated with an m- line to indicate
     the maximum message size (indicated in bytes) that an SCTP endpoint
     is willing to receive on the SCTP association associated with the m-
     line. Different attribute values can be used in each direction.
     </div>

    */
    class MaxMessageSizeAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpsctpMaxMessageSizeAttributeInit();
        /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.maxMessageSizeAttribute` class.
         </div>

        @param {number} maxMessageSize The maximum message size in bytes.
        @return {}
        */
        constructor(maxMessageSize: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.maxMessageSizeAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.sctp.MaxMessageSizeAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.sctp.MaxMessageSizeAttribute;
        /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.sctp.MaxMessageSizeAttribute-getMaxMessageSize'>&nbsp;</span>**/
        /**
         <div>
         Gets the maximum message size in bytes.
         </div>


        @return {number}
        */
        getMaxMessageSize(): number;
    }
}
declare namespace fm.icelink.sdp.sctp {
    /**
     <div>
     An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
     </div>

    */
    class Media extends fm.icelink.sdp.Media {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.media` class.
         </div>

        @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
        @param {number} transportPort The transport port.
        @param {string} transportProtocol The transport protocol.
        @param {string} associationUsage The association usage.
        @return {}
        */
        constructor(mediaType: string, transportPort: number, transportProtocol: string, associationUsage: string);
        /**<span id='method-fm.icelink.sdp.sctp.Media-getDtlsSctpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the SCTP over DTLS data profile.
         </div>


        @return {string}
        */
        static getDtlsSctpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-getSctpDtlsTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the DTLS over SCTP data profile.
         </div>


        @return {string}
        */
        static getSctpDtlsTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-getSctpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the SCTP data profile.
         </div>


        @return {string}
        */
        static getSctpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-getTcpDtlsSctpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
         </div>


        @return {string}
        */
        static getTcpDtlsSctpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-getUdpDtlsSctpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
         </div>


        @return {string}
        */
        static getUdpDtlsSctpTransportProtocol(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-getWebRtcDatachannelAssociationUsage'>&nbsp;</span>**/
        /**
         <div>
         Gets the Association Usage name registry for WebRTC Datachannel.
         </div>


        @return {string}
        */
        static getWebRtcDatachannelAssociationUsage(): string;
        /**<span id='method-fm.icelink.sdp.sctp.Media-supportsEncryption'>&nbsp;</span>**/
        /**
         <div>
         Returns a value indicating whther a given protocol supports encryption.
         </div>

        @param {string} protocol Protocol keyword.
        @return {boolean} Value indicating whther a given protocol supports encryption.
        */
        static supportsEncryption(protocol: string): boolean;
    }
}
declare namespace fm.icelink.sdp.sctp {
    /**
     <div>
     The attribute can be associated with an SDP media description (m-
     line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
     which case the m- line port value indicates the port of the
     underlying transport-layer protocol (UDP or TCP), on which SCTP is
     carried, and the 'sctp-port' value indicates the SCTP port.
     </div>

    */
    class PortAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        private fmicelinksdpsctpPortAttributeInit();
        /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
         </div>

        @param {number} port The SCTP port.
        @return {}
        */
        constructor(port: number);
        constructor();
        /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sctp.portAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.sctp.PortAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.sctp.PortAttribute;
        /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.sctp.PortAttribute-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the SCTP port.
         </div>


        @return {number}
        */
        getPort(): number;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This can be a session-level attribute or a media-level
     attribute.  As a session-level attribute, it specifies the
     language for the session description.  As a media-level
     attribute, it specifies the language for any media-level SDP
     information field associated with that media.  Multiple sdplang
     attributes can be provided either at session or media level if
     multiple languages in the session description or media use
     multiple languages, in which case the order of the attributes
     indicates the order of importance of the various languages in
     the session or media from most important to least important.
     </div>

    */
    class SdpLanguageAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sdpLanguageAttribute` class.
         </div>

        @param {string} languageTag The language for either the session description
         (if used as a session-level attribute) or any media-level SDP
         information field associated with that media (if used as a
         media-level attribute).
        @return {}
        */
        constructor(languageTag: string);
        /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sdpLanguageAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.SdpLanguageAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.SdpLanguageAttribute;
        /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.SdpLanguageAttribute-getLanguageTag'>&nbsp;</span>**/
        /**
         <div>
         Gets the language for either the session description
         (if used as a session-level attribute) or any media-level SDP
         information field associated with that media (if used as a
         media-level attribute).
         </div>


        @return {string}
        */
        getLanguageTag(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies that the tools should be started in send-only
     mode.  An example may be where a different unicast address is
     to be used for a traffic destination than for a traffic source.
     In such a case, two media descriptions may be used, one
     sendonly and one recvonly.  It can be either a session- or
     media-level attribute, but would normally only be used as a
     media attribute.  It is not dependent on charset.  Note that
     sendonly applies only to the media, and any associated control
     protocol (e.g., RTCP) SHOULD still be received and processed as
     normal.
     </div>

    */
    class SendOnlyAttribute extends fm.icelink.sdp.DirectionAttribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sendOnlyAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sendOnlyAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.SendOnlyAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.SendOnlyAttribute;
        /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.SendOnlyAttribute-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getStreamDirection(): fm.icelink.StreamDirection;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This specifies that the tools should be started in send and
     receive mode.  This is necessary for interactive conferences
     with tools that default to receive-only mode.  It can be either
     a session or media-level attribute, and it is not dependent on
     charset.
     </div>

    */
    class SendReceiveAttribute extends fm.icelink.sdp.DirectionAttribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sendReceiveAttribute` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.sendReceiveAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.SendReceiveAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.SendReceiveAttribute;
        /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.SendReceiveAttribute-getStreamDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the stream direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getStreamDirection(): fm.icelink.StreamDirection;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     Defines valid SDP setups.
     </div>

    */
    abstract class Setup {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.Setup-getActive'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP setup meaning "Active".
         </div>


        @return {string}
        */
        static getActive(): string;
        /**<span id='method-fm.icelink.sdp.Setup-getActPass'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP setup meaning "Active or Passive".
         </div>


        @return {string}
        */
        static getActPass(): string;
        /**<span id='method-fm.icelink.sdp.Setup-getPassive'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP setup meaning "Passive".
         </div>


        @return {string}
        */
        static getPassive(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     The 'setup' attribute indicates which of the end points should
     initiate the TCP connection establishment (i.e., send the initial TCP
     SYN).  The 'setup' attribute is charset-independent and can be a
     session-level or a media-level attribute.
     </div>

    */
    class SetupAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.SetupAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.setupAttribute` class.
         </div>

        @param {string} setup Which end point should initiate the connection establishment. See `fm.icelink.sdp.setupAttribute.setup` for possible values.
        @return {}
        */
        constructor(setup: string);
        /**<span id='method-fm.icelink.sdp.SetupAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.setupAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.SetupAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.SetupAttribute;
        /**<span id='method-fm.icelink.sdp.SetupAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.SetupAttribute-getSetup'>&nbsp;</span>**/
        /**
         <div>
         Gets which end point should initiate the connection establishment. See `fm.icelink.sdp.setupAttribute.setup` for possible values.
         </div>


        @return {string}
        */
        getSetup(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP time description element.
     </div>

    */
    class TimeDescription {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.TimeDescription-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.timeDescription` class.
         </div>

        @param {fm.icelink.sdp.Timing} timing The start and stop time.
        @return {}
        */
        constructor(timing: fm.icelink.sdp.Timing);
        /**<span id='method-fm.icelink.sdp.TimeDescription-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.timeDescription` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.TimeDescription}
        */
        static parse(s: string): fm.icelink.sdp.TimeDescription;
        /**<span id='method-fm.icelink.sdp.TimeDescription-addRepeatTime'>&nbsp;</span>**/
        /**
         <div>
         Adds a repeat time.
         </div>

        @param {fm.icelink.sdp.RepeatTime} repeatTime The repeat time to add.
        @return {void}
        */
        addRepeatTime(repeatTime: fm.icelink.sdp.RepeatTime): void;
        /**<span id='method-fm.icelink.sdp.TimeDescription-getRepeatTimes'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of repeat times.
         </div>


        @return {fm.icelink.sdp.RepeatTime[]}
        */
        getRepeatTimes(): fm.icelink.sdp.RepeatTime[];
        /**<span id='method-fm.icelink.sdp.TimeDescription-getTiming'>&nbsp;</span>**/
        /**
         <div>
         Gets the start and stop time.
         </div>


        @return {fm.icelink.sdp.Timing}
        */
        getTiming(): fm.icelink.sdp.Timing;
        /**<span id='method-fm.icelink.sdp.TimeDescription-removeRepeatTime'>&nbsp;</span>**/
        /**
         <div>
         Removes a repeat time.
         </div>

        @param {fm.icelink.sdp.RepeatTime} repeatTime The repeat time to remove.
        @return {boolean}
        */
        removeRepeatTime(repeatTime: fm.icelink.sdp.RepeatTime): boolean;
        /**<span id='method-fm.icelink.sdp.TimeDescription-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP time zone element.
     </div>

    */
    class TimeZone {
        getTypeString(): string;
        private fmicelinksdpTimeZoneInit();
        /**<span id='method-fm.icelink.sdp.TimeZone-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.timeZone` class.
         </div>

        @param {number} adjustmentTime The time that a time zone adjustment happens (network time protocol).
        @param {fm.icelink.TimeSpan} offset The offset from the time when the session was first scheduled.
        @return {}
        */
        constructor(adjustmentTime: number, offset: fm.icelink.TimeSpan);
        /**<span id='method-fm.icelink.sdp.TimeZone-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.timeZone` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.TimeZone}
        */
        static parse(s: string): fm.icelink.sdp.TimeZone;
        /**<span id='method-fm.icelink.sdp.TimeZone-getAdjustmentTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the time that a time zone adjustment happens (network time protocol).
         </div>


        @return {number}
        */
        getAdjustmentTime(): number;
        /**<span id='method-fm.icelink.sdp.TimeZone-getOffset'>&nbsp;</span>**/
        /**
         <div>
         Gets the offset from the time when the session was first scheduled.
         </div>


        @return {fm.icelink.TimeSpan}
        */
        getOffset(): fm.icelink.TimeSpan;
        /**<span id='method-fm.icelink.sdp.TimeZone-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP time zones element.
     </div>

    */
    class TimeZones {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.TimeZones-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.timeZones` class.
         </div>

        @param {fm.icelink.sdp.TimeZone[]} values The values.
        @return {}
        */
        constructor(values: fm.icelink.sdp.TimeZone[]);
        /**<span id='method-fm.icelink.sdp.TimeZones-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.timeZones` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.TimeZones}
        */
        static parse(s: string): fm.icelink.sdp.TimeZones;
        /**<span id='method-fm.icelink.sdp.TimeZones-addTimeZone'>&nbsp;</span>**/
        /**
         <div>
         Adds a time zone adjustment.
         </div>

        @param {fm.icelink.sdp.TimeZone} value The time zone adjustment to add.
        @return {void}
        */
        addTimeZone(value: fm.icelink.sdp.TimeZone): void;
        /**<span id='method-fm.icelink.sdp.TimeZones-getValues'>&nbsp;</span>**/
        /**
         <div>
         Gets the array of time zone adjustments.
         </div>


        @return {fm.icelink.sdp.TimeZone[]}
        */
        getValues(): fm.icelink.sdp.TimeZone[];
        /**<span id='method-fm.icelink.sdp.TimeZones-removeTimeZone'>&nbsp;</span>**/
        /**
         <div>
         Removes a time zone adjustment.
         </div>

        @param {fm.icelink.sdp.TimeZone} value The time zone adjustment to remove.
        @return {boolean}
        */
        removeTimeZone(value: fm.icelink.sdp.TimeZone): boolean;
        /**<span id='method-fm.icelink.sdp.TimeZones-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP timing element.
     </div>

    */
    class Timing {
        getTypeString(): string;
        private fmicelinksdpTimingInit();
        /**<span id='method-fm.icelink.sdp.Timing-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.timing` class.
         </div>


        @return {}
        */
        constructor();
        /**<span id='method-fm.icelink.sdp.Timing-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.timing` class.
         </div>

        @param {number} startTime The start time.
        @param {number} stopTime The stop time.
        @return {}
        */
        constructor(startTime: number, stopTime: number);
        /**<span id='method-fm.icelink.sdp.Timing-parse'>&nbsp;</span>**/
        /**
         <div>
         Creates an `fm.icelink.sdp.timing` instance from a string.
         </div>

        @param {string} s The string to parse.
        @return {fm.icelink.sdp.Timing}
        */
        static parse(s: string): fm.icelink.sdp.Timing;
        /**<span id='method-fm.icelink.sdp.Timing-getStartTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the start time.
         </div>


        @return {number}
        */
        getStartTime(): number;
        /**<span id='method-fm.icelink.sdp.Timing-getStopTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the stop time.
         </div>


        @return {number}
        */
        getStopTime(): number;
        /**<span id='method-fm.icelink.sdp.Timing-setStartTime'>&nbsp;</span>**/
        /**
         <div>
         Sets the start time.
         </div>


        @param {number} value
        @return {void}
        */
        setStartTime(value: number): void;
        /**<span id='method-fm.icelink.sdp.Timing-setStopTime'>&nbsp;</span>**/
        /**
         <div>
         Sets the stop time.
         </div>


        @param {number} value
        @return {void}
        */
        setStopTime(value: number): void;
        /**<span id='method-fm.icelink.sdp.Timing-toString'>&nbsp;</span>**/
        /**
         <div>
         Converts this instance to a string.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This gives the name and version number of the tool used to
     create the session description.  It is a session-level
     attribute, and it is not dependent on charset.
     </div>

    */
    class ToolAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.ToolAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.toolAttribute` class.
         </div>

        @param {string} tool The name and version number of the
         tool used to create the session description.
        @return {}
        */
        constructor(tool: string);
        /**<span id='method-fm.icelink.sdp.ToolAttribute-fromAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.toolAttribute` class.
         </div>

        @param {string} value The attribute value.
        @return {fm.icelink.sdp.ToolAttribute}
        */
        static fromAttributeValue(value: string): fm.icelink.sdp.ToolAttribute;
        /**<span id='method-fm.icelink.sdp.ToolAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.ToolAttribute-getTool'>&nbsp;</span>**/
        /**
         <div>
         Gets the name and version number of the
         tool used to create the session description.
         </div>


        @return {string}
        */
        getTool(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP media description with a transport protocol of "udp".
     </div>

    */
    class UdpMedia extends fm.icelink.sdp.Media {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.UdpMedia-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.udpMedia` class.
         </div>

        @param {string} mediaType The media type. See `fm.icelink.sdp.mediaType` for possible values.
        @param {number} transportPort The transport port.
        @param {string} formatDescription The format description.
        @return {}
        */
        constructor(mediaType: string, transportPort: number, formatDescription: string);
        /**<span id='method-fm.icelink.sdp.UdpMedia-getUdpTransportProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol keyword for UDP.
         </div>


        @return {string}
        */
        static getUdpTransportProtocol(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     This attribute is used to encapsulate unrecognized SDP attributes.
     </div>

    */
    class UnknownAttribute extends fm.icelink.sdp.Attribute {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.UnknownAttribute-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.unknownAttribute` class.
         </div>

        @param {string} name The name.
        @param {string} value The value.
        @return {}
        */
        constructor(name: string, value: string);
        /**<span id='method-fm.icelink.sdp.UnknownAttribute-getAttributeValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the internal value of the attribute.
         </div>


        @return {string}
        */
        protected getAttributeValue(): string;
        /**<span id='method-fm.icelink.sdp.UnknownAttribute-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the attribute name.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.sdp.UnknownAttribute-getValue'>&nbsp;</span>**/
        /**
         <div>
         Gets the attribute value.
         </div>


        @return {string}
        */
        getValue(): string;
    }
}
declare namespace fm.icelink.sdp {
    /**
     <div>
     An SDP encryption key with a method of "uri".
     </div>

    */
    class UriEncryptionKey extends fm.icelink.sdp.EncryptionKey {
        getTypeString(): string;
        /**<span id='method-fm.icelink.sdp.UriEncryptionKey-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sdp.uriEncryptionKey` class.
         </div>

        @param {fm.icelink.Uri} uri The URI referring to the data containing the key.
        @return {}
        */
        constructor(uri: fm.icelink.Uri);
        /**<span id='method-fm.icelink.sdp.UriEncryptionKey-getUri'>&nbsp;</span>**/
        /**
         <div>
         Gets the URI referring to the data containing the key.
         </div>


        @return {fm.icelink.Uri}
        */
        getUri(): fm.icelink.Uri;
    }
}
declare namespace fm.icelink.sdp {
}
declare namespace fm.icelink {
    /**
     <div>
     A session description.
     </div>

    */
    class SessionDescription {
        getTypeString(): string;
        private fmicelinkSessionDescriptionInit();
        constructor();
        /**<span id='method-fm.icelink.SessionDescription-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} sessionDescriptionJson The JSON to deserialize.
        @return {fm.icelink.SessionDescription} The deserialized session description.
        */
        static fromJson(sessionDescriptionJson: string): fm.icelink.SessionDescription;
        /**<span id='method-fm.icelink.SessionDescription-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.SessionDescription} sessionDescription The session description.
        @return {string}
         The serialized JSON.
 
        */
        static toJson(sessionDescription: fm.icelink.SessionDescription): string;
        /**<span id='method-fm.icelink.SessionDescription-getHasAudio'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether an audio stream is described.
         </div>


        @return {boolean}
        */
        getHasAudio(): boolean;
        /**<span id='method-fm.icelink.SessionDescription-getHasData'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether a data stream is described.
         </div>


        @return {boolean}
        */
        getHasData(): boolean;
        /**<span id='method-fm.icelink.SessionDescription-getHasVideo'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether a video stream is described.
         </div>


        @return {boolean}
        */
        getHasVideo(): boolean;
        /**<span id='method-fm.icelink.SessionDescription-getIsOffer'>&nbsp;</span>**/
        /**
         <div>
         Gets a value indicating whether this instance is offer.
         </div>


        @return {boolean}
        */
        getIsOffer(): boolean;
        /**<span id='method-fm.icelink.SessionDescription-getSdpMessage'>&nbsp;</span>**/
        /**
         <div>
         Gets the SDP message.
         </div>


        @return {fm.icelink.sdp.Message}
        */
        getSdpMessage(): fm.icelink.sdp.Message;
        /**<span id='method-fm.icelink.SessionDescription-getSessionId'>&nbsp;</span>**/
        /**
         <div>
         Gets the session id of the remote description, if remote description is set. Returns null otherwise.
         </div>


        @return {number}
        */
        getSessionId(): number;
        /**<span id='method-fm.icelink.SessionDescription-getSessionVersion'>&nbsp;</span>**/
        /**
         <div>
         Gets the version of the remote description, if remote description is set. Returns null otherwise.
         </div>


        @return {number}
        */
        getSessionVersion(): number;
        /**<span id='method-fm.icelink.SessionDescription-getTieBreaker'>&nbsp;</span>**/
        /**
         <div>
         Gets the tie breaker in case of a role conflict.
         </div>


        @return {string}
        */
        getTieBreaker(): string;
        /**<span id='method-fm.icelink.SessionDescription-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.SessionDescriptionType}
        */
        getType(): fm.icelink.SessionDescriptionType;
        /**<span id='method-fm.icelink.SessionDescription-setSdpMessage'>&nbsp;</span>**/
        /**
         <div>
         Sets the SDP message.
         </div>


        @param {fm.icelink.sdp.Message} value
        @return {void}
        */
        setSdpMessage(value: fm.icelink.sdp.Message): void;
        /**<span id='method-fm.icelink.SessionDescription-setTieBreaker'>&nbsp;</span>**/
        /**
         <div>
         Sets the tie breaker in case of a role conflict.
         </div>


        @param {string} value
        @return {void}
        */
        setTieBreaker(value: string): void;
        /**<span id='method-fm.icelink.SessionDescription-setType'>&nbsp;</span>**/
        /**
         <div>
         Sets the type.
         </div>


        @param {fm.icelink.SessionDescriptionType} value
        @return {void}
        */
        setType(value: fm.icelink.SessionDescriptionType): void;
        /**<span id='method-fm.icelink.SessionDescription-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>


        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    class SessionDescriptionTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.SessionDescriptionType);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A size (width and height).
     </div>

    */
    class Size {
        getTypeString(): string;
        private fmicelinkSizeInit();
        /**<span id='method-fm.icelink.Size-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.size` class.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @return {}
        */
        constructor(width: number, height: number);
        constructor();
        /**<span id='method-fm.icelink.Size-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} sizeJson The JSON to deserialize.
        @return {fm.icelink.Size} The deserialized size.
        */
        static fromJson(sizeJson: string): fm.icelink.Size;
        /**<span id='method-fm.icelink.Size-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.Size} size The size.
        @return {string}
         The serialized JSON.
 
        */
        static toJson(size: fm.icelink.Size): string;
        /**<span id='method-fm.icelink.Size-getHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height.
         </div>


        @return {number}
        */
        getHeight(): number;
        /**<span id='method-fm.icelink.Size-getWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width.
         </div>


        @return {number}
        */
        getWidth(): number;
        /**<span id='method-fm.icelink.Size-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
         The serialized JSON.
 
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    class SignallingStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.SignallingState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A sink output (e.g. device, track, screen).
     </div>

    */
    class SinkOutput {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.SinkOutput-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sinkOutput` class.
         </div>

        @param {string} id The identifier.
        @param {string} name The name.
        @return {}
        */
        constructor(id: string, name: string);
        /**<span id='method-fm.icelink.SinkOutput-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} sinkOutputJson The sink output JSON.
        @return {fm.icelink.SinkOutput}
        */
        static fromJson(sinkOutputJson: string): fm.icelink.SinkOutput;
        /**<span id='method-fm.icelink.SinkOutput-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance array from JSON.
         </div>

        @param {string} sinkOutputsJson The sink outputs JSON.
        @return {fm.icelink.SinkOutput[]}
        */
        static fromJsonArray(sinkOutputsJson: string): fm.icelink.SinkOutput[];
        /**<span id='method-fm.icelink.SinkOutput-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.SinkOutput} sinkOutput The sink output.
        @return {string}
        */
        static toJson(sinkOutput: fm.icelink.SinkOutput): string;
        /**<span id='method-fm.icelink.SinkOutput-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance array to JSON.
         </div>

        @param {fm.icelink.SinkOutput[]} sinkOutputs The sink outputs.
        @return {string}
        */
        static toJsonArray(sinkOutputs: fm.icelink.SinkOutput[]): string;
        /**<span id='method-fm.icelink.SinkOutput-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.SinkOutput-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.SinkOutput-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
        /**<span id='method-fm.icelink.SinkOutput-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>

        @return {string}
         A string that represents this instance.
 
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A source input (e.g. device, track, screen).
     </div>

    */
    class SourceInput {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.SourceInput-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.sourceInput` class.
         </div>

        @param {string} id The identifier.
        @param {string} name The name.
        @return {}
        */
        constructor(id: string, name: string);
        /**<span id='method-fm.icelink.SourceInput-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance from JSON.
         </div>

        @param {string} sourceInputJson The source input JSON.
        @return {fm.icelink.SourceInput}
        */
        static fromJson(sourceInputJson: string): fm.icelink.SourceInput;
        /**<span id='method-fm.icelink.SourceInput-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Deserializes an instance array from JSON.
         </div>

        @param {string} sourceInputsJson The source inputs JSON.
        @return {fm.icelink.SourceInput[]}
        */
        static fromJsonArray(sourceInputsJson: string): fm.icelink.SourceInput[];
        /**<span id='method-fm.icelink.SourceInput-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance to JSON.
         </div>

        @param {fm.icelink.SourceInput} sourceInput The source input.
        @return {string}
        */
        static toJson(sourceInput: fm.icelink.SourceInput): string;
        /**<span id='method-fm.icelink.SourceInput-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an instance array to JSON.
         </div>

        @param {fm.icelink.SourceInput[]} sourceInputs The source inputs.
        @return {string}
        */
        static toJsonArray(sourceInputs: fm.icelink.SourceInput[]): string;
        /**<span id='method-fm.icelink.SourceInput-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.SourceInput-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.SourceInput-setId'>&nbsp;</span>**/
        /**
         <div>
         Sets the identifier.
         </div>


        @param {string} value
        @return {void}
        */
        setId(value: string): void;
        /**<span id='method-fm.icelink.SourceInput-setName'>&nbsp;</span>**/
        /**
         <div>
         Sets the name.
         </div>


        @param {string} value
        @return {void}
        */
        setName(value: string): void;
        /**<span id='method-fm.icelink.SourceInput-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this instance to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
        /**<span id='method-fm.icelink.SourceInput-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>

        @return {string}
         A string that represents this instance.
 
        */
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Base stats.
     </div>

    */
    abstract class BaseStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.BaseStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.BaseStats-getId'>&nbsp;</span>**/
        /**
         <div>
         Gets the identifier of
         the object generating these stats.
         </div>


        @return {string}
        */
        getId(): string;
        /**<span id='method-fm.icelink.BaseStats-getTimestamp'>&nbsp;</span>**/
        /**
         <div>
         Gets the timestamp when
         these stats were generated.
         </div>


        @return {fm.icelink.DateTime}
        */
        getTimestamp(): fm.icelink.DateTime;
        /**<span id='method-fm.icelink.BaseStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Codec stats.
     </div>

    */
    class CodecStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkCodecStatsInit();
        constructor();
        /**<span id='method-fm.icelink.CodecStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes codec stats from JSON.
         </div>

        @param {string} codecJson The codec's stats JSON.
        @return {fm.icelink.CodecStats}
        */
        static fromJson(codecJson: string): fm.icelink.CodecStats;
        /**<span id='method-fm.icelink.CodecStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes codec stats to JSON.
         </div>

        @param {fm.icelink.CodecStats} codec The codec's stats.
        @return {string}
        */
        static toJson(codec: fm.icelink.CodecStats): string;
        /**<span id='method-fm.icelink.CodecStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.CodecStats-getChannelCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the channel count.
         </div>


        @return {number}
        */
        getChannelCount(): number;
        /**<span id='method-fm.icelink.CodecStats-getClockRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the clock rate.
         </div>


        @return {number}
        */
        getClockRate(): number;
        /**<span id='method-fm.icelink.CodecStats-getCodecType'>&nbsp;</span>**/
        /**
         <div>
         Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.
         </div>


        @return {fm.icelink.CodecType}
        */
        getCodecType(): fm.icelink.CodecType;
        /**<span id='method-fm.icelink.CodecStats-getName'>&nbsp;</span>**/
        /**
         <div>
         Gets the name.
         </div>


        @return {string}
        */
        getName(): string;
        /**<span id='method-fm.icelink.CodecStats-getParameters'>&nbsp;</span>**/
        /**
         <div>
         Gets the parameters.
         </div>


        @return {string}
        */
        getParameters(): string;
        /**<span id='method-fm.icelink.CodecStats-getPayloadType'>&nbsp;</span>**/
        /**
         <div>
         Gets the payload type.
         </div>


        @return {number}
        */
        getPayloadType(): number;
        /**<span id='method-fm.icelink.CodecStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.CodecStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Stream stats.
     </div>

    */
    abstract class StreamStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.StreamStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.StreamStats-getIsHost'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the transport's active candidate pair has a host candidate.
         </div>


        @return {boolean}
        */
        getIsHost(): boolean;
        /**<span id='method-fm.icelink.StreamStats-getIsReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the transport's active candidate pair has a reflexive candidate.
         </div>


        @return {boolean}
        */
        getIsReflexive(): boolean;
        /**<span id='method-fm.icelink.StreamStats-getIsRelayed'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the transport's active candidate pair has a relayed candidate.
         </div>


        @return {boolean}
        */
        getIsRelayed(): boolean;
        /**<span id='method-fm.icelink.StreamStats-getTransport'>&nbsp;</span>**/
        /**
         <div>
         Gets the transport's stats.
         </div>


        @return {fm.icelink.TransportStats}
        */
        getTransport(): fm.icelink.TransportStats;
        /**<span id='method-fm.icelink.StreamStats-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.StreamType}
        */
        getType(): fm.icelink.StreamType;
        /**<span id='method-fm.icelink.StreamStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data stream stats.
     </div>

    */
    class DataStreamStats extends fm.icelink.StreamStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.DataStreamStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes data stream stats from JSON.
         </div>

        @param {string} dataStreamJson The data stream's stats JSON.
        @return {fm.icelink.DataStreamStats}
        */
        static fromJson(dataStreamJson: string): fm.icelink.DataStreamStats;
        /**<span id='method-fm.icelink.DataStreamStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes data stream stats to JSON.
         </div>

        @param {fm.icelink.DataStreamStats} dataStream The data stream's stats.
        @return {string}
        */
        static toJson(dataStream: fm.icelink.DataStreamStats): string;
        /**<span id='method-fm.icelink.DataStreamStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.DataStreamStats-getDataChannel'>&nbsp;</span>**/
        /**
         <div>
         Gets the first data channel's stats.
         </div>


        @return {fm.icelink.DataChannelStats}
        */
        getDataChannel(): fm.icelink.DataChannelStats;
        /**<span id='method-fm.icelink.DataStreamStats-getDataChannel'>&nbsp;</span>**/
        /**
         <div>
         Gets a data channel by its identifier.
         </div>

        @param {string} dataChannelId The data channel identifier.
        @return {fm.icelink.DataChannelStats}
        */
        getDataChannel(dataChannelId: string): fm.icelink.DataChannelStats;
        /**<span id='method-fm.icelink.DataStreamStats-getDataChannels'>&nbsp;</span>**/
        /**
         <div>
         Gets the data channels' stats.
         </div>


        @return {fm.icelink.DataChannelStats[]}
        */
        getDataChannels(): fm.icelink.DataChannelStats[];
        /**<span id='method-fm.icelink.DataStreamStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.DataStreamStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media component stats.
     </div>

    */
    abstract class MediaComponentStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkMediaComponentStatsInit();
        constructor();
        /**<span id='method-fm.icelink.MediaComponentStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaComponentStats-getCodec'>&nbsp;</span>**/
        /**
         <div>
         Gets the codec stats.
         </div>


        @return {fm.icelink.CodecStats}
        */
        getCodec(): fm.icelink.CodecStats;
        /**<span id='method-fm.icelink.MediaComponentStats-getFirCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the FIR count.
         </div>


        @return {number}
        */
        getFirCount(): number;
        /**<span id='method-fm.icelink.MediaComponentStats-getNackCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the NACK count.
         </div>


        @return {number}
        */
        getNackCount(): number;
        /**<span id='method-fm.icelink.MediaComponentStats-getPliCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the PLI count.
         </div>


        @return {number}
        */
        getPliCount(): number;
        /**<span id='method-fm.icelink.MediaComponentStats-getSliCount'>&nbsp;</span>**/
        /**
         <div>
         Gets the SLI count.
         </div>


        @return {number}
        */
        getSliCount(): number;
        /**<span id='method-fm.icelink.MediaComponentStats-getSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Gets the synchronization source.
         </div>


        @return {number}
        */
        getSynchronizationSource(): number;
        /**<span id='method-fm.icelink.MediaComponentStats-getTrack'>&nbsp;</span>**/
        /**
         <div>
         Gets the track's stats.
         </div>


        @return {fm.icelink.MediaTrackStats}
        */
        getTrack(): fm.icelink.MediaTrackStats;
        /**<span id='method-fm.icelink.MediaComponentStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setCodec'>&nbsp;</span>**/
        /**
         <div>
         Sets the codec stats.
         </div>


        @param {fm.icelink.CodecStats} value
        @return {void}
        */
        setCodec(value: fm.icelink.CodecStats): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setFirCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the FIR count.
         </div>


        @param {number} value
        @return {void}
        */
        setFirCount(value: number): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setNackCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the NACK count.
         </div>


        @param {number} value
        @return {void}
        */
        setNackCount(value: number): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setPliCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the PLI count.
         </div>


        @param {number} value
        @return {void}
        */
        setPliCount(value: number): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setSliCount'>&nbsp;</span>**/
        /**
         <div>
         Sets the SLI count.
         </div>


        @param {number} value
        @return {void}
        */
        setSliCount(value: number): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Sets the synchronization source.
         </div>


        @param {number} value
        @return {void}
        */
        setSynchronizationSource(value: number): void;
        /**<span id='method-fm.icelink.MediaComponentStats-setTrack'>&nbsp;</span>**/
        /**
         <div>
         Sets the track's stats.
         </div>


        @param {fm.icelink.MediaTrackStats} value
        @return {void}
        */
        setTrack(value: fm.icelink.MediaTrackStats): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media stats.
     </div>

    */
    class MediaStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.MediaStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes media stats from JSON.
         </div>

        @param {string} mediaJson The media's stats JSON.
        @return {fm.icelink.MediaStats}
        */
        static fromJson(mediaJson: string): fm.icelink.MediaStats;
        /**<span id='method-fm.icelink.MediaStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes media stats to JSON.
         </div>

        @param {fm.icelink.MediaStats} media The media's stats.
        @return {string}
        */
        static toJson(media: fm.icelink.MediaStats): string;
        /**<span id='method-fm.icelink.MediaStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaStats-getTrack'>&nbsp;</span>**/
        /**
         <div>
         Gets the first track's stats.
         </div>


        @return {fm.icelink.MediaTrackStats}
        */
        getTrack(): fm.icelink.MediaTrackStats;
        /**<span id='method-fm.icelink.MediaStats-getTrack'>&nbsp;</span>**/
        /**
         <div>
         Gets a track by its identifier.
         </div>

        @param {string} trackId The track identifier.
        @return {fm.icelink.MediaTrackStats}
        */
        getTrack(trackId: string): fm.icelink.MediaTrackStats;
        /**<span id='method-fm.icelink.MediaStats-getTracks'>&nbsp;</span>**/
        /**
         <div>
         Gets the tracks' stats.
         </div>


        @return {fm.icelink.MediaTrackStats[]}
        */
        getTracks(): fm.icelink.MediaTrackStats[];
        /**<span id='method-fm.icelink.MediaStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media sender stats.
     </div>

    */
    class MediaSenderStats extends fm.icelink.MediaComponentStats {
        getTypeString(): string;
        private fmicelinkMediaSenderStatsInit();
        constructor();
        /**<span id='method-fm.icelink.MediaSenderStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes media sender stats from JSON.
         </div>

        @param {string} mediaSenderJson The media sender's stats JSON.
        @return {fm.icelink.MediaSenderStats}
        */
        static fromJson(mediaSenderJson: string): fm.icelink.MediaSenderStats;
        /**<span id='method-fm.icelink.MediaSenderStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes media sender stats to JSON.
         </div>

        @param {fm.icelink.MediaSenderStats} mediaSender The media sender's stats.
        @return {string}
        */
        static toJson(mediaSender: fm.icelink.MediaSenderStats): string;
        /**<span id='method-fm.icelink.MediaSenderStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaSenderStats-getBytesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes sent.
         </div>


        @return {number}
        */
        getBytesSent(): number;
        /**<span id='method-fm.icelink.MediaSenderStats-getPacketsSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of packets sent.
         </div>


        @return {number}
        */
        getPacketsSent(): number;
        /**<span id='method-fm.icelink.MediaSenderStats-getRoundTripTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the round trip time in milliseconds.
         </div>


        @return {number}
        */
        getRoundTripTime(): number;
        /**<span id='method-fm.icelink.MediaSenderStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaSenderStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media receiver stats.
     </div>

    */
    class MediaReceiverStats extends fm.icelink.MediaComponentStats {
        getTypeString(): string;
        private fmicelinkMediaReceiverStatsInit();
        constructor();
        /**<span id='method-fm.icelink.MediaReceiverStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes media receiver stats from JSON.
         </div>

        @param {string} mediaReceiverJson The media receiver's stats JSON.
        @return {fm.icelink.MediaReceiverStats}
        */
        static fromJson(mediaReceiverJson: string): fm.icelink.MediaReceiverStats;
        /**<span id='method-fm.icelink.MediaReceiverStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes media receiver stats to JSON.
         </div>

        @param {fm.icelink.MediaReceiverStats} mediaReceiver The media receiver's stats.
        @return {string}
        */
        static toJson(mediaReceiver: fm.icelink.MediaReceiverStats): string;
        /**<span id='method-fm.icelink.MediaReceiverStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaReceiverStats-getBytesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes received.
         </div>


        @return {number}
        */
        getBytesReceived(): number;
        /**<span id='method-fm.icelink.MediaReceiverStats-getJitter'>&nbsp;</span>**/
        /**
         <div>
         Gets the jitter in milliseconds.
         </div>


        @return {number}
        */
        getJitter(): number;
        /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsDiscarded'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of packets discarded.
         </div>


        @return {number}
        */
        getPacketsDiscarded(): number;
        /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsLost'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of packets lost.
         </div>


        @return {number}
        */
        getPacketsLost(): number;
        /**<span id='method-fm.icelink.MediaReceiverStats-getPacketsReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of packets received.
         </div>


        @return {number}
        */
        getPacketsReceived(): number;
        /**<span id='method-fm.icelink.MediaReceiverStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaReceiverStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media track stats.
     </div>

    */
    class MediaTrackStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkMediaTrackStatsInit();
        constructor();
        /**<span id='method-fm.icelink.MediaTrackStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes media track stats from JSON.
         </div>

        @param {string} mediaTrackJson The media track's stats JSON.
        @return {fm.icelink.MediaTrackStats}
        */
        static fromJson(mediaTrackJson: string): fm.icelink.MediaTrackStats;
        /**<span id='method-fm.icelink.MediaTrackStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of media track stats from JSON.
         </div>

        @param {string} mediaTracksJson The media tracks' stats JSON.
        @return {fm.icelink.MediaTrackStats[]}
        */
        static fromJsonArray(mediaTracksJson: string): fm.icelink.MediaTrackStats[];
        /**<span id='method-fm.icelink.MediaTrackStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes media track stats to JSON.
         </div>

        @param {fm.icelink.MediaTrackStats} mediaTrack The media track's stats.
        @return {string}
        */
        static toJson(mediaTrack: fm.icelink.MediaTrackStats): string;
        /**<span id='method-fm.icelink.MediaTrackStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of media track stats to JSON.
         </div>

        @param {fm.icelink.MediaTrackStats[]} mediaTracks The media tracks' stats.
        @return {string}
        */
        static toJsonArray(mediaTracks: fm.icelink.MediaTrackStats[]): string;
        /**<span id='method-fm.icelink.MediaTrackStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaTrackStats-getDetached'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the track is detached.
         </div>


        @return {boolean}
        */
        getDetached(): boolean;
        /**<span id='method-fm.icelink.MediaTrackStats-getFrameHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the frame height. Video-only.
         Set by encoder or decoder.
         </div>


        @return {number}
        */
        getFrameHeight(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFrameRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the frame rate. Video-only.
         Set by encoder or decoder.
         </div>


        @return {number}
        */
        getFrameRate(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesCorrupted'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of corrupted frames. Video-only.
         Set by depacketizer.
         </div>


        @return {number}
        */
        getFramesCorrupted(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesDecoded'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of frames decoded.
         Set by decoder.
         </div>


        @return {number}
        */
        getFramesDecoded(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesDropped'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of frames dropped. Video-only.
         Set by depacketizer.
         </div>


        @return {number}
        */
        getFramesDropped(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesEncoded'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of frames encoded.
         Set by encoded.
         </div>


        @return {number}
        */
        getFramesEncoded(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of frames received.
         Set by depacketizer.
         </div>


        @return {number}
        */
        getFramesReceived(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFramesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of frames sent.
         Set by packetizer.
         </div>


        @return {number}
        */
        getFramesSent(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getFrameWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the frame width. Video-only.
         Set by encoder or decoder.
         </div>


        @return {number}
        */
        getFrameWidth(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getStopped'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the track is stopped.
         Set by source.
         </div>


        @return {boolean}
        */
        getStopped(): boolean;
        /**<span id='method-fm.icelink.MediaTrackStats-getSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Gets the first synchronization source.
         </div>


        @return {number}
        */
        getSynchronizationSource(): number;
        /**<span id='method-fm.icelink.MediaTrackStats-getSynchronizationSources'>&nbsp;</span>**/
        /**
         <div>
         Gets the synchronization sources.
         </div>


        @return {number[]}
        */
        getSynchronizationSources(): number[];
        /**<span id='method-fm.icelink.MediaTrackStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaTrackStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Candidate stats.
     </div>

    */
    class CandidateStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkCandidateStatsInit();
        constructor();
        /**<span id='method-fm.icelink.CandidateStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes candidate stats from JSON.
         </div>

        @param {string} candidateJson The candidate's stats JSON.
        @return {fm.icelink.CandidateStats}
        */
        static fromJson(candidateJson: string): fm.icelink.CandidateStats;
        /**<span id='method-fm.icelink.CandidateStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of candidate stats from JSON.
         </div>

        @param {string} candidatesJson The candidates' stats JSON.
        @return {fm.icelink.CandidateStats[]}
        */
        static fromJsonArray(candidatesJson: string): fm.icelink.CandidateStats[];
        /**<span id='method-fm.icelink.CandidateStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes candidate stats to JSON.
         </div>

        @param {fm.icelink.CandidateStats} candidate The candidate's stats.
        @return {string}
        */
        static toJson(candidate: fm.icelink.CandidateStats): string;
        /**<span id='method-fm.icelink.CandidateStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of candidate stats to JSON.
         </div>

        @param {fm.icelink.CandidateStats[]} candidates The candidates' stats.
        @return {string}
        */
        static toJsonArray(candidates: fm.icelink.CandidateStats[]): string;
        /**<span id='method-fm.icelink.CandidateStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.CandidateStats-getIPAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the IP address.
         </div>


        @return {string}
        */
        getIPAddress(): string;
        /**<span id='method-fm.icelink.CandidateStats-getIsHost'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the candidate is host/local.
         </div>


        @return {boolean}
        */
        getIsHost(): boolean;
        /**<span id='method-fm.icelink.CandidateStats-getIsReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the candidate is reflexive.
         </div>


        @return {boolean}
        */
        getIsReflexive(): boolean;
        /**<span id='method-fm.icelink.CandidateStats-getIsRelayed'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the candidate is relayed.
         </div>


        @return {boolean}
        */
        getIsRelayed(): boolean;
        /**<span id='method-fm.icelink.CandidateStats-getPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the port.
         </div>


        @return {number}
        */
        getPort(): number;
        /**<span id='method-fm.icelink.CandidateStats-getPriority'>&nbsp;</span>**/
        /**
         <div>
         Gets the priority.
         </div>


        @return {number}
        */
        getPriority(): number;
        /**<span id='method-fm.icelink.CandidateStats-getProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol.
         </div>


        @return {fm.icelink.ProtocolType}
        */
        getProtocol(): fm.icelink.ProtocolType;
        /**<span id='method-fm.icelink.CandidateStats-getRelatedIPAddress'>&nbsp;</span>**/
        /**
         <div>
         Gets the related IP address.
         </div>


        @return {string}
        */
        getRelatedIPAddress(): string;
        /**<span id='method-fm.icelink.CandidateStats-getRelatedPort'>&nbsp;</span>**/
        /**
         <div>
         Gets the related port.
         </div>


        @return {number}
        */
        getRelatedPort(): number;
        /**<span id='method-fm.icelink.CandidateStats-getTurnProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol used by this candidate when communicating with a TURN (relay) server. If unknown or not a relayed candidate, defaults to ProtocolType.Unknown.
         </div>


        @return {fm.icelink.ProtocolType}
        */
        getTurnProtocol(): fm.icelink.ProtocolType;
        /**<span id='method-fm.icelink.CandidateStats-getType'>&nbsp;</span>**/
        /**
         <div>
         Gets the type.
         </div>


        @return {fm.icelink.CandidateType}
        */
        getType(): fm.icelink.CandidateType;
        /**<span id='method-fm.icelink.CandidateStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.CandidateStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Candidate pair stats.
     </div>

    */
    class CandidatePairStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkCandidatePairStatsInit();
        constructor();
        /**<span id='method-fm.icelink.CandidatePairStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes candidate pair stats from JSON.
         </div>

        @param {string} candidatePairJson The candidate pair's stats JSON.
        @return {fm.icelink.CandidatePairStats}
        */
        static fromJson(candidatePairJson: string): fm.icelink.CandidatePairStats;
        /**<span id='method-fm.icelink.CandidatePairStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of candidate pair stats from JSON.
         </div>

        @param {string} candidatePairsJson The candidate pairs' stats JSON.
        @return {fm.icelink.CandidatePairStats[]}
        */
        static fromJsonArray(candidatePairsJson: string): fm.icelink.CandidatePairStats[];
        /**<span id='method-fm.icelink.CandidatePairStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes candidate pair stats to JSON.
         </div>

        @param {fm.icelink.CandidatePairStats} candidatePair The candidate pair's stats.
        @return {string}
        */
        static toJson(candidatePair: fm.icelink.CandidatePairStats): string;
        /**<span id='method-fm.icelink.CandidatePairStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of candidate pair stats to JSON.
         </div>

        @param {fm.icelink.CandidatePairStats[]} candidatePairs The candidate pairs' stats.
        @return {string}
        */
        static toJsonArray(candidatePairs: fm.icelink.CandidatePairStats[]): string;
        /**<span id='method-fm.icelink.CandidatePairStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.CandidatePairStats-getBytesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes received.
         </div>


        @return {number}
        */
        getBytesReceived(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getBytesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes sent.
         </div>


        @return {number}
        */
        getBytesSent(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getConsentRequestsReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of consent requests received.
         </div>


        @return {number}
        */
        getConsentRequestsReceived(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getConsentRequestsSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of consent requests sent.
         </div>


        @return {number}
        */
        getConsentRequestsSent(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getConsentResponsesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of consent responses received.
         </div>


        @return {number}
        */
        getConsentResponsesReceived(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getConsentResponsesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of consent responses sent.
         </div>


        @return {number}
        */
        getConsentResponsesSent(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getCurrentRoundTripTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the current round trip time in milliseconds.
         </div>


        @return {number}
        */
        getCurrentRoundTripTime(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getLocalCandidateId'>&nbsp;</span>**/
        /**
         <div>
         Gets the local candidate identifier.
         </div>


        @return {string}
        */
        getLocalCandidateId(): string;
        /**<span id='method-fm.icelink.CandidatePairStats-getNominated'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the candidate pair is nominated.
         </div>


        @return {boolean}
        */
        getNominated(): boolean;
        /**<span id='method-fm.icelink.CandidatePairStats-getPriority'>&nbsp;</span>**/
        /**
         <div>
         Gets the priority.
         </div>


        @return {number}
        */
        getPriority(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getRemoteCandidateId'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote candidate identifier.
         </div>


        @return {string}
        */
        getRemoteCandidateId(): string;
        /**<span id='method-fm.icelink.CandidatePairStats-getRequestsSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of requests sent.
         </div>


        @return {number}
        */
        getRequestsSent(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getResponsesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of responses received.
         </div>


        @return {number}
        */
        getResponsesReceived(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state.
         </div>


        @return {fm.icelink.CandidatePairState}
        */
        getState(): fm.icelink.CandidatePairState;
        /**<span id='method-fm.icelink.CandidatePairStats-getTotalRoundTripTime'>&nbsp;</span>**/
        /**
         <div>
         Gets the total round trip time in milliseconds.
         </div>


        @return {number}
        */
        getTotalRoundTripTime(): number;
        /**<span id='method-fm.icelink.CandidatePairStats-getTransportId'>&nbsp;</span>**/
        /**
         <div>
         Gets the transport identifier.
         </div>


        @return {string}
        */
        getTransportId(): string;
        /**<span id='method-fm.icelink.CandidatePairStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.CandidatePairStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Certificate stats.
     </div>

    */
    class CertificateStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.CertificateStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes certificate stats from JSON.
         </div>

        @param {string} certificateJson The certificate's stats JSON.
        @return {fm.icelink.CertificateStats}
        */
        static fromJson(certificateJson: string): fm.icelink.CertificateStats;
        /**<span id='method-fm.icelink.CertificateStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of certificate stats from JSON.
         </div>

        @param {string} certificatesJson The certificates' stats JSON.
        @return {fm.icelink.CertificateStats[]}
        */
        static fromJsonArray(certificatesJson: string): fm.icelink.CertificateStats[];
        /**<span id='method-fm.icelink.CertificateStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes certificate stats to JSON.
         </div>

        @param {fm.icelink.CertificateStats} certificate The certificate's stats.
        @return {string}
        */
        static toJson(certificate: fm.icelink.CertificateStats): string;
        /**<span id='method-fm.icelink.CertificateStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of certificate stats to JSON.
         </div>

        @param {fm.icelink.CertificateStats[]} certificates The certificates' stats.
        @return {string}
        */
        static toJsonArray(certificates: fm.icelink.CertificateStats[]): string;
        /**<span id='method-fm.icelink.CertificateStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.CertificateStats-getCertificateBase64'>&nbsp;</span>**/
        /**
         <div>
         Gets the certificate in Base64 format.
         </div>


        @return {string}
        */
        getCertificateBase64(): string;
        /**<span id='method-fm.icelink.CertificateStats-getFingerprint'>&nbsp;</span>**/
        /**
         <div>
         Gets the fingerprint.
         </div>


        @return {string}
        */
        getFingerprint(): string;
        /**<span id='method-fm.icelink.CertificateStats-getFingerprintAlgorithm'>&nbsp;</span>**/
        /**
         <div>
         Gets the fingerprint algorithm.
         </div>


        @return {string}
        */
        getFingerprintAlgorithm(): string;
        /**<span id='method-fm.icelink.CertificateStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.CertificateStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Data channel stats.
     </div>

    */
    class DataChannelStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkDataChannelStatsInit();
        constructor();
        /**<span id='method-fm.icelink.DataChannelStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes data channel stats from JSON.
         </div>

        @param {string} dataChannelJson The data channel's stats JSON.
        @return {fm.icelink.DataChannelStats}
        */
        static fromJson(dataChannelJson: string): fm.icelink.DataChannelStats;
        /**<span id='method-fm.icelink.DataChannelStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of data channel stats from JSON.
         </div>

        @param {string} dataChannelsJson The data channels' stats JSON.
        @return {fm.icelink.DataChannelStats[]}
        */
        static fromJsonArray(dataChannelsJson: string): fm.icelink.DataChannelStats[];
        /**<span id='method-fm.icelink.DataChannelStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes data channel stats to JSON.
         </div>

        @param {fm.icelink.DataChannelStats} dataChannel The data channel's stats.
        @return {string}
        */
        static toJson(dataChannel: fm.icelink.DataChannelStats): string;
        /**<span id='method-fm.icelink.DataChannelStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of data channel stats to JSON.
         </div>

        @param {fm.icelink.DataChannelStats[]} dataChannels The data channels' stats.
        @return {string}
        */
        static toJsonArray(dataChannels: fm.icelink.DataChannelStats[]): string;
        /**<span id='method-fm.icelink.DataChannelStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.DataChannelStats-getBytesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes received.
         </div>


        @return {number}
        */
        getBytesReceived(): number;
        /**<span id='method-fm.icelink.DataChannelStats-getBytesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes sent.
         </div>


        @return {number}
        */
        getBytesSent(): number;
        /**<span id='method-fm.icelink.DataChannelStats-getLabel'>&nbsp;</span>**/
        /**
         <div>
         Gets the label.
         </div>


        @return {string}
        */
        getLabel(): string;
        /**<span id='method-fm.icelink.DataChannelStats-getMessagesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of messages received.
         </div>


        @return {number}
        */
        getMessagesReceived(): number;
        /**<span id='method-fm.icelink.DataChannelStats-getMessagesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of messages sent.
         </div>


        @return {number}
        */
        getMessagesSent(): number;
        /**<span id='method-fm.icelink.DataChannelStats-getOrdered'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the channel is ordered.
         </div>


        @return {boolean}
        */
        getOrdered(): boolean;
        /**<span id='method-fm.icelink.DataChannelStats-getProtocol'>&nbsp;</span>**/
        /**
         <div>
         Gets the protocol.
         </div>


        @return {string}
        */
        getProtocol(): string;
        /**<span id='method-fm.icelink.DataChannelStats-getState'>&nbsp;</span>**/
        /**
         <div>
         Gets the state.
         </div>


        @return {fm.icelink.DataChannelState}
        */
        getState(): fm.icelink.DataChannelState;
        /**<span id='method-fm.icelink.DataChannelStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.DataChannelStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Connection stats.
     </div>

    */
    class ConnectionStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.ConnectionStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes connection stats from JSON.
         </div>

        @param {string} connectionJson The connection's stats JSON.
        @return {fm.icelink.ConnectionStats}
        */
        static fromJson(connectionJson: string): fm.icelink.ConnectionStats;
        /**<span id='method-fm.icelink.ConnectionStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes connection stats to JSON.
         </div>

        @param {fm.icelink.ConnectionStats} connection The connection's stats.
        @return {string}
        */
        static toJson(connection: fm.icelink.ConnectionStats): string;
        /**<span id='method-fm.icelink.ConnectionStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.ConnectionStats-getAudioStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first audio stream's stats.
         </div>


        @return {fm.icelink.MediaStreamStats}
        */
        getAudioStream(): fm.icelink.MediaStreamStats;
        /**<span id='method-fm.icelink.ConnectionStats-getAudioStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the audio streams' stats.
         </div>


        @return {fm.icelink.MediaStreamStats[]}
        */
        getAudioStreams(): fm.icelink.MediaStreamStats[];
        /**<span id='method-fm.icelink.ConnectionStats-getDataStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the data stream's stats.
         </div>


        @return {fm.icelink.DataStreamStats}
        */
        getDataStream(): fm.icelink.DataStreamStats;
        /**<span id='method-fm.icelink.ConnectionStats-getIsHost'>&nbsp;</span>**/
        /**
         <div>
         Gets whether any of the streams are using a transport
         whose active candidate pair has a host candidate.
         </div>


        @return {boolean}
        */
        getIsHost(): boolean;
        /**<span id='method-fm.icelink.ConnectionStats-getIsReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets whether any of the streams are using a transport
         whose active candidate pair has a reflexive candidate.
         </div>


        @return {boolean}
        */
        getIsReflexive(): boolean;
        /**<span id='method-fm.icelink.ConnectionStats-getIsRelayed'>&nbsp;</span>**/
        /**
         <div>
         Gets whether any of the streams are using a transport
         whose active candidate pair has a relayed candidate.
         </div>


        @return {boolean}
        */
        getIsRelayed(): boolean;
        /**<span id='method-fm.icelink.ConnectionStats-getMediaStream'>&nbsp;</span>**/
        /**
         <div>
         Gets a media stream by its identifier.
         </div>

        @param {string} mediaStreamId The media stream identifier.
        @return {fm.icelink.MediaStreamStats}
        */
        getMediaStream(mediaStreamId: string): fm.icelink.MediaStreamStats;
        /**<span id='method-fm.icelink.ConnectionStats-getMediaStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first media stream's stats.
         </div>


        @return {fm.icelink.MediaStreamStats}
        */
        getMediaStream(): fm.icelink.MediaStreamStats;
        /**<span id='method-fm.icelink.ConnectionStats-getMediaStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the media streams' stats.
         </div>


        @return {fm.icelink.MediaStreamStats[]}
        */
        getMediaStreams(): fm.icelink.MediaStreamStats[];
        /**<span id='method-fm.icelink.ConnectionStats-getStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the streams' stats.
         </div>


        @return {fm.icelink.StreamStats[]}
        */
        getStreams(): fm.icelink.StreamStats[];
        /**<span id='method-fm.icelink.ConnectionStats-getVideoStream'>&nbsp;</span>**/
        /**
         <div>
         Gets the first video stream's stats.
         </div>


        @return {fm.icelink.MediaStreamStats}
        */
        getVideoStream(): fm.icelink.MediaStreamStats;
        /**<span id='method-fm.icelink.ConnectionStats-getVideoStreams'>&nbsp;</span>**/
        /**
         <div>
         Gets the video streams' stats.
         </div>


        @return {fm.icelink.MediaStreamStats[]}
        */
        getVideoStreams(): fm.icelink.MediaStreamStats[];
        /**<span id='method-fm.icelink.ConnectionStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.ConnectionStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Media stream stats.
     </div>

    */
    class MediaStreamStats extends fm.icelink.StreamStats {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.MediaStreamStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes media stream stats from JSON.
         </div>

        @param {string} mediaStreamJson The media stream's stats JSON.
        @return {fm.icelink.MediaStreamStats}
        */
        static fromJson(mediaStreamJson: string): fm.icelink.MediaStreamStats;
        /**<span id='method-fm.icelink.MediaStreamStats-fromJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Derializes an array of media stream stats from JSON.
         </div>

        @param {string} mediaStreamsJson The media streams' stats JSON.
        @return {fm.icelink.MediaStreamStats[]}
        */
        static fromJsonArray(mediaStreamsJson: string): fm.icelink.MediaStreamStats[];
        /**<span id='method-fm.icelink.MediaStreamStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes media stream stats to JSON.
         </div>

        @param {fm.icelink.MediaStreamStats} mediaStream The media stream's stats.
        @return {string}
        */
        static toJson(mediaStream: fm.icelink.MediaStreamStats): string;
        /**<span id='method-fm.icelink.MediaStreamStats-toJsonArray'>&nbsp;</span>**/
        /**
         <div>
         Serializes an array of media stream stats to JSON.
         </div>

        @param {fm.icelink.MediaStreamStats[]} mediaStreams The media streams' stats.
        @return {string}
        */
        static toJsonArray(mediaStreams: fm.icelink.MediaStreamStats[]): string;
        /**<span id='method-fm.icelink.MediaStreamStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.MediaStreamStats-getDirection'>&nbsp;</span>**/
        /**
         <div>
         Gets the direction.
         </div>


        @return {fm.icelink.StreamDirection}
        */
        getDirection(): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.MediaStreamStats-getReceiver'>&nbsp;</span>**/
        /**
         <div>
         Gets the receiver's stats.
         </div>


        @return {fm.icelink.MediaReceiverStats}
        */
        getReceiver(): fm.icelink.MediaReceiverStats;
        /**<span id='method-fm.icelink.MediaStreamStats-getSender'>&nbsp;</span>**/
        /**
         <div>
         Gets the sender's stats.
         </div>


        @return {fm.icelink.MediaSenderStats}
        */
        getSender(): fm.icelink.MediaSenderStats;
        /**<span id='method-fm.icelink.MediaStreamStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.MediaStreamStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Class containing utility methods to manipulate `fm.icelink.streamDirection`.
     </div>

    */
    class StreamDirectionHelper {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.StreamDirectionHelper-directionFromString'>&nbsp;</span>**/
        /**
         <div>
         Converts string representations of stream directions to `fm.icelink.streamDirection`.
         </div>

        @param {string} directionString String representation of direction.
        @return {fm.icelink.StreamDirection}
        */
        static directionFromString(directionString: string): fm.icelink.StreamDirection;
        /**<span id='method-fm.icelink.StreamDirectionHelper-directionToString'>&nbsp;</span>**/
        /**
         <div>
         Obtains the string representation of `fm.icelink.streamDirection`.
         </div>

        @param {fm.icelink.StreamDirection} direction StreamDirection that requires conversion.
        @return {string}
        */
        static directionToString(direction: fm.icelink.StreamDirection): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Transport stats.
     </div>

    */
    class TransportStats extends fm.icelink.BaseStats {
        getTypeString(): string;
        private fmicelinkTransportStatsInit();
        constructor();
        /**<span id='method-fm.icelink.TransportStats-fromJson'>&nbsp;</span>**/
        /**
         <div>
         Derializes transport stats from JSON.
         </div>

        @param {string} transportJson The transport's stats JSON.
        @return {fm.icelink.TransportStats}
        */
        static fromJson(transportJson: string): fm.icelink.TransportStats;
        /**<span id='method-fm.icelink.TransportStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes transport stats to JSON.
         </div>

        @param {fm.icelink.TransportStats} transport The transport's stats.
        @return {string}
        */
        static toJson(transport: fm.icelink.TransportStats): string;
        /**<span id='method-fm.icelink.TransportStats-deserializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Deserializes the properties.
         </div>

        @param {string} key The key.
        @param {string} valueJson The value in JSON format.
        @return {void}
        */
        protected deserializeProperties(key: string, valueJson: string): void;
        /**<span id='method-fm.icelink.TransportStats-getActiveCandidatePair'>&nbsp;</span>**/
        /**
         <div>
         Gets the active candidate pair's stats.
         </div>


        @return {fm.icelink.CandidatePairStats}
        */
        getActiveCandidatePair(): fm.icelink.CandidatePairStats;
        /**<span id='method-fm.icelink.TransportStats-getBytesReceived'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes received.
         </div>


        @return {number}
        */
        getBytesReceived(): number;
        /**<span id='method-fm.icelink.TransportStats-getBytesSent'>&nbsp;</span>**/
        /**
         <div>
         Gets the number of bytes sent.
         </div>


        @return {number}
        */
        getBytesSent(): number;
        /**<span id='method-fm.icelink.TransportStats-getCandidatePair'>&nbsp;</span>**/
        /**
         <div>
         Gets a candidate pair by its identifier.
         </div>

        @param {string} candidatePairId The candidate pair identifier.
        @return {fm.icelink.CandidatePairStats}
        */
        getCandidatePair(candidatePairId: string): fm.icelink.CandidatePairStats;
        /**<span id='method-fm.icelink.TransportStats-getCandidatePairs'>&nbsp;</span>**/
        /**
         <div>
         Gets the candidate pairs' stats.
         </div>


        @return {fm.icelink.CandidatePairStats[]}
        */
        getCandidatePairs(): fm.icelink.CandidatePairStats[];
        /**<span id='method-fm.icelink.TransportStats-getIsHost'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the active candidate pair has a host candidate.
         </div>


        @return {boolean}
        */
        getIsHost(): boolean;
        /**<span id='method-fm.icelink.TransportStats-getIsReflexive'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the active candidate pair has a reflexive candidate.
         </div>


        @return {boolean}
        */
        getIsReflexive(): boolean;
        /**<span id='method-fm.icelink.TransportStats-getIsRelayed'>&nbsp;</span>**/
        /**
         <div>
         Gets whether the active candidate pair has a relayed candidate.
         </div>


        @return {boolean}
        */
        getIsRelayed(): boolean;
        /**<span id='method-fm.icelink.TransportStats-getLocalCandidate'>&nbsp;</span>**/
        /**
         <div>
         Gets a local candidate by its identifier.
         </div>

        @param {string} candidateId The candidate identifier.
        @return {fm.icelink.CandidateStats}
        */
        getLocalCandidate(candidateId: string): fm.icelink.CandidateStats;
        /**<span id='method-fm.icelink.TransportStats-getLocalCandidates'>&nbsp;</span>**/
        /**
         <div>
         Gets the local candidates' stats.
         </div>


        @return {fm.icelink.CandidateStats[]}
        */
        getLocalCandidates(): fm.icelink.CandidateStats[];
        /**<span id='method-fm.icelink.TransportStats-getLocalCertificate'>&nbsp;</span>**/
        /**
         <div>
         Gets the local certificate's stats.
         </div>


        @return {fm.icelink.CertificateStats}
        */
        getLocalCertificate(): fm.icelink.CertificateStats;
        /**<span id='method-fm.icelink.TransportStats-getRemoteCandidate'>&nbsp;</span>**/
        /**
         <div>
         Gets a remote candidate by its identifier.
         </div>

        @param {string} candidateId The candidate identifier.
        @return {fm.icelink.CandidateStats}
        */
        getRemoteCandidate(candidateId: string): fm.icelink.CandidateStats;
        /**<span id='method-fm.icelink.TransportStats-getRemoteCandidates'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote candidates' stats.
         </div>


        @return {fm.icelink.CandidateStats[]}
        */
        getRemoteCandidates(): fm.icelink.CandidateStats[];
        /**<span id='method-fm.icelink.TransportStats-getRemoteCertificate'>&nbsp;</span>**/
        /**
         <div>
         Gets the remote certificate's stats.
         </div>


        @return {fm.icelink.CertificateStats}
        */
        getRemoteCertificate(): fm.icelink.CertificateStats;
        /**<span id='method-fm.icelink.TransportStats-getRtcpTransport'>&nbsp;</span>**/
        /**
         <div>
         Gets the RTCP transport's stats.
         </div>


        @return {fm.icelink.TransportStats}
        */
        getRtcpTransport(): fm.icelink.TransportStats;
        /**<span id='method-fm.icelink.TransportStats-serializeProperties'>&nbsp;</span>**/
        /**
         <div>
         Serializes the properties.
         </div>

        @param {fm.icelink.Hash<string,string>} jsonObject The JSON object.
        @return {void}
        */
        protected serializeProperties(jsonObject: fm.icelink.Hash<string, string>): void;
        /**<span id='method-fm.icelink.TransportStats-setActiveCandidatePair'>&nbsp;</span>**/
        /**
         <div>
         Sets the active candidate pair's stats.
         </div>


        @param {fm.icelink.CandidatePairStats} value
        @return {void}
        */
        setActiveCandidatePair(value: fm.icelink.CandidatePairStats): void;
        /**<span id='method-fm.icelink.TransportStats-setBytesReceived'>&nbsp;</span>**/
        /**
         <div>
         Sets the number of bytes received.
         </div>


        @param {number} value
        @return {void}
        */
        setBytesReceived(value: number): void;
        /**<span id='method-fm.icelink.TransportStats-setBytesSent'>&nbsp;</span>**/
        /**
         <div>
         Sets the number of bytes sent.
         </div>


        @param {number} value
        @return {void}
        */
        setBytesSent(value: number): void;
        /**<span id='method-fm.icelink.TransportStats-setCandidatePairs'>&nbsp;</span>**/
        /**
         <div>
         Sets the candidate pairs' stats.
         </div>


        @param {fm.icelink.CandidatePairStats[]} value
        @return {void}
        */
        setCandidatePairs(value: fm.icelink.CandidatePairStats[]): void;
        /**<span id='method-fm.icelink.TransportStats-setLocalCandidates'>&nbsp;</span>**/
        /**
         <div>
         Sets the local candidates' stats.
         </div>


        @param {fm.icelink.CandidateStats[]} value
        @return {void}
        */
        setLocalCandidates(value: fm.icelink.CandidateStats[]): void;
        /**<span id='method-fm.icelink.TransportStats-setLocalCertificate'>&nbsp;</span>**/
        /**
         <div>
         Sets the local certificate's stats.
         </div>


        @param {fm.icelink.CertificateStats} value
        @return {void}
        */
        setLocalCertificate(value: fm.icelink.CertificateStats): void;
        /**<span id='method-fm.icelink.TransportStats-setRemoteCandidates'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote candidates' stats.
         </div>


        @param {fm.icelink.CandidateStats[]} value
        @return {void}
        */
        setRemoteCandidates(value: fm.icelink.CandidateStats[]): void;
        /**<span id='method-fm.icelink.TransportStats-setRemoteCertificate'>&nbsp;</span>**/
        /**
         <div>
         Sets the remote certificate's stats.
         </div>


        @param {fm.icelink.CertificateStats} value
        @return {void}
        */
        setRemoteCertificate(value: fm.icelink.CertificateStats): void;
        /**<span id='method-fm.icelink.TransportStats-setRtcpTransport'>&nbsp;</span>**/
        /**
         <div>
         Sets the RTCP transport's stats.
         </div>


        @param {fm.icelink.TransportStats} value
        @return {void}
        */
        setRtcpTransport(value: fm.icelink.TransportStats): void;
        /**<span id='method-fm.icelink.TransportStats-toJson'>&nbsp;</span>**/
        /**
         <div>
         Serializes this to JSON.
         </div>

        @return {string}
        */
        toJson(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A stream collection.
     </div>

    */
    class StreamCollection extends fm.icelink.Collection<fm.icelink.WebRtcStream, fm.icelink.StreamCollection> {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.StreamCollection-arrayFromList'>&nbsp;</span>**/
        /**
         <div>
         Creates an array from a list.
         </div>

        @param {Array<fm.icelink.WebRtcStream>} list The list.
        @return {fm.icelink.WebRtcStream[]}
        */
        protected arrayFromList(list: Array<fm.icelink.WebRtcStream>): fm.icelink.WebRtcStream[];
        /**<span id='method-fm.icelink.StreamCollection-createCollection'>&nbsp;</span>**/
        /**
         <div>
         Creates a collection.
         </div>


        @return {fm.icelink.StreamCollection}
        */
        protected createCollection(): fm.icelink.StreamCollection;
        /**<span id='method-fm.icelink.StreamCollection-getByType'>&nbsp;</span>**/
        /**
         <div>
         Gets a stream by its type.
         </div><typeparam name="T"></typeparam>


        @param {fm.icelink.StreamType} type
        @return {T}
        */
        getByType<T extends fm.icelink.WebRtcStream>(type: fm.icelink.StreamType): T;
        /**<span id='method-fm.icelink.StreamCollection-getManyByType'>&nbsp;</span>**/
        /**
         <div>
         Gets some streams by their type.
         </div><typeparam name="T"></typeparam>


        @param {fm.icelink.StreamType} type
        @return {Array<T>}
        */
        getManyByType<T extends fm.icelink.WebRtcStream>(type: fm.icelink.StreamType): Array<T>;
    }
}
declare namespace fm.icelink {
    class StreamDirectionWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.StreamDirection);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class StreamStateWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.StreamState);
        toString(): string;
    }
}
declare namespace fm.icelink {
    class StreamTypeWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.StreamType);
        toString(): string;
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
    class TrickleIcePolicyWrapper {
        getTypeString(): string;
        constructor(value: fm.icelink.TrickleIcePolicy);
        toString(): string;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     Utility methods.
     </div>

    */
    class Utility {
        getTypeString(): string;
        constructor();
        /**<span id='method-fm.icelink.Utility-clone'>&nbsp;</span>**/
        /**
         <div>
         Clones the specified list.
         </div><typeparam name="T"></typeparam>

        @param {Array<T>} list The list.
        @return {Array<T>}
        */
        static clone<T>(list: Array<T>): Array<T>;
        /**<span id='method-fm.icelink.Utility-firstOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the first element in the array or the default
         value if the array is null or empty.
         </div><typeparam name="T"></typeparam>

        @param {T[]} array The array.
        @return {T}
        */
        static firstOrDefault<T>(array: T[]): T;
        /**<span id='method-fm.icelink.Utility-firstOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the first element in the list or the default
         value if the list is null or empty.
         </div><typeparam name="T"></typeparam>

        @param {Array<T>} list The list.
        @return {T}
        */
        static firstOrDefault<T>(list: Array<T>): T;
        /**<span id='method-fm.icelink.Utility-formatDoubleAsPercent'>&nbsp;</span>**/
        /**
         <div>
         Formats a double as a percentage string.
         </div>

        @param {number} value The value.
        @param {number} decimalPlaces The number of decimal places to include.
        @return {string}
        */
        static formatDoubleAsPercent(value: number, decimalPlaces: number): string;
        /**<span id='method-fm.icelink.Utility-generateSynchronizationSource'>&nbsp;</span>**/
        /**
         <div>
         Generates a synchronization source.
         </div>


        @return {number}
        */
        static generateSynchronizationSource(): number;
        /**<span id='method-fm.icelink.Utility-generateTieBreaker'>&nbsp;</span>**/
        /**
         <div>
         Generates a Connection Tie-breaker.
         </div>

        @return {string}
        */
        static generateTieBreaker(): string;
        /**<span id='method-fm.icelink.Utility-lastOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the last element in the list or the default
         value if the list is null or empty.
         </div><typeparam name="T"></typeparam>

        @param {Array<T>} list The list.
        @return {T}
        */
        static lastOrDefault<T>(list: Array<T>): T;
        /**<span id='method-fm.icelink.Utility-lastOrDefault'>&nbsp;</span>**/
        /**
         <div>
         Gets the last element in the array or the default
         value if the array is null or empty.
         </div><typeparam name="T"></typeparam>

        @param {T[]} array The array.
        @return {T}
        */
        static lastOrDefault<T>(array: T[]): T;
        /**<span id='method-fm.icelink.Utility-toList'>&nbsp;</span>**/
        /**
         <div>
         Converts an array to a list.
         </div><typeparam name="T"></typeparam>

        @param {T[]} array The array.
        @return {Array<T>}
        */
        static toList<T>(array: T[]): Array<T>;
        /**<span id='method-fm.icelink.Utility-treeFindLeaves'>&nbsp;</span>**/
        /**
         <div>
         Enumerates over all nodes in the tree, invoking the callback for each one.
         </div><typeparam name="T">The generic to search.</typeparam>

        @param {T} root The root.
        @param {fm.icelink.IFunction1<T,T[]>} childrenCallback The children callback.
        @param {fm.icelink.IAction1<T>} nodeCallback The node callback.
        @return {void}
        */
        static treeFindLeaves<T>(root: T, childrenCallback: fm.icelink.IFunction1<T, T[]>, nodeCallback: fm.icelink.IAction1<T>): void;
        /**<span id='method-fm.icelink.Utility-treeSearch'>&nbsp;</span>**/
        /**
         <div>
         Enumerates over all nodes in the tree, invoking the callback for each one.
         </div><typeparam name="T">The generic to search.</typeparam>

        @param {T} root The root.
        @param {fm.icelink.IFunction1<T,T[]>} childrenCallback The children callback.
        @param {fm.icelink.IAction1<T>} nodeCallback The node callback.
        @return {void}
        */
        static treeSearch<T>(root: T, childrenCallback: fm.icelink.IFunction1<T, T[]>, nodeCallback: fm.icelink.IAction1<T>): void;
    }
}
declare namespace fm.icelink {
    /**
     <div>
     A video configuration.
     </div>

    */
    class VideoConfig extends fm.icelink.MediaConfig<fm.icelink.VideoConfig> {
        getTypeString(): string;
        private fmicelinkVideoConfigInit();
        /**<span id='method-fm.icelink.VideoConfig-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoConfig` class.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {number} frameRate The frame rate.
        @return {}
        */
        constructor(width: number, height: number, frameRate: number);
        /**<span id='method-fm.icelink.VideoConfig-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.videoConfig` class.
         </div>

        @param {number} width The width.
        @param {number} height The height.
        @param {number} frameRate The frame rate.
        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(width: number, height: number, frameRate: number, clockRate: number);
        /**<span id='method-fm.icelink.VideoConfig-getFrameRate'>&nbsp;</span>**/
        /**
         <div>
         Gets the frame rate.
         </div>


        @return {number}
        */
        getFrameRate(): number;
        /**<span id='method-fm.icelink.VideoConfig-getHeight'>&nbsp;</span>**/
        /**
         <div>
         Gets the height.
         </div>


        @return {number}
        */
        getHeight(): number;
        /**<span id='method-fm.icelink.VideoConfig-getWidth'>&nbsp;</span>**/
        /**
         <div>
         Gets the width.
         </div>


        @return {number}
        */
        getWidth(): number;
        /**<span id='method-fm.icelink.VideoConfig-isEquivalent'>&nbsp;</span>**/
        /**
         <div>
         Determines whether the specified configuration is equivalent.
         </div>

        @param {fm.icelink.VideoConfig} config The configuration.
        @return {boolean}
        */
        isEquivalent(config: fm.icelink.VideoConfig): boolean;
        /**<span id='method-fm.icelink.VideoConfig-toString'>&nbsp;</span>**/
        /**
         <div>
         Returns a string that represents this instance.
         </div>


        @return {string}
        */
        toString(): string;
    }
}
declare namespace fm.icelink.vp8 {
    /**
     <div>
     A VP8 format.
     </div>

    */
    class Format extends fm.icelink.VideoFormat {
        getTypeString(): string;
        /**<span id='method-fm.icelink.vp8.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.vp8.format` class.
         </div>

        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(clockRate: number);
        /**<span id='method-fm.icelink.vp8.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.vp8.format` class.
         </div>


        @return {}
        */
        constructor();
    }
}
declare namespace fm.icelink.vp9 {
    /**
     <div>
     A VP9 format.
     </div>

    */
    class Format extends fm.icelink.VideoFormat {
        getTypeString(): string;
        /**<span id='method-fm.icelink.vp9.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.vp9.format` class.
         </div>

        @param {number} clockRate The clock rate.
        @return {}
        */
        constructor(clockRate: number);
        /**<span id='method-fm.icelink.vp9.Format-constructor'>&nbsp;</span>**/
        /**
         <div>
         Initializes a new instance of the `fm.icelink.vp9.format` class.
         </div>


        @return {}
        */
        constructor();
    }
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
declare namespace fm.icelink {
}
